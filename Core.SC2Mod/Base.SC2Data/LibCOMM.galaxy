include "TriggerLibs/NativeLib"
include "LibUEDC"
include "LibNHBR"
include "LibDRAG"
include "LibCOMI_h"

include "LibCOMM_h"

//--------------------------------------------------------------------------------------------------
// Library: COMMANDERS
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCOMM_InitLibraries () {
    libNtve_InitVariables();
    libUEDC_InitVariables();
    libNHBR_InitVariables();
    libCOMI_InitVariables();
}

// Variable Initialization
bool libCOMM_InitVariables_completed = false;

void libCOMM_InitVariables () {
    int init_i;
    int init_j;

    if (libCOMM_InitVariables_completed) {
        return;
    }

    libCOMM_InitVariables_completed = true;

    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libCOMM_gv_aF_TopbarButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_SoATargetingAlreadyCanceled[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_SoATargetingDirectionGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cU_GPAlarakButton[init_i] = c_invalidDialogControlId;
    }
    libCOMM_gv_supplicantWarpTrainActualUnitCost = UnitTypeGetCost("Supplicant", c_unitCostMinerals);
    libCOMM_gv_supplicantWarpTrainActualCommand = AbilityCommand("WarpGateTrainSupplicantTrue", 11);
    libCOMM_gv_cM_AlarakLightningStrikes_SacrificeCmd = AbilityCommand("AscendantSacrifice", 0);
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Alarak_EmpowerSlaves[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Alarak_EmpowerWorshipers[init_i] = UnitGroupEmpty();
    }
    libCOMM_gv_cM_MaxSpawn = 9;
    libCOMM_gv_cM_CreepGroup = UnitGroupEmpty();
    libCOMM_gv_cM_CreepTimer = TimerCreate();
    libCOMM_gv_cM_SpawnTime = 180;
    libCOMM_gv_cM_DehakaVOLearnReminderTimer = TimerCreate();
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_DehakaReviveEatTextTag[init_i] = c_textTagNone;
    }
    libCOMM_gv_c_DehakaConsumeLifeCooldownFactor = 0.1;
    libCOMM_gv_c_DehakaConsumeCooldownFilter = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), 0);
    libCOMM_gv_dataDehakaLearnAbilCmdLink = AbilityCommand("DehakaLearn", 255);
    libCOMM_gv_cM_DehakaEatReviveTimerAdjustment = -24.0;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_dehakaMurvarPukeAutocast[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_dehakaMurvarSpawnCreepersAutocast[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_DehakaLevelsMax[init_i] = 10;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_DehakaVeterencyBehavior[init_i] = "DehakaVeterancyCoopLow";
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Dehaka_CurrentLevel[init_i] = 1;
    }
    libCOMM_gv_cM_Dehaka_EssenceAttribute = "DehakaAttEssence";
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMM_gv_cM_FenixVOTransmissionFirstPlay[init_i][init_j] = true;
        }
    }
    libCOMM_gv_cM_FenixVOTransmissionTimer = TimerCreate();
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Fenix_HeroGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Fenix_DummyGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Fenix_OfflineHealthRegen[init_i] = 2.0;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Fenix_OfflineShieldRegen[init_i] = 2.0;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Fenix_OfflineEnergyRegen[init_i] = 2.0833;
    }
    libCOMM_gv_cM_Fenix_RalliedGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMM_gv_cMC_Fenix_ChampionCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMM_gv_cM_Fenix_ChampionVolunteerUnitGroup[init_i][init_j] = UnitGroupEmpty();
        }
    }
    for (init_i = 0; init_i <= libCOMM_gv_cMC_Fenix_ChampionCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMM_gv_cM_Fenix_ChampionDeathPosition[init_i][init_j] = RegionGetCenter(RegionEntireMap());
        }
    }
    for (init_i = 0; init_i <= libCOMM_gv_cMC_Fenix_ChampionCount; init_i += 1) {
        libCOMM_gv_cM_Fenix_ChampionNetworkMaxCountDummy[init_i] = "FenixNetworkedSuperiorityMaxCountDummy";
    }
    for (init_i = 0; init_i <= libCOMM_gv_cMC_Fenix_ChampionCount; init_i += 1) {
        libCOMM_gv_cM_Fenix_ChampionNetworkStacksPerSupplyDummy[init_i] = "FenixNetworkedSuperiorityStacksPerSupplyDummy";
    }
    for (init_i = 0; init_i <= libCOMM_gv_cMC_Fenix_ChampionCount; init_i += 1) {
        libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStackMaxCount[init_i] = 20;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_fenixWhirlwindAutocast[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_fenixShieldCapacitorAutocast[init_i] = true;
    }
    libCOMM_gv_cM_HornerVOBomberReminderTimer = TimerCreate();
    libCOMM_gv_cM_HornerVOBomberUseTimer = TimerCreate();
    libCOMM_gv_catalogAdditiveBonusPrefix = "CatalogAdditiveBonus";
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Horner_BomberPlatforms[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Horner_BomberPlatforms_Ready[init_i] = UnitGroupEmpty();
    }
    libCOMM_gv_cM_SoASuperChronoTimer = TimerCreate();
    libCOMM_gv_kerriganPsiStrikeEnergyCost = libNtve_gf_CostOfAbility("PsiStrikeBlink", "Energy");
    libCOMM_gv_cM_MengskTransmissionTimerDirtyBomb = TimerCreate();
    libCOMM_gv_cM_MengskTransmissionTimerForcedConscription = TimerCreate();
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cU_GPMengskEnergyRegenTrooperContainer[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cU_GPMengskEnergyRegenRoyalGuardContainer[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cU_GPMengskEnergyContainer[init_i] = c_invalidDialogControlId;
    }
    libCOMM_gv_cM_Mengsk_CheckRoyalGuardSupply = true;
    libCOMM_gv_cM_Mengsk_XPHungryUnits = UnitGroupEmpty();
    libCOMM_gv_cM_Mengsk_VeteranUnits = UnitGroupEmpty();
    libCOMM_gv_cM_Mengsk_PropagandaUnits = UnitGroupEmpty();
    libCOMM_gv_cM_Mengsk_ReturningWorkers = UnitGroupEmpty();
    libCOMM_gv_cM_Mengsk_WeaponPickups = UnitGroupEmpty();
    libCOMM_gv_cM_Mengsk_WeaponPickerUppers = UnitGroupEmpty();
    libCOMM_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange = 4.0;
    libCOMM_gv_cM_NovaUnitName_CountCurrentPosition = RandomInt(1, 143);
    libCOMM_gv_cM_NovaUnitName_CountStep = RandomInt(1, 7);
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_NovaGriffinTransportUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_NovaGriffinGroundUnitsTransportGroupAir[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_NovaGriffinGroundUnitsTransportGroupGround[init_i] = UnitGroupEmpty();
    }
    libCOMM_gv_NovaPsiStrikeEnergyCost = libNtve_gf_CostOfAbility("NovaPsiStrike", "Energy");
    libCOMM_gv_cM_PrestigeRaynor_AirUnits = UnitGroupEmpty();
    libCOMM_gv_cM_AbilityTransmission_StetelliteReminder_First = true;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Stukov_HordeGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Stukov_HordeCurrentWave[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Stukov_BunkerGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_LaserDrillUnitGroup[init_i] = UnitGroupEmpty();
    }
    libCOMM_gv_tychusReviveCommand = "Abil/TychusRevive";
    libCOMM_gv_cM_TychusVOTransportReminderTimer = TimerCreate();
    libCOMM_gv_cM_TychusVOTransportFlairCooldownTimer = TimerCreate();
    libCOMM_gv_cM_TychusVOOutlawReviveReminderTimer = TimerCreate();
    libCOMM_gv_cM_TychusVOOutlawRecruitReminderTimer = TimerCreate();
    libCOMM_gv_cM_Tychus_SharedAbil_ButtonBase = "TychusHeroCommonAbil";
    libCOMM_gv_cU_TychusSquadContainer = c_invalidDialogControlId;
    libCOMM_gv_cU_TychusSquadTrainingProgressBar = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMM_gv_cUC_TYCHUS_MAX_SQUAD_SIZE; init_i += 1) {
        libCOMM_gv_cU_TychusSquadAvailabilityProgressBars[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMM_gv_cUC_TYCHUS_MAX_SQUAD_SIZE; init_i += 1) {
        libCOMM_gv_cU_TychusSquadUnitFrames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMM_gv_cUC_TYCHUS_MAX_SQUAD_SIZE; init_i += 1) {
        libCOMM_gv_cU_TychusSquadUnitTargets[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMM_gv_cUC_TYCHUS_MAX_SQUAD_SIZE; init_i += 1) {
        libCOMM_gv_cU_TychusSquadEquipmentStructureTargets[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMM_gv_cUC_TYCHUS_MAX_SQUAD_SIZE; init_i += 1) {
        libCOMM_gv_cU_TychusSquadBarTargets[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMM_gv_cUC_TYCHUS_MAX_SQUAD_SIZE; init_i += 1) {
        libCOMM_gv_cU_TychusSquadPortraits[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMM_gv_cUC_TYCHUS_MAX_SQUAD_SIZE; init_i += 1) {
        libCOMM_gv_cU_TychusSquadPortraitsStatic[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_TychusMedicTransportUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_TychusMedicGroundUnitsTransportGroupAir[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_TychusMedicGroundUnitsTransportGroupGround[init_i] = UnitGroupEmpty();
    }
    libCOMM_gv_cM_Tychus_MaxHeroCount = 5;
    libCOMM_gv_tychusHeroMaxCharges = 4;
    libCOMM_gv_cM_SoATimeFreezeTimer = TimerCreate();
    libCOMM_gv_cC_ScoreVorazunBHGroup = UnitGroupEmpty();
    libCOMM_gv_cM_ArtifactTransmission_SelectAbilityReminder = TimerCreate();
    libCOMM_gv_cMC_ZeratulVOTransmissionProphacyCastDelay = 60.0;
    libCOMM_gv_cU_ZeratulSelectionCmdPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMM_gv_cUC_ZERATUL_MAX_SELECTIONS; init_i += 1) {
        libCOMM_gv_cU_ZeratulSelectionButtonContainers[init_i] = c_invalidDialogControlId;
    }
    libCOMM_gv_cM_Zeratul_DevolvedUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMM_gv_cM_Zeratul_HeroStructureUnitGroup[init_i] = UnitGroupEmpty();
    }
    libCOMM_gv_cM_ZeratulArtifact_1_Hint_1_Timing = (60.0 * 5.0);
    libCOMM_gv_cM_ZeratulArtifact_1_Hint_2_Timing = (60.0 * 6.0);
    libCOMM_gv_cM_ZeratulArtifact_1_Hint_3_Timing = (60.0 * 7.0);
    libCOMM_gv_cM_ZeratulArtifact_2_Hint_1_Timing = (60.0 * 10.0);
    libCOMM_gv_cM_ZeratulArtifact_2_Hint_2_Timing = (60.0 * 11.0);
    libCOMM_gv_cM_ZeratulArtifact_2_Hint_3_Timing = (60.0 * 12.0);
    libCOMM_gv_cM_ZeratulArtifact_3_Hint_1_Timing = (60.0 * 15.0);
    libCOMM_gv_cM_ZeratulArtifact_3_Hint_2_Timing = (60.0 * 16.0);
    libCOMM_gv_cM_ZeratulArtifact_3_Hint_3_Timing = (60.0 * 17.0);
    libCOMM_gv_cM_ZeratulProphecyArtifactNumber = 1;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCOMM_gv_cM_ZeratulTopBarRallyUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCOMM_gv_cM_ZeratulTopBarRallyRedirectUnits[init_i] = UnitGroupEmpty();
    }
    libCOMM_gv_cM_Zeratul_RalliedGroup = UnitGroupEmpty();
}

// Presets
// Functions
unit libCOMM_gf_CM_PlayerGetGlobalCaster2 (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_yY_GPCasterUnit[lp_player];
}

unit libCOMM_gf_OBSOLETE_AF_GetHeroUnit (int lp_pPlayer) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = libCOMI_gv_oBSOLETE_CM_HeroUnit[lp_pPlayer];

    // Implementation
    return lv_vUnit;
}

string libCOMM_gf_AF_GetAbility (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    string autoB9565DFC_val;
    int auto0E95C91D_val;
    int auto06AB6B22_val;
    int auto7D1D4FF5_val;
    int autoF068BCD1_val;
    int auto4ACFE1E8_val;
    int auto3FD8247E_val;
    int auto15C96D07_val;
    int auto570E6F1F_val;
    int auto5B85B07C_val;
    int autoFFC1820A_val;
    int auto87955037_val;
    int autoA4D3EFC5_val;
    int autoBC079D28_val;
    int auto1CFCE77E_val;
    int autoF0FB4A63_val;
    int auto6A0ED5CB_val;
    int autoA07AA18E_val;
    int auto5DA7963E_val;
    int autoAB6E372E_val;

    // Implementation
    autoB9565DFC_val = libCOMI_gf_ActiveCommanderForPlayer3(lp_pPlayer);
    if (autoB9565DFC_val == "Mengsk") {
        auto0E95C91D_val = lp_pButtonIndex;
        if (auto0E95C91D_val == 0) {
            return "BunkerDepotMengskDrop";
        }
        else if (auto0E95C91D_val == 1) {
            return "ArtilleryMengskGlobalExperimentalStrike";
        }
        else if (auto0E95C91D_val == 2) {
            return "MengskZergCalldownLevel1";
        }
        else if (auto0E95C91D_val == 3) {
            return "NuclearAnnihilationMengsk";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Vorazun") {
        auto06AB6B22_val = lp_pButtonIndex;
        if (auto06AB6B22_val == 0) {
            return "SOADarkPylon";
        }
        else if (auto06AB6B22_val == 1) {
            return "VoidSentryBlackHole";
        }
        else if (auto06AB6B22_val == 2) {
            return "SOAShadowGuardCalldown";
        }
        else if (auto06AB6B22_val == 3) {
            return "SOATimeFreeze";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Raynor") {
        auto7D1D4FF5_val = lp_pButtonIndex;
        if (auto7D1D4FF5_val == 0) {
            return "VoidCoopSummonHyperion";
        }
        else if (auto7D1D4FF5_val == 1) {
            return "BansheeAirstrike";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Abathur") {
        autoF068BCD1_val = lp_pButtonIndex;
        if (autoF068BCD1_val == 0) {
            return "SpawnToxicNest";
        }
        else if (autoF068BCD1_val == 1) {
            return "AbathurMend";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Alarak") {
        auto4ACFE1E8_val = lp_pButtonIndex;
        if (auto4ACFE1E8_val == 0) {
            return "AlarakStructureOvercharge";
        }
        else if (auto4ACFE1E8_val == 1) {
            return "AlarakACSummonDeathfleetTarget";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Artanis") {
        auto3FD8247E_val = lp_pButtonIndex;
        if (auto3FD8247E_val == 0) {
        }
        else if (auto3FD8247E_val == 1) {
            return "SOAOrbitalStrikeActivate";
        }
        else if (auto3FD8247E_val == 2) {
            return "SoASuperShield";
        }
        else if (auto3FD8247E_val == 3) {
            return "SOAStrafeAttackActivate";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Dehaka") {
        auto15C96D07_val = lp_pButtonIndex;
        if (auto15C96D07_val == 0) {
            return "DehakaNydusDestroyerTopBar";
        }
        else if (auto15C96D07_val == 1) {
            return "DehakaGlevigTopBar";
        }
        else if (auto15C96D07_val == 2) {
            return "DehakaMurvarTopBar";
        }
        else if (auto15C96D07_val == 3) {
            return "DehakaDakrunTopBar";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Fenix") {
        auto570E6F1F_val = lp_pButtonIndex;
        if (auto570E6F1F_val == 0) {
            return "SOASummonFenix";
        }
        else if (auto570E6F1F_val == 1) {
            return "SOASummonFenixDragoon";
        }
        else if (auto570E6F1F_val == 2) {
            return "SOASummonFenixArbiter";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Horner") {
        auto5B85B07C_val = lp_pButtonIndex;
        if (auto5B85B07C_val == 0) {
            return "HHTrainTopBar";
        }
        else if (auto5B85B07C_val == 1) {
            return "HHBomberPlatformAreaBombTopBarOrder";
        }
        else if (auto5B85B07C_val == 2) {
            return "HHSummonMercenarySpaceStation";
        }
        else if (auto5B85B07C_val == 3) {
            return "HornerAirFleetActivate";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Karax") {
        autoFFC1820A_val = lp_pButtonIndex;
        if (autoFFC1820A_val == 0) {
            return "SOAOrbitalStrikeKarax";
        }
        else if (autoFFC1820A_val == 1) {
            return "SOAThermalLanceActivate";
        }
        else if (autoFFC1820A_val == 2) {
            return "SOAMapWideChrono";
        }
        else if (autoFFC1820A_val == 3) {
            return "SOAPurifierBeam";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Kerrigan") {
        auto87955037_val = lp_pButtonIndex;
        if (auto87955037_val == 0) {
            return "KerriganVoidCoopEconDrop";
        }
        else if (auto87955037_val == 1) {
            return "KerriganVoidCoopCrushingGripWave";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Nova") {
        autoA4D3EFC5_val = lp_pButtonIndex;
        if (autoA4D3EFC5_val == 0) {
            return "NovaDefensiveMatrixDrone";
        }
        else if (autoA4D3EFC5_val == 1) {
            return "NovaGriffinTransportLoadUnits";
        }
        else if (autoA4D3EFC5_val == 2) {
            return "NovaGriffinBombingRunActivate";
        }
        else if (autoA4D3EFC5_val == 3) {
        }
        else if (autoA4D3EFC5_val == 4) {
            return "NovaCoopCasterNuke";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Stukov") {
        autoBC079D28_val = lp_pButtonIndex;
        if (autoBC079D28_val == 0) {
        }
        else if (autoBC079D28_val == 1) {
            return "SIStukovInfestStructureUpgraded";
        }
        else if (autoBC079D28_val == 2) {
            return "StukovSummonApocalisk";
        }
        else if (autoBC079D28_val == 3) {
            return "StukovSummonAleksander";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Swann") {
        auto1CFCE77E_val = lp_pButtonIndex;
        if (auto1CFCE77E_val == 0) {
        }
        else if (auto1CFCE77E_val == 1) {
            return "DrakkenLaserDrillConcentratedBeamIssueOrder";
        }
        else if (auto1CFCE77E_val == 2) {
            return "DrakkenLaserDrillPulseCannonIssueOrder";
        }
        else if (auto1CFCE77E_val == 3) {
            return "SpecialDelivery";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Tychus") {
        autoF0FB4A63_val = lp_pButtonIndex;
        if (autoF0FB4A63_val == 0) {
            return "TychusMedicTransportLoadUnits";
        }
        else if (autoF0FB4A63_val == 1) {
            return "TychusCalldownOdinTargeted";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Zagara") {
        auto6A0ED5CB_val = lp_pButtonIndex;
        if (auto6A0ED5CB_val == 0) {
            return "ZagaraVoidCoopMassFrenzy";
        }
        else if (auto6A0ED5CB_val == 1) {
            return "ZagaraVoidCoopMassRoachDrop";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Zeratul") {
        autoA07AA18E_val = lp_pButtonIndex;
        if (autoA07AA18E_val == 0) {
            return "ZeratulTopBarWarpTrain";
        }
        else if (autoA07AA18E_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) == 1)) {
                return "ZeratulTopBarWarpTrain";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) == 1)) {
                return "ZeratulMapWideStasis";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return "ZeratulTopBarBuild";
            }

        }
        else if (autoA07AA18E_val == 3) {
            return "ZeratulTopBarUltimateWarpTrain";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Stetmann") {
        auto5DA7963E_val = lp_pButtonIndex;
        if (auto5DA7963E_val == 0) {
            return "DeployPowerTowerStetmann";
        }
        else {
        }
    }
    else if (autoB9565DFC_val == "Mengsk") {
        autoAB6E372E_val = lp_pButtonIndex;
        if (autoAB6E372E_val == 0) {
        }
        else if (autoAB6E372E_val == 1) {
            return "SIStukovInfestStructureUpgraded";
        }
        else if (autoAB6E372E_val == 2) {
            return "StukovSummonApocalisk";
        }
        else if (autoAB6E372E_val == 3) {
            return "StukovSummonAleksander";
        }
        else {
        }
    }
    else {
    }
    return null;
}

fixed libCOMM_gf_AF_GetCooldown (int lp_pPlayer, int lp_pButtonIndex) {
    // Variable Declarations
    fixed lv_vCooldown;
    fixed lv_vCooldownCurrent;

    // Automatic Variable Declarations
    string auto59C97DD0_val;
    int autoA5377CB5_val;
    int auto37787272_val;
    int autoA1EDB332_val;
    int autoEB737E09_val;
    int autoC830C964_val;
    int auto9FBB5EEB_val;
    int auto4C10DC45_val;
    int autoA4676A0B_val;
    int auto55FE6B88_val;
    int auto2E2D33F5_val;
    int auto92AB7A73_val;
    int auto147F62D2_val;
    int autoC9134F0E_val;
    int auto3666A13E_val;
    int auto723A18B6_val;
    unitgroup autoE006C97C_g;
    int autoE006C97C_u;
    unit autoE006C97C_var;
    int autoDAD75871_val;
    int auto72A0B5D8_val;
    int autoFD6E4BB8_val;

    // Variable Initialization

    // Implementation
    auto59C97DD0_val = libCOMI_gf_ActiveCommanderForPlayer3(lp_pPlayer);
    if (auto59C97DD0_val == "Mengsk") {
        autoA5377CB5_val = lp_pButtonIndex;
        if (autoA5377CB5_val == 0) {
            return UnitAbilityGetChargeRegen(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "BunkerDepotMengskDrop", "Abil/BunkerDepotDropMengsk");
        }
        else if (autoA5377CB5_val == 1) {
            return GameGetCooldown("\"Abil/ArtilleryMengskExperimentalStrike\"");
        }
        else if (autoA5377CB5_val == 2) {
            return UnitGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "Abil/MengskZergCooldown");
        }
        else if (autoA5377CB5_val == 3) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "NuclearAnnihilationMengsk", "Abil/NuclearAnnihilationMengsk");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Vorazun") {
        auto37787272_val = lp_pButtonIndex;
        if (auto37787272_val == 0) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "SOADarkPylon", "Abil/SOADarkPylon");
        }
        else if (auto37787272_val == 2) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "SOAShadowGuardCalldown", "Abil/SOAShadowGuardCalldown");
        }
        else if (auto37787272_val == 3) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "SOATimeFreeze", "Abil/SOATimeFreeze");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Raynor") {
        autoA1EDB332_val = lp_pButtonIndex;
        if (autoA1EDB332_val == 0) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/VoidCoopSummonHyperion");
        }
        else if (autoA1EDB332_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/BansheeAirstrike");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Abathur") {
        autoEB737E09_val = lp_pButtonIndex;
        if (autoEB737E09_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/ToxicNestBuild");
        }
        else if (autoEB737E09_val == 1) {
            return UnitAbilityGetChargeRegen(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "AbathurMend", "Abil/AbathurMend");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Alarak") {
        autoC830C964_val = lp_pButtonIndex;
        if (autoC830C964_val == 0) {
            return UnitAbilityGetChargeRegen(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "AlarakStructureOvercharge", "Abil/AlarakStructureOvercharge");
        }
        else if (autoC830C964_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/AlarakACSummonDeathfleetTarget");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Artanis") {
        auto9FBB5EEB_val = lp_pButtonIndex;
        if (auto9FBB5EEB_val == 0) {
        }
        else if (auto9FBB5EEB_val == 1) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "SOAOrbitalStrikeActivate", "Abil/SOAOrbitalStrikeActivate");
        }
        else if (auto9FBB5EEB_val == 2) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "SoASuperShield", "Abil/SoASuperShield");
        }
        else if (auto9FBB5EEB_val == 3) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "SOAStrafeAttack", "Abil/SOAStrafeAttack");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Dehaka") {
        auto4C10DC45_val = lp_pButtonIndex;
        if (auto4C10DC45_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/DehakaNydusDestroyerTopBar");
        }
        else if (auto4C10DC45_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DehakaGlevigTopBar");
        }
        else if (auto4C10DC45_val == 2) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DehakaMurvarTopBar");
        }
        else if (auto4C10DC45_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DehakaDakrunTopBar");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Fenix") {
        autoA4676A0B_val = lp_pButtonIndex;
        if (autoA4676A0B_val == 0) {
            return PlayerGetCooldown(lp_pPlayer, "SOASummonFenix");
        }
        else if (autoA4676A0B_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "SOASummonFenixDragoon");
        }
        else if (autoA4676A0B_val == 2) {
            return PlayerGetCooldown(lp_pPlayer, "SOASummonFenixArbiter");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Horner") {
        auto55FE6B88_val = lp_pButtonIndex;
        if (auto55FE6B88_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/HHTrainTopBar");
        }
        else if (auto55FE6B88_val == 1) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "HHBomberPlatformAreaBombTopBarDummyTimer", "Abil/HHBomberPlatformAreaBombTopBarDummyTimer");
        }
        else if (auto55FE6B88_val == 2) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "HornerAirFleetActivate", "Abil/HornerAirFleetActivate");
        }
        else if (auto55FE6B88_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/HHSummonMercenarySpaceStation");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Karax") {
        auto2E2D33F5_val = lp_pButtonIndex;
        if (auto2E2D33F5_val == 1) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "SOAThermalLanceActivate", "Abil/SOAThermalLanceActivate");
        }
        else if (auto2E2D33F5_val == 2) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "SOAMapWideChrono", "Abil/SOAMapWideChrono");
        }
        else if (auto2E2D33F5_val == 3) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "SOAPurifierBeam", "Abil/SOAPurifierBeam");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Kerrigan") {
        auto92AB7A73_val = lp_pButtonIndex;
        if (auto92AB7A73_val == 0) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/KerriganVoidCoopEconDrop");
        }
        else if (auto92AB7A73_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/KerriganVoidCoopCrushingGripWave");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Nova") {
        auto147F62D2_val = lp_pButtonIndex;
        if (auto147F62D2_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/NovaDefensiveMatrixDrone");
        }
        else if (auto147F62D2_val == 1) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "NovaGriffinBombingRunActivate", "Abil/NovaGriffinBombingRunActivate");
        }
        else if (auto147F62D2_val == 2) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "NovaGriffinTransportLoadUnits", "Abil/NovaGriffinTransportLoadUnits");
        }
        else if (auto147F62D2_val == 3) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "NovaReviveInstantBuyback", "Abil/NovaReviveInstantBuyback");
        }
        else if (auto147F62D2_val == 4) {
            return GameGetChargeRegen("Unit/NovaDecoy");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Stukov") {
        autoC9134F0E_val = lp_pButtonIndex;
        if (autoC9134F0E_val == 1) {
            return UnitAbilityGetChargeRegen(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "SIStukovInfestStructureUpgraded", "Abil/SIStukovInfestStructureUpgraded");
        }
        else if (autoC9134F0E_val == 2) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/StukovSummonApocalisk");
        }
        else if (autoC9134F0E_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/StukovSummonAleksander");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Swann") {
        auto3666A13E_val = lp_pButtonIndex;
        if (auto3666A13E_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DrakkenLaserDrillBFG");
        }
        else if (auto3666A13E_val == 2) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/DrakkenLaserDrillNuke");
        }
        else if (auto3666A13E_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/SpecialDelivery");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Tychus") {
        auto723A18B6_val = lp_pButtonIndex;
        if (auto723A18B6_val == 0) {
            lv_vCooldown = 300.0;
            autoE006C97C_g = UnitGroup("TychusMedivacPlatform", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoE006C97C_u = UnitGroupCount(autoE006C97C_g, c_unitCountAll);
            for (;; autoE006C97C_u -= 1) {
                autoE006C97C_var = UnitGroupUnitFromEnd(autoE006C97C_g, autoE006C97C_u);
                if (autoE006C97C_var == null) { break; }
                lv_vCooldownCurrent = UnitAbilityGetCooldown(autoE006C97C_var, "TychusMedicTransportLoadUnits", "Abil/TychusMedicTransportLoadUnits");
                if ((lv_vCooldownCurrent == 0.0)) {
                    return lv_vCooldownCurrent;
                }
                else {
                    if ((lv_vCooldownCurrent < lv_vCooldown)) {
                        lv_vCooldown = lv_vCooldownCurrent;
                    }

                }
            }
            return lv_vCooldown;
        }
        else if (auto723A18B6_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/TychusCalldownOdinTargeted");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Zagara") {
        autoDAD75871_val = lp_pButtonIndex;
        if (autoDAD75871_val == 0) {
            return PlayerGetCooldown(lp_pPlayer, "ZagaraVoidCoopMassFrenzy");
        }
        else if (autoDAD75871_val == 1) {
            return PlayerGetCooldown(lp_pPlayer, "ZagaraVoidCoopInfestedPods");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Zeratul") {
        auto72A0B5D8_val = lp_pButtonIndex;
        if (auto72A0B5D8_val == 0) {
            return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "ZeratulTopBarWarpTrain", "Abil/ZeratulTopBarWarpTrain");
        }
        else if (auto72A0B5D8_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) == 1)) {
                return PlayerGetCooldown(lp_pPlayer, "Abil/ZeratulMapWideStasis");
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) == 1)) {
                return UnitAbilityGetCooldown(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), "ZeratulTopBarWarpTrain", "Abil/ZeratulSuppressionCrystal");
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return (UnitAbilityChargeInfo(libCOMM_gf_CM_PlayerGetGlobalCaster2(EventPlayer()), AbilityCommand("ZeratulTopBarBuild", 0), c_unitAbilChargeRegenLeft) / 16.0);
            }

        }
        else if (auto72A0B5D8_val == 3) {
            return PlayerGetCooldown(lp_pPlayer, "Abil/ZeratulTopBarUltimateWarpTrain");
        }
        else {
        }
    }
    else if (auto59C97DD0_val == "Stetmann") {
        autoFD6E4BB8_val = lp_pButtonIndex;
        if (autoFD6E4BB8_val == 0) {
            return PlayerGetChargeRegen(lp_pPlayer, "Abil/DeployPowerTowerStetmann");
        }
        else {
        }
    }
    else {
    }
    return -1.0;
}

fixed libCOMM_gf_AF_GetCharges (int lp_pPlayer, int lp_pButtonIndex) {
    // Variable Declarations
    fixed lv_vA;

    // Automatic Variable Declarations
    string auto8AA5B62C_val;
    int autoD8D15542_val;
    int auto673D0BF1_val;
    int auto633485AB_val;
    int autoC179980D_val;
    int autoF3149FF9_val;
    int auto7C39F272_val;
    int autoA2075E11_val;
    int autoE5536403_val;
    unitgroup autoC3CFB3BE_g;
    int autoC3CFB3BE_u;
    unit autoC3CFB3BE_var;
    int auto4F8C5299_val;
    int auto1E5E939C_val;

    // Variable Initialization

    // Implementation
    auto8AA5B62C_val = libCOMI_gf_ActiveCommanderForPlayer3(lp_pPlayer);
    if (auto8AA5B62C_val == "Mengsk") {
        autoD8D15542_val = lp_pButtonIndex;
        if (autoD8D15542_val == 0) {
            return UnitAbilityChargeInfo(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), AbilityCommand("BunkerDepotMengskDrop", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto8AA5B62C_val == "Abathur") {
        auto673D0BF1_val = lp_pButtonIndex;
        if (auto673D0BF1_val == 0) {
            return UnitAbilityChargeInfo(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft);
        }
        else if (auto673D0BF1_val == 1) {
            return UnitAbilityChargeInfo(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), AbilityCommand("AbathurMend", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto8AA5B62C_val == "Alarak") {
        auto633485AB_val = lp_pButtonIndex;
        if (auto633485AB_val == 0) {
            return UnitAbilityChargeInfo(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), AbilityCommand("AlarakStructureOvercharge", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto8AA5B62C_val == "Dehaka") {
        autoC179980D_val = lp_pButtonIndex;
        if (autoC179980D_val == 0) {
            return UnitAbilityChargeInfo(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto8AA5B62C_val == "Horner") {
        autoF3149FF9_val = lp_pButtonIndex;
        if (autoF3149FF9_val == 0) {
            return UnitAbilityChargeInfo(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft);
        }
        else if (autoF3149FF9_val == 1) {
            return UnitAbilityChargeInfo(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto8AA5B62C_val == "Nova") {
        auto7C39F272_val = lp_pButtonIndex;
        if (auto7C39F272_val == 0) {
            return UnitAbilityChargeInfo(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), AbilityCommand("NovaDefensiveMatrixDrone", 0), c_unitAbilChargeCountLeft);
        }
        else if (auto7C39F272_val == 4) {
            return UnitAbilityChargeInfo(libCOMM_gf_OBSOLETE_AF_GetHeroUnit(lp_pPlayer), AbilityCommand("NovaCoopCasterNuke", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto8AA5B62C_val == "Stukov") {
        autoA2075E11_val = lp_pButtonIndex;
        if (autoA2075E11_val == 1) {
            return UnitAbilityChargeInfo(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), AbilityCommand("SIStukovInfestStructureUpgraded", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else if (auto8AA5B62C_val == "Tychus") {
        autoE5536403_val = lp_pButtonIndex;
        if (autoE5536403_val == 0) {
            autoC3CFB3BE_g = UnitGroup("TychusMedivacPlatform", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC3CFB3BE_u = UnitGroupCount(autoC3CFB3BE_g, c_unitCountAll);
            for (;; autoC3CFB3BE_u -= 1) {
                autoC3CFB3BE_var = UnitGroupUnitFromEnd(autoC3CFB3BE_g, autoC3CFB3BE_u);
                if (autoC3CFB3BE_var == null) { break; }
                if ((UnitAbilityGetCooldown(autoC3CFB3BE_var, "TychusMedicTransportLoadUnits", "Abil/TychusMedicTransportLoadUnits") == 0.0)) {
                    lv_vA += 1.0;
                }

            }
            return lv_vA;
        }
        else {
        }
    }
    else if (auto8AA5B62C_val == "Zeratul") {
        auto4F8C5299_val = lp_pButtonIndex;
        if (auto4F8C5299_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return UnitAbilityChargeInfo(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), AbilityCommand("ZeratulTopBarBuild", 0), c_unitAbilChargeCountLeft);
            }

        }
        else {
        }
    }
    else if (auto8AA5B62C_val == "Stetmann") {
        auto1E5E939C_val = lp_pButtonIndex;
        if (auto1E5E939C_val == 0) {
            return UnitAbilityChargeInfo(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), AbilityCommand("DeployPowerTowerStetmann", 0), c_unitAbilChargeCountLeft);
        }
        else {
        }
    }
    else {
    }
    return -1.0;
}

string libCOMM_gf_AF_GetButtonText (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    string auto29752418_val;
    int auto2937641C_val;
    int autoA195CEB8_val;
    int auto592EB063_val;
    int auto293163DE_val;
    int autoE579206C_val;
    int auto757C586D_val;
    int autoB43FC0BD_val;
    int autoA80CFE2B_val;
    int autoDAB158EF_val;
    int autoCD29EC0F_val;
    int autoADCABA1F_val;
    int autoBC2D82ED_val;
    int auto7C2D079F_val;
    int auto33F9F2F3_val;
    int auto285885C0_val;
    int auto5C70600D_val;
    int auto6C603039_val;
    int auto8D2892F1_val;

    // Implementation
    auto29752418_val = libCOMI_gf_ActiveCommanderForPlayer3(lp_pPlayer);
    if (auto29752418_val == "Mengsk") {
        auto2937641C_val = lp_pButtonIndex;
        if (auto2937641C_val == 0) {
            return "Button/Name/BunkerDepotMengskDrop";
        }
        else if (auto2937641C_val == 1) {
            return "Button/Name/ArtilleryMengskExperimentalStrike";
        }
        else if (auto2937641C_val == 2) {
            return "Button/Name/MengskZergCalldown";
        }
        else if (auto2937641C_val == 3) {
            return "Button/Name/NuclearAnnihilationMengsk";
        }
        else {
        }
    }
    else if (auto29752418_val == "Vorazun") {
        autoA195CEB8_val = lp_pButtonIndex;
        if (autoA195CEB8_val == 0) {
            return "Button/Name/SOADarkPylon";
        }
        else if (autoA195CEB8_val == 1) {
            return "Button/Name/SOAVorazunBlackHole";
        }
        else if (autoA195CEB8_val == 2) {
            return "Button/Name/SOAShadowGuardCalldown";
        }
        else if (autoA195CEB8_val == 3) {
            return "Button/Name/SOATimeFreeze";
        }
        else {
        }
    }
    else if (auto29752418_val == "Raynor") {
        auto592EB063_val = lp_pButtonIndex;
        if (auto592EB063_val == 0) {
            return "Button/Name/SummonHyperionVoid";
        }
        else if (auto592EB063_val == 1) {
            return "Button/Name/BansheeAirstrike";
        }
        else {
        }
    }
    else if (auto29752418_val == "Abathur") {
        auto293163DE_val = lp_pButtonIndex;
        if (auto293163DE_val == 0) {
            return "Button/Name/SpawnToxicNest";
        }
        else if (auto293163DE_val == 1) {
            return "Button/Name/AbathurMend";
        }
        else {
        }
    }
    else if (auto29752418_val == "Alarak") {
        autoE579206C_val = lp_pButtonIndex;
        if (autoE579206C_val == 0) {
            return "Button/Name/AlarakStructureOvercharge";
        }
        else if (autoE579206C_val == 1) {
            return "Button/Name/AlarakACSummonDeathfleet";
        }
        else {
        }
    }
    else if (auto29752418_val == "Artanis") {
        auto757C586D_val = lp_pButtonIndex;
        if (auto757C586D_val == 0) {
            return "Button/Name/SOAPylonPower";
        }
        else if (auto757C586D_val == 1) {
            return "Button/Name/SOAOrbitalStrike";
        }
        else if (auto757C586D_val == 2) {
            return "Button/Name/SOASuperShield";
        }
        else if (auto757C586D_val == 3) {
            return "Button/Name/SOAStrafeAttack";
        }
        else {
        }
    }
    else if (auto29752418_val == "Dehaka") {
        autoB43FC0BD_val = lp_pButtonIndex;
        if (autoB43FC0BD_val == 0) {
            return "Button/Name/DehakaNydusDestroyerTopBar";
        }
        else if (autoB43FC0BD_val == 1) {
            return "Button/Name/DehakaGlevigTopBar";
        }
        else if (autoB43FC0BD_val == 2) {
            return "Button/Name/DehakaMurvarTopBar";
        }
        else if (autoB43FC0BD_val == 3) {
            return "Button/Name/DehakaDakrunTopBar";
        }
        else {
        }
    }
    else if (auto29752418_val == "Fenix") {
        autoA80CFE2B_val = lp_pButtonIndex;
        if (autoA80CFE2B_val == 0) {
            return "Button/Name/SOASummonFenix";
        }
        else if (autoA80CFE2B_val == 1) {
            return "Button/Name/SOASummonFenixDragoon";
        }
        else if (autoA80CFE2B_val == 2) {
            return "Button/Name/SOASummonFenixArbiter";
        }
        else {
        }
    }
    else if (auto29752418_val == "Horner") {
        autoDAB158EF_val = lp_pButtonIndex;
        if (autoDAB158EF_val == 0) {
            return "Button/Name/HHMagneticMines";
        }
        else if (autoDAB158EF_val == 1) {
            return "Button/Name/HHBomberAreaBombTopBar";
        }
        else if (autoDAB158EF_val == 2) {
            return "Button/Name/UnlockHHAirFleet";
        }
        else if (autoDAB158EF_val == 3) {
            return "Button/Name/HHSummonSpaceStation";
        }
        else {
        }
    }
    else if (auto29752418_val == "Karax") {
        autoCD29EC0F_val = lp_pButtonIndex;
        if (autoCD29EC0F_val == 0) {
            return "Button/Name/SOAOrbitalStrikeKarax";
        }
        else if (autoCD29EC0F_val == 1) {
            return "Button/Name/SOAThermalLance";
        }
        else if (autoCD29EC0F_val == 2) {
            return "Button/Name/SOAMapWideChrono";
        }
        else if (autoCD29EC0F_val == 3) {
            return "Button/Name/SOAPurifierBeam";
        }
        else {
        }
    }
    else if (auto29752418_val == "Kerrigan") {
        autoADCABA1F_val = lp_pButtonIndex;
        if (autoADCABA1F_val == 0) {
            return "Button/Name/KerriganVoidCoopEconDrop";
        }
        else if (autoADCABA1F_val == 1) {
            return "Button/Name/KerriganVoidCoopCrushingGripWave";
        }
        else {
        }
    }
    else if (auto29752418_val == "Nova") {
        autoBC2D82ED_val = lp_pButtonIndex;
        if (autoBC2D82ED_val == 0) {
            return "Button/Name/NovaDefensiveMatrixDrone";
        }
        else if (autoBC2D82ED_val == 1) {
            return "Button/Name/NovaGriffinBombingRun";
        }
        else if (autoBC2D82ED_val == 2) {
            return "Button/Name/NovaGriffinTransportUnits";
        }
        else if (autoBC2D82ED_val == 3) {
            return "Button/Name/NovaReviveInstantBuyback";
        }
        else if (autoBC2D82ED_val == 4) {
            return "Button/Name/NovaUnitNuke";
        }
        else {
        }
    }
    else if (auto29752418_val == "Stukov") {
        auto7C2D079F_val = lp_pButtonIndex;
        if (auto7C2D079F_val == 0) {
            return "Button/Name/SIStukovPlaceHordeRallyTopBar";
        }
        else if (auto7C2D079F_val == 1) {
            return "Button/Name/SIStukovInfestStructure";
        }
        else if (auto7C2D079F_val == 2) {
            return "Button/Name/StukovSummonApocalisk";
        }
        else if (auto7C2D079F_val == 3) {
            return "Button/Name/StukovSummonAleksander";
        }
        else {
        }
    }
    else if (auto29752418_val == "Swann") {
        auto33F9F2F3_val = lp_pButtonIndex;
        if (auto33F9F2F3_val == 1) {
            return "Button/Name/DrakkenLaserDrillBFGIO";
        }
        else if (auto33F9F2F3_val == 2) {
            return "Button/Name/DrakkenLaserDrillPulseCannonIO";
        }
        else if (auto33F9F2F3_val == 3) {
            return "Button/Name/SpecialDelivery";
        }
        else {
        }
    }
    else if (auto29752418_val == "Tychus") {
        auto285885C0_val = lp_pButtonIndex;
        if (auto285885C0_val == 0) {
            return "Button/Name/TychusMedicTransportUnitsTopBar";
        }
        else if (auto285885C0_val == 1) {
            return "Button/Name/TychusCalldownOdin";
        }
        else {
        }
    }
    else if (auto29752418_val == "Zagara") {
        auto5C70600D_val = lp_pButtonIndex;
        if (auto5C70600D_val == 0) {
            return "Button/Name/ZagaraVoidCoopMassFrenzy";
        }
        else if (auto5C70600D_val == 1) {
            return "Button/Name/MassRoachDrop";
        }
        else {
        }
    }
    else if (auto29752418_val == "Zeratul") {
        auto6C603039_val = lp_pButtonIndex;
        if (auto6C603039_val == 0) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0A", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier0A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0B", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier0B";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0C", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier0C";
            }

        }
        else if (auto6C603039_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier1A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier1B";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier1C";
            }

        }
        else if (auto6C603039_val == 2) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2A", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier2A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2B", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier2B";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier2C", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulStructureBarrierChose";
            }

        }
        else if (auto6C603039_val == 3) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3A", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier3A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3B", c_techCountCompleteOnly) == 1)) {
                return "Button/Name/ZeratulArtifactUpgradeTier3B";
            }

        }
        else {
        }
    }
    else if (auto29752418_val == "Stetmann") {
        auto8D2892F1_val = lp_pButtonIndex;
        if (auto8D2892F1_val == 0) {
            return "Button/Name/PowerTowerStetmannLevel1";
        }
        else {
        }
    }
    else {
    }
    return "";
}

bool libCOMM_gf_AF_AbilityHasCooldownAndEnergyCost (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SOAThermalLanceActivate") && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SoASuperShield") && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SOAOrbitalStrikeActivate") && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SOADarkPylon") && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "SOAShadowGuardCalldown") && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "MengskZergCalldownLevel1") && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "MengskZergCalldownLevel2") && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "MengskZergCalldownLevel3") && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "MengskZergCalldownLevel4") && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "NuclearAnnihilationMengsk") && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "ArtilleryMengskGlobalExperimentalStrike") && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) != "BunkerDepotMengskDrop")) {
        return false;
    }
    else {
        return true;
    }
}

bool libCOMM_gf_AF_AbilityIsAvailable (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitAbilityCheck(libCOMM_gf_CM_PlayerGetGlobalCaster2(lp_pPlayer), libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex), false) == true) || ((libCOMM_gv_cM_DehakaBossBuildingBuilt_Glevig[lp_pPlayer] == false) && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DehakaNydusDestroyerTopBar")) || ((libCOMM_gv_cM_DehakaBossBuildingBuilt_Glevig[lp_pPlayer] == false) && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DehakaGlevigTopBar")) || ((libCOMM_gv_cM_DehakaBossBuildingBuilt_Murvar[lp_pPlayer] == false) && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DehakaMurvarTopBar")) || ((libCOMM_gv_cM_DehakaBossBuildingBuilt_Dakrun[lp_pPlayer] == false) && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DehakaDakrunTopBar")) || ((UnitGroupCount(UnitGroup("HHBomberPlatform", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "HHBomberPlatformAreaBombTopBarOrder")) || ((UnitGroupCount(UnitGroup("NovaReviveBeacon", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 1) && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "NovaReviveInstantBuyback")) || ((TechTreeUpgradeCount(lp_pPlayer, "DrakkenLaserDrillBFG", c_techCountQueuedOrBetter) != 1) && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DrakkenLaserDrillConcentratedBeamIssueOrder")) || ((TechTreeUpgradeCount(lp_pPlayer, "DrakkenLaserDrillNuke", c_techCountQueuedOrBetter) != 1) && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "DrakkenLaserDrillPulseCannonIssueOrder")) || ((UnitGroupCount(UnitGroup("TychusMedivacPlatform", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "TychusMedicTransportLoadUnits")) || ((UnitGroupCount(UnitGroup("ArtilleryMengsk", lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (libCOMM_gf_AF_GetAbility(lp_pPlayer, lp_pButtonIndex) == "ArtilleryMengskGlobalExperimentalStrike")))) {
        return false;
    }
    else {
        return true;
    }
}

fixed libCOMM_gf_AF_EnergyCostofAbility (string lp_pAbility) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pAbility == "SOADarkPylon")) {
        return libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "SOADarkPylon", "InfoArray[" + IntToString(0) + "].Vital[" + IntToString(c_unitVitalEnergy) + "]", c_playerAny);
    }
    else {
        return libNtve_gf_CostOfAbility(lp_pAbility, "Energy");
    }
}

string libCOMM_gf_AF_GetButton (int lp_pPlayer, int lp_pButtonIndex) {
    // Automatic Variable Declarations
    string auto64ED9EC4_val;
    int auto40DA290B_val;
    int auto16D0B1E4_val;
    int autoB44CBBC5_val;
    int auto057E0F3C_val;
    int autoBA9AC4EB_val;
    int auto376D13C1_val;
    int autoF7BE44F0_val;
    int auto5F1E2321_val;
    int autoF2744511_val;
    int autoFBD5BBB4_val;
    int autoBE82935D_val;
    int autoA8A8A999_val;
    int auto67E2672D_val;
    int auto724FE4E5_val;
    int auto1A09AC67_val;
    int autoC3C5C335_val;
    int autoD5FFB7B0_val;
    int autoB7C0CFF9_val;

    // Implementation
    auto64ED9EC4_val = libCOMI_gf_ActiveCommanderForPlayer3(lp_pPlayer);
    if (auto64ED9EC4_val == "Mengsk") {
        auto40DA290B_val = lp_pButtonIndex;
        if (auto40DA290B_val == 0) {
            return "BunkerDepotMengskDrop";
        }
        else if (auto40DA290B_val == 1) {
            return "ArtilleryMengskExperimentalStrike";
        }
        else if (auto40DA290B_val == 2) {
            return "MengskZergCalldownLevel1";
        }
        else if (auto40DA290B_val == 3) {
            return "NuclearAnnihilationMengsk";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Vorazun") {
        auto16D0B1E4_val = lp_pButtonIndex;
        if (auto16D0B1E4_val == 0) {
            return "SOADarkPylon";
        }
        else if (auto16D0B1E4_val == 1) {
            return "SOAVorazunBlackHole";
        }
        else if (auto16D0B1E4_val == 2) {
            return "SOAShadowGuardCalldown";
        }
        else if (auto16D0B1E4_val == 3) {
            return "SOATimeFreeze";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Raynor") {
        autoB44CBBC5_val = lp_pButtonIndex;
        if (autoB44CBBC5_val == 0) {
            return "SummonHyperionVoid";
        }
        else if (autoB44CBBC5_val == 1) {
            return "BansheeAirstrike";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Abathur") {
        auto057E0F3C_val = lp_pButtonIndex;
        if (auto057E0F3C_val == 0) {
            return "SpawnToxicNest";
        }
        else if (auto057E0F3C_val == 1) {
            return "AbathurMend";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Alarak") {
        autoBA9AC4EB_val = lp_pButtonIndex;
        if (autoBA9AC4EB_val == 0) {
            return "AlarakStructureOvercharge";
        }
        else if (autoBA9AC4EB_val == 1) {
            return "AlarakACSummonDeathfleet";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Artanis") {
        auto376D13C1_val = lp_pButtonIndex;
        if (auto376D13C1_val == 0) {
            return "SOAPylonPower";
        }
        else if (auto376D13C1_val == 1) {
            return "SOAOrbitalStrike";
        }
        else if (auto376D13C1_val == 2) {
            return "SOASuperShield";
        }
        else if (auto376D13C1_val == 3) {
            return "SOAStrafeAttack";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Dehaka") {
        autoF7BE44F0_val = lp_pButtonIndex;
        if (autoF7BE44F0_val == 0) {
            return "DehakaNydusDestroyerTopBarPassive";
        }
        else if (autoF7BE44F0_val == 1) {
            return "DehakaGlevigTopBar";
        }
        else if (autoF7BE44F0_val == 2) {
            return "DehakaMurvarTopBar";
        }
        else if (autoF7BE44F0_val == 3) {
            return "DehakaDakrunTopBar";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Fenix") {
        auto5F1E2321_val = lp_pButtonIndex;
        if (auto5F1E2321_val == 0) {
            return "SOASummonFenix";
        }
        else if (auto5F1E2321_val == 1) {
            return "SOASummonFenixDragoon";
        }
        else if (auto5F1E2321_val == 2) {
            return "SOASummonFenixArbiter";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Horner") {
        autoF2744511_val = lp_pButtonIndex;
        if (autoF2744511_val == 0) {
            return "HHMagneticMines";
        }
        else if (autoF2744511_val == 1) {
            return "HHBomberAreaBombTopBar";
        }
        else if (autoF2744511_val == 2) {
            return "HornerAirFleet";
        }
        else if (autoF2744511_val == 3) {
            return "HHSummonSpaceStation";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Karax") {
        autoFBD5BBB4_val = lp_pButtonIndex;
        if (autoFBD5BBB4_val == 0) {
            return "SOAOrbitalStrikeKarax";
        }
        else if (autoFBD5BBB4_val == 1) {
            return "SOAThermalLance";
        }
        else if (autoFBD5BBB4_val == 2) {
            return "SOAMapWideChrono";
        }
        else if (autoFBD5BBB4_val == 3) {
            return "SOAPurifierBeam";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Kerrigan") {
        autoBE82935D_val = lp_pButtonIndex;
        if (autoBE82935D_val == 0) {
            return "KerriganVoidCoopEconDrop";
        }
        else if (autoBE82935D_val == 1) {
            return "KerriganVoidCoopCrushingGripWave";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Nova") {
        autoA8A8A999_val = lp_pButtonIndex;
        if (autoA8A8A999_val == 0) {
            return "NovaDefensiveMatrixDrone";
        }
        else if (autoA8A8A999_val == 1) {
            return "NovaGriffinBombingRun";
        }
        else if (autoA8A8A999_val == 2) {
            return "NovaGriffinTransportUnits";
        }
        else if (autoA8A8A999_val == 3) {
            return "NovaReviveInstantBuyback";
        }
        else if (autoA8A8A999_val == 4) {
            return "NovaCoopCasterNuke";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Stukov") {
        auto67E2672D_val = lp_pButtonIndex;
        if (auto67E2672D_val == 0) {
            return "SIStukovPlaceHordeRallyTopBar";
        }
        else if (auto67E2672D_val == 1) {
            return "SIStukovInfestStructureUpgraded";
        }
        else if (auto67E2672D_val == 2) {
            return "StukovSummonApocalisk";
        }
        else if (auto67E2672D_val == 3) {
            return "StukovSummonAleksander";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Swann") {
        auto724FE4E5_val = lp_pButtonIndex;
        if (auto724FE4E5_val == 1) {
            return "DrakkenLaserDrillBFGIO";
        }
        else if (auto724FE4E5_val == 2) {
            return "DrakkenLaserDrillPulseCannonIO";
        }
        else if (auto724FE4E5_val == 3) {
            return "SpecialDelivery";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Tychus") {
        auto1A09AC67_val = lp_pButtonIndex;
        if (auto1A09AC67_val == 0) {
            return "TychusMedicTransportUnitsTopBar";
        }
        else if (auto1A09AC67_val == 1) {
            return "TychusCalldownOdin";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Zagara") {
        autoC3C5C335_val = lp_pButtonIndex;
        if (autoC3C5C335_val == 0) {
            return "ZagaraVoidCoopMassFrenzy";
        }
        else if (autoC3C5C335_val == 1) {
            return "MassRoachDrop";
        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Zeratul") {
        autoD5FFB7B0_val = lp_pButtonIndex;
        if (autoD5FFB7B0_val == 0) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0A", c_techCountCompleteOnly) == 1)) {
                return "ZeratulSummonKarass";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0B", c_techCountCompleteOnly) == 1)) {
                return "ZeratulSummonMohandar";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier0C", c_techCountCompleteOnly) == 1)) {
                return "ZeratulSummonDarkArchon";
            }

        }
        else if (autoD5FFB7B0_val == 1) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1A", c_techCountCompleteOnly) == 1)) {
                return "ZeratulMapWideStasis";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1B", c_techCountCompleteOnly) == 1)) {
                return "ZeratulSuppressionCrystal";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier1C", c_techCountCompleteOnly) == 1)) {
                return "ZeratulKhaydarinMonolith";
            }

        }
        else if (autoD5FFB7B0_val == 3) {
            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3A", c_techCountCompleteOnly) == 1)) {
                return "ZeratulArtifactUpgradeTier3A";
            }

            if ((TechTreeUpgradeCount(lp_pPlayer, "ZeratulArtifactUpgradeTier3B", c_techCountCompleteOnly) == 1)) {
                return "ZeratulArtifactUpgradeTier3B";
            }

        }
        else {
        }
    }
    else if (auto64ED9EC4_val == "Stetmann") {
        autoB7C0CFF9_val = lp_pButtonIndex;
        if (autoB7C0CFF9_val == 0) {
            return "PowerTowerStetmannLevel1";
        }
        else {
        }
    }
    else {
    }
    return null;
}

void libCOMM_gf_AF_TopBarNotificationsInitialization (int lp_player) {
    // Variable Declarations
    int lv_vButton;

    // Automatic Variable Declarations
    const int auto99B9520A_ae = 4;
    const int auto99B9520A_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(1.0, c_timeGame);
    if (((libCOMI_gf_ActiveCommanderForPlayer3(lp_player) == "Zagara") || (libCOMI_gf_ActiveCommanderForPlayer3(lp_player) == "Kerrigan"))) {
        DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/CommandPanel/CommandButton12");
        libCOMM_gv_aF_TopbarButton[0][lp_player] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/CommandPanel/CommandButton13");
        libCOMM_gv_aF_TopbarButton[1][lp_player] = DialogControlLastCreated();
    }
    else {
        lv_vButton = 0;
        for ( ; ( (auto99B9520A_ai >= 0 && lv_vButton <= auto99B9520A_ae) || (auto99B9520A_ai < 0 && lv_vButton >= auto99B9520A_ae) ) ; lv_vButton += auto99B9520A_ai ) {
            DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_vButton));
            libCOMM_gv_aF_TopbarButton[lv_vButton][lp_player] = DialogControlLastCreated();
        }
        if ((libCOMI_gf_ActiveCommanderForPlayer3(lp_player) == "Nova")) {
            DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/CommandPanel/CommandButton13");
            libCOMM_gv_aF_TopbarButton[4][lp_player] = DialogControlLastCreated();
        }

    }
}

void libCOMM_gf_CM_SoATargetingModeEnter (int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMM_gv_cM_SoATargetingUnrefundableStageEntered[lp_player] = false;
    libCOMM_gv_cM_SoATargetingAlreadyCanceled[lp_player] = false;
    while (!((libCOMM_gv_cM_SoATargetingTransitioning[lp_player] == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((libCOMI_gf_PlayerInCinematicModeCampaign() == true)) {
        return ;
    }

    TriggerEnable(libCOMM_gt_CM_SoATargetingCancel, true);
    libCOMM_gv_cM_SoAExitInstantly = false;
    libCOMM_gv_cM_SoATargetingUsageCount += 1;
    libCOMM_gv_cM_SoATargetingChargesSpent[lp_player] = 0;
    libCOMI_gf_CU_TargetingSetCharges(libCOMM_gv_cM_SoATargetingChargesTotal[lp_player], libCOMM_gv_cM_SoATargetingChargesTotal[lp_player], lp_player);
    if ((libCOMM_gv_cM_SoATargetingOrder[lp_player] != null)) {
        TriggerEnable(libCOMM_gt_CM_SoATargetingPointChosen, true);
        TriggerEnable(libCOMM_gt_CM_SoATargetingDirectionChosen, true);
        UISetTargetingOrder(PlayerGroupSingle(lp_player), libCOMI_gv_yY_GPCasterGroup[lp_player], libCOMM_gv_cM_SoATargetingOrder[lp_player], false);
        libCOMM_gv_cM_SoATargetingPhase[lp_player] = libCOMM_ge_CM_SoATargetingPhaseType_Location;
    }
    else {
        libCOMM_gv_cM_SoATargetingPhase[lp_player] = libCOMM_ge_CM_SoATargetingPhaseType_None;
    }
    libCOMM_gv_cM_SoATargetingTransitioning[lp_player] = true;
    libCOMI_gf_PU_TargetingUI_EnterTargetingMode(true, false, lp_player);
    libCOMI_gf_CU_TargetingSetInstructionText(libCOMM_gv_cM_SoATargetingInstructionsPrimary[lp_player], lp_player);
    libCOMM_gf_CM_SetFogAlphaOverTime(100.0, 0.5, lp_player);
    CameraSetValue(lp_player, c_cameraValueDistance, 50.0, 1.0, -1, 10.0);
    CameraSetValue(lp_player, c_cameraValuePitch, 70.0, 1.0, -1, 10.0);
    CameraSetData(PlayerGroupSingle(lp_player), "SOATargetingModeCamera");
    libCOMM_gv_cM_SoATargetingTransitioning[lp_player] = false;
    libCOMM_gv_cM_SoATargetingCycling[lp_player] = false;
}

void libCOMM_gf_CM_SoATargetingModeExit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOMM_gv_cM_SoATargetingPhase[lp_player] = libCOMM_ge_CM_SoATargetingPhaseType_None;
    while (!((libCOMM_gv_cM_SoATargetingTransitioning[lp_player] == false))) {
        Wait(0.0625, c_timeGame);
    }
    libCOMM_gv_cM_SoATargetingTransitioning[lp_player] = true;
    if ((libCOMM_gv_cM_SoAExitInstantly == true)) {
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.0, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.0, -1, 10.0);
    }
    else {
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.5, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.5, -1, 10.0);
    }
    CameraSetData(PlayerGroupSingle(lp_player), "Dflt");
    if ((libCOMM_gv_cM_SoAExitInstantly == true)) {
        VisResetFoWAlpha(lp_player);
        libCOMI_gf_PU_TargetingUI_EnterTargetingMode(false, true, lp_player);
    }
    else {
        libCOMM_gf_CM_ResetFogAlphaOverTime(0.5, lp_player);
        libCOMI_gf_PU_TargetingUI_EnterTargetingMode(false, false, lp_player);
    }
    libNtve_gf_RestoreUnitSelection(lp_player);
    libCOMM_gv_cM_SoATargetingActivateAbility[lp_player] = null;
    libCOMM_gv_cM_SoATargetingTransitioning[lp_player] = false;
    libCOMM_gv_cM_SoATargetingUsageCount -= 1;
    if ((libCOMM_gv_cM_SoATargetingUsageCount == 0)) {
        TriggerEnable(libCOMM_gt_CM_SoATargetingCancel, false);
        TriggerEnable(libCOMM_gt_CM_SoATargetingPointChosen, false);
        TriggerEnable(libCOMM_gt_CM_SoATargetingDirectionChosen, false);
    }

}

void libCOMM_gf_CM_SoATargetingCleanupActorsAndUnits (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto86535067_ae = libCOMM_gv_cMC_SOATARGETCOUNTMAX;
    const int auto86535067_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto86535067_ai >= 0 && lv_index <= auto86535067_ae) || (auto86535067_ai < 0 && lv_index >= auto86535067_ae) ) ; lv_index += auto86535067_ai ) {
        if ((libCOMM_gv_cM_SoATargetingActors[lv_index][lp_player] != null)) {
            ActorSend(libCOMM_gv_cM_SoATargetingActors[lv_index][lp_player], "Signal Destroy");
            libCOMM_gv_cM_SoATargetingActors[lv_index][lp_player] = null;
        }

        if ((libCOMM_gv_cM_SoATargetingUnit[lv_index][lp_player] != null)) {
            UnitRemove(libCOMM_gv_cM_SoATargetingUnit[lv_index][lp_player]);
            libCOMM_gv_cM_SoATargetingUnit[lv_index][lp_player] = null;
        }

    }
}

trigger auto_libCOMM_gf_CM_SetFogAlphaOverTime_Trigger = null;
fixed auto_libCOMM_gf_CM_SetFogAlphaOverTime_lp_targetAlpha;
fixed auto_libCOMM_gf_CM_SetFogAlphaOverTime_lp_duration;
int auto_libCOMM_gf_CM_SetFogAlphaOverTime_lp_player;

void libCOMM_gf_CM_SetFogAlphaOverTime (fixed lp_targetAlpha, fixed lp_duration, int lp_player) {
    auto_libCOMM_gf_CM_SetFogAlphaOverTime_lp_targetAlpha = lp_targetAlpha;
    auto_libCOMM_gf_CM_SetFogAlphaOverTime_lp_duration = lp_duration;
    auto_libCOMM_gf_CM_SetFogAlphaOverTime_lp_player = lp_player;

    if (auto_libCOMM_gf_CM_SetFogAlphaOverTime_Trigger == null) {
        auto_libCOMM_gf_CM_SetFogAlphaOverTime_Trigger = TriggerCreate("auto_libCOMM_gf_CM_SetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_SetFogAlphaOverTime_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_SetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_targetAlpha = auto_libCOMM_gf_CM_SetFogAlphaOverTime_lp_targetAlpha;
    fixed lp_duration = auto_libCOMM_gf_CM_SetFogAlphaOverTime_lp_duration;
    int lp_player = auto_libCOMM_gf_CM_SetFogAlphaOverTime_lp_player;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;

    // Automatic Variable Declarations
    int autoBF41BA45_n;
    int autoBF41BA45_i;

    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMI_gf_MutatorIsEnabled("UberDarkness") == true))) {
        return true;
    }

    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(lp_player);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lp_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    autoBF41BA45_n = lv_increments;
    for (autoBF41BA45_i = 1; autoBF41BA45_i <= autoBF41BA45_n; autoBF41BA45_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisSetFoWAlpha(lp_player, lp_targetAlpha);
    return true;
}

trigger auto_libCOMM_gf_CM_ResetFogAlphaOverTime_Trigger = null;
fixed auto_libCOMM_gf_CM_ResetFogAlphaOverTime_lp_duration;
int auto_libCOMM_gf_CM_ResetFogAlphaOverTime_lp_player;

void libCOMM_gf_CM_ResetFogAlphaOverTime (fixed lp_duration, int lp_player) {
    auto_libCOMM_gf_CM_ResetFogAlphaOverTime_lp_duration = lp_duration;
    auto_libCOMM_gf_CM_ResetFogAlphaOverTime_lp_player = lp_player;

    if (auto_libCOMM_gf_CM_ResetFogAlphaOverTime_Trigger == null) {
        auto_libCOMM_gf_CM_ResetFogAlphaOverTime_Trigger = TriggerCreate("auto_libCOMM_gf_CM_ResetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_ResetFogAlphaOverTime_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_ResetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_duration = auto_libCOMM_gf_CM_ResetFogAlphaOverTime_lp_duration;
    int lp_player = auto_libCOMM_gf_CM_ResetFogAlphaOverTime_lp_player;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;
    fixed lv_targetAlpha;

    // Automatic Variable Declarations
    int auto438B7E00_n;
    int auto438B7E00_i;

    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMI_gf_MutatorIsEnabled("UberDarkness") == true))) {
        return true;
    }

    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(lp_player);
    VisResetFoWAlpha(lp_player);
    lv_targetAlpha = VisGetFoWAlpha(lp_player);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lv_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    VisSetFoWAlpha(lp_player, lv_currentAlpha);
    auto438B7E00_n = lv_increments;
    for (auto438B7E00_i = 1; auto438B7E00_i <= auto438B7E00_n; auto438B7E00_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisResetFoWAlpha(lp_player);
    return true;
}

void libCOMM_gf_CM_SoATargetingCancel (int lp_player) {
    // Variable Declarations
    string lv_cost;
    string lv_costField;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cost = "";
    lv_costField = "";

    // Implementation
    UnitIssueOrder(libCOMI_gv_yY_GPCasterUnit[lp_player], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libCOMM_gv_cM_SoATargetingAlreadyCanceled[lp_player] = true;
    libCOMM_gf_CM_SoATargetingCleanupActorsAndUnits(lp_player);
    if ((libCOMM_gv_cM_SoATargetingUnitType[lp_player] != null) && (libCOMM_gv_cM_SoATargetingPhase[lp_player] == libCOMM_ge_CM_SoATargetingPhaseType_Direction)) {
        libCOMM_gv_cM_SoATargetingChargesSpent[lp_player] -= 1;
    }

    if ((libCOMM_gv_cM_SoATargetingChargesSpent[lp_player] == 0) && (libCOMM_gv_cM_SoATargetingUnrefundableStageEntered[lp_player] == false)) {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[lp_player], libCOMM_gv_cM_SoATargetingActivateAbility[lp_player], libCOMM_gv_cM_SoATargetingCooldown[lp_player]);
        lv_costField = ("Cost[0].Vital[" + "Energy" + "]");
        lv_cost = CatalogFieldValueGet(c_gameCatalogAbil, libCOMM_gv_cM_SoATargetingActivateAbility[lp_player], (lv_costField), lp_player);
        UnitSetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergy, (UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergy, c_unitPropCurrent) + StringToFixed(lv_cost)));
        if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 1)) {
            PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, libCOMM_gv_cM_NovaGriffinBombingRunCost[lp_player]);
        }

    }

    UnitBehaviorRemove(libCOMI_gv_yY_GPCasterUnit[lp_player], libCOMM_gv_cM_SoATargetingBehavior[lp_player], 1);
    libCOMM_gv_cM_SoATargetingUnrefundableStageEntered[lp_player] = true;
}

void libCOMM_gf_CU_GPInitAlarak (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoEEDA0924_ae = 2;
    const int autoEEDA0924_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libCOMI_gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/AlarakCasterPanelTemplate");
    libCOMI_gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "AlarakCommandCutscene");
    libCOMI_gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/AlarakGlobalCommandPanelTemplate");
    libCOMI_gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoEEDA0924_ai >= 0 && lv_buttonIndex <= autoEEDA0924_ae) || (autoEEDA0924_ai < 0 && lv_buttonIndex >= autoEEDA0924_ae) ) ; lv_buttonIndex += autoEEDA0924_ai ) {
        DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libCOMI_gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_AlarakCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]));
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeButton, "GemButton");
    libCOMM_gv_cU_GPAlarakButton[lp_player] = DialogControlLastCreated();
    TriggerEnable(libCOMM_gt_CU_GPAlarakGemPress, true);
}

trigger auto_libCOMM_gf_CM_GPReminderArtanis_Trigger = null;
int auto_libCOMM_gf_CM_GPReminderArtanis_lp_player;

void libCOMM_gf_CM_GPReminderArtanis (int lp_player) {
    auto_libCOMM_gf_CM_GPReminderArtanis_lp_player = lp_player;

    if (auto_libCOMM_gf_CM_GPReminderArtanis_Trigger == null) {
        auto_libCOMM_gf_CM_GPReminderArtanis_Trigger = TriggerCreate("auto_libCOMM_gf_CM_GPReminderArtanis_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_GPReminderArtanis_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_GPReminderArtanis_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMM_gf_CM_GPReminderArtanis_lp_player;

    // Automatic Variable Declarations
    // Implementation
    while ((libCOMI_gv_cM_GPRemindersOn[lp_player] == true)) {
        if ((UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
            break;
        }

        Wait(2.0, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOMI_gf_CU_GPHighlightButton(2, true, lp_player);
    libCOMI_gf_CU_GPHighlightButton(3, true, lp_player);
    while (!((UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_CM_GPReminderDisable(lp_player);
    return true;
}

trigger auto_libCOMM_gf_CM_GPReminderAbathur_Trigger = null;
int auto_libCOMM_gf_CM_GPReminderAbathur_lp_player;

void libCOMM_gf_CM_GPReminderAbathur (int lp_player) {
    auto_libCOMM_gf_CM_GPReminderAbathur_lp_player = lp_player;

    if (auto_libCOMM_gf_CM_GPReminderAbathur_Trigger == null) {
        auto_libCOMM_gf_CM_GPReminderAbathur_Trigger = TriggerCreate("auto_libCOMM_gf_CM_GPReminderAbathur_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_GPReminderAbathur_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_GPReminderAbathur_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMM_gf_CM_GPReminderAbathur_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOMI_gf_CU_GPHighlightButton(1, true, lp_player);
    libCOMI_gf_CU_GPHighlightButton(2, true, lp_player);
    return true;
}

trigger auto_libCOMM_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_Trigger = null;
int auto_libCOMM_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_lp_abathurPlayer;

void libCOMM_gf_CM_AbilityTransmissionAbathurNestReminderActionVer (int lp_abathurPlayer) {
    auto_libCOMM_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_lp_abathurPlayer = lp_abathurPlayer;

    if (auto_libCOMM_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_Trigger == null) {
        auto_libCOMM_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_Trigger = TriggerCreate("auto_libCOMM_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_abathurPlayer = auto_libCOMM_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_lp_abathurPlayer;

    // Variable Declarations
    int lv_locAbathurPlayer;
    bool lv_belowStandardCap;
    bool lv_belowFinalCap;
    const fixed lv_c_StandardCapAmount = 5.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_belowStandardCap = true;
    lv_belowFinalCap = true;

    // Implementation
    lv_locAbathurPlayer = lp_abathurPlayer;
    while (true) {
        Wait(5.0, c_timeGame);
        if ((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) < lv_c_StandardCapAmount)) {
            lv_belowStandardCap = true;
            continue;
        }
        else if ((lv_belowStandardCap == true) && (UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
                lv_belowStandardCap = false;
                libCOMI_gf_CM_CommanderVOSend(lv_locAbathurPlayer, SoundLink("AbathurCommander_ToxicNest", -1), PlayerGroupSingle(lv_locAbathurPlayer));
                continue;
            }

        }
        else if ((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax) <= (lv_c_StandardCapAmount+2.0))) {
            continue;
        }
        else if ((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) < UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax))) {
            lv_belowFinalCap = true;
            continue;
        }
        else if ((lv_belowFinalCap == true) && (UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax))) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax))) {
                lv_belowFinalCap = false;
                libCOMI_gf_CM_CommanderVOSend(lv_locAbathurPlayer, SoundLink("AbathurCommander_ToxicNest", -1), PlayerGroupSingle(lv_locAbathurPlayer));
            }

        }
    }
    return true;
}

void libCOMM_gf_CM_Abathur_BiomassSetStack (unit lp_biomass, int lp_stack) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_biomass, 63, IntToFixed(lp_stack));
    TextExpressionSetToken("Param/Expression/lib_COMM_588C41D6", "Stack", IntToText(lp_stack));
    UnitSetInfoTip(lp_biomass, TextExpressionAssemble("Param/Expression/lib_COMM_588C41D6"));
}

int libCOMM_gf_CM_Abathur_BiomassGetStack (unit lp_biomass) {
    // Variable Declarations
    int lv_stack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stack = FixedToInt(UnitGetCustomValue(lp_biomass, 63));

    // Implementation
    return lv_stack;
}

void libCOMM_gf_CM_Abathur_BiomassTransfer (int lp_indexPlayer, unit lp_trainUnit, int lp_biomassBuff100Count, int lp_biomassBuff10Count, int lp_biomassBuff1Count) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAddPlayer(lp_trainUnit, "BiomassBuff100", lp_indexPlayer, lp_biomassBuff100Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "BiomassBuff10", lp_indexPlayer, lp_biomassBuff10Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "BiomassBuff1", lp_indexPlayer, lp_biomassBuff1Count);
    UnitCreateEffectUnit(lp_trainUnit, "PostMorphHeal", lp_trainUnit);
}

void libCOMM_gf_CM_Abathur_BiomassScale (unit lp_biomassUnit, bool lp_instantScale) {
    // Variable Declarations
    fixed lv_customScale;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_customScale = (UnitGetCustomValue(lp_biomassUnit, 63) / 100.0);
    lv_customScale += 0.8;
    if ((lv_customScale > 1.8)) {
        lv_customScale = 1.8;
    }

    if ((lp_instantScale == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMM_BCEA856B", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_biomassUnit), TextExpressionAssemble("Param/Expression/lib_COMM_BCEA856B"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMM_9677B034", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_biomassUnit), TextExpressionAssemble("Param/Expression/lib_COMM_9677B034"));
    }
}

void libCOMM_gf_CM_Abathur_BiomassMerge (unit lp_biomassUnit, int lp_biomassUnitCount) {
    // Variable Declarations
    fixed lv_biomassCongealRadius;
    int lv_nearbyBiomassMaxCount;
    unit lv_nearbyBiomassMaxCountUnit;

    // Automatic Variable Declarations
    unitgroup auto536C9D12_g;
    int auto536C9D12_u;
    unit auto536C9D12_var;

    // Variable Initialization
    lv_biomassCongealRadius = 4.0;

    // Implementation
    auto536C9D12_g = UnitGroup("BiomassPickup", UnitGetOwner(lp_biomassUnit), RegionCircle(UnitGetPosition(lp_biomassUnit), lv_biomassCongealRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto536C9D12_u = UnitGroupCount(auto536C9D12_g, c_unitCountAll);
    for (;; auto536C9D12_u -= 1) {
        auto536C9D12_var = UnitGroupUnitFromEnd(auto536C9D12_g, auto536C9D12_u);
        if (auto536C9D12_var == null) { break; }
        if (((UnitGetCustomValue(auto536C9D12_var, 63) > lv_nearbyBiomassMaxCount) && (auto536C9D12_var != lp_biomassUnit) && (UnitHasBehavior2(auto536C9D12_var, "BiomassTravelling") == false))) {
            lv_nearbyBiomassMaxCount = FixedToInt(UnitGetCustomValue(auto536C9D12_var, 63));
            lv_nearbyBiomassMaxCountUnit = auto536C9D12_var;
        }

    }
    if ((lv_nearbyBiomassMaxCountUnit != null)) {
        libCOMM_gf_CM_Abathur_BiomassSetStack(lv_nearbyBiomassMaxCountUnit, FixedToInt((UnitGetCustomValue(lv_nearbyBiomassMaxCountUnit, 63) + lp_biomassUnitCount)));
        UnitBehaviorAdd(lp_biomassUnit, "BiomassTravelling", lp_biomassUnit, 1);
        UnitCreateEffectUnit(lp_biomassUnit, "BiomassPickupFullLM", lv_nearbyBiomassMaxCountUnit);
        libCOMM_gf_CM_Abathur_BiomassScale(lv_nearbyBiomassMaxCountUnit, false);
    }

}

trigger auto_libCOMM_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_Trigger = null;
int auto_libCOMM_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_lp_dehakaPlayer;

void libCOMM_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer (int lp_dehakaPlayer) {
    auto_libCOMM_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_lp_dehakaPlayer = lp_dehakaPlayer;

    if (auto_libCOMM_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_Trigger == null) {
        auto_libCOMM_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_Trigger = TriggerCreate("auto_libCOMM_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_dehakaPlayer = auto_libCOMM_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_lp_dehakaPlayer;

    // Variable Declarations
    int lv_locDehakaPlayer;
    bool lv_belowStandardCap;
    const fixed lv_c_StandardCapAmount = 3.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_belowStandardCap = true;

    // Implementation
    lv_locDehakaPlayer = lp_dehakaPlayer;
    while (true) {
        Wait(5.0, c_timeGame);
        if ((libCOMM_gv_cM_DehakaVOWurmStructureAlive == false)) {
            continue;
        }
        else if ((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locDehakaPlayer], AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilChargeCountLeft) < lv_c_StandardCapAmount)) {
            lv_belowStandardCap = true;
            continue;
        }
        else if ((lv_belowStandardCap == true) && (UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locDehakaPlayer], AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount) && (PlayerGetPropertyInt(lv_locDehakaPlayer, c_playerPropSuppliesUsed) < FixedToInt((PlayerGetPropertyInt(lv_locDehakaPlayer, c_playerPropSuppliesLimit) - UnitTypeGetProperty("DehakaNydusDestroyer", c_unitPropSuppliesUsed))))) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locDehakaPlayer], AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount) && (PlayerGetPropertyInt(lv_locDehakaPlayer, c_playerPropSuppliesUsed) < FixedToInt((PlayerGetPropertyInt(lv_locDehakaPlayer, c_playerPropSuppliesLimit) - UnitTypeGetProperty("DehakaNydusDestroyer", c_unitPropSuppliesUsed)))) && (libCOMM_gv_cM_DehakaVOWurmStructureAlive == true)) {
                lv_belowStandardCap = false;
                libCOMI_gf_CM_CommanderVOSend(lv_locDehakaPlayer, SoundLink("DehakaCommander_PrimalWurmReminder", -1), PlayerGroupSingle(lv_locDehakaPlayer));
                continue;
            }

        }
    }
    return true;
}

void libCOMM_gf_CM_DehakaConsumeFloatText (text lp_text, int lp_p, point lp_loc) {
    // Automatic Variable Declarations
    // Implementation
    TextTagCreate(lp_text, 24, lp_loc, 4.0, true, false, PlayerGroupSingle(lp_p));
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 100.00));
}

void libCOMM_gf_CM_DehakaConsumeUpdatePsiExplodeDamage (int lp_dehakaPlayer, unit lp_dehakaUnit, fixed lp_maguroMemorialWeaponDamage) {
    // Variable Declarations
    fixed lv_weaponDmgScalar;
    fixed lv_totalDmg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_weaponDmgScalar = 2.0;
    lv_totalDmg = (lp_maguroMemorialWeaponDamage * lv_weaponDmgScalar);

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, libCOMM_gv_c_DehakaConsumeEffectPsiExplodeWeaponDmgLink, "Amount", lp_dehakaPlayer, (FixedToString(lv_totalDmg, c_fixedPrecisionAny)));
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "DehakaConsumeEffectPsionicSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_dehakaPlayer, UnitGetPropertyFixed(lp_dehakaUnit, c_unitPropRadius, c_unitPropCurrent), c_upgradeOperationAdd);
}

void libCOMM_gf_CM_Dehaka_SetLevelValues (int lp_player) {
    // Variable Declarations
    int lv_i;
    fixed lv_r;
    int lv_xPTotal;

    // Automatic Variable Declarations
    int autoAD7693B8_ae;
    const int autoAD7693B8_ai = 1;

    // Variable Initialization

    // Implementation
    autoAD7693B8_ae = (libCOMM_gv_cM_DehakaLevelsMax[lp_player] - 1);
    lv_i = 0;
    for ( ; ( (autoAD7693B8_ai >= 0 && lv_i <= autoAD7693B8_ae) || (autoAD7693B8_ai < 0 && lv_i >= autoAD7693B8_ae) ) ; lv_i += autoAD7693B8_ai ) {
        lv_xPTotal += CatalogFieldValueGetAsInt(c_gameCatalogBehavior, libCOMM_gv_cM_DehakaVeterencyBehavior[lp_player], "VeterancyLevelArray[" + IntToString(lv_i) + "].MinVeterancyXP", lp_player);
        libCOMM_gv_cM_DehakaNextLevelValueArray[lv_i] = lv_xPTotal;
    }
}

void libCOMM_gf_CM_Dehaka_LevelUp (int lp_dehakaPlayer, unit lp_dehakaUnit) {
    // Variable Declarations
    fixed lv_dehakaScalePerLevel;
    fixed lv_dehakaBaseScale;
    fixed lv_dehakaScaleResult;
    int lv_dehakaAttackDamagePerLevel;
    int lv_dehakaAttackDamageBase;
    int lv_dehakaAttackDamageResult;
    unit lv_dehakaUnit;
    fixed lv_dehakaTurnSpeed;
    fixed lv_dehakaAbilityArcs;
    int lv_dehakaNextLevelCheck;
    int lv_dehakaCurrentLevel;
    string lv_dehakaUnitType;
    actor lv_dehakaUnitActor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dehakaScalePerLevel = 0.1;
    lv_dehakaBaseScale = 0.5;
    lv_dehakaAttackDamagePerLevel = 10;
    lv_dehakaAttackDamageBase = 20;
    lv_dehakaUnit = UnitGroupUnit(UnitGroup("DehakaCoop", lp_dehakaPlayer, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1), 1);
    lv_dehakaCurrentLevel = UnitXPGetCurrentLevel(lp_dehakaUnit, null);
    lv_dehakaUnitType = UnitGetType(lp_dehakaUnit);
    lv_dehakaUnitActor = libNtve_gf_MainActorofUnit(lp_dehakaUnit);

    // Implementation
    if ((libCOMI_gf_ActiveCommanderForPlayer(lp_dehakaPlayer) != "Dehaka")) {
        return ;
    }

    if ((libCOMI_gf_HeroCanSpendSkillPoint(lv_dehakaUnit, "DehakaLearn") == true)) {
        ActorSend(lv_dehakaUnitActor, "HaloStart");
        UISetButtonFaceHighlighted(PlayerGroupSingle(lp_dehakaPlayer), "DehakaLearnAbilities", true);
    }
    else {
        ActorSend(lv_dehakaUnitActor, "HaloStop");
        UISetButtonFaceHighlighted(PlayerGroupSingle(lp_dehakaPlayer), "DehakaLearnAbilities", false);
    }
    if ((lv_dehakaCurrentLevel >= libCOMM_gv_cM_DehakaLevelsMax[lp_dehakaPlayer]) && (libCOMM_gv_cM_DehakaLevelMaxMusicPlayed == false)) {
        libCOMM_gv_cM_DehakaLevelMaxMusicPlayed = true;
        SoundPlayOnUnitForPlayer(SoundLink("MusicDehakaMaxLevel", -1), lp_dehakaPlayer, PlayerGroupSingle(lp_dehakaPlayer), lp_dehakaUnit, 1.0, 100.0, 0.0);
    }

    lv_dehakaScaleResult = ((lv_dehakaCurrentLevel * lv_dehakaScalePerLevel) + lv_dehakaBaseScale);
    libNtve_gf_SendActorMessageToUnit(lp_dehakaUnit, libNtve_gf_SetScale(lv_dehakaScaleResult, lv_dehakaScaleResult, lv_dehakaScaleResult, 0.0));
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, lv_dehakaUnitType, "Radius", lp_dehakaPlayer, ((lv_dehakaCurrentLevel * 0.0625) + 0.5));
    lv_dehakaAttackDamageResult = (lv_dehakaAttackDamageBase + ((lv_dehakaCurrentLevel - 1) * lv_dehakaAttackDamagePerLevel));
    lv_dehakaTurnSpeed = (800.0 - (lv_dehakaCurrentLevel * 40.0));
    if ((lv_dehakaTurnSpeed < 300.0)) {
        lv_dehakaTurnSpeed = 300.0;
    }

    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, lv_dehakaUnitType, "TurningRate", lp_dehakaPlayer, lv_dehakaTurnSpeed);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, lv_dehakaUnitType, "StationaryTurningRate", lp_dehakaPlayer, lv_dehakaTurnSpeed);
    if (true) {
        libCOMM_gv_cM_DehakaEatReviveTimerAdjustment = ((lv_dehakaCurrentLevel * 1) - 24);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "DehakaDroneReviveTimerRefLink", "Amount", lp_dehakaPlayer, libCOMM_gv_cM_DehakaEatReviveTimerAdjustment);
        if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_dehakaPlayer) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_dehakaPlayer) == 4)) && (lv_dehakaCurrentLevel >= 6) && (GameGetMissionTime() < 360.0)) {
            AchievementAward(lp_dehakaPlayer, "CommanderDehakaLevelUp");
        }

    }

}

void libCOMM_gf_CM_Dehaka_EssenceSetStack (unit lp_essence, int lp_stack) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_essence, 63, IntToFixed(lp_stack));
    TextExpressionSetToken("Param/Expression/lib_COMM_664BFC32", "Stack", IntToText(lp_stack));
    UnitSetInfoTip(lp_essence, TextExpressionAssemble("Param/Expression/lib_COMM_664BFC32"));
}

int libCOMM_gf_CM_Dehaka_EssenceGetStack (unit lp_essence) {
    // Variable Declarations
    int lv_stack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stack = FixedToInt(UnitGetCustomValue(lp_essence, 63));

    // Implementation
    return lv_stack;
}

void libCOMM_gf_CM_Dehaka_EssenceTransfer (int lp_indexPlayer, unit lp_trainUnit, int lp_essenceBuff100Count, int lp_essenceBuff10Count, int lp_essenceBuff1Count) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAddPlayer(lp_trainUnit, "EssenceBuff100", lp_indexPlayer, lp_essenceBuff100Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "EssenceBuff10", lp_indexPlayer, lp_essenceBuff10Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "EssenceBuff1", lp_indexPlayer, lp_essenceBuff1Count);
    UnitCreateEffectUnit(lp_trainUnit, "PostMorphHeal", lp_trainUnit);
}

void libCOMM_gf_CM_Dehaka_EssenceScale (unit lp_essenceUnit, bool lp_instantScale) {
    // Variable Declarations
    fixed lv_customScale;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_customScale = (UnitGetCustomValue(lp_essenceUnit, 63) / 100.0);
    lv_customScale += 0.8;
    if ((lv_customScale > 1.8)) {
        lv_customScale = 1.8;
    }

    if ((lp_instantScale == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMM_592C9F5E", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_essenceUnit), TextExpressionAssemble("Param/Expression/lib_COMM_592C9F5E"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMM_7377BD90", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_essenceUnit), TextExpressionAssemble("Param/Expression/lib_COMM_7377BD90"));
    }
}

void libCOMM_gf_CM_Dehaka_EssenceMerge (unit lp_essenceUnit, int lp_essenceUnitCount) {
    // Variable Declarations
    fixed lv_essenceCongealRadius;
    int lv_nearbyEssenceMaxCount;
    unit lv_nearbyEssenceMaxCountUnit;

    // Automatic Variable Declarations
    unitgroup autoA1F40952_g;
    int autoA1F40952_u;
    unit autoA1F40952_var;

    // Variable Initialization
    lv_essenceCongealRadius = 1.9;

    // Implementation
    autoA1F40952_g = UnitGroup("EssencePickup", UnitGetOwner(lp_essenceUnit), RegionCircle(UnitGetPosition(lp_essenceUnit), lv_essenceCongealRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA1F40952_u = UnitGroupCount(autoA1F40952_g, c_unitCountAll);
    for (;; autoA1F40952_u -= 1) {
        autoA1F40952_var = UnitGroupUnitFromEnd(autoA1F40952_g, autoA1F40952_u);
        if (autoA1F40952_var == null) { break; }
        if (((UnitGetCustomValue(autoA1F40952_var, 63) > lv_nearbyEssenceMaxCount) && (autoA1F40952_var != lp_essenceUnit) && (UnitHasBehavior2(autoA1F40952_var, "EssenceTravelling") == false))) {
            lv_nearbyEssenceMaxCount = FixedToInt(UnitGetCustomValue(autoA1F40952_var, 63));
            lv_nearbyEssenceMaxCountUnit = autoA1F40952_var;
        }

    }
    if ((lv_nearbyEssenceMaxCountUnit != null)) {
        libCOMM_gf_CM_Dehaka_EssenceSetStack(lv_nearbyEssenceMaxCountUnit, FixedToInt((UnitGetCustomValue(lv_nearbyEssenceMaxCountUnit, 63) + lp_essenceUnitCount)));
        UnitBehaviorAdd(lp_essenceUnit, "EssenceTravelling", lp_essenceUnit, 1);
        UnitCreateEffectUnit(lp_essenceUnit, "EssencePickupFullLM", lv_nearbyEssenceMaxCountUnit);
        libCOMM_gf_CM_Dehaka_EssenceScale(lv_nearbyEssenceMaxCountUnit, false);
    }

}

trigger auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger = null;
int auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_player;
string auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_cooldownLink;
unit auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_unit;

void libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime (int lp_player, string lp_cooldownLink, unit lp_unit) {
    auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_player = lp_player;
    auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_cooldownLink = lp_cooldownLink;
    auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_unit = lp_unit;

    if (auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger == null) {
        auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger = TriggerCreate("auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_player;
    string lp_cooldownLink = auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_cooldownLink;
    unit lp_unit = auto_libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_unit;

    // Variable Declarations
    int lv_vOChoice;
    int lv_vOOptions;

    // Automatic Variable Declarations
    int autoA7FAB7AE_val;

    // Variable Initialization
    lv_vOOptions = 2;

    // Implementation
    while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) > 0.0))) {
        Wait(1.0, c_timeGame);
    }
    while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) <= 0.0))) {
        Wait(1.0, c_timeGame);
    }
    if (((lp_unit == null) || (UnitIsAlive(lp_unit) == true))) {
        if ((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("SOASummonFenixArbiter", 0)) == true)) {
            lv_vOOptions = 3;
        }

        lv_vOChoice = RandomInt(1, lv_vOOptions);
        autoA7FAB7AE_val = lv_vOChoice;
        if (autoA7FAB7AE_val == 2) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, SoundLink("FenixCommander_DragoonSuitReady", -1), PlayerGroupSingle(lp_player));
        }
        else if (autoA7FAB7AE_val == 3) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, SoundLink("FenixCommander_ArbiterSuitReady", -1), PlayerGroupSingle(lp_player));
        }
        else {
            libCOMI_gf_CM_CommanderVOSend(lp_player, SoundLink("FenixCommander_ZealotSuitReady", -1), PlayerGroupSingle(lp_player));
        }
    }

    return true;
}

void libCOMM_gf_CU_GPInitFenix (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoBA0BA79B_ae = 3;
    const int autoBA0BA79B_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libCOMI_gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_TopBar_Fenix/FenixCasterPanelTemplate");
    libCOMI_gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_TopBar_Fenix/FenixGlobalCasterCommandPanelTemplate");
    libCOMI_gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeUnitStatus, "CommandPanelUnitStatus");
    libCOMI_gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoBA0BA79B_ai >= 0 && lv_buttonIndex <= autoBA0BA79B_ae) || (autoBA0BA79B_ai < 0 && lv_buttonIndex >= autoBA0BA79B_ae) ) ; lv_buttonIndex += autoBA0BA79B_ai ) {
        DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_triggerControlTypeImage, "FenixButtonActiveImage");
        libCOMI_gv_cU_GPCmdButtonActiveImage[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_triggerControlTypeImage, "FenixButtonInactiveImage");
        libCOMI_gv_cU_GPCmdButtonBackgroundImage[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAAbilityArrow0" + IntToString(lv_buttonIndex));
        libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
        DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeUnitStatus, "HeroMonitorStatusFrame0" + IntToString(lv_buttonIndex-1));
        libCOMI_gv_cU_GPUnitEnergyLinks[lv_buttonIndex][lp_player] = DialogControlLastCreated();
    }
    DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "FenixCommandCutscene");
    libCOMI_gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemCutscene(libCOMI_gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_FenixCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]));
    if ((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("SOASummonFenixArbiter", 0)) == true)) {
        DialogControlSetAnimationState(libCOMI_gv_cU_GPCmdButtons[3][lp_player], PlayerGroupAll(), "UnlockState", "Unlocked");
    }
    else {
        DialogControlSetAnimationState(libCOMI_gv_cU_GPCmdButtons[3][lp_player], PlayerGroupAll(), "UnlockState", "Locked");
    }
}

void libCOMM_gf_TransferGuardianShell (unit lp_source, unit lp_target) {
    // Variable Declarations
    string lv_itbehavior;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitBehaviorTransfer(lp_source, lp_target, "DarkTemplarRecentlyRecalled", c_unitBehaviorCountAll);
    UnitBehaviorTransfer(lp_source, lp_target, "SOARecallOnDeathRecentlyRecalled", c_unitBehaviorCountAll);
    UnitBehaviorTransfer(lp_source, lp_target, "SOAHeroicShieldWeakness", c_unitBehaviorCountAll);
    UnitBehaviorTransfer(lp_source, lp_target, "SOAHeroicShieldImmunity", c_unitBehaviorCountAll);
}

void libCOMM_gf_FenixInitialDummySpawn (int lp_player) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itPlayer = lp_player;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixManaDummy1", c_unitCreateIgnorePlacement, lv_itPlayer, Point(0.0, 0.0));
    UnitGroupAdd(libCOMM_gv_cM_Fenix_DummyGroup[lv_itPlayer], UnitLastCreated());
    libCOMM_gv_cM_Fenix_Suits[1][lv_itPlayer] = UnitLastCreated();
    libCOMI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMM_gv_cM_Fenix_Suits[1][lv_itPlayer], lv_itPlayer, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixManaDummy2", c_unitCreateIgnorePlacement, lv_itPlayer, Point(0.0, 0.0));
    UnitGroupAdd(libCOMM_gv_cM_Fenix_DummyGroup[lv_itPlayer], UnitLastCreated());
    libCOMM_gv_cM_Fenix_Suits[2][lv_itPlayer] = UnitLastCreated();
    libCOMI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMM_gv_cM_Fenix_Suits[2][lv_itPlayer], lv_itPlayer, 2);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixManaDummy3", c_unitCreateIgnorePlacement, lv_itPlayer, Point(0.0, 0.0));
    UnitGroupAdd(libCOMM_gv_cM_Fenix_DummyGroup[lv_itPlayer], UnitLastCreated());
    libCOMM_gv_cM_Fenix_Suits[3][lv_itPlayer] = UnitLastCreated();
    libCOMI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMM_gv_cM_Fenix_Suits[3][lv_itPlayer], lv_itPlayer, 3);
    libCOMM_gv_cM_Fenix_AbilCmdArray[1] = "SOASummonFenix";
    libCOMM_gv_cM_Fenix_AbilCmdArray[2] = "SOASummonFenixDragoon";
    libCOMM_gv_cM_Fenix_AbilCmdArray[3] = "SOASummonFenixArbiter";
    if ((TechTreeUpgradeCount(lv_itPlayer, "FenixOfflineSuitRegen", c_techCountCompleteOnly) == 1)) {
        libCOMM_gv_cM_Fenix_OfflineHealthRegen[lv_itPlayer] *= libCOMM_gv_cM_Fenix_OfflineVitalRegenMultiplier;
        libCOMM_gv_cM_Fenix_OfflineShieldRegen[lv_itPlayer] *= libCOMM_gv_cM_Fenix_OfflineVitalRegenMultiplier;
    }

    libCOMM_gv_cM_Fenix_OfflineEnergyRegen[lv_itPlayer] *= ((TechTreeUpgradeCount(lv_itPlayer, "MasteryFenixSuitEnergyRegen", c_techCountCompleteOnly) / 100.0) + 1.0);
}

trigger auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_Trigger = null;
int auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_lp_player;
abilcmd auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_lp_cmd;
point auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_lp_targetPoint;

void libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread (int lp_player, abilcmd lp_cmd, point lp_targetPoint) {
    auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_lp_player = lp_player;
    auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_lp_cmd = lp_cmd;
    auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_lp_targetPoint = lp_targetPoint;

    if (auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_Trigger == null) {
        auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_Trigger = TriggerCreate("auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_lp_player;
    abilcmd lp_cmd = auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_lp_cmd;
    point lp_targetPoint = auto_libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread_lp_targetPoint;

    // Variable Declarations
    fixed lv_cooldown;
    string lv_cooldownLink;
    point lv_placementTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(lp_cmd), "Cost[" + IntToString(0) + "].Cooldown.Link", lp_player);

    // Implementation
    lv_placementTarget = UnitTypePlacementFromPoint("FenixDragoon", lp_player, lp_targetPoint, 500.0);
    VisRevealArea(lp_player, RegionCircle(lv_placementTarget, 10.0), 5.0, false);
    Wait(4.0, c_timeGame);
    lv_placementTarget = UnitTypePlacementFromPoint("FenixDragoon", lp_player, lp_targetPoint, 500.0);
    lv_cooldown = PlayerGetCooldown(lp_player, lv_cooldownLink);
    libNtve_gf_PlayerRemoveCooldown(lp_player, lv_cooldownLink);
    UnitIssueOrder(libCOMI_gv_yY_GPCasterUnit[lp_player], OrderTargetingPoint(lp_cmd, lv_placementTarget), c_orderQueueReplace);
    PlayerAddCooldown(lp_player, lv_cooldownLink, lv_cooldown);
    return true;
}

void libCOMM_gf_CM_Fenix_VitalMatch (unit lp_hero) {
    // Variable Declarations
    int lv_i;
    int lv_player;
    int lv_suitIndex;

    // Automatic Variable Declarations
    string auto62920C5D_val;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_hero);

    // Implementation
    auto62920C5D_val = UnitGetType(lp_hero);
    if (auto62920C5D_val == "FenixCoop") {
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[1][lv_player], c_unitPropEnergy, UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent));
        if (true) {
            lv_suitIndex = 1;
            UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[1][lv_player], c_unitPropLife, (UnitGetPropertyFixed(lp_hero, c_unitPropLife, c_unitPropCurrent) + 1.0));
            UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[1][lv_player], c_unitPropShields, UnitGetPropertyFixed(lp_hero, c_unitPropShields, c_unitPropCurrent));
        }

        libCOMI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMM_gv_cM_Fenix_Suits[1][lv_player], UnitGetOwner(lp_hero), 1);
    }
    else if (auto62920C5D_val == "FenixDragoon") {
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[2][lv_player], c_unitPropEnergy, UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent));
        if (true) {
            lv_suitIndex = 2;
            UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[2][lv_player], c_unitPropLife, (UnitGetPropertyFixed(lp_hero, c_unitPropLife, c_unitPropCurrent) + 1.0));
            UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[2][lv_player], c_unitPropShields, UnitGetPropertyFixed(lp_hero, c_unitPropShields, c_unitPropCurrent));
        }

        libCOMI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMM_gv_cM_Fenix_Suits[2][lv_player], UnitGetOwner(lp_hero), 2);
    }
    else if (auto62920C5D_val == "FenixArbiter") {
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[3][lv_player], c_unitPropEnergy, UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent));
        if (true) {
            lv_suitIndex = 3;
            UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[3][lv_player], c_unitPropLife, (UnitGetPropertyFixed(lp_hero, c_unitPropLife, c_unitPropCurrent) + 1.0));
            UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[3][lv_player], c_unitPropShields, UnitGetPropertyFixed(lp_hero, c_unitPropShields, c_unitPropCurrent));
        }

        libCOMI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMM_gv_cM_Fenix_Suits[3][lv_player], UnitGetOwner(lp_hero), 3);
    }
    else {
    }
    if ((libCOMM_gv_cM_Fenix_SuicideLife[lv_player] > 0.0)) {
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[lv_suitIndex][lv_player], c_unitPropLife, libCOMM_gv_cM_Fenix_SuicideLife[lv_player]);
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[lv_suitIndex][lv_player], c_unitPropShields, libCOMM_gv_cM_Fenix_SuicideShield[lv_player]);
        libCOMM_gv_cM_Fenix_SuicideLife[lv_player] = 0.0;
        libCOMM_gv_cM_Fenix_SuicideLife[lv_player] = 0.0;
    }

}

void libCOMM_gf_CM_Fenix_SetActiveHeroUIState (unit lp_unit, bool lp_active) {
    // Variable Declarations
    int lv_heroUnitID;

    // Automatic Variable Declarations
    string auto1D42BFE9_val;

    // Variable Initialization

    // Implementation
    auto1D42BFE9_val = UnitGetType(lp_unit);
    if (auto1D42BFE9_val == "FenixCoop") {
        lv_heroUnitID = 1;
    }
    else if (auto1D42BFE9_val == "FenixDragoon") {
        lv_heroUnitID = 2;
    }
    else if (auto1D42BFE9_val == "FenixArbiter") {
        lv_heroUnitID = 3;
    }
    else {
        lv_heroUnitID = 0;
    }
    if ((lp_active == false)) {
        DialogControlSetAnimationState(libCOMI_gv_cU_GPCmdButtons[lv_heroUnitID][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
    }
    else if ((lp_active == true) && (lv_heroUnitID == 1)) {
        DialogControlSetAnimationState(libCOMI_gv_cU_GPCmdButtons[1][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "True");
        DialogControlSetAnimationState(libCOMI_gv_cU_GPCmdButtons[2][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
        DialogControlSetAnimationState(libCOMI_gv_cU_GPCmdButtons[3][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
    }
    else if ((lp_active == true) && (lv_heroUnitID == 2)) {
        DialogControlSetAnimationState(libCOMI_gv_cU_GPCmdButtons[2][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "True");
        DialogControlSetAnimationState(libCOMI_gv_cU_GPCmdButtons[1][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
        DialogControlSetAnimationState(libCOMI_gv_cU_GPCmdButtons[3][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
    }
    else if ((lp_active == true) && (lv_heroUnitID == 3)) {
        DialogControlSetAnimationState(libCOMI_gv_cU_GPCmdButtons[3][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "True");
        DialogControlSetAnimationState(libCOMI_gv_cU_GPCmdButtons[1][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
        DialogControlSetAnimationState(libCOMI_gv_cU_GPCmdButtons[2][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
    }
}

void libCOMM_gf_CM_Fenix_SetActiveHeroRally (unit lp_unit) {
    // Variable Declarations
    unit lv_ralliedUnit;

    // Automatic Variable Declarations
    unitgroup auto22FD5CA0_g;
    int auto22FD5CA0_u;

    // Variable Initialization

    // Implementation
    auto22FD5CA0_g = libCOMM_gv_cM_Fenix_RalliedGroup;
    auto22FD5CA0_u = UnitGroupCount(auto22FD5CA0_g, c_unitCountAll);
    for (;; auto22FD5CA0_u -= 1) {
        lv_ralliedUnit = UnitGroupUnitFromEnd(auto22FD5CA0_g, auto22FD5CA0_u);
        if (lv_ralliedUnit == null) { break; }
        UnitIssueOrder(lv_ralliedUnit, OrderTargetingUnit(AbilityCommand("Rally", 0), lp_unit), c_orderQueueAddToFront);
    }
}

void libCOMM_gf_CM_Fenix_AvengingProtocol (int lp_group, int lp_player, int lp_stacksToApply) {
    // Variable Declarations
    fixed lv_moveSpeedHastePerStack;
    fixed lv_attackSpeedHastePerStack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_moveSpeedHastePerStack = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "AvengingProtocolMoveSpeedDummy", "Amount", lp_player);
    lv_attackSpeedHastePerStack = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "AvengingProtocolAttackSpeedDummy", "Amount", lp_player);

    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "FenixChampionSwapBoost", c_techCountCompleteOnly) >= 1)) {
        libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[lp_group] += lp_stacksToApply;
        if ((libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[lp_group] > libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStackMaxCount[lp_group])) {
            libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[lp_group] = libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStackMaxCount[lp_group];
        }

        CatalogFieldValueModify(c_gameCatalogBehavior, libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[lp_group], "Modification.MoveSpeedMultiplier", lp_player, FixedToString((1.0 + (libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[lp_group] * lv_moveSpeedHastePerStack)), c_fixedPrecisionAny), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogBehavior, libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[lp_group], "Modification.AttackSpeedMultiplier", lp_player, FixedToString((1.0 + (libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[lp_group] * lv_attackSpeedHastePerStack)), c_fixedPrecisionAny), c_upgradeOperationSet);
        UnitBehaviorAdd(libCOMM_gv_cM_Fenix_ChampionUnit[lp_group][lp_player], libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[lp_group], libCOMM_gv_cM_Fenix_ChampionUnit[lp_group][lp_player], 1);
    }

}

void libCOMM_gf_CM_Fenix_UpdateNetworkValues (int lp_group, int lp_player) {
    // Variable Declarations
    int lv_supply;
    int lv_maxCount;
    int lv_stacksPerSupply;

    // Automatic Variable Declarations
    unitgroup autoE446CA17_g;
    int autoE446CA17_u;
    unit autoE446CA17_var;

    // Variable Initialization
    lv_maxCount = CatalogFieldValueGetAsInt(c_gameCatalogEffect, libCOMM_gv_cM_Fenix_ChampionNetworkMaxCountDummy[lp_group], "Amount", lp_player);
    lv_stacksPerSupply = CatalogFieldValueGetAsInt(c_gameCatalogEffect, libCOMM_gv_cM_Fenix_ChampionNetworkStacksPerSupplyDummy[lp_group], "Amount", lp_player);

    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "FenixNetworkedSuperiority", c_techCountCompleteOnly) >= 1)) {
        autoE446CA17_g = libCOMM_gv_cM_Fenix_ChampionVolunteerUnitGroup[lp_group][lp_player];
        autoE446CA17_u = UnitGroupCount(autoE446CA17_g, c_unitCountAll);
        for (;; autoE446CA17_u -= 1) {
            autoE446CA17_var = UnitGroupUnitFromEnd(autoE446CA17_g, autoE446CA17_u);
            if (autoE446CA17_var == null) { break; }
            lv_supply -= CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(autoE446CA17_var), "Food", lp_player);
        }
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCOMM_gv_cM_Fenix_ChampionNetworkUpgrades[lp_group], MinI((lv_supply * lv_stacksPerSupply), lv_maxCount));
    }

}

void libCOMM_gf_CM_Fenix_UpdateFenixChampionShellCountValues (int lp_group, int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_count = UnitGroupCount(libCOMM_gv_cM_Fenix_ChampionVolunteerUnitGroup[lp_group][lp_player], c_unitCountAlive);
    CatalogFieldValueSet(c_gameCatalogEffect, libCOMM_gv_cM_Fenix_ChampionShellCountEffects[lp_group], "Amount", lp_player, IntToString(lv_count));
}

trigger auto_libCOMM_gf_CM_GPReminderHorner_Trigger = null;
int auto_libCOMM_gf_CM_GPReminderHorner_lp_player;

void libCOMM_gf_CM_GPReminderHorner (int lp_player) {
    auto_libCOMM_gf_CM_GPReminderHorner_lp_player = lp_player;

    if (auto_libCOMM_gf_CM_GPReminderHorner_Trigger == null) {
        auto_libCOMM_gf_CM_GPReminderHorner_Trigger = TriggerCreate("auto_libCOMM_gf_CM_GPReminderHorner_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_GPReminderHorner_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_GPReminderHorner_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMM_gf_CM_GPReminderHorner_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOMI_gf_CU_GPHighlightButton(1, true, lp_player);
    if ((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("HornerAirFleetActivate", 0)) == true)) {
        libCOMI_gf_CU_GPHighlightButton(3, true, lp_player);
    }

    if ((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("HHSummonMercenarySpaceStation", 0)) == true)) {
        libCOMI_gf_CU_GPHighlightButton(4, true, lp_player);
    }

    return true;
}

trigger auto_libCOMM_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_Trigger = null;
int auto_libCOMM_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_lp_hornerPlayer;

void libCOMM_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer (int lp_hornerPlayer) {
    auto_libCOMM_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_lp_hornerPlayer = lp_hornerPlayer;

    if (auto_libCOMM_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_Trigger == null) {
        auto_libCOMM_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_Trigger = TriggerCreate("auto_libCOMM_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_hornerPlayer = auto_libCOMM_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_lp_hornerPlayer;

    // Variable Declarations
    int lv_locHornerPlayer;
    const int lv_reminderDelay = 720;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_locHornerPlayer = lp_hornerPlayer;
    Wait(lv_reminderDelay, c_timeGame);
    if ((libCOMM_gv_cM_HornerVOBomberBuilt == false)) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(lv_locHornerPlayer), SoundLink("HornerHan_BomberPlatformBuild", -1), PlayerGroupSingle(lv_locHornerPlayer));
    }

    return true;
}

trigger auto_libCOMM_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_Trigger = null;
int auto_libCOMM_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_lp_hornerPlayer;

void libCOMM_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer (int lp_hornerPlayer) {
    auto_libCOMM_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_lp_hornerPlayer = lp_hornerPlayer;

    if (auto_libCOMM_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_Trigger == null) {
        auto_libCOMM_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_Trigger = TriggerCreate("auto_libCOMM_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_hornerPlayer = auto_libCOMM_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_lp_hornerPlayer;

    // Variable Declarations
    int lv_locHornerPlayer;
    bool lv_belowStandardCap;
    bool lv_belowFinalCap;
    const fixed lv_c_StandardCapAmount = 5.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_belowStandardCap = true;
    lv_belowFinalCap = true;

    // Implementation
    lv_locHornerPlayer = lp_hornerPlayer;
    while (true) {
        Wait(5.0, c_timeGame);
        if ((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) < lv_c_StandardCapAmount)) {
            lv_belowStandardCap = true;
            continue;
        }
        else if ((lv_belowStandardCap == true) && (UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
                lv_belowStandardCap = false;
                libCOMI_gf_CM_CommanderVOSend(lv_locHornerPlayer, SoundLink("HornerHan_MagMine", -1), PlayerGroupSingle(lv_locHornerPlayer));
                continue;
            }

        }
        else if ((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountMax) <= (lv_c_StandardCapAmount+2.0))) {
            continue;
        }
        else if ((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) < UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountMax))) {
            lv_belowFinalCap = true;
            continue;
        }
        else if ((lv_belowFinalCap == true) && (UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountMax))) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountMax))) {
                lv_belowFinalCap = false;
                libCOMI_gf_CM_CommanderVOSend(lv_locHornerPlayer, SoundLink("HornerHan_MagMine", -1), PlayerGroupSingle(lv_locHornerPlayer));
            }

        }
    }
    return true;
}

trigger auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_Trigger = null;
int auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_player;
soundlink auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_vOSound;
string auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_cooldownLink;
unit auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_unit;
string auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_ability;

void libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, string lp_ability) {
    auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_player = lp_player;
    auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_vOSound = lp_vOSound;
    auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_cooldownLink = lp_cooldownLink;
    auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_unit = lp_unit;
    auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_ability = lp_ability;

    if (auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_Trigger == null) {
        auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_Trigger = TriggerCreate("auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_player;
    soundlink lp_vOSound = auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_vOSound;
    string lp_cooldownLink = auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_cooldownLink;
    unit lp_unit = auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_unit;
    string lp_ability = auto_libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_ability;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        while (!((libCOMM_gv_cM_HornerVOFleetOffCooldown == false) && ((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) > 20.0) || ((UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) == 0.0) && (UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) > 20.0))))) {
            Wait(1.0, c_timeGame);
        }
        while (!((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) && ((UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) || (UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) > 0.0)))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsAlive(lp_unit) == true)) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, lp_vOSound, PlayerGroupSingle(lp_player));
            libCOMM_gv_cM_HornerVOFleetOffCooldown = true;
        }

    }
    return true;
}

void libCOMM_gf_CM_Horner_ScrapResourceSetStack (unit lp_scrap, int lp_minerals, int lp_vespene) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_scrap, 62, IntToFixed(lp_minerals));
    UnitSetCustomValue(lp_scrap, 63, IntToFixed(lp_vespene));
    UnitSetInfoTip(lp_scrap, StringExternal("Param/Value/lib_COMM_9ACB1C72"));
    UnitSetInfoSubTip(lp_scrap, StringExternal("Param/Value/lib_COMM_725D3FC2"));
}

void libCOMM_gf_CM_HornerStatUpdate (int lp_player) {
    // Variable Declarations
    fixed lv_factionBonusLifeMulti;
    fixed lv_itBonusLifeMulti;
    fixed lv_factionBonusAtkSpeedMulti;
    fixed lv_itBonusAtkSpeedMulti;
    string lv_itInstanceFaction;
    string lv_itInstanceStat;
    string lv_itStatFaction;
    int lv_itStatUnitCount;
    string lv_itStatUnitType;
    fixed lv_itStatUnitTypeSupply;
    fixed lv_itStatUnitTypeScore;
    fixed lv_factionScore;
    string lv_itWeapons;
    int lv_factionMaxStacks;
    fixed lv_bonusMulti;
    unit lv_itUnit;
    fixed lv_itScore;

    // Automatic Variable Declarations
    string autoEECDCC06_userType;
    int autoEECDCC06_i;
    string auto14D034FC_userType;
    int auto14D034FC_i;
    unitgroup auto7B292938_g;
    int auto7B292938_u;
    string autoB085E4E3_userType;
    int autoB085E4E3_i;
    int auto8758A418_catalog;
    string auto8758A418_entry;
    string auto8758A418_field;
    string auto8758A418_scopeField;
    int auto8758A418_player;
    int auto8758A418_i;

    // Variable Initialization
    lv_itWeapons = "";
    lv_bonusMulti = ((100+libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, libCOMM_gv_cM_HornerStatBonus, "Amount", lp_player))/100);

    // Implementation
    autoEECDCC06_userType = libCOMM_gv_cM_HornerFactionUserType;
    autoEECDCC06_i = 1;
    for ( ; autoEECDCC06_i <= UserDataInstanceCount(autoEECDCC06_userType) ; autoEECDCC06_i += 1 ) {
        lv_itInstanceFaction = UserDataInstance(autoEECDCC06_userType, autoEECDCC06_i);
        lv_factionBonusLifeMulti = 0.0;
        lv_factionBonusAtkSpeedMulti = 0.0;
        lv_factionScore = 0.0;
        lv_factionMaxStacks = UserDataGetInt(libCOMM_gv_cM_HornerFactionUserType, lv_itInstanceFaction, "Max Stack", 1);
        lv_itBonusLifeMulti = UserDataGetFixed(libCOMM_gv_cM_HornerFactionUserType, lv_itInstanceFaction, "Bonus Life (%)", 1);
        lv_itBonusAtkSpeedMulti = UserDataGetFixed(libCOMM_gv_cM_HornerFactionUserType, lv_itInstanceFaction, "Bonus Attack Speed (%)", 1);
        auto14D034FC_userType = libCOMM_gv_cM_HornerStatUserType;
        auto14D034FC_i = 1;
        for ( ; auto14D034FC_i <= UserDataInstanceCount(auto14D034FC_userType) ; auto14D034FC_i += 1 ) {
            lv_itInstanceStat = UserDataInstance(auto14D034FC_userType, auto14D034FC_i);
            lv_itStatFaction = UserDataGetUserInstance(libCOMM_gv_cM_HornerStatUserType, lv_itInstanceStat, "Faction", 1);
            if ((lv_itStatFaction == lv_itInstanceFaction)) {
                lv_itStatUnitType = UserDataGetUnit(libCOMM_gv_cM_HornerStatUserType, lv_itInstanceStat, "Unit", 1);
                lv_itStatUnitTypeScore = 0.0;
                auto7B292938_g = UnitGroup(lv_itStatUnitType, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto7B292938_u = UnitGroupCount(auto7B292938_g, c_unitCountAll);
                for (;; auto7B292938_u -= 1) {
                    lv_itUnit = UnitGroupUnitFromEnd(auto7B292938_g, auto7B292938_u);
                    if (lv_itUnit == null) { break; }
                    lv_itScore = UnitGetPropertyFixed(lv_itUnit, c_unitPropSuppliesUsed, c_unitPropCurrent);
                    if ((lv_itScore == 0.0) && (UnitHasBehavior2(lv_itUnit, "HHMercStarportCargoInstalled") == true)) {
                        lv_itScore = 6.0;
                    }

                    lv_itStatUnitTypeScore += lv_itScore;
                }
                lv_factionScore += lv_itStatUnitTypeScore;
            }

        }
        if ((lv_itInstanceFaction == "Matt")) {
            libCOMM_gv_mattFactionSupply[lp_player] = lv_factionScore;
        }

        if ((lv_itInstanceFaction == "Mira")) {
            libCOMM_gv_miraFactionSupply[lp_player] = lv_factionScore;
        }

        lv_factionScore = MinF(lv_factionMaxStacks, lv_factionScore);
        lv_factionBonusLifeMulti = (lv_itBonusLifeMulti*lv_factionScore*lv_bonusMulti);
        lv_factionBonusAtkSpeedMulti = (lv_itBonusAtkSpeedMulti*lv_factionScore*lv_bonusMulti);
        if ((TechTreeUpgradeCount(lp_player, "HHSOBuff", c_techCountCompleteOnly) >= 1)) {
            autoB085E4E3_userType = libCOMM_gv_cM_HornerStatUserType;
            autoB085E4E3_i = 1;
            for ( ; autoB085E4E3_i <= UserDataInstanceCount(autoB085E4E3_userType) ; autoB085E4E3_i += 1 ) {
                lv_itInstanceStat = UserDataInstance(autoB085E4E3_userType, autoB085E4E3_i);
                lv_itStatFaction = UserDataGetUserInstance(libCOMM_gv_cM_HornerStatUserType, lv_itInstanceStat, "Faction", 1);
                if ((lv_itStatFaction != lv_itInstanceFaction)) {
                    lv_itStatUnitType = UserDataGetUnit(libCOMM_gv_cM_HornerStatUserType, lv_itInstanceStat, "Unit", 1);
                    if ((lv_itBonusLifeMulti != 0.0)) {
                        libCOMM_gf_CatalogFieldValueAdditiveBonus(c_gameCatalogUnit, lv_itStatUnitType, "LifeMax", lp_player, "MSO", lv_factionBonusLifeMulti, false);
                        libCOMM_gf_CatalogFieldValueAdditiveBonus(c_gameCatalogUnit, lv_itStatUnitType, "LifeStart", lp_player, "MSO", lv_factionBonusLifeMulti, false);
                    }

                    CatalogFieldValueModify(c_gameCatalogEffect, "HornerMSOHealthDisplayDummy", "Amount", lp_player, FixedToString(lv_factionBonusLifeMulti, 2), c_upgradeOperationSet);
                    if ((lv_itBonusAtkSpeedMulti != 0.0)) {
                        auto8758A418_catalog = c_gameCatalogUnit;
                        auto8758A418_entry = lv_itStatUnitType;
                        auto8758A418_field = "WeaponArray";
                        auto8758A418_scopeField = "Link";
                        auto8758A418_player = lp_player;
                        auto8758A418_i = 0;
                        for ( ; auto8758A418_i <= CatalogFieldValueCount(c_gameCatalogUnit,auto8758A418_entry,auto8758A418_field,auto8758A418_player)-1 ; auto8758A418_i += 1 ) {
                            lv_itWeapons = CatalogFieldValueGet(c_gameCatalogUnit,auto8758A418_entry,auto8758A418_field+"["+IntToString(auto8758A418_i)+"]."+auto8758A418_scopeField,auto8758A418_player);
                            libCOMM_gf_CatalogFieldValueAdditiveBonus(c_gameCatalogWeapon, lv_itWeapons, "Period", lp_player, "MSO", lv_factionBonusAtkSpeedMulti, true);
                        }
                        CatalogFieldValueModify(c_gameCatalogEffect, "HornerMSOAttackSpeedDisplayDummy", "Amount", lp_player, FixedToString(lv_factionBonusAtkSpeedMulti, c_fixedPrecisionAny), c_upgradeOperationSet);
                        if ((TechTreeUpgradeCount(lp_player, "HHWidowMineDeathBlossom", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "HHWidowMineBurrowedAttack", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, (20.0 * (1.0 - (0.01 * lv_factionBonusAtkSpeedMulti))));
                            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "HHWidowMineAnimationController", "Duration", lp_player, (20.0 * (1.0 - (0.01 * lv_factionBonusAtkSpeedMulti))));
                        }
                        else {
                            libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "HHWidowMineBurrowedAttack", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, (1.0 - (0.01 * lv_factionBonusAtkSpeedMulti)), c_upgradeOperationMultiply);
                            libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "HHWidowMineAnimationController", "Duration", lp_player, (1.0 - (0.01 * lv_factionBonusAtkSpeedMulti)), c_upgradeOperationMultiply);
                        }
                    }

                }

            }
        }

    }
}

void libCOMM_gf_CatalogFieldValueAdditiveBonus (int lp_catalog, string lp_entry, string lp_fieldPath, int lp_player, string lp_label, fixed lp_percentage, bool lp_fieldIsPeriod) {
    // Variable Declarations
    string lv_dataPath;
    fixed lv_oldDelta;
    fixed lv_defaultValue;
    fixed lv_newDelta;
    fixed lv_changed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dataPath = (libCOMM_gv_catalogAdditiveBonusPrefix + "_" + IntToString((lp_catalog)) + "_" + (lp_entry) + "_" + lp_label + "_" + (lp_fieldPath));
    lv_oldDelta = DataTableGetFixed(true, lv_dataPath);
    lv_defaultValue = libNtve_gf_CatalogFieldValueGetAsReal(lp_catalog, lp_entry, lp_fieldPath, c_playerAny);

    // Implementation
    if ((lv_defaultValue == 0.0)) {
        return ;
    }

    if ((lp_fieldIsPeriod == true)) {
        lv_newDelta = ((1.0 / ((1.0 / lv_defaultValue) * ((100+lp_percentage)/100))) - lv_defaultValue);
    }
    else {
        lv_newDelta = ((lv_defaultValue*lp_percentage)/100);
    }
    lv_changed = (lv_newDelta-lv_oldDelta);
    CatalogFieldValueModify(lp_catalog, lp_entry, lp_fieldPath, lp_player, FixedToString(lv_changed, c_fixedPrecisionAny), c_upgradeOperationAdd);
    DataTableSetFixed(true, lv_dataPath, lv_newDelta);
}

void libCOMM_gf_CM_Horner_BomberStatusCheck (int lp_player) {
    // Variable Declarations
    fixed lv_smallestCooldown;
    int lv_behaviorCount;

    // Automatic Variable Declarations
    unitgroup auto384813D0_g;
    int auto384813D0_u;
    unit auto384813D0_var;

    // Variable Initialization
    lv_smallestCooldown = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHBomberPlatformAreaBombTopBarDummyTimer", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player);

    // Implementation
    auto384813D0_g = libCOMM_gv_cM_Horner_BomberPlatforms[lp_player];
    auto384813D0_u = UnitGroupCount(auto384813D0_g, c_unitCountAll);
    for (;; auto384813D0_u -= 1) {
        auto384813D0_var = UnitGroupUnitFromEnd(auto384813D0_g, auto384813D0_u);
        if (auto384813D0_var == null) { break; }
        if ((UnitIsAlive(auto384813D0_var) == true)) {
            if ((UnitHasBehavior2(auto384813D0_var, "HHBomberDockCooldown") == true)) {
                lv_behaviorCount += 1;
                if ((UnitBehaviorDuration(auto384813D0_var, "HHBomberDockCooldown") < lv_smallestCooldown)) {
                    lv_smallestCooldown = UnitBehaviorDuration(auto384813D0_var, "HHBomberDockCooldown");
                }

            }

            if (((UnitMagazineCount(auto384813D0_var, "HHBomberPlatformHangar") == 1) && (UnitHasBehavior2(auto384813D0_var, "HHBomberPlatformAreaBombDisabler") == false) && (UnitHasBehavior2(auto384813D0_var, "HHBomberDockCooldown") == false))) {
                UnitGroupAdd(libCOMM_gv_cM_Horner_BomberPlatforms_Ready[lp_player], auto384813D0_var);
            }
            else {
                UnitGroupRemove(libCOMM_gv_cM_Horner_BomberPlatforms_Ready[lp_player], auto384813D0_var);
            }
        }
        else {
            UnitGroupRemove(libCOMM_gv_cM_Horner_BomberPlatforms[lp_player], auto384813D0_var);
            UnitGroupRemove(libCOMM_gv_cM_Horner_BomberPlatforms_Ready[lp_player], auto384813D0_var);
        }
    }
    libCOMM_gv_cM_Horner_BomberPlatforms_ReadyCount[lp_player] = UnitGroupCount(libCOMM_gv_cM_Horner_BomberPlatforms_Ready[lp_player], c_unitCountAlive);
    if (((libCOMM_gv_cM_Horner_BomberPlatforms_ReadyCount[lp_player] == 0) && (lv_smallestCooldown > 0.0) && (lv_behaviorCount > 0))) {
        UnitAbilityReset(libCOMI_gv_yY_GPCasterUnit[lp_player], AbilityCommand("HHBomberPlatformAreaBombTopBarDummyTimer", 0), c_spendLocationAbility);
        UnitAbilityAddCooldown(libCOMI_gv_yY_GPCasterUnit[lp_player], "HHBomberPlatformAreaBombTopBarDummyTimer", "Abil/HHBomberPlatformAreaBombTopBarDummyTimer", 60.0);
        UnitAbilityAddCooldown(libCOMI_gv_yY_GPCasterUnit[lp_player], "HHBomberPlatformAreaBombTopBarDummyTimer", "Abil/HHBomberPlatformAreaBombTopBarDummyTimer", (-1.0 * (60.0 - lv_smallestCooldown)));
        UnitBehaviorAdd(libCOMI_gv_yY_GPCasterUnit[lp_player], "HHBomberPlatformAreaBombTopBarDummyTimer", libCOMI_gv_yY_GPCasterUnit[lp_player], 1);
        UnitBehaviorSetDurationRemaining(libCOMI_gv_yY_GPCasterUnit[lp_player], "HHBomberPlatformAreaBombTopBarDummyTimer", lv_smallestCooldown);
    }
    else {
        UnitBehaviorRemove(libCOMI_gv_yY_GPCasterUnit[lp_player], "HHBomberPlatformAreaBombTopBarDummyTimer", 1);
    }
}

void libCOMM_gf_CC_AchievementToggleSuperChrono (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        TriggerEnable(libCOMM_gt_CC_ScoreKaraxChronoProduction, true);
    }
    else {
        TriggerEnable(libCOMM_gt_CC_ScoreKaraxChronoProduction, false);
    }
}

void libCOMM_gf_CM_MasteryKerriganArmyVespeneCostList3 (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKaraxUnitVital", c_techCountCompleteOnly);
    libCOMM_gf_CM_MasteryKaraxUnitVitalIncrease("ZealotPurifier", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKaraxUnitVitalIncrease("SentryPurifier", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKaraxUnitVitalIncrease("SentryPhasing", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKaraxUnitVitalIncrease("ImmortalAiur", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKaraxUnitVitalIncrease("Colossus", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKaraxUnitVitalIncrease("ColossusPurifier", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKaraxUnitVitalIncrease("PhoenixPurifier", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKaraxUnitVitalIncrease("Carrier", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKaraxUnitVitalIncrease("CarrierAiur", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKaraxUnitVitalIncrease("Interceptor", lp_player, lv_upgradeCount);
}

void libCOMM_gf_CM_MasteryKaraxUnitVitalIncrease (string lp_unitType, int lp_player, int lp_upgradeCount) {
    // Variable Declarations
    fixed lv_unitHealthOriginal;
    fixed lv_unitShieldsOriginal;
    fixed lv_UnitHealthAndShieldsIncreasePerPoint;
    int lv_unitHealthNew;
    int lv_UnitShieldsNew;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_UnitHealthAndShieldsIncreasePerPoint = 0.01;

    // Implementation
    lv_unitHealthOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "LifeMax", libCOMI_gv_vU_PLAYER_NEUTRAL));
    lv_unitHealthNew = FixedToInt(((1+IntToFixed(lp_upgradeCount) * lv_UnitHealthAndShieldsIncreasePerPoint) * lv_unitHealthOriginal));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "LifeMax", lp_player, IntToString(lv_unitHealthNew));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "LifeStart", lp_player, IntToString(lv_unitHealthNew));
    lv_unitShieldsOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "ShieldsMax", libCOMI_gv_vU_PLAYER_NEUTRAL));
    lv_UnitShieldsNew = FixedToInt(((1+IntToFixed(lp_upgradeCount) * lv_UnitHealthAndShieldsIncreasePerPoint) * lv_unitShieldsOriginal));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "ShieldsMax", lp_player, IntToString(lv_UnitShieldsNew));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "ShieldsStart", lp_player, IntToString(lv_UnitShieldsNew));
}

void libCOMM_gf_CM_KaraxSetRepairBeamLimit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KaraxRepairBeamLimit", CatalogFieldValueGetAsInt(c_gameCatalogEffect, "KaraxRepairBeamLimit", "Amount", lp_player));
}

void libCOMM_gf_ZerglingRespawnSetPrimaryHatchery (unit lp_hatchery) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_hatchery, "ZerglingRespawnPrimaryRemoveOthers", lp_hatchery);
    UnitBehaviorAdd(lp_hatchery, "ZerglingRespawnPrimary", lp_hatchery, 1);
    libCOMI_gv_cM_PrimaryTownHall[UnitGetOwner(lp_hatchery)] = lp_hatchery;
}

void libCOMM_gf_EnableDisableZerglingRespawn (bool lp_enableDisable) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto54DBE503_g;
    playergroup autoF6635167_g;

    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        autoF6635167_g = libCOMI_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoF6635167_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawn", 0), true);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnPrimary", 0), true);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnDeath", 0), true);
        }
        TriggerEnable(libCOMM_gt_CM_HatcheryPrimarySearch, true);
    }
    else {
        auto54DBE503_g = libCOMI_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto54DBE503_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawn", 0), false);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnPrimary", 0), false);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnDeath", 0), false);
        }
        TriggerEnable(libCOMM_gt_CM_HatcheryPrimarySearch, false);
    }
}

void libCOMM_gf_CM_MasteryKerriganResearchSpeedCost (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;
    fixed lv_costReduction;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKerriganResearchSpeedandCost", c_techCountCompleteOnly);
    lv_costReduction = ((175.0 * ((30.0 - lv_upgradeCount) + 20.0)) / 50.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    lv_costReduction = ((175.0 * ((30.0 - lv_upgradeCount) + 20.0)) / 50.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    lv_costReduction = ((175.0 * ((30.0 - lv_upgradeCount) + 20.0)) / 50.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
}

void libCOMM_gf_CM_MasteryKerriganArmyVespeneCostList (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKerriganArmyGasCost", c_techCountCompleteOnly);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("Overseer", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("OverseerSiegeMode", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("Hydralisk", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("HydraliskBurrowed", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("HydraliskLurker", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("HydraliskLurkerBurrowed", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("MutaliskBroodlord", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("BroodLord", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("Ultralisk", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("UltraliskBurrowed", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("HotSTorrasque", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("HotSTorrasqueBurrowed", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("TorrasqueCorpse", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("Lurker", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction("LurkerBurrowed", lp_player, lv_upgradeCount);
}

void libCOMM_gf_CM_MasteryKerriganArmyVespeneCostReduction (string lp_unitType, int lp_player, int lp_upgradeCount) {
    // Variable Declarations
    fixed lv_unitVespeneCostOriginal;
    fixed lv_UnitVespeneCostReductionPerPoint;
    fixed lv_unitVespeneCostReduction;
    int lv_UnitVespeneCostNew;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_UnitVespeneCostReductionPerPoint = 100.0;

    // Implementation
    lv_unitVespeneCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", libCOMI_gv_vU_PLAYER_NEUTRAL));
    lv_unitVespeneCostReduction = (IntToFixed(lp_upgradeCount) * lv_unitVespeneCostOriginal);
    lv_unitVespeneCostReduction = (lv_unitVespeneCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt((lv_unitVespeneCostOriginal - lv_unitVespeneCostReduction));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
}

int libCOMM_gf_CC_ZergHeroBonusLife (int lp_player, int lp_startLevel, int lp_endLevel) {
    // Variable Declarations
    int lv_totalLife;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int auto284A4111_ai;
    int auto284A4111_ae;
    int auto284A4111_al;

    // Variable Initialization

    // Implementation
    auto284A4111_ai = 1;
    auto284A4111_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (auto284A4111_ai < auto284A4111_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", auto284A4111_ai);
        auto284A4111_ai = auto284A4111_ai+1;
        auto284A4111_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCOMI_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        auto284A4111_al >= lp_startLevel && auto284A4111_al <= lp_endLevel ) {
            lv_totalLife += UserDataGetInt("X_PlayerLevels", lv_indexLevel, "Life", 1);
        }
    }
    return lv_totalLife;
}

int libCOMM_gf_CC_ZergHeroBonusEnergy (int lp_player, int lp_startLevel, int lp_endLevel) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_totalEnergy;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int auto71A9F988_ai;
    int auto71A9F988_ae;
    int auto71A9F988_al;

    // Variable Initialization

    // Implementation
    auto71A9F988_ai = 1;
    auto71A9F988_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (auto71A9F988_ai < auto71A9F988_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", auto71A9F988_ai);
        auto71A9F988_ai = auto71A9F988_ai+1;
        auto71A9F988_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCOMI_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        auto71A9F988_al >= lp_startLevel && auto71A9F988_al <= lp_endLevel ) {
            lv_totalEnergy += UserDataGetInt("X_PlayerLevels", lv_indexLevel, "Energy", 1);
        }
    }
    return lv_totalEnergy;
}

int libCOMM_gf_CC_ZergHeroBonusArmor (int lp_player, int lp_startLevel, int lp_endLevel) {
    // Variable Declarations
    int lv_totalArmor;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int auto250622BA_ai;
    int auto250622BA_ae;
    int auto250622BA_al;

    // Variable Initialization

    // Implementation
    auto250622BA_ai = 1;
    auto250622BA_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (auto250622BA_ai < auto250622BA_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", auto250622BA_ai);
        auto250622BA_ai = auto250622BA_ai+1;
        auto250622BA_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCOMI_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        auto250622BA_al >= lp_startLevel && auto250622BA_al <= lp_endLevel ) {
            lv_totalArmor += UserDataGetInt("X_PlayerLevels", lv_indexLevel, "Armor", 1);
        }
    }
    return lv_totalArmor;
}

int libCOMM_gf_CC_ZergHeroBonusDamage (int lp_player, int lp_startLevel, int lp_endLevel) {
    // Variable Declarations
    int lv_totalDamage;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int auto5DEDAA51_ai;
    int auto5DEDAA51_ae;
    int auto5DEDAA51_al;

    // Variable Initialization

    // Implementation
    auto5DEDAA51_ai = 1;
    auto5DEDAA51_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (auto5DEDAA51_ai < auto5DEDAA51_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", auto5DEDAA51_ai);
        auto5DEDAA51_ai = auto5DEDAA51_ai+1;
        auto5DEDAA51_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCOMI_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        auto5DEDAA51_al >= lp_startLevel && auto5DEDAA51_al <= lp_endLevel ) {
            lv_totalDamage += UserDataGetInt("X_PlayerLevels", lv_indexLevel, "Damage", 1);
        }
    }
    return lv_totalDamage;
}

void libCOMM_gf_CC_KerriganApplyModelUpgrades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerRace(lp_player) != "Zerg")) {
        return ;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostZerusSounds", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostLabSounds", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostZerus", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganGhostCosmetic", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganInfestedCosmetic", 1);
}

void libCOMM_gf_CC_ZergHeroApplyStatBonuses (int lp_player, int lp_level) {
    // Variable Declarations
    int lv_life;
    int lv_energy;
    int lv_damage;
    int lv_armor;
    int lv_index;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int autoF17E745D_ai;
    int autoF17E745D_ae;
    int autoF17E745D_al;

    // Variable Initialization

    // Implementation
    autoF17E745D_ai = 1;
    autoF17E745D_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (autoF17E745D_ai < autoF17E745D_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", autoF17E745D_ai);
        autoF17E745D_ai = autoF17E745D_ai+1;
        autoF17E745D_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCOMI_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        autoF17E745D_al >= 1 && autoF17E745D_al <= lp_level ) {
            lv_life += UserDataGetInt("X_PlayerLevels", lv_indexLevel, "Life", 1);
            lv_energy += UserDataGetInt("X_PlayerLevels", lv_indexLevel, "Energy", 1);
            lv_damage += UserDataGetInt("X_PlayerLevels", lv_indexLevel, "Damage", 1);
            lv_armor += UserDataGetInt("X_PlayerLevels", lv_indexLevel, "Armor", 1);
        }
    }
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeEnergy", ModI(lv_energy, 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeHealth", ModI(lv_life, 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeEnergy10", (lv_energy / 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeHealth10", (lv_life / 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeDamage", lv_damage);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeArmor", lv_armor);
}

string libCOMM_gf_CC_ChampResAbility (string lp_champion) {
    // Variable Declarations
    string lv_indexChampion;

    // Automatic Variable Declarations
    string auto8DF35CEB_val;

    // Variable Initialization

    // Implementation
    auto8DF35CEB_val = lp_champion;
    if (auto8DF35CEB_val == "Kerrigan") {
        return "Abil/KerriganRevive";
    }
    else {
    }
    return "";
}

void libCOMM_gf_hide_own_nydus (unit lp_unit) {
    // Automatic Variable Declarations
    playergroup auto71D264C2_g;
    int auto71D264C2_var;

    // Implementation
    auto71D264C2_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(lp_unit));
    auto71D264C2_var = -1;
    while (true) {
        auto71D264C2_var = PlayerGroupNextPlayer(auto71D264C2_g, auto71D264C2_var);
        if (auto71D264C2_var < 0) { break; }
        if ((auto71D264C2_var != libCOMI_gv_observer)) {
            TextExpressionSetToken("Param/Expression/lib_COMM_B9345D49", "A", IntToText(auto71D264C2_var));
            ActorSendAsText(libNtve_gf_MainActorofUnit(lp_unit), TextExpressionAssemble("Param/Expression/lib_COMM_B9345D49"));
        }

    }
}

void libCOMM_gf_hide_ally_nydus (unit lp_unit) {
    // Automatic Variable Declarations
    playergroup autoF7696DA6_g;
    int autoF7696DA6_var;

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMM_9014F171", "A", IntToText(libCOMI_gv_observer));
    ActorSendAsText(libNtve_gf_MainActorofUnit(lp_unit), TextExpressionAssemble("Param/Expression/lib_COMM_9014F171"));
    autoF7696DA6_g = PlayerGroupActive();
    autoF7696DA6_var = -1;
    while (true) {
        autoF7696DA6_var = PlayerGroupNextPlayer(autoF7696DA6_g, autoF7696DA6_var);
        if (autoF7696DA6_var < 0) { break; }
        if ((autoF7696DA6_var != UnitGetOwner(lp_unit))) {
            TextExpressionSetToken("Param/Expression/lib_COMM_D928DC39", "A", IntToText(autoF7696DA6_var));
            ActorSendAsText(libNtve_gf_MainActorofUnit(lp_unit), TextExpressionAssemble("Param/Expression/lib_COMM_D928DC39"));
        }

    }
}

void libCOMM_gf_CM_KerriganMalignantCreep () {
    // Variable Declarations
    int lv_itPlayer;
    int lv_totalPlayersLevel;
    int[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_playerLevel;
    string lv_entry;
    int lv_catalog;
    int lv_index;
    int lv_count;
    fixed lv_add;
    int lv_kerriganplayer;
    fixed lv_attackspeedmultiplier;
    fixed lv_liferegenrate;

    // Automatic Variable Declarations
    playergroup auto9C3E0206_g;
    int auto985CC714_ae;
    const int auto985CC714_ai = 1;
    playergroup auto9835F2CD_g;

    // Variable Initialization
    lv_catalog = c_gameCatalogUnit;
    lv_kerriganplayer = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Kerrigan", libCOMI_gf_GetAlliedCommandersPlayersCopy());
    lv_attackspeedmultiplier = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "KerriganMalignantCreepAttackSpeedDummy", "Amount", lv_kerriganplayer);
    lv_liferegenrate = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "KerriganMalignantCreepLifeRegenDummy", "Amount", lv_kerriganplayer);

    // Implementation
    auto9C3E0206_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto9C3E0206_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_playerLevel[lv_itPlayer] = TechTreeUpgradeCount(lv_itPlayer, libCOMM_gv_cM_TalentKerriganMalignantCreepUpgrade, c_techCountCompleteOnly);
        lv_totalPlayersLevel += lv_playerLevel[lv_itPlayer];
    }
    if ((lv_totalPlayersLevel <= 0)) {
        return ;
    }

    lv_count = CatalogEntryCount(lv_catalog);
    auto985CC714_ae = lv_count;
    lv_index = 1;
    for ( ; ( (auto985CC714_ai >= 0 && lv_index <= auto985CC714_ae) || (auto985CC714_ai < 0 && lv_index >= auto985CC714_ae) ) ; lv_index += auto985CC714_ai ) {
        lv_entry = CatalogEntryGet(lv_catalog, lv_index);
        if ((CatalogEntryIsDefault(lv_catalog, lv_entry) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagInvulnerable) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagNoDraw) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagDestructible) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagMissile) == false) && (UnitTypeTestAttribute(lv_entry, c_unitAttributeStructure) == false) && ((UnitTypeTestAttribute(lv_entry, c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(lv_entry, c_unitAttributeMechanical) == true) || (UnitTypeTestAttribute(lv_entry, c_unitAttributePsionic) == true)) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_entry, "PlaneArray[Ground]", c_playerAny) == "1")) {
            auto9835F2CD_g = PlayerGroupAll();
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(auto9835F2CD_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                if ((lv_playerLevel[lv_itPlayer] > 0)) {
                    CatalogFieldValueModify(c_gameCatalogUnit, lv_entry, "LifeRegenRateCreep", lv_itPlayer, FixedToString(lv_liferegenrate, c_fixedPrecisionAny), c_upgradeOperationAdd);
                    CatalogFieldValueModify(c_gameCatalogUnit, lv_entry, "AttackSpeedMultiplierCreep", lv_itPlayer, FixedToString(lv_attackspeedmultiplier, c_fixedPrecisionAny), c_upgradeOperationAdd);
                }

            }
        }

    }
}

trigger auto_libCOMM_gf_CM_AbilityTransmission_MengskReminders_Trigger = null;
int auto_libCOMM_gf_CM_AbilityTransmission_MengskReminders_lp_mengskPlayer;

void libCOMM_gf_CM_AbilityTransmission_MengskReminders (int lp_mengskPlayer) {
    auto_libCOMM_gf_CM_AbilityTransmission_MengskReminders_lp_mengskPlayer = lp_mengskPlayer;

    if (auto_libCOMM_gf_CM_AbilityTransmission_MengskReminders_Trigger == null) {
        auto_libCOMM_gf_CM_AbilityTransmission_MengskReminders_Trigger = TriggerCreate("auto_libCOMM_gf_CM_AbilityTransmission_MengskReminders_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_AbilityTransmission_MengskReminders_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_AbilityTransmission_MengskReminders_TriggerFunc (bool testConds, bool runActions) {
    int lp_mengskPlayer = auto_libCOMM_gf_CM_AbilityTransmission_MengskReminders_lp_mengskPlayer;

    // Variable Declarations
    fixed lv_trooperremindertime;
    fixed lv_eliteremindertime;
    fixed lv_artilleryreminder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trooperremindertime = (60 * 5);
    lv_eliteremindertime = (60 * 7);
    lv_artilleryreminder = (60 * 10);

    // Implementation
    while (!((GameGetMissionTime() >= lv_trooperremindertime))) {
        Wait(1.0, c_timeGame);
    }
    if ((libCOMM_gv_cM_MengskTrooperEquipped == false)) {
        libCOMI_gf_CM_CommanderVOSend(lp_mengskPlayer, SoundLink("MengskCommander_EquipTroopsReminder", -1), PlayerGroupSingle(lp_mengskPlayer));
    }

    while (!((GameGetMissionTime() >= lv_eliteremindertime))) {
        Wait(1.0, c_timeGame);
    }
    if ((libCOMM_gv_cM_MengskEliteBuilt == false)) {
        libCOMI_gf_CM_CommanderVOSend(lp_mengskPlayer, SoundLink("MengskCommander_TrainVeteranReminder", -1), PlayerGroupSingle(lp_mengskPlayer));
    }

    while (!((GameGetMissionTime() >= lv_artilleryreminder))) {
        Wait(1.0, c_timeGame);
    }
    if ((libCOMM_gv_cM_MengskArtilleryBuilt == false) && (libCOMI_gf_CC_CommanderLevel(lp_mengskPlayer, "Mengsk") >= 3)) {
        libCOMI_gf_CM_CommanderVOSend(lp_mengskPlayer, SoundLink("MengskCommander_BuildArtilleryReminder", -1), PlayerGroupSingle(lp_mengskPlayer));
    }

    return true;
}

void libCOMM_gf_CU_GPInitMengsk (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;
    text lv_styleClose;
    text lv_tooltipHeaderOpen;
    text lv_tooltipOpen;

    // Automatic Variable Declarations
    const int autoEC2A1AA3_ae = 4;
    const int autoEC2A1AA3_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;
    lv_styleClose = StringToText("</s>");
    lv_tooltipHeaderOpen = StringToText("<s val=\"@@@StandardTooltipHeader\">");
    lv_tooltipOpen = StringToText("<s val=\"StandardTooltipHalfSize\"><n/><n/></s><s val=\"@@@StandardTooltip\">");

    // Implementation
    libCOMI_gv_cU_GlobalCast2D[lp_player] = true;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "Coop_TopBar_Mengsk/MengskTopBar");
    libCOMI_gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCommandPanel, "MengskGlobalCommandPanel");
    libCOMI_gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeProgressBar, "EnergyProgressBar");
    libCOMI_gv_cU_GPEnergyBar[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "ImperialMandateContainer");
    libCOMM_gv_cU_GPMengskEnergyContainer[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "MightoftheEmpireContainer");
    libCOMM_gv_cU_GPMengskEnergyRegenRoyalGuardContainer[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "WillofthePeopleContainer");
    libCOMM_gv_cU_GPMengskEnergyRegenTrooperContainer[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoEC2A1AA3_ai >= 0 && lv_buttonIndex <= autoEC2A1AA3_ae) || (autoEC2A1AA3_ai < 0 && lv_buttonIndex >= autoEC2A1AA3_ae) ) ; lv_buttonIndex += autoEC2A1AA3_ai ) {
        DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
    }
    DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupSingle(lp_player), true);
    if ((TechTreeUpgradeCount(lp_player, "MasteryMengskStartingImperialMandate", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetDialogItemTooltip(libCOMM_gv_cU_GPMengskEnergyContainer[lp_player], (lv_tooltipHeaderOpen + StringExternal("UI/MengskTopBarEnergyName") + lv_styleClose + lv_tooltipOpen + StringExternal("UI/MengskTopBarEnergyDesc") + StringExternal("UI/MengskTopBarEnergyAddendum") + lv_styleClose), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libCOMM_gv_cU_GPMengskEnergyContainer[lp_player], (lv_tooltipHeaderOpen + StringExternal("UI/MengskTopBarEnergyName") + lv_styleClose + lv_tooltipOpen + StringExternal("UI/MengskTopBarEnergyDesc") + lv_styleClose), PlayerGroupAll());
    }
    if ((TechTreeUpgradeCount(lp_player, "MasteryMengskRoyalGuardImperialMandateRegeneration", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetDialogItemTooltip(libCOMM_gv_cU_GPMengskEnergyRegenRoyalGuardContainer[lp_player], (lv_tooltipHeaderOpen + StringExternal("UI/MengskTopBarEnergyRegenRoyalGuardName") + lv_styleClose + lv_tooltipOpen + StringExternal("UI/MengskTopBarEnergyRegenRoyalGuardDesc") + StringExternal("UI/MengskTopBarEnergyRegenRoyalGuardAddendum") + lv_styleClose), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libCOMM_gv_cU_GPMengskEnergyRegenRoyalGuardContainer[lp_player], (lv_tooltipHeaderOpen + StringExternal("UI/MengskTopBarEnergyRegenRoyalGuardName") + lv_styleClose + lv_tooltipOpen + StringExternal("UI/MengskTopBarEnergyRegenRoyalGuardDesc") + lv_styleClose), PlayerGroupAll());
    }
    if ((TechTreeUpgradeCount(lp_player, "MasteryMengskTrooperImperialMandateRegeneration", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetDialogItemTooltip(libCOMM_gv_cU_GPMengskEnergyRegenTrooperContainer[lp_player], (lv_tooltipHeaderOpen + StringExternal("UI/MengskTopBarEnergyRegenTrooperName") + lv_styleClose + lv_tooltipOpen + StringExternal("UI/MengskTopBarEnergyRegenTrooperDesc") + StringExternal("UI/MengskTopBarEnergyRegenTrooperAddendum") + lv_styleClose), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libCOMM_gv_cU_GPMengskEnergyRegenTrooperContainer[lp_player], (lv_tooltipHeaderOpen + StringExternal("UI/MengskTopBarEnergyRegenTrooperName") + lv_styleClose + lv_tooltipOpen + StringExternal("UI/MengskTopBarEnergyRegenTrooperDesc") + lv_styleClose), PlayerGroupAll());
    }
    libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(lp_player);
    libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(lp_player);
}

void libCOMM_gf_CM_MasteryMengskRoyalGuardCostList (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryMengskRoyalGuardCost", c_techCountCompleteOnly);
    libCOMM_gf_CM_MasteryMengskRoyalGuardCostReduction("MarauderMengsk", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryMengskRoyalGuardCostReduction("GhostMengsk", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryMengskRoyalGuardCostReduction("SiegeTankMengsk", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryMengskRoyalGuardCostReduction("SiegeTankMengskSieged", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryMengskRoyalGuardCostReduction("ThorMengsk", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryMengskRoyalGuardCostReduction("ThorMengskSieged", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryMengskRoyalGuardCostReduction("VikingMengskAssault", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryMengskRoyalGuardCostReduction("VikingMengskFighter", lp_player, lv_upgradeCount);
    libCOMM_gf_CM_MasteryMengskRoyalGuardCostReduction("BattlecruiserMengsk", lp_player, lv_upgradeCount);
}

void libCOMM_gf_CM_MasteryMengskRoyalGuardCostReduction (string lp_unitType, int lp_player, int lp_upgradeCount) {
    // Variable Declarations
    fixed lv_unitMineralCostOriginal;
    fixed lv_unitVespeneCostOriginal;
    fixed lv_UnitVespeneCostReductionPerPoint2;
    fixed lv_UnitVespeneCostReductionPerPoint;
    fixed lv_unitMineralCostReduction;
    fixed lv_unitVespeneCostReduction;
    int lv_UnitVespeneCostNew2;
    int lv_UnitVespeneCostNew;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_UnitVespeneCostReductionPerPoint2 = 150.0;
    lv_UnitVespeneCostReductionPerPoint = 150.0;

    // Implementation
    lv_unitMineralCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(0) + "]", libCOMI_gv_vU_PLAYER_NEUTRAL));
    lv_unitMineralCostReduction = (IntToFixed(lp_upgradeCount) * lv_unitMineralCostOriginal);
    lv_unitMineralCostReduction = (lv_unitMineralCostReduction / lv_UnitVespeneCostReductionPerPoint2);
    lv_UnitVespeneCostNew2 = FixedToInt((lv_unitMineralCostOriginal - lv_unitMineralCostReduction));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(0) + "]", lp_player, IntToString(lv_UnitVespeneCostNew2));
    lv_unitVespeneCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", libCOMI_gv_vU_PLAYER_NEUTRAL));
    lv_unitVespeneCostReduction = (IntToFixed(lp_upgradeCount) * lv_unitVespeneCostOriginal);
    lv_unitVespeneCostReduction = (lv_unitVespeneCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt((lv_unitVespeneCostOriginal - lv_unitVespeneCostReduction));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
}

void libCOMM_gf_CM_Mengsk_CheckRoyalGuardSupply () {
    // Variable Declarations
    unit lv_veteran;
    fixed lv_maxedsupply;
    int lv_mengskplayer;

    // Automatic Variable Declarations
    unitgroup autoD9763420_g;
    int autoD9763420_u;

    // Variable Initialization
    lv_mengskplayer = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Mengsk", libCOMI_gf_GetAlliedCommandersPlayersCopy());

    // Implementation
    if (((libCOMM_gv_cM_Mengsk_CheckRoyalGuardSupply == false) || ((PlayerDifficulty(lv_mengskplayer) >= 3) == false) || (PlayerCommanderLevel(lv_mengskplayer) < 15))) {
        return ;
    }

    autoD9763420_g = libCOMM_gv_cM_Mengsk_VeteranUnits;
    autoD9763420_u = UnitGroupCount(autoD9763420_g, c_unitCountAll);
    for (;; autoD9763420_u -= 1) {
        lv_veteran = UnitGroupUnitFromEnd(autoD9763420_g, autoD9763420_u);
        if (lv_veteran == null) { break; }
        if ((UnitXPGetCurrentLevel(lv_veteran, null) >= UnitXPGetNumLevels(lv_veteran, null))) {
            lv_maxedsupply += UnitGetPropertyFixed(lv_veteran, c_unitPropSuppliesUsed, c_unitPropNormal);
        }

    }
    if ((lv_maxedsupply >= 50.0)) {
        AchievementAward(lv_mengskplayer, "CommanderMengskRoyalGuardSupply");
        libCOMM_gv_cM_Mengsk_CheckRoyalGuardSupply = false;
    }

}

fixed libCOMM_gf_CM_Mengsk_SupplyLevel (unitgroup lp_unitGroup) {
    // Variable Declarations
    unit lv_unititer;
    fixed lv_totalproperty;

    // Automatic Variable Declarations
    unitgroup auto9A2DD986_g;
    int auto9A2DD986_u;

    // Variable Initialization

    // Implementation
    auto9A2DD986_g = lp_unitGroup;
    auto9A2DD986_u = UnitGroupCount(auto9A2DD986_g, c_unitCountAll);
    for (;; auto9A2DD986_u -= 1) {
        lv_unititer = UnitGroupUnitFromEnd(auto9A2DD986_g, auto9A2DD986_u);
        if (lv_unititer == null) { break; }
        if ((UnitIsAlive(lv_unititer) == true)) {
            lv_totalproperty += (UnitGetPropertyFixed(lv_unititer, c_unitPropSuppliesUsed, c_unitPropCurrent) *  (1+UnitXPGetCurrentLevel(lv_unititer, null)));
        }

    }
    return lv_totalproperty;
}

void libCOMM_gf_CM_Mengsk_EnergyChanged (int lp_mengskPlayer) {
    // Variable Declarations
    int lv_energyperzergcalldownlevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_energyperzergcalldownlevel = 25;

    // Implementation
    libNtve_gf_SetDialogItemMaximumValue(libCOMI_gv_cU_GPEnergyBar[lp_mengskPlayer], UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_mengskPlayer], c_unitPropEnergyMax, c_unitPropCurrent), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(libCOMI_gv_cU_GPEnergyBar[lp_mengskPlayer], UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_mengskPlayer], c_unitPropEnergy, c_unitPropCurrent), PlayerGroupAll());
    libNtve_gf_SetUpgradeLevelForPlayer(lp_mengskPlayer, "ZergMengskCalldownLevel", (FixedToInt(UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_mengskPlayer], c_unitPropEnergy, c_unitPropCurrent)) / lv_energyperzergcalldownlevel));
}

trigger auto_libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger = null;
unit auto_libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster;

void libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegen (unit lp_mengskGlobalCaster) {
    auto_libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster = lp_mengskGlobalCaster;

    if (auto_libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger == null) {
        auto_libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger = TriggerCreate("auto_libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegen_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegen_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mengskGlobalCaster = auto_libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster;

    // Variable Declarations
    unit lv_veteran;
    fixed lv_baseenergyregen;
    fixed lv_bonusenergyregenfactor;
    fixed lv_totalenergyregen;
    fixed lv_globalcasterenergy;
    int lv_lastseenmoraleindex;
    int lv_moraleindex;
    bool lv_moralecapped;
    fixed lv_moralecappedremindercooldown;
    timer lv_moralecappedreminder;
    int lv_energyperzergcalldownlevel;
    int lv_mengskplayer;

    // Automatic Variable Declarations
    int autoEF909E4B_val;

    // Variable Initialization
    lv_baseenergyregen = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "CoopCasterMengsk", "EnergyRegenRate", c_playerAny);
    lv_bonusenergyregenfactor = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "TopbarMengskBonusRegenFactorDummy", "Amount", UnitGetOwner(lp_mengskGlobalCaster));
    lv_moralecappedremindercooldown = 120.0;
    lv_moralecappedreminder = TimerCreate();
    lv_energyperzergcalldownlevel = 25;
    lv_mengskplayer = UnitGetOwner(lp_mengskGlobalCaster);

    // Implementation
    while (true) {
        lv_totalenergyregen = MaxF((lv_baseenergyregen + (libCOMM_gv_cM_Mengsk_EnergyRegenRoyalGuard + libCOMM_gv_cM_Mengsk_EnergyRegenTrooper)), 0.01);
        Wait((lv_bonusenergyregenfactor / lv_totalenergyregen), c_timeGame);
        lv_globalcasterenergy = RoundI((UnitGetPropertyFixed(lp_mengskGlobalCaster, c_unitPropEnergy, c_unitPropCurrent) + 1));
        UnitSetPropertyFixed(lp_mengskGlobalCaster, c_unitPropEnergy, lv_globalcasterenergy);
        libCOMM_gf_CM_Mengsk_EnergyChanged(lv_mengskplayer);
        lv_moraleindex = ((FixedToInt(lv_globalcasterenergy) / 34) + 1);
        if ((lv_lastseenmoraleindex != lv_moraleindex)) {
            autoEF909E4B_val = lv_moraleindex;
            if (autoEF909E4B_val == 1) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack_MoraleLow");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What_MoraleLow");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes_MoraleLow");
            }
            else if (autoEF909E4B_val == 2) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes");
            }
            else if (autoEF909E4B_val == 3) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack_MoraleHigh");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What_MoraleHigh");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes_MoraleHigh");
            }
            else {
            }
        }

        lv_lastseenmoraleindex = lv_moraleindex;
        if ((lv_globalcasterenergy >= 100.0)) {
            if ((lv_moralecapped == false) && (TimerGetRemaining(lv_moralecappedreminder) <= 0.0)) {
                libCOMI_gf_CM_CommanderVOSend(lv_mengskplayer, SoundLink("MengskCommander_PublicPerceptionCapped", -1), PlayerGroupSingle(lv_mengskplayer));
                TimerStart(lv_moralecappedreminder, lv_moralecappedremindercooldown, false, c_timeReal);
            }

            lv_moralecapped = true;
        }
        else {
            lv_moralecapped = false;
        }
    }
    return true;
}

void libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard (int lp_mengskPlayer) {
    // Variable Declarations
    fixed lv_imperialsupportperroyalguardsupplylevel;
    fixed lv_energyregenperroyalguardsupplylevel;
    fixed lv_roundeddisplay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_imperialsupportperroyalguardsupplylevel = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "RoyalGuardMengskTopbarRegenDummy", "Amount", lp_mengskPlayer);
    lv_energyregenperroyalguardsupplylevel = (lv_imperialsupportperroyalguardsupplylevel * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryMengskRoyalGuardImperialMandateRegenerationFactorDummy", "Amount", lp_mengskPlayer));

    // Implementation
    if ((libCOMI_gf_CC_CommanderLevel(lp_mengskPlayer, "Mengsk") >= 5)) {
        libCOMM_gv_cM_Mengsk_EnergyRegenRoyalGuard = (lv_energyregenperroyalguardsupplylevel * libCOMM_gf_CM_Mengsk_SupplyLevel(libCOMM_gv_cM_Mengsk_VeteranUnits));
        lv_roundeddisplay = Round(libCOMM_gv_cM_Mengsk_EnergyRegenRoyalGuard);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "MengskTopBarEnergyRegenRoyalGuardDummy", "Amount", lp_mengskPlayer, lv_roundeddisplay);
    }
    else {
        lv_roundeddisplay = 0.0;
    }
    DialogControlHookup(libCOMM_gv_cU_GPMengskEnergyRegenRoyalGuardContainer[lp_mengskPlayer], c_triggerControlTypeLabel, "Value");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FixedToText(lv_roundeddisplay, 0), PlayerGroupAll());
}

void libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper (int lp_mengskPlayer) {
    // Variable Declarations
    fixed lv_imperialsupportpertrooper;
    fixed lv_energyregenperpropagandaunit;
    fixed lv_roundeddisplay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_imperialsupportpertrooper = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "PropagandaMengskTopbarRegenDummy", "Amount", lp_mengskPlayer);
    lv_energyregenperpropagandaunit = (lv_imperialsupportpertrooper * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryMengskTrooperImperialMandateRegenerationFactorDummy", "Amount", lp_mengskPlayer));

    // Implementation
    if ((libCOMI_gf_CC_CommanderLevel(lp_mengskPlayer, "Mengsk") >= 5)) {
        libCOMM_gv_cM_Mengsk_EnergyRegenTrooper = (lv_energyregenperpropagandaunit * UnitGroupCount(libCOMM_gv_cM_Mengsk_PropagandaUnits, c_unitCountAlive));
        lv_roundeddisplay = Round(libCOMM_gv_cM_Mengsk_EnergyRegenTrooper);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "MengskTopBarEnergyRegenTrooperDummy", "Amount", lp_mengskPlayer, lv_roundeddisplay);
    }
    else {
        lv_roundeddisplay = 0.0;
    }
    DialogControlHookup(libCOMM_gv_cU_GPMengskEnergyRegenTrooperContainer[lp_mengskPlayer], c_triggerControlTypeLabel, "Value");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FixedToText(lv_roundeddisplay, 0), PlayerGroupAll());
}

void libCOMM_gf_CM_Mengsk_ForceMorphTrooper (unit lp_trooper, unit lp_pickup, string lp_morphEffect, string lp_morphBehavior, string lp_actorSignal) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_trooper, lp_morphEffect, lp_trooper);
    UnitBehaviorAdd(lp_trooper, lp_morphBehavior, lp_trooper, 1);
    UnitKill(lp_pickup);
    UnitGroupRemove(libCOMM_gv_cM_Mengsk_WeaponPickerUppers, lp_trooper);
    libNtve_gf_SendActorMessageToUnit(lp_trooper, "Signal ClearWeapon");
    libNtve_gf_SendActorMessageToUnit(lp_trooper, (("Signal " + lp_actorSignal)));
    AchievementTermQuantityAdd(UnitGetOwner(lp_trooper), "CommanderMengskWeaponPickup", 1);
}

trigger auto_libCOMM_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_Trigger = null;
int auto_libCOMM_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_lp_novaPlayer;

void libCOMM_gf_CM_AbilityTransmissionNovaNukeReadyActionVer (int lp_novaPlayer) {
    auto_libCOMM_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_lp_novaPlayer = lp_novaPlayer;

    if (auto_libCOMM_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_Trigger == null) {
        auto_libCOMM_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_Trigger = TriggerCreate("auto_libCOMM_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_novaPlayer = auto_libCOMM_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_lp_novaPlayer;

    // Variable Declarations
    int lv_locNovaPlayer;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_locNovaPlayer = lp_novaPlayer;
    lv_heroUnit = libCOMI_gf_GetHeroUnitBad(lp_novaPlayer, "NovaCoop");

    // Implementation
    if ((TechTreeAbilityIsAllowed(lp_novaPlayer, AbilityCommand("NovaCoopCasterNuke", 0)) == true)) {
        return true;
    }

    while (true) {
        while (!((UnitAbilityChargeInfo(lv_heroUnit, AbilityCommand("NovaCoopCasterNuke", 0), c_unitAbilChargeCountLeft) <= 0.0))) {
            Wait(1.0, c_timeGame);
        }
        while (!((UnitAbilityChargeInfo(lv_heroUnit, AbilityCommand("NovaCoopCasterNuke", 0), c_unitAbilChargeCountLeft) >= 1.0))) {
            Wait(1.0, c_timeGame);
        }
        if (((lv_heroUnit == null) || (UnitIsAlive(lv_heroUnit) == true))) {
            libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(lv_locNovaPlayer), SoundLink("NovaCommander_NukeReady", -1), PlayerGroupSingle(lv_locNovaPlayer));
        }

    }
    return true;
}

text libCOMM_gf_CC_StoryArmyUnitUnitType2 (string lp_unitType) {
    // Variable Declarations
    int lv_i;
    bool lv_matchFound;
    text lv_returnText;

    // Automatic Variable Declarations
    int auto5B2385B5_ae;
    const int auto5B2385B5_ai = 1;

    // Variable Initialization

    // Implementation
    auto5B2385B5_ae = UserDataInstanceCount("XAC_NovaUnitRanks");
    lv_i = 1;
    for ( ; ( (auto5B2385B5_ai >= 0 && lv_i <= auto5B2385B5_ae) || (auto5B2385B5_ai < 0 && lv_i >= auto5B2385B5_ae) ) ; lv_i += auto5B2385B5_ai ) {
        if ((lp_unitType == UserDataGetGameLink("XAC_NovaUnitRanks", UserDataInstance("XAC_NovaUnitRanks", lv_i), "RankUnitType", 1))) {
            return UserDataGetText("XAC_NovaUnitRanks", UserDataInstance("XAC_NovaUnitRanks", lv_i), "Rank", 1);
            return null;
        }

    }
    return lv_returnText;
}

text libCOMM_gf_CC_StoryArmyUnitUnitType (int lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("XAC_NovaUnitNames", UserDataInstance("XAC_NovaUnitNames", lp_armyUnit), "Name", 1);
}

void libCOMM_gf_NovaUnitNames_KillUpdateText (unit lp_updatingUnit, int lp_iD) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMM_18E4BC0B", "Rank", libCOMM_gf_CC_StoryArmyUnitUnitType2(UnitGetType(lp_updatingUnit)));
    TextExpressionSetToken("Param/Expression/lib_COMM_18E4BC0B", "NameVar", libCOMM_gv_cM_NovaUnitName_Text[lp_iD]);
    TextExpressionSetToken("Param/Expression/lib_COMM_18E4BC0B", "Kills", IntToText(libNtve_gf_UnitGetPropertyKills(lp_updatingUnit, c_unitPropCurrent)));
    UnitSetInfoText2(lp_updatingUnit, TextExpressionAssemble("Param/Expression/lib_COMM_18E4BC0B"));
}

void libCOMM_gf_CM_Nova_IterateExistingBuildings (int lp_novaPlayer) {
    // Variable Declarations
    unit lv_building;

    // Automatic Variable Declarations
    unitgroup auto7AB8AB3A_g;
    int auto7AB8AB3A_u;
    unitgroup autoA2458685_g;
    int autoA2458685_u;
    unitgroup auto0D226B14_g;
    int auto0D226B14_u;

    // Variable Initialization

    // Implementation
    auto7AB8AB3A_g = UnitGroup("Barracks", lp_novaPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto7AB8AB3A_u = UnitGroupCount(auto7AB8AB3A_g, c_unitCountAll);
    for (;; auto7AB8AB3A_u -= 1) {
        lv_building = UnitGroupUnitFromEnd(auto7AB8AB3A_g, auto7AB8AB3A_u);
        if (lv_building == null) { break; }
        libCOMM_gf_CM_PrestigeNova_SpecializeUnitCharges(UnitGetType(lv_building), lp_novaPlayer);
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(0) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(0) + "].Charge.CountMax", lp_novaPlayer), "BarracksTrainNovaMarine", lp_novaPlayer);
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(1) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(1) + "].Charge.CountMax", lp_novaPlayer), "BarracksTrainMarauderNova", lp_novaPlayer);
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(2) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(2) + "].Charge.CountMax", lp_novaPlayer), "BarracksTrainGhostNova", lp_novaPlayer);
        libCOMM_gv_novaBarrackBuilt[lp_novaPlayer] = 1;
    }
    autoA2458685_g = UnitGroup("Factory", lp_novaPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoA2458685_u = UnitGroupCount(autoA2458685_g, c_unitCountAll);
    for (;; autoA2458685_u -= 1) {
        lv_building = UnitGroupUnitFromEnd(autoA2458685_g, autoA2458685_u);
        if (lv_building == null) { break; }
        libCOMM_gf_CM_PrestigeNova_SpecializeUnitCharges(UnitGetType(lv_building), lp_novaPlayer);
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(0) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(0) + "].Charge.CountMax", lp_novaPlayer), "FactoryTrainGoliathNova", lp_novaPlayer);
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(1) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(1) + "].Charge.CountMax", lp_novaPlayer), "FactoryTrainSiegeTankNova", lp_novaPlayer);
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(2) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(2) + "].Charge.CountMax", lp_novaPlayer), "FactoryTrainHellbatNova", lp_novaPlayer);
        libCOMM_gv_novaBarrackBuilt[lp_novaPlayer] = 1;
    }
    auto0D226B14_g = UnitGroup("Starport", lp_novaPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto0D226B14_u = UnitGroupCount(auto0D226B14_g, c_unitCountAll);
    for (;; auto0D226B14_u -= 1) {
        lv_building = UnitGroupUnitFromEnd(auto0D226B14_g, auto0D226B14_u);
        if (lv_building == null) { break; }
        libCOMM_gf_CM_PrestigeNova_SpecializeUnitCharges(UnitGetType(lv_building), lp_novaPlayer);
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(0) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(0) + "].Charge.CountMax", lp_novaPlayer), "StarportTrainBansheeNova", lp_novaPlayer);
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(1) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(1) + "].Charge.CountMax", lp_novaPlayer), "StarportTrainRavenNova", lp_novaPlayer);
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(2) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(2) + "].Charge.CountMax", lp_novaPlayer), "StarportTrainLiberatorNova", lp_novaPlayer);
        libCOMM_gv_novaBarrackBuilt[lp_novaPlayer] = 1;
    }
}

void libCOMM_gf_CM_ModifyCooldown (fixed lp_maxRegenTime, fixed lp_maxChargeCount, string lp_cooldownName, int lp_player) {
    // Variable Declarations
    fixed lv_currentRegenTime;
    fixed lv_currentChargesUsed;
    fixed lv_intendedChargesUsed;
    fixed lv_intendedRegenTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentRegenTime = PlayerGetChargeRegen(lp_player, lp_cooldownName);
    lv_currentChargesUsed = PlayerGetChargeUsed(lp_player, lp_cooldownName);
    lv_intendedChargesUsed = (lp_maxChargeCount - lv_currentChargesUsed - 1.0);
    lv_intendedRegenTime = (lp_maxRegenTime - lv_currentRegenTime);

    // Implementation
    PlayerAddChargeRegenRemaining(lp_player, lp_cooldownName, lv_intendedRegenTime);
    PlayerAddChargeUsed(lp_player, lp_cooldownName, lv_intendedChargesUsed);
}

void libCOMM_gf_CM_PrestigeNova_SpecializeUnitCharges (string lp_unitType, int lp_novaPlayer) {
    // Automatic Variable Declarations
    string autoE8F3BEAB_val;

    // Implementation
    if (((libCOMI_gf_CC_PlayerActivePrestigeInstance(lp_novaPlayer) != "CommanderPrestigeNovaBio") || (TechTreeUpgradeCount(lp_novaPlayer, "CommanderPrestigeNovaBioBarracksFirst", c_techCountCompleteOnly) > 0) || (TechTreeUpgradeCount(lp_novaPlayer, "CommanderPrestigeNovaBioFactoryFirst", c_techCountCompleteOnly) > 0) || (TechTreeUpgradeCount(lp_novaPlayer, "CommanderPrestigeNovaBioStarportFirst", c_techCountCompleteOnly) > 0))) {
        return ;
    }

    autoE8F3BEAB_val = lp_unitType;
    if (autoE8F3BEAB_val == "Barracks") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_novaPlayer, "CommanderPrestigeNovaBioBarracksFirst", 1);
    }
    else if (autoE8F3BEAB_val == "Factory") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_novaPlayer, "CommanderPrestigeNovaBioFactoryFirst", 1);
    }
    else if (autoE8F3BEAB_val == "Starport") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_novaPlayer, "CommanderPrestigeNovaBioStarportFirst", 1);
    }
    else {
    }
}

trigger auto_libCOMM_gf_CM_GPReminderRaynor_Trigger = null;
int auto_libCOMM_gf_CM_GPReminderRaynor_lp_player;

void libCOMM_gf_CM_GPReminderRaynor (int lp_player) {
    auto_libCOMM_gf_CM_GPReminderRaynor_lp_player = lp_player;

    if (auto_libCOMM_gf_CM_GPReminderRaynor_Trigger == null) {
        auto_libCOMM_gf_CM_GPReminderRaynor_Trigger = TriggerCreate("auto_libCOMM_gf_CM_GPReminderRaynor_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_GPReminderRaynor_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_GPReminderRaynor_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMM_gf_CM_GPReminderRaynor_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOMI_gf_CU_GPHighlightButton(1, true, lp_player);
    libCOMI_gf_CU_GPHighlightButton(2, true, lp_player);
    return true;
}

void libCOMM_gf_CM_PrestigeRaynor_AirSupplySetBonus (int lp_raynorPlayer) {
    // Variable Declarations
    unit lv_supplyunit;
    fixed lv_supply;

    // Automatic Variable Declarations
    unitgroup auto5334F442_g;
    int auto5334F442_u;

    // Variable Initialization

    // Implementation
    auto5334F442_g = libCOMM_gv_cM_PrestigeRaynor_AirUnits;
    auto5334F442_u = UnitGroupCount(auto5334F442_g, c_unitCountAll);
    for (;; auto5334F442_u -= 1) {
        lv_supplyunit = UnitGroupUnitFromEnd(auto5334F442_g, auto5334F442_u);
        if (lv_supplyunit == null) { break; }
        lv_supply += UnitGetPropertyFixed(lv_supplyunit, c_unitPropSuppliesUsed, c_unitPropCurrent);
    }
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "CommanderPrestigeRaynorAir", "Modification.RateMultiplierArray[" + IntToString(1) + "]", lp_raynorPlayer, (1 + (lv_supply / 100)));
}

void libCOMM_gf_CM_RaynorUpgradeResearchCost (int lp_player, int lp_level) {
    // Variable Declarations
    fixed lv_changedFactor;
    const string lv_upgrade = "MasteryRaynorResearchCost";
    int lv_researchCount;
    int lv_itResearchIndex;
    string lv_itResearch;
    int lv_abilCmdCount;
    const int lv_resourceTypeCount = 4;
    int lv_itResearchCmd;
    int lv_itResourceType;
    fixed lv_default;

    // Automatic Variable Declarations
    int autoB1238110_ae;
    const int autoB1238110_ai = 1;
    int auto6677793A_ae;
    const int auto6677793A_ai = 1;
    int autoDA45F2D6_ae;
    const int autoDA45F2D6_ai = 1;

    // Variable Initialization
    lv_changedFactor = (1-(IntToFixed(lp_level)*0.02));
    lv_researchCount = CatalogFieldValueCount(c_gameCatalogUpgrade, lv_upgrade, "AffectedUnitArray", lp_player);
    lv_itResearch = "";
    lv_abilCmdCount = CatalogFieldValueCount(c_gameCatalogAbil, "ArmoryResearch", "InfoArray", c_playerAny);

    // Implementation
    autoB1238110_ae = (lv_researchCount-1);
    lv_itResearchIndex = 0;
    for ( ; ( (autoB1238110_ai >= 0 && lv_itResearchIndex <= autoB1238110_ae) || (autoB1238110_ai < 0 && lv_itResearchIndex >= autoB1238110_ae) ) ; lv_itResearchIndex += autoB1238110_ai ) {
        lv_itResearch = CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgrade, "AffectedUnitArray[" + IntToString(lv_itResearchIndex) + "]", lp_player);
        auto6677793A_ae = (lv_abilCmdCount-1);
        lv_itResearchCmd = 0;
        for ( ; ( (auto6677793A_ai >= 0 && lv_itResearchCmd <= auto6677793A_ae) || (auto6677793A_ai < 0 && lv_itResearchCmd >= auto6677793A_ae) ) ; lv_itResearchCmd += auto6677793A_ai ) {
            autoDA45F2D6_ae = (lv_resourceTypeCount-1);
            lv_itResourceType = 0;
            for ( ; ( (autoDA45F2D6_ai >= 0 && lv_itResourceType <= autoDA45F2D6_ae) || (autoDA45F2D6_ai < 0 && lv_itResourceType >= autoDA45F2D6_ae) ) ; lv_itResourceType += autoDA45F2D6_ai ) {
                lv_default = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_itResearch, "InfoArray[" + IntToString(lv_itResearchCmd) + "].Resource[" + IntToString(lv_itResourceType) + "]", c_playerAny);
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, lv_itResearch, "InfoArray[" + IntToString(lv_itResearchCmd) + "].Resource[" + IntToString(lv_itResourceType) + "]", lp_player, CeilingI((lv_default*lv_changedFactor)));
            }
        }
    }
}

void libCOMM_gf_CU_GPInitStetmann (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoBC2CEE0D_ae = 4;
    const int autoBC2CEE0D_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    libCOMI_gv_cU_GlobalCast2D[lp_player] = true;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "Coop_TopBar_Stetmann/StetmannTopBar");
    libCOMI_gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCommandPanel, "StetmannGlobalCommandPanel");
    libCOMI_gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoBC2CEE0D_ai >= 0 && lv_buttonIndex <= autoBC2CEE0D_ae) || (autoBC2CEE0D_ai < 0 && lv_buttonIndex >= autoBC2CEE0D_ae) ) ; lv_buttonIndex += autoBC2CEE0D_ai ) {
        DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
    }
    DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupSingle(lp_player), "ActiveZone", "Speed");
    libCOMM_gf_CU_SetStetelliteChargeMax(lp_player);
    libCOMM_gf_CU_DrawStetelliteChargePips(lp_player, (libCOMM_gv_cU_StetmannMaxStetelliteCharges - RoundI(PlayerGetChargeUsed(lp_player, "Abil/DeployPowerTowerStetmann"))), libCOMM_gv_cU_StetmannMaxStetelliteCharges);
    TriggerEnable(libCOMM_gt_CU_StetelliteChargesChanged, true);
    TriggerEnable(libCOMM_gt_CU_StetelliteMaxChargesChanged, true);
    DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupSingle(lp_player), true);
}

trigger auto_libCOMM_gf_CM_AbilityTransmission_StetelliteReminder_Trigger = null;
int auto_libCOMM_gf_CM_AbilityTransmission_StetelliteReminder_lp_stetmannPlayer;

void libCOMM_gf_CM_AbilityTransmission_StetelliteReminder (int lp_stetmannPlayer) {
    auto_libCOMM_gf_CM_AbilityTransmission_StetelliteReminder_lp_stetmannPlayer = lp_stetmannPlayer;

    if (auto_libCOMM_gf_CM_AbilityTransmission_StetelliteReminder_Trigger == null) {
        auto_libCOMM_gf_CM_AbilityTransmission_StetelliteReminder_Trigger = TriggerCreate("auto_libCOMM_gf_CM_AbilityTransmission_StetelliteReminder_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_AbilityTransmission_StetelliteReminder_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_AbilityTransmission_StetelliteReminder_TriggerFunc (bool testConds, bool runActions) {
    int lp_stetmannPlayer = auto_libCOMM_gf_CM_AbilityTransmission_StetelliteReminder_lp_stetmannPlayer;

    // Variable Declarations
    string lv_abilchargename;
    fixed lv_pollinginterval;
    fixed lv_reminderdelay;
    fixed lv_remindercooldown;
    timer lv_remindercooldowntimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilchargename = "Abil/DeployPowerTowerStetmann";
    lv_pollinginterval = 1.0;
    lv_reminderdelay = 10.0;
    lv_remindercooldown = 180.0;
    lv_remindercooldowntimer = TimerCreate();

    // Implementation
    while (true) {
        while (!((PlayerGetChargeUsed(lp_stetmannPlayer, lv_abilchargename) == 0.0) && (TimerGetRemaining(lv_remindercooldowntimer) <= 0.0))) {
            Wait(lv_pollinginterval, c_timeGame);
        }
        Wait(lv_reminderdelay, c_timeReal);
        if ((PlayerGetChargeUsed(lp_stetmannPlayer, lv_abilchargename) == 0.0)) {
            if ((libCOMM_gv_cM_AbilityTransmission_StetelliteReminder_First == true)) {
                DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[lp_stetmannPlayer], PlayerGroupSingle(lp_stetmannPlayer), "ReminderStetellites", "FirstReminder");
                libCOMM_gv_cM_AbilityTransmission_StetelliteReminder_First = false;
            }
            else {
                DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[lp_stetmannPlayer], PlayerGroupSingle(lp_stetmannPlayer), "ReminderStetellites", "RepeatReminder");
            }
            libCOMI_gf_CM_CommanderVOSend(lp_stetmannPlayer, SoundLink("StetmannCommander_PowerTowerReminder", -1), PlayerGroupSingle(lp_stetmannPlayer));
            TimerStart(lv_remindercooldowntimer, lv_remindercooldown, false, c_timeReal);
            while (!((PlayerGetChargeUsed(lp_stetmannPlayer, lv_abilchargename) > 0.0))) {
                Wait(lv_pollinginterval, c_timeGame);
            }
        }

    }
    return true;
}

trigger auto_libCOMM_gf_CM_AbilityTransmission_StetzoneReminder_Trigger = null;
int auto_libCOMM_gf_CM_AbilityTransmission_StetzoneReminder_lp_stetmannPlayer;

void libCOMM_gf_CM_AbilityTransmission_StetzoneReminder (int lp_stetmannPlayer) {
    auto_libCOMM_gf_CM_AbilityTransmission_StetzoneReminder_lp_stetmannPlayer = lp_stetmannPlayer;

    if (auto_libCOMM_gf_CM_AbilityTransmission_StetzoneReminder_Trigger == null) {
        auto_libCOMM_gf_CM_AbilityTransmission_StetzoneReminder_Trigger = TriggerCreate("auto_libCOMM_gf_CM_AbilityTransmission_StetzoneReminder_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_AbilityTransmission_StetzoneReminder_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_AbilityTransmission_StetzoneReminder_TriggerFunc (bool testConds, bool runActions) {
    int lp_stetmannPlayer = auto_libCOMM_gf_CM_AbilityTransmission_StetzoneReminder_lp_stetmannPlayer;

    // Variable Declarations
    fixed lv_reminderdelay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderdelay = (60 * 8);

    // Implementation
    Wait(lv_reminderdelay, c_timeGame);
    if ((libCOMM_gv_cM_Stetmann_StetzoneChanged == false)) {
        DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[lp_stetmannPlayer], PlayerGroupSingle(lp_stetmannPlayer), "ReminderStetzones", "Reminder");
        libCOMI_gf_CM_CommanderVOSend(lp_stetmannPlayer, SoundLink("StetmannCommander_PowerFieldReminder", -1), PlayerGroupSingle(lp_stetmannPlayer));
    }

    return true;
}

trigger auto_libCOMM_gf_CM_AbilityTransmission_GaryUpgradeReminder_Trigger = null;
int auto_libCOMM_gf_CM_AbilityTransmission_GaryUpgradeReminder_lp_stetmannPlayer;

void libCOMM_gf_CM_AbilityTransmission_GaryUpgradeReminder (int lp_stetmannPlayer) {
    auto_libCOMM_gf_CM_AbilityTransmission_GaryUpgradeReminder_lp_stetmannPlayer = lp_stetmannPlayer;

    if (auto_libCOMM_gf_CM_AbilityTransmission_GaryUpgradeReminder_Trigger == null) {
        auto_libCOMM_gf_CM_AbilityTransmission_GaryUpgradeReminder_Trigger = TriggerCreate("auto_libCOMM_gf_CM_AbilityTransmission_GaryUpgradeReminder_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_AbilityTransmission_GaryUpgradeReminder_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_AbilityTransmission_GaryUpgradeReminder_TriggerFunc (bool testConds, bool runActions) {
    int lp_stetmannPlayer = auto_libCOMM_gf_CM_AbilityTransmission_GaryUpgradeReminder_lp_stetmannPlayer;

    // Variable Declarations
    fixed lv_pollinginterval;
    fixed lv_reminderdelay;
    fixed lv_minimumrevivedelay;
    timer lv_remindertimer;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pollinginterval = 1.0;
    lv_reminderdelay = 60.0;
    lv_minimumrevivedelay = 15.0;
    lv_remindertimer = TimerCreate();
    lv_heroUnit = libCOMI_gf_GetHeroUnit(lp_stetmannPlayer, "Gary");

    // Implementation
    TimerStart(lv_remindertimer, lv_reminderdelay, false, c_timeReal);
    while (true) {
        Wait(lv_pollinginterval, c_timeReal);
        if ((TechTreeUnitCount(lp_stetmannPlayer, "SuperGaryStetmann", c_techCountCompleteOnly) > 0)) {
            break;
        }
        else if (((TechTreeUnitCount(lp_stetmannPlayer, "SuperGaryStetmann", c_techCountQueuedOrBetter) > 0) || (TechTreeUnitCount(lp_stetmannPlayer, "HiveStetmann", c_techCountCompleteOnly) == 0))) {
            TimerStart(lv_remindertimer, lv_reminderdelay, false, c_timeReal);
        }
        else if ((UnitIsAlive(lv_heroUnit) == false)) {
            TimerStart(lv_remindertimer, MaxF(lv_minimumrevivedelay, TimerGetRemaining(lv_remindertimer)), false, c_timeReal);
        }
        else if ((TimerGetRemaining(lv_remindertimer) <= 0.0)) {
            libCOMI_gf_CM_CommanderVOSend(lp_stetmannPlayer, SoundLink("StetmannCommander_GaryUpgradeReminder", -1), PlayerGroupSingle(lp_stetmannPlayer));
            break;
        }
    }
    return true;
}

void libCOMM_gf_CM_MasteryStetmannUpgradeCost (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;
    fixed lv_costReduction;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryStetmannUpgradeResearchCost", c_techCountCompleteOnly);
    lv_costReduction = ((175 * (50 - lv_upgradeCount)) / 50);
    CatalogFieldValueSet(c_gameCatalogAbil, "EvolutionChamberStetmannResearch", "InfoArray[" + IntToString(7) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "EvolutionChamberStetmannResearch", "InfoArray[" + IntToString(7) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    lv_costReduction = ((175 * (50 - lv_upgradeCount)) / 50);
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireStetmannResearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireStetmannResearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    lv_costReduction = ((175 * (50 - lv_upgradeCount)) / 50);
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireStetmannResearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireStetmannResearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
}

void libCOMM_gf_StetmannPowerTowerEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, (lp_event));
}

int libCOMM_gf_EventStetmannPowerTowerTechLevel (string lp_techLevelParameter) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), (lp_techLevelParameter)));
}

int libCOMM_gf_EventStetmannPowerTowerPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), ("StetmannPowerTowerPlayer")));
}

void libCOMM_gf_CM_Stetmann_ThrowPowerTowerEvent (int lp_player) {
    // Variable Declarations
    int lv_laircount;
    int lv_hivecount;
    int lv_oldchargelevel;
    string lv_eventname;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_laircount = UnitGroupCount(UnitGroup("LairStetmann", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_hivecount = UnitGroupCount(UnitGroup("HiveStetmann", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_oldchargelevel = libCOMM_gv_cM_Stetmann_StetelliteChargesLevel;
    lv_eventname = "";

    // Implementation
    if ((lv_hivecount > 0)) {
        libCOMM_gv_cM_Stetmann_StetelliteChargesLevel = 2;
    }
    else if ((lv_laircount > 0)) {
        libCOMM_gv_cM_Stetmann_StetelliteChargesLevel = 1;
    }
    else if (true) {
        libCOMM_gv_cM_Stetmann_StetelliteChargesLevel = 0;
    }
    if ((libCOMM_gv_cM_Stetmann_StetelliteChargesLevel != lv_oldchargelevel)) {
        lv_eventname = ("Event_PowerTowerLevelChanged");
        DataTableSetInt(false, TriggerEventParamName(lv_eventname, ("StetmannPowerTowerTechLevelOld")), lv_oldchargelevel);
        DataTableSetInt(false, TriggerEventParamName(lv_eventname, ("StetmannPowerTowerTechLevelNew")), libCOMM_gv_cM_Stetmann_StetelliteChargesLevel);
        DataTableSetInt(false, TriggerEventParamName(lv_eventname, ("StetmannPowerTowerPlayer")), lp_player);
        TriggerSendEvent(lv_eventname);
        if ((libCOMM_gv_cM_Stetmann_StetelliteChargesLevel > lv_oldchargelevel)) {
            lv_eventname = ("Event_PowerTowerLevelUp");
        }
        else {
            lv_eventname = ("Event_PowerTowerLevelDown");
        }
        DataTableSetInt(false, TriggerEventParamName(lv_eventname, ("StetmannPowerTowerTechLevelOld")), lv_oldchargelevel);
        DataTableSetInt(false, TriggerEventParamName(lv_eventname, ("StetmannPowerTowerTechLevelNew")), libCOMM_gv_cM_Stetmann_StetelliteChargesLevel);
        DataTableSetInt(false, TriggerEventParamName(lv_eventname, ("StetmannPowerTowerPlayer")), lp_player);
        TriggerSendEvent(lv_eventname);
    }

}

void libCOMM_gf_CU_SetStetelliteChargeMax (int lp_player) {
    // Variable Declarations
    int lv_abilindex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMM_gv_cU_StetmannMaxStetelliteCharges = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "DeployPowerTowerStetmann", "InfoArray[" + IntToString(0) + "].Charge.CountMax", lp_player);
}

void libCOMM_gf_CU_DrawStetelliteChargePips (int lp_player, int lp_currentCharges, int lp_maxCharges) {
    // Variable Declarations
    int lv_nodeindex;
    const int lv_mAX_NODES = 7;
    int lv_nodedialogitem;
    int lv_containerdialogitem;
    string lv_state_ChargeState;
    string lv_state_ChargeState_Inactive;
    string lv_state_ChargeState_Used;
    string lv_state_ChargeState_Available;

    // Automatic Variable Declarations
    const int auto1243D972_ae = lv_mAX_NODES;
    const int auto1243D972_ai = 1;

    // Variable Initialization
    lv_nodedialogitem = c_invalidDialogControlId;
    lv_containerdialogitem = c_invalidDialogControlId;
    lv_state_ChargeState = "ChargeState";
    lv_state_ChargeState_Inactive = "Inactive";
    lv_state_ChargeState_Used = "Used";
    lv_state_ChargeState_Available = "Available";

    // Implementation
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "StetelliteChargeContainer");
    lv_containerdialogitem = DialogControlLastCreated();
    lv_nodeindex = 1;
    for ( ; ( (auto1243D972_ai >= 0 && lv_nodeindex <= auto1243D972_ae) || (auto1243D972_ai < 0 && lv_nodeindex >= auto1243D972_ae) ) ; lv_nodeindex += auto1243D972_ai ) {
        DialogControlHookup(lv_containerdialogitem, c_triggerControlTypePanel, "StetelliteChargePip" + IntToString(lv_nodeindex));
        lv_nodedialogitem = DialogControlLastCreated();
        if ((lv_nodeindex > lp_maxCharges)) {
            DialogControlSetAnimationState(lv_nodedialogitem, PlayerGroupSingle(lp_player), lv_state_ChargeState, lv_state_ChargeState_Inactive);
        }
        else if ((lv_nodeindex > lp_currentCharges)) {
            DialogControlSetAnimationState(lv_nodedialogitem, PlayerGroupSingle(lp_player), lv_state_ChargeState, lv_state_ChargeState_Used);
        }
        else if (true) {
            DialogControlSetAnimationState(lv_nodedialogitem, PlayerGroupSingle(lp_player), lv_state_ChargeState, lv_state_ChargeState_Available);
        }
    }
    DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupSingle(lp_player), "ChargesPossible", IntToString(lp_maxCharges));
    DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupSingle(lp_player), "ChargesAvailable", IntToString(lp_currentCharges));
    if ((lp_currentCharges < lp_maxCharges)) {
        DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupSingle(lp_player), "ReminderStetellites", "NoReminder");
    }

}

void libCOMM_gf_CM_Stetmann_AdjustStetelliteChargesUsed (int lp_player) {
    // Variable Declarations
    int lv_laircount;
    int lv_hivecount;
    int lv_oldchargelevel;
    int lv_oldmaxcharges;
    int lv_newmaxcharges;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_laircount = UnitGroupCount(UnitGroup("LairStetmann", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_hivecount = UnitGroupCount(UnitGroup("HiveStetmann", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_oldchargelevel = libCOMM_gv_cM_Stetmann_StetelliteChargesLevel;

    // Implementation
    if ((lv_hivecount > 0)) {
        libCOMM_gv_cM_Stetmann_StetelliteChargesLevel = 2;
    }
    else if ((lv_laircount > 0)) {
        libCOMM_gv_cM_Stetmann_StetelliteChargesLevel = 1;
    }
    else if (true) {
        libCOMM_gv_cM_Stetmann_StetelliteChargesLevel = 0;
    }
    if ((libCOMM_gv_cM_Stetmann_StetelliteChargesLevel != lv_oldchargelevel)) {
        lv_oldmaxcharges = RoundI(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "DeployPowerTowerStetmann", "InfoArray[" + IntToString(lv_oldchargelevel) + "].Charge.CountMax", lp_player));
        lv_newmaxcharges = RoundI(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "DeployPowerTowerStetmann", "InfoArray[" + IntToString(libCOMM_gv_cM_Stetmann_StetelliteChargesLevel) + "].Charge.CountMax", lp_player));
        PlayerAddChargeUsed(lp_player, "Abil/DeployPowerTowerStetmann", (lv_newmaxcharges - lv_oldmaxcharges));
        PlayerAddChargeRegenRemaining(lp_player, "Abil/DeployPowerTowerStetmann", 0.0);
    }

}

void libCOMM_gf_CM_Stukov_SingleUnitGoToRally (unit lp_rallyingUnit, bool lp_overrideExistingOrders) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(lp_rallyingUnit);

    // Implementation
    if (((UnitOrderCount(lp_rallyingUnit) == 0) || (lp_overrideExistingOrders == true))) {
        if ((libCOMM_gv_cM_Stukov_RallyTarget[lv_player] == null)) {
            if ((libCOMM_gv_cM_Stukov_RallyPoint[lv_player] != null)) {
                UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), libCOMM_gv_cM_Stukov_RallyPoint[lv_player]), c_orderQueueReplace);
            }

        }
        else {
            if ((UnitHasBehavior2(libCOMM_gv_cM_Stukov_RallyTarget[lv_player], "ExpansionRocks") == true)) {
                UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCOMM_gv_cM_Stukov_RallyTarget[lv_player])), c_orderQueueReplace);
                UnitIssueOrder(lp_rallyingUnit, OrderTargetingUnit(AbilityCommand("attack", 0), libCOMM_gv_cM_Stukov_RallyTarget[lv_player]), c_orderQueueAddToEnd);
            }
            else {
                if (((UnitHasBehavior2(libCOMM_gv_cM_Stukov_RallyTarget[lv_player], "NydusNetworkConjoined") == true) || (UnitHasBehavior2(libCOMM_gv_cM_Stukov_RallyTarget[lv_player], "NydusWormConjoined") == true) || (UnitHasBehavior2(libCOMM_gv_cM_Stukov_RallyTarget[lv_player], "GreaterNydusWormConjoined") == true))) {
                    UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCOMM_gv_cM_Stukov_RallyTarget[lv_player])), c_orderQueueReplace);
                    UnitIssueOrder(lp_rallyingUnit, OrderTargetingUnit(null, libCOMM_gv_cM_Stukov_RallyTarget[lv_player]), c_orderQueueAddToEnd);
                }
                else {
                    UnitIssueOrder(lp_rallyingUnit, OrderTargetingUnit(AbilityCommand("move", 3), libCOMM_gv_cM_Stukov_RallyTarget[lv_player]), c_orderQueueReplace);
                }
            }
        }
    }

}

void libCOMM_gf_CM_Stukov_HordeGoToRally (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMM_gv_cM_Stukov_RallyTarget[lp_player] == null) || (UnitIsAlive(libCOMM_gv_cM_Stukov_RallyTarget[lp_player]) == false))) {
        if ((libCOMM_gv_cM_Stukov_RallyPoint[lp_player] != null)) {
            UnitGroupIssueOrder(libCOMM_gv_cM_Stukov_HordeGroup[lp_player], OrderTargetingPoint(AbilityCommand("move", 3), libCOMM_gv_cM_Stukov_RallyPoint[lp_player]), c_orderQueueReplace);
        }

    }
    else {
        if ((UnitHasBehavior2(libCOMM_gv_cM_Stukov_RallyTarget[lp_player], "ExpansionRocks") == true)) {
            UnitGroupIssueOrder(libCOMM_gv_cM_Stukov_HordeGroup[lp_player], OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCOMM_gv_cM_Stukov_RallyTarget[lp_player])), c_orderQueueReplace);
            UnitGroupIssueOrder(libCOMM_gv_cM_Stukov_HordeGroup[lp_player], OrderTargetingUnit(AbilityCommand("attack", 0), libCOMM_gv_cM_Stukov_RallyTarget[lp_player]), c_orderQueueAddToEnd);
        }
        else {
            if (((UnitHasBehavior2(libCOMM_gv_cM_Stukov_RallyTarget[lp_player], "NydusNetworkConjoined") == true) || (UnitHasBehavior2(libCOMM_gv_cM_Stukov_RallyTarget[lp_player], "NydusWormConjoined") == true) || (UnitHasBehavior2(libCOMM_gv_cM_Stukov_RallyTarget[lp_player], "GreaterNydusWormConjoined") == true))) {
                UnitGroupIssueOrder(libCOMM_gv_cM_Stukov_HordeGroup[lp_player], OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCOMM_gv_cM_Stukov_RallyTarget[lp_player])), c_orderQueueReplace);
                UnitGroupIssueOrder(libCOMM_gv_cM_Stukov_HordeGroup[lp_player], OrderTargetingUnit(null, libCOMM_gv_cM_Stukov_RallyTarget[lp_player]), c_orderQueueAddToEnd);
            }
            else {
                UnitGroupIssueOrder(libCOMM_gv_cM_Stukov_HordeGroup[lp_player], OrderTargetingUnit(AbilityCommand("move", 3), libCOMM_gv_cM_Stukov_RallyTarget[lp_player]), c_orderQueueReplace);
            }
        }
    }
}

void libCOMM_gf_CM_Stukov_NewBunkerUnitProcess (unit lp_newUnit) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = lp_newUnit;
    lv_player = UnitGetOwner(lp_newUnit);

    // Implementation
    if ((UnitHasBehavior2(lp_newUnit, "SIBarracksTrainTimedLifeHasBeenApplied") == false)) {
        UnitBehaviorAdd(lv_unit, "SIBarracksTrainTimedLifeHasBeenApplied", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "SIInfestedBunkerTrainTimedLife", lv_unit, 1);
        UnitSetState(lv_unit, c_unitStateUsingSupply, false);
    }

    UnitGroupAdd(libCOMM_gv_cM_Stukov_HordeGroup[lv_player], lv_unit);
    UnitGroupAdd(libCOMM_gv_cM_Stukov_HordeCurrentWave[lv_player], lv_unit);
    libCOMM_gv_cM_Stukov_HordeCount[lv_player] = UnitGroupCount(libCOMM_gv_cM_Stukov_HordeGroup[lv_player], c_unitCountAlive);
    libCOMM_gf_CM_Stukov_SingleUnitGoToRally(lp_newUnit, true);
}

trigger auto_libCOMM_gf_CM_Stukov_InfestStructureInitialCooldown_Trigger = null;
int auto_libCOMM_gf_CM_Stukov_InfestStructureInitialCooldown_lp_player;

void libCOMM_gf_CM_Stukov_InfestStructureInitialCooldown (int lp_player) {
    auto_libCOMM_gf_CM_Stukov_InfestStructureInitialCooldown_lp_player = lp_player;

    if (auto_libCOMM_gf_CM_Stukov_InfestStructureInitialCooldown_Trigger == null) {
        auto_libCOMM_gf_CM_Stukov_InfestStructureInitialCooldown_Trigger = TriggerCreate("auto_libCOMM_gf_CM_Stukov_InfestStructureInitialCooldown_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_Stukov_InfestStructureInitialCooldown_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_Stukov_InfestStructureInitialCooldown_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMM_gf_CM_Stukov_InfestStructureInitialCooldown_lp_player;

    // Variable Declarations
    fixed lv_cooldown;
    const fixed lv_initialCoolup = 180.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cooldown = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "SIStukovInfestStructureUpgraded", "Cost[" + IntToString(0) + "].Charge.TimeUse", lp_player);

    // Implementation
    PlayerAddChargeUsed(lp_player, "Abil/SIStukovInfestStructureUpgraded", 3.0);
    PlayerAddChargeRegenRemaining(lp_player, "Abil/SIStukovInfestStructureUpgraded", lv_initialCoolup);
    Wait(lv_initialCoolup, c_timeGame);
    libNtve_gf_PlayerRemoveChargeUsed(lp_player, "Abil/SIStukovInfestStructureUpgraded");
    PlayerAddChargeUsed(lp_player, "Abil/SIStukovInfestStructureUpgraded", 2.0);
    PlayerAddChargeRegenRemaining(lp_player, "Abil/SIStukovInfestStructureUpgraded", lv_cooldown);
    return true;
}

void libCOMM_gf_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction (int lp_player) {
    // Variable Declarations
    fixed lv_unitVespeneCostOriginal;
    fixed lv_UnitVespeneCostReductionPerPoint;
    fixed lv_unitVespeneCostReduction;
    int lv_UnitVespeneCostNew;
    int lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_UnitVespeneCostReductionPerPoint = 50.0;

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasterySwannImmortalityProtocol", c_techCountCompleteOnly);
    lv_unitVespeneCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SiegeTank", "CostResource[" + IntToString(1) + "]", libCOMI_gv_vU_PLAYER_NEUTRAL));
    lv_unitVespeneCostReduction = (IntToFixed(lv_upgradeCount) * lv_unitVespeneCostOriginal);
    lv_unitVespeneCostReduction = (lv_unitVespeneCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt(lv_unitVespeneCostReduction);
    CatalogFieldValueSet(c_gameCatalogUnit, "SiegeTankWreckage", "CostResource[" + IntToString(1) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
}

point libCOMM_gf_CM_LaserDrillTargetPoint (point lp_casterPoint, point lp_targetPoint, region lp_region, int lp_player) {
    // Variable Declarations
    point lv_casterPoint;
    fixed lv_casterXToEdgeOfMap;
    fixed lv_casterYToEdgeOfMap;
    point lv_targetPoint;
    fixed lv_targetXToEdgeOfMap;
    fixed lv_targetYToEdgeOfMap;
    fixed lv_targetAngle;
    fixed lv_cosineofTargetAngle;
    fixed lv_triangle1C;
    fixed lv_triangle2C;
    fixed lv_casterTriangle1C;
    fixed lv_casterTriangle2C;
    point lv_abilityTargetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();

    // Implementation
    if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_targetPoint));
        lv_casterXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_casterPoint));
        lv_casterYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_casterPoint));
        lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_targetPoint);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(RegionPlayableMap())));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(RegionPlayableMap())), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCOMM_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCOMM_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_targetPoint));
        lv_casterXToEdgeOfMap = PointGetX(lv_casterPoint);
        lv_casterYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_casterPoint));
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 90.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(RegionPlayableMap())));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCOMM_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCOMM_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_casterXToEdgeOfMap = PointGetX(lv_casterPoint);
        lv_casterYToEdgeOfMap = PointGetY(lv_casterPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 180.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCOMM_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCOMM_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_casterXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_casterPoint));
        lv_casterYToEdgeOfMap = PointGetY(lv_casterPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 270.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(RegionPlayableMap())), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCOMM_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCOMM_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    if ((lv_abilityTargetPoint != null)) {
        return lv_abilityTargetPoint;
    }
    else {
        return null;
    }
}

void libCOMM_gf_CU_GPInitTychus (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto27BB6E4F_ae = 2;
    const int auto27BB6E4F_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    libCOMI_gv_cU_GlobalCast2D[lp_player] = true;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "Coop_TopBar_Tychus/TychusTopBarTemplate");
    libCOMI_gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCommandPanel, "TychusGlobalCommandPanel");
    libCOMI_gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto27BB6E4F_ai >= 0 && lv_buttonIndex <= auto27BB6E4F_ae) || (auto27BB6E4F_ai < 0 && lv_buttonIndex >= auto27BB6E4F_ae) ) ; lv_buttonIndex += auto27BB6E4F_ai ) {
        DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
    }
    libCOMM_gf_InitTychusSquadUI(lp_player);
    DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
}

trigger auto_libCOMM_gf_CM_GPReminderTychus_Trigger = null;
int auto_libCOMM_gf_CM_GPReminderTychus_lp_player;

void libCOMM_gf_CM_GPReminderTychus (int lp_player) {
    auto_libCOMM_gf_CM_GPReminderTychus_lp_player = lp_player;

    if (auto_libCOMM_gf_CM_GPReminderTychus_Trigger == null) {
        auto_libCOMM_gf_CM_GPReminderTychus_Trigger = TriggerCreate("auto_libCOMM_gf_CM_GPReminderTychus_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_GPReminderTychus_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_GPReminderTychus_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMM_gf_CM_GPReminderTychus_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOMI_gf_CU_GPHighlightButton(2, true, lp_player);
    return true;
}

void libCOMM_gf_CC_SetTychusScoreUnit (int lp_tychusPlayer, string lp_unitType, bool lp_primary) {
    // Variable Declarations
    trigger lv_scoretrigger;
    string lv_scoregamelink;
    int lv_player;

    // Automatic Variable Declarations
    string autoBF8D0EAF_val;
    int auto707F0472_val;
    playergroup autoA62780AA_g;
    playergroup autoC92FA4AA_g;

    // Variable Initialization

    // Implementation
    autoBF8D0EAF_val = lp_unitType;
    if (autoBF8D0EAF_val == "TychusCoop") {
        lv_scoregamelink = "TychusGrenadeDamage";
    }
    else if (autoBF8D0EAF_val == "TychusReaper") {
        lv_scoregamelink = "TychusReaperBombDamage";
    }
    else if (autoBF8D0EAF_val == "TychusWarhound") {
        lv_scoregamelink = "TychusWarhoundTurretDamage";
    }
    else if (autoBF8D0EAF_val == "TychusFirebat") {
        lv_scoregamelink = "TychusFirebatOilDamage";
    }
    else if (autoBF8D0EAF_val == "TychusHERC") {
        lv_scoregamelink = "TychusHERCImpactDuration";
    }
    else if (autoBF8D0EAF_val == "TychusMarauder") {
        lv_scoregamelink = "TychusMarauderHeal";
    }
    else if (autoBF8D0EAF_val == "TychusGhost") {
        lv_scoregamelink = "TychusGhostDominatedDamage";
    }
    else if (autoBF8D0EAF_val == "TychusSpectre") {
        lv_scoregamelink = "TychusSpectrePulseDamage";
    }
    else if (autoBF8D0EAF_val == "TychusMedic") {
        lv_scoregamelink = "TychusMedicHeal";
    }
    else {
        lv_scoregamelink = "TychusOdinDamage";
    }
    if ((lp_primary == true)) {
    }

    auto707F0472_val = lp_tychusPlayer;
    if (auto707F0472_val == 1) {
        autoA62780AA_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoA62780AA_g, lv_player);
            if (lv_player < 0) { break; }
        }
    }
    else if (auto707F0472_val == 2) {
        autoC92FA4AA_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoC92FA4AA_g, lv_player);
            if (lv_player < 0) { break; }
        }
    }
    else {
    }
}

trigger auto_libCOMM_gf_PlayTychusPurchaseUpgradeSound_Trigger = null;
int auto_libCOMM_gf_PlayTychusPurchaseUpgradeSound_lp_tychusPlayer;

void libCOMM_gf_PlayTychusPurchaseUpgradeSound (int lp_tychusPlayer) {
    auto_libCOMM_gf_PlayTychusPurchaseUpgradeSound_lp_tychusPlayer = lp_tychusPlayer;

    if (auto_libCOMM_gf_PlayTychusPurchaseUpgradeSound_Trigger == null) {
        auto_libCOMM_gf_PlayTychusPurchaseUpgradeSound_Trigger = TriggerCreate("auto_libCOMM_gf_PlayTychusPurchaseUpgradeSound_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_PlayTychusPurchaseUpgradeSound_Trigger, false, false);
}

bool auto_libCOMM_gf_PlayTychusPurchaseUpgradeSound_TriggerFunc (bool testConds, bool runActions) {
    int lp_tychusPlayer = auto_libCOMM_gf_PlayTychusPurchaseUpgradeSound_lp_tychusPlayer;

    // Variable Declarations
    soundlink lv_coinsound;
    soundlink lv_guitarriffsound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_coinsound = SoundLink("Tychus_AC_UpgradePurchase", -1);
    lv_guitarriffsound = SoundLink("Tychus_AC_UpgradePurchase_MxFx", -1);

    // Implementation
    if ((libCOMM_gv_cU_TychusPurchaseUpgradePlaying == true)) {
        return true;
    }

    libCOMM_gv_cU_TychusPurchaseUpgradePlaying = true;
    SoundPlayForPlayer(lv_coinsound, c_maxPlayers, PlayerGroupSingle(lp_tychusPlayer), 100.0, 0.0);
    Wait(0.125, c_timeReal);
    SoundPlayForPlayer(lv_guitarriffsound, c_maxPlayers, PlayerGroupSingle(lp_tychusPlayer), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libCOMM_gv_cU_TychusPurchaseUpgradePlaying = false;
    return true;
}

void libCOMM_gf_CU_TychusSetBarUnit (unit lp_tychusBarUnit) {
    // Variable Declarations
    int lv_squadindex;

    // Automatic Variable Declarations
    int auto2B933D98_ae;
    const int auto2B933D98_ai = 1;

    // Variable Initialization

    // Implementation
    libCOMM_gv_cU_TychusSquadBar = lp_tychusBarUnit;
    TriggerEnable(libCOMM_gt_CU_TychusSquadBarDies, true);
    TriggerEnable(libCOMM_gt_CU_TychusSquadBarUpdateProgress, true);
    TriggerEnable(libCOMM_gt_CU_TychusSquadBarBuilt, false);
    auto2B933D98_ae = (libCOMM_gv_cUC_TYCHUS_MAX_SQUAD_SIZE - 1);
    lv_squadindex = 0;
    for ( ; ( (auto2B933D98_ai >= 0 && lv_squadindex <= auto2B933D98_ae) || (auto2B933D98_ai < 0 && lv_squadindex >= auto2B933D98_ae) ) ; lv_squadindex += auto2B933D98_ai ) {
        libNtve_gf_SetDialogItemUnit(libCOMM_gv_cU_TychusSquadBarTargets[lv_squadindex], libCOMM_gv_cU_TychusSquadBar, PlayerGroupAll());
    }
}

void libCOMM_gf_InitTychusSquadUI (int lp_tychusPlayer) {
    // Variable Declarations
    int lv_squadindex;

    // Automatic Variable Declarations
    int auto81001FF2_ae;
    const int auto81001FF2_ai = 1;

    // Variable Initialization

    // Implementation
    libCOMM_gv_cU_TychusSquadContainer = libCOMI_gv_cU_GPPanel[lp_tychusPlayer];
    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadContainer, PlayerGroupAll(), "AbilityMaxChargesState", IntToString(libCOMM_gv_cU_TychusMedivacMaxCharges));
    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadContainer, PlayerGroupAll(), "AbilityCurrentChargesState", IntToString(libCOMM_gv_cU_TychusMedivacCurrentCharges));
    DialogControlHookup(libCOMM_gv_cU_TychusSquadContainer, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("BarTrainingProgress"));
    libCOMM_gv_cU_TychusSquadTrainingProgressBar = DialogControlLastCreated();
    auto81001FF2_ae = (libCOMM_gv_cUC_TYCHUS_MAX_SQUAD_SIZE - 1);
    lv_squadindex = 0;
    for ( ; ( (auto81001FF2_ai >= 0 && lv_squadindex <= auto81001FF2_ae) || (auto81001FF2_ai < 0 && lv_squadindex >= auto81001FF2_ae) ) ; lv_squadindex += auto81001FF2_ai ) {
        DialogControlHookup(libCOMM_gv_cU_TychusSquadContainer, c_triggerControlTypeUnitStatus, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex))));
        libCOMM_gv_cU_TychusSquadUnitFrames[lv_squadindex] = DialogControlLastCreated();
        DialogControlHookup(libCOMM_gv_cU_TychusSquadContainer, c_triggerControlTypeUnitTarget, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex) + "/UnitTargetFrame")));
        libCOMM_gv_cU_TychusSquadUnitTargets[lv_squadindex] = DialogControlLastCreated();
        DialogControlHookup(libCOMM_gv_cU_TychusSquadContainer, c_triggerControlTypeUnitTarget, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex) + "/BarTargetFrame")));
        libCOMM_gv_cU_TychusSquadBarTargets[lv_squadindex] = DialogControlLastCreated();
        DialogControlHookup(libCOMM_gv_cU_TychusSquadContainer, c_triggerControlTypeUnitTarget, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex) + "/EquipmentStructureTargetFrame")));
        libCOMM_gv_cU_TychusSquadEquipmentStructureTargets[lv_squadindex] = DialogControlLastCreated();
        DialogControlHookup(libCOMM_gv_cU_TychusSquadContainer, c_triggerControlTypePortrait, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex) + "/PortraitContainer/Portrait")));
        libCOMM_gv_cU_TychusSquadPortraits[lv_squadindex] = DialogControlLastCreated();
        DialogControlHookup(libCOMM_gv_cU_TychusSquadContainer, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex) + "/2DPortraitContainer/2DPortrait")));
        libCOMM_gv_cU_TychusSquadPortraitsStatic[lv_squadindex] = DialogControlLastCreated();
        DialogControlHookup(libCOMM_gv_cU_TychusSquadContainer, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex) + "/AvailabilityProgress")));
        libCOMM_gv_cU_TychusSquadAvailabilityProgressBars[lv_squadindex] = DialogControlLastCreated();
        DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lv_squadindex], PlayerGroupAll(), "EmptyState", "Empty");
        DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lv_squadindex], PlayerGroupAll(), "DeathState", "NotDead");
        DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lv_squadindex], PlayerGroupAll(), "TrainingState", "NotTraining");
        DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lv_squadindex], PlayerGroupAll(), "AvailabilityState", "NotAvailable");
    }
    libNtve_gf_SetDialogItemImage(libCOMM_gv_cU_TychusSquadPortraitsStatic[0], UserDataGetImagePath("XAC_TechTychusSquad", "Tychus", "2D Portrait", 1), PlayerGroupAll());
    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[0], PlayerGroupAll(), "UnitState", ("Tychus"));
    TriggerEnable(libCOMM_gt_CU_TychusSquadMemberTrained, true);
    TriggerEnable(libCOMM_gt_CU_TychusSquadMemberReviveQueued, true);
    TriggerEnable(libCOMM_gt_CU_TychusSquadMemberReviveCancelled, true);
    TriggerEnable(libCOMM_gt_CU_TychusSquadMemberRevived, true);
    TriggerEnable(libCOMM_gt_CU_TychusSquadMemberDeath, true);
    TriggerEnable(libCOMM_gt_CU_TychusSquadStructureBuilt, true);
    TriggerEnable(libCOMM_gt_CU_TychusMedivacAbilityReady, true);
    TriggerEnable(libCOMM_gt_CU_TychusMedivacAbilityUnready, true);
    TriggerEnable(libCOMM_gt_CU_TychusMedivacPlatformBuilt, true);
    TriggerEnable(libCOMM_gt_CU_TychusSquadBarDies, true);
    TriggerEnable(libCOMM_gt_CU_TychusEquipmentUpgraded, true);
    TriggerEnable(libCOMM_gt_CU_TychusSquadSpawnCheat, true);
    libCOMM_gf_UpdateTychusSquadAvailability(lp_tychusPlayer);
}

void libCOMM_gf_ModifyTychusMedivacCharges (int lp_chargesDelta) {
    // Automatic Variable Declarations
    // Implementation
    libCOMM_gv_cU_TychusMedivacCurrentCharges += lp_chargesDelta;
    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadContainer, PlayerGroupAll(), "AbilityCurrentChargesState", IntToString(libCOMM_gv_cU_TychusMedivacCurrentCharges));
}

trigger auto_libCOMM_gf_UpdateTychusSquadAvailability_Trigger = null;
int auto_libCOMM_gf_UpdateTychusSquadAvailability_lp_player;

void libCOMM_gf_UpdateTychusSquadAvailability (int lp_player) {
    auto_libCOMM_gf_UpdateTychusSquadAvailability_lp_player = lp_player;

    if (auto_libCOMM_gf_UpdateTychusSquadAvailability_Trigger == null) {
        auto_libCOMM_gf_UpdateTychusSquadAvailability_Trigger = TriggerCreate("auto_libCOMM_gf_UpdateTychusSquadAvailability_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_UpdateTychusSquadAvailability_Trigger, false, false);
}

bool auto_libCOMM_gf_UpdateTychusSquadAvailability_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMM_gf_UpdateTychusSquadAvailability_lp_player;

    // Variable Declarations
    int lv_tychusplayer;
    fixed lv_initialchargetime;
    fixed lv_rechargetime;
    int lv_numberofinitialheroesavailable;
    int lv_numberofheroeswithheld;
    int lv_squadindex;

    // Automatic Variable Declarations
    int autoB1F123BD_ae;
    const int autoB1F123BD_ai = 1;
    int auto8BC2F91D_ae;
    const int auto8BC2F91D_ai = 1;

    // Variable Initialization
    lv_tychusplayer = lp_player;
    lv_initialchargetime = (libCOMM_gv_cM_Tychus_InitialTrainTime + 1.0);
    lv_rechargetime = libCOMM_gf_CalculateTychusRecruitmentChargeCooldown(lv_tychusplayer);
    lv_numberofinitialheroesavailable = 1;

    // Implementation
    if ((TechTreeUpgradeCount(lv_tychusplayer, "TychusCoopFifthHeroUpgrade", c_techCountCompleteOnly) == 0)) {
        lv_numberofheroeswithheld = 1;
    }
    else {
        lv_numberofheroeswithheld = 0;
    }
    autoB1F123BD_ae = (lv_numberofinitialheroesavailable - 1);
    lv_squadindex = 0;
    for ( ; ( (autoB1F123BD_ai >= 0 && lv_squadindex <= autoB1F123BD_ae) || (autoB1F123BD_ai < 0 && lv_squadindex >= autoB1F123BD_ae) ) ; lv_squadindex += autoB1F123BD_ai ) {
        DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lv_squadindex], PlayerGroupAll(), "AvailabilityState", "Unlocking");
    }
    libCOMM_gf_UpdateTychusSquadAvailabilityProgressBar(lv_squadindex, lv_initialchargetime, lv_tychusplayer);
    lv_rechargetime = libCOMM_gf_CalculateTychusRecruitmentChargeCooldown(lv_tychusplayer);
    auto8BC2F91D_ae = (libCOMM_gv_cUC_TYCHUS_MAX_SQUAD_SIZE - lv_numberofheroeswithheld - 1);
    lv_squadindex = (lv_numberofinitialheroesavailable + 1);
    for ( ; ( (auto8BC2F91D_ai >= 0 && lv_squadindex <= auto8BC2F91D_ae) || (auto8BC2F91D_ai < 0 && lv_squadindex >= auto8BC2F91D_ae) ) ; lv_squadindex += auto8BC2F91D_ai ) {
        libCOMM_gf_UpdateTychusSquadAvailabilityProgressBar(lv_squadindex, lv_rechargetime, lv_tychusplayer);
    }
    return true;
}

void libCOMM_gf_UpdateTychusSquadAvailabilityProgressBar (int lp_squadIndex, fixed lp_duration, int lp_tychusPlayer) {
    // Variable Declarations
    fixed lv_timepassed;
    fixed lv_updateperiod;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_updateperiod = 0.125;

    // Implementation
    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "AvailabilityState", "Unlocking");
    libNtve_gf_SetDialogItemMaximumValue(libCOMM_gv_cU_TychusSquadAvailabilityProgressBars[lp_squadIndex], lp_duration, PlayerGroupAll());
    while ((lv_timepassed < lp_duration) && (libCOMM_gv_cU_TychusSquadSpawnSkip == false)) {
        libNtve_gf_SetDialogItemCurrentValue(libCOMM_gv_cU_TychusSquadAvailabilityProgressBars[lp_squadIndex], lv_timepassed, PlayerGroupAll());
        Wait(lv_updateperiod, c_timeGame);
        lv_timepassed += lv_updateperiod;
    }
    libNtve_gf_SetDialogItemCurrentValue(libCOMM_gv_cU_TychusSquadAvailabilityProgressBars[lp_squadIndex], lp_duration, PlayerGroupAll());
    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "AvailabilityState", "Available");
    PlayerAddChargeUsed(lp_tychusPlayer, "Abil/TychusTrain", -1.0);
    TriggerSendEvent("TychusHeroAvailable");
}

void libCOMM_gf_UpdateTychusSquadTargetFrame (string lp_squadInstance, unit lp_targetUnit) {
    // Variable Declarations
    int lv_squadindex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_squadindex = UserDataGetInt("XAC_TechTychusSquad", lp_squadInstance, "Squad Slot", 1);

    // Implementation
    if ((lv_squadindex == -1)) {
        return ;
    }

    libNtve_gf_SetDialogItemUnit(libCOMM_gv_cU_TychusSquadUnitFrames[lv_squadindex], lp_targetUnit, PlayerGroupAll());
    libNtve_gf_SetDialogItemUnit(libCOMM_gv_cU_TychusSquadUnitTargets[lv_squadindex], lp_targetUnit, PlayerGroupAll());
}

void libCOMM_gf_SetTychusSquadMember (unit lp_unit, int lp_squadIndex, string lp_squadInstance) {
    // Variable Declarations
    string lv_abilIndex;
    string lv_abil;
    string lv_button;
    string lv_replaceTarget;
    string lv_replaceTargetTop;
    int lv_replacePlayer;
    unitgroup lv_structureGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilIndex = IntToString((lp_squadIndex + 1));
    lv_abil = UserDataGetGameLink(libCOMM_gv_cM_Tychus_UserTypeHeroList, libCOMM_gf_EventTychusHeroInstance(), "Active Abil", 1);
    lv_button = UserDataGetGameLink(libCOMM_gv_cM_Tychus_UserTypeHeroList, libCOMM_gf_EventTychusHeroInstance(), "Active Button", 1);
    lv_replaceTarget = (libCOMM_gv_cM_Tychus_SharedAbil_ButtonBase + lv_abilIndex);
    lv_replaceTargetTop = (libCOMM_gv_cM_Tychus_SharedAbil_ButtonBase + lv_abilIndex + "Top");
    lv_replacePlayer = UnitGetOwner(libCOMM_gf_EventTychusHero());
    lv_structureGroup = UnitGroup(UserDataGetUnit("XAC_TechTychusSquad", lp_squadInstance, "EquipmentStructure", 1), UnitGetOwner(lp_unit), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    if (((lp_squadIndex < 0) || (lp_squadIndex >= libCOMM_gv_cUC_TYCHUS_MAX_SQUAD_SIZE))) {
        return ;
    }
    else if ((lp_squadIndex == 1)) {
        libCOMM_gf_CC_SetTychusScoreUnit(lv_replacePlayer, UnitGetType(lp_unit), true);
    }
    else if ((lp_squadIndex == 2)) {
        libCOMM_gf_CC_SetTychusScoreUnit(lv_replacePlayer, UnitGetType(lp_unit), false);
    }
    libCOMI_gf_ButtonReplacement(lv_replacePlayer, (lv_replaceTarget), lv_button);
    CatalogLinkReplace(lv_replacePlayer, c_gameCatalogAbil, lv_replaceTarget, (lv_abil));
    UserDataSetInt("XAC_TechTychusSquad", lp_squadInstance, "Squad Slot", 1, lp_squadIndex);
    libNtve_gf_SetDialogItemUnit(libCOMM_gv_cU_TychusSquadUnitFrames[lp_squadIndex], lp_unit, PlayerGroupAll());
    libNtve_gf_SetDialogItemUnit(libCOMM_gv_cU_TychusSquadUnitTargets[lp_squadIndex], lp_unit, PlayerGroupAll());
    if ((UnitGroupCount(lv_structureGroup, c_unitCountAlive) > 0)) {
        libNtve_gf_SetDialogItemUnit(libCOMM_gv_cU_TychusSquadEquipmentStructureTargets[lp_squadIndex], UnitGroupUnit(lv_structureGroup, 1), PlayerGroupAll());
    }

    PortraitSetModel(PortraitGetTriggerControl(libCOMM_gv_cU_TychusSquadPortraits[lp_squadIndex]), UserDataGetModel("XAC_TechTychusSquad", lp_squadInstance, "Portrait Model", 1), false);
    PortraitSetActor(PortraitGetTriggerControl(libCOMM_gv_cU_TychusSquadPortraits[lp_squadIndex]), "PortraitActor");
    libNtve_gf_SetDialogItemImage(libCOMM_gv_cU_TychusSquadPortraitsStatic[lp_squadIndex], UserDataGetImagePath("XAC_TechTychusSquad", lp_squadInstance, "2D Portrait", 1), PlayerGroupAll());
    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "UnitState", (lp_squadInstance));
    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "AvailabilityState", "Available");
    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "EmptyState", "NotEmpty");
    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lp_squadIndex], PlayerGroupAll(), "DeathState", "NotDead");
}

int libCOMM_gf_GetNextTychusSquadIndex () {
    // Variable Declarations
    int lv_currentindex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentindex = libCOMM_gv_cU_TychusSquadNextIndex;

    // Implementation
    libCOMM_gv_cU_TychusSquadNextIndex += 1;
    return lv_currentindex;
}

string libCOMM_gf_GetTychusSquadCasterByIndex (int lp_squadIndex) {
    // Automatic Variable Declarations
    int auto8568DFE7_val;

    // Implementation
    auto8568DFE7_val = lp_squadIndex;
    if (auto8568DFE7_val == 0) {
        return "TychusSquadCaster1";
    }
    else if (auto8568DFE7_val == 1) {
        return "TychusSquadCaster2";
    }
    else if (auto8568DFE7_val == 2) {
        return "TychusSquadCaster3";
    }
    else if (auto8568DFE7_val == 3) {
        return "TychusSquadCaster4";
    }
    else if (auto8568DFE7_val == 4) {
        return "TychusSquadCaster5";
    }
    else {
        return "TychusSquadCaster1";
    }
}

string libCOMM_gf_GetTychusSquadInstance (unit lp_unit) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    string auto037B3E9F_userType;
    int auto037B3E9F_i;

    // Variable Initialization

    // Implementation
    auto037B3E9F_userType = "XAC_TechTychusSquad";
    auto037B3E9F_i = 1;
    for ( ; auto037B3E9F_i <= UserDataInstanceCount(auto037B3E9F_userType) ; auto037B3E9F_i += 1 ) {
        lv_instance = UserDataInstance(auto037B3E9F_userType, auto037B3E9F_i);
        if ((UnitGetType(lp_unit) == UserDataGetUnit("XAC_TechTychusSquad", lv_instance, "Unit Type", 1))) {
            return lv_instance;
        }

    }
    return null;
}

void libCOMM_gf_TychusHeroEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, (lp_event));
}

unit libCOMM_gf_EventTychusHero () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "EventHero"));
}

string libCOMM_gf_EventTychusHeroInstance () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(EventGenericName(), "EventHeroInstance")));
}

void libCOMM_gf_TychusStructureEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, (lp_event));
}

unit libCOMM_gf_EventTychusStructure () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "EventStructure"));
}

void libCOMM_gf_CM_Tychus_UpdateHeroTechTree (int lp_p) {
    // Variable Declarations
    int lv_techLevel;
    int lv_heroCount;
    int lv_requiredTechLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_techLevel = libCOMM_gf_CM_Tychus_TechLevel(lp_p);
    lv_heroCount = libCOMM_gf_CM_Tychus_TechLevel2(lp_p);

    // Implementation
    if (((TechTreeUpgradeCount(lp_p, "TychusCoopHeroHalfCostUpgrade", c_techCountCompleteOnly) == 0) || (lv_heroCount > 1))) {
        libCOMM_gf_CM_Tychus_SetHeroCostMultiply(lp_p, 2.0, 2.0);
    }

}

void libCOMM_gf_CM_Tychus_SetHeroRequiredTechLevel (int lp_p, int lp_level) {
    // Variable Declarations
    string lv_instance;
    string lv_uT;
    abilcmd lv_cmd;
    string lv_abil;
    int lv_abilIndex;
    int lv_i;
    string lv_requirement;

    // Automatic Variable Declarations
    string auto7851257C_userType;
    int auto7851257C_i;
    int autoA92A8280_ae;
    const int autoA92A8280_ai = 1;

    // Variable Initialization

    // Implementation
    lv_requirement = libCOMM_gv_c_CM_Tychus_UserTypeHeroRequirmentArray[lp_level];
    auto7851257C_userType = libCOMM_gv_cM_Tychus_UserTypeHeroList;
    auto7851257C_i = 1;
    for ( ; auto7851257C_i <= UserDataInstanceCount(auto7851257C_userType) ; auto7851257C_i += 1 ) {
        lv_instance = UserDataInstance(auto7851257C_userType, auto7851257C_i);
        lv_uT = UserDataGetUnit(libCOMM_gv_cM_Tychus_UserTypeHeroList, lv_instance, "Unit Type", 1);
        if ((TechTreeUnitIsAllowed(lp_p, lv_uT) == true)) {
            autoA92A8280_ae = (TechTreeUnitProducedAbilCmdCount(lv_uT) - 1);
            lv_i = 0;
            for ( ; ( (autoA92A8280_ai >= 0 && lv_i <= autoA92A8280_ae) || (autoA92A8280_ai < 0 && lv_i >= autoA92A8280_ae) ) ; lv_i += autoA92A8280_ai ) {
                lv_cmd = TechTreeUnitProducedAbilCmd(lv_uT, lv_i);
                lv_abil = AbilityCommandGetAbility(lv_cmd);
                lv_abilIndex = AbilityCommandGetCommand(lv_cmd);
                CatalogFieldValueSet(c_gameCatalogAbil, lv_abil, "InfoArray[" + IntToString(lv_abilIndex) + "].Button.Requirements", lp_p, (lv_requirement));
            }
        }

    }
}

void libCOMM_gf_CM_Tychus_SetHeroCostMultiply (int lp_p, fixed lp_multiplyMinerals, fixed lp_multiplyVespene) {
    // Variable Declarations
    string lv_instance;
    string lv_uT;
    int lv_indexResource;
    fixed lv_costfactor;

    // Automatic Variable Declarations
    string autoE69F17AB_userType;
    int autoE69F17AB_i;

    // Variable Initialization
    lv_costfactor = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "TychusOutlawCostFactor", "Amount", lp_p);

    // Implementation
    autoE69F17AB_userType = libCOMM_gv_cM_Tychus_UserTypeHeroList;
    autoE69F17AB_i = 1;
    for ( ; autoE69F17AB_i <= UserDataInstanceCount(autoE69F17AB_userType) ; autoE69F17AB_i += 1 ) {
        lv_instance = UserDataInstance(autoE69F17AB_userType, autoE69F17AB_i);
        lv_uT = UserDataGetUnit(libCOMM_gv_cM_Tychus_UserTypeHeroList, lv_instance, "Unit Type", 1);
        libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogUnit, lv_uT, "CostResource[" + IntToString(0) + "]", lp_p, RoundI((lp_multiplyMinerals * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lv_uT, "CostResource[" + IntToString(0) + "]", c_playerAny) * lv_costfactor)), c_upgradeOperationSet);
        libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogUnit, lv_uT, "CostResource[" + IntToString(1) + "]", lp_p, RoundI((lp_multiplyMinerals * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lv_uT, "CostResource[" + IntToString(1) + "]", c_playerAny) * lv_costfactor)), c_upgradeOperationSet);
    }
}

int libCOMM_gf_CM_Tychus_TechLevel (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeBehaviorCount(lp_p, "TychusTier3Behavior", c_techCountCompleteOnly) > 0)) {
        return 3;
    }

    if ((TechTreeBehaviorCount(lp_p, "TychusTier2Behavior", c_techCountCompleteOnly) > 0)) {
        return 2;
    }

    if ((TechTreeBehaviorCount(lp_p, "TychusTier1Behavior", c_techCountCompleteOnly) > 0)) {
        return 1;
    }

    return 0;
}

int libCOMM_gf_CM_Tychus_TechLevel2 (int lp_p) {
    // Variable Declarations
    int lv_incomplete;
    int lv_completed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_incomplete = TechTreeUnitAliasCount(lp_p, "Alias_TychusUniqueUnit", c_techCountIncompleteOnly);
    lv_completed = TechTreeBehaviorCount(lp_p, "TychusHeroCount", c_techCountCompleteOnly);

    // Implementation
    return (lv_incomplete + lv_completed);
}

void libCOMM_gf_CM_Tychus_UltimateTimeAchievement (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 4)) && (libCOMM_gv_cM_Tychus_UltimatesPurchased == 5) && (GameGetMissionTime() < 1200.0)) {
        AchievementAward(lp_player, "CommanderTychusUltimateTime");
    }

}

void libCOMM_gf_CM_Tychus_InitHeroTechLimit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeSetProduceCap(lp_player, "Alias_TychusUniqueUnit", c_techCatUnit, libCOMM_gv_cM_Tychus_MaxHeroCount);
    TechTreeSetProduceCap(lp_player, "TychusCoop", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusReaper", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusWarhound", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusFirebat", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusHERC", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusMarauder", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusGhost", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusSpectre", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusMedic", c_techCatUnit, 1);
}

fixed libCOMM_gf_CalculateTychusRecruitmentChargeCooldown (int lp_tychusPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "TychusOutlawUnlockDurationDummy", "Amount", lp_tychusPlayer);
}

void libCOMM_gf_ApplyTychusMaxChargesPerk (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = lp_player;

    // Implementation
    if ((TechTreeUpgradeCount(lv_player, "TychusCoopFifthHeroUpgrade", c_techCountCompleteOnly) == 0)) {
        libCOMM_gv_cM_Tychus_MaxHeroCount = (libCOMM_gv_cM_Tychus_MaxHeroCount - 1);
        libCOMM_gv_tychusHeroMaxCharges = (libCOMM_gv_tychusHeroMaxCharges - 1);
    }

}

void libCOMM_gf_CM_ReplaceTychusRageEffect (string lp_rageEffect, string lp_dummyEffectInstance, point lp_targetPoint, unit lp_targetUnit, unit lp_tychusUnit) {
    // Variable Declarations
    fixed lv_ragemultiplier;
    fixed lv_ragecost;
    fixed lv_extrarage;
    string lv_replacementeffect;
    int lv_tychusowner;
    int lv_damagetypeindex;

    // Automatic Variable Declarations
    const int autoB99AAC56_ae = 4;
    const int autoB99AAC56_ai = 1;
    const int auto91C0BAEC_ae = 4;
    const int auto91C0BAEC_ai = 1;

    // Variable Initialization
    lv_ragemultiplier = UserDataGetFixed("CoopAbilityTychusRageEffects", lp_rageEffect, "Rage Bonus Multiplier", 1);
    lv_ragecost = libNtve_gf_CostOfAbility(UserDataGetGameLink("CoopAbilityTychusRageEffects", lp_rageEffect, "Rage Ability", 1), "Energy");
    lv_extrarage = UnitGetPropertyFixed(lp_tychusUnit, c_unitPropEnergy, c_unitPropCurrent);
    lv_replacementeffect = UserDataGetGameLink("CoopAbilityTychusRageEffects", lp_rageEffect, "Replacement Effect", 1);
    lv_tychusowner = UnitGetOwner(lp_tychusUnit);

    // Implementation
    lv_damagetypeindex = 0;
    for ( ; ( (autoB99AAC56_ai >= 0 && lv_damagetypeindex <= autoB99AAC56_ae) || (autoB99AAC56_ai < 0 && lv_damagetypeindex >= autoB99AAC56_ae) ) ; lv_damagetypeindex += autoB99AAC56_ai ) {
        CatalogFieldValueSet(c_gameCatalogBehavior, UserDataGetGameLink("CoopAbilityTychusRageEffects", lp_rageEffect, "Rage Bonus Behavior", 1), "Modification.DamageDealtScaled[" + IntToString(lv_damagetypeindex) + "]", lv_tychusowner, IntToString(RoundI((lv_ragemultiplier * (lv_ragecost + lv_extrarage)))));
    }
    if ((lp_targetUnit == null)) {
        UnitCreateEffectPoint(lp_tychusUnit, lv_replacementeffect, lp_targetPoint);
    }
    else {
        UnitCreateEffectUnit(lp_tychusUnit, lv_replacementeffect, lp_targetUnit);
    }
    lv_damagetypeindex = 0;
    for ( ; ( (auto91C0BAEC_ai >= 0 && lv_damagetypeindex <= auto91C0BAEC_ae) || (auto91C0BAEC_ai < 0 && lv_damagetypeindex >= auto91C0BAEC_ae) ) ; lv_damagetypeindex += auto91C0BAEC_ai ) {
        CatalogFieldValueSet(c_gameCatalogBehavior, UserDataGetGameLink("CoopAbilityTychusRageEffects", lp_rageEffect, "Rage Bonus Behavior", 1), "Modification.DamageDealtScaled[" + IntToString(lv_damagetypeindex) + "]", lv_tychusowner, "0");
    }
}

void libCOMM_gf_CM_ApplyTychusRageBuffs (string lp_rageBuff, unit lp_targetUnit, unit lp_tychusUnit) {
    // Variable Declarations
    fixed lv_currentrage;
    string lv_behavior;
    int lv_existingstackcount;
    int lv_newstackcount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentrage = UnitGetPropertyFixed(lp_tychusUnit, c_unitPropEnergy, c_unitPropCurrent);
    lv_behavior = UserDataGetGameLink("CoopAbilityTychusRageBuffs", lp_rageBuff, "Behavior", 1);
    lv_existingstackcount = UnitBehaviorCount(lp_targetUnit, lv_behavior);
    lv_newstackcount = libNtve_gf_ArithmeticIntClamp(RoundI((UserDataGetFixed("CoopAbilityTychusRageBuffs", lp_rageBuff, "Rage Factor", 1) * UnitGetPropertyFixed(lp_tychusUnit, c_unitPropEnergy, c_unitPropCurrent))), UserDataGetInt("CoopAbilityTychusRageBuffs", lp_rageBuff, "Min Stacks", 1), UserDataGetInt("CoopAbilityTychusRageBuffs", lp_rageBuff, "Max Stacks", 1));

    // Implementation
    if ((UserDataGetInt("CoopAbilityTychusRageBuffs", lp_rageBuff, "Rolling Stacks", 1) == 1) && (lv_existingstackcount > lv_newstackcount)) {
        UnitBehaviorRemove(lp_targetUnit, lv_behavior, MaxI(lv_newstackcount, 0));
        UnitBehaviorAdd(lp_targetUnit, lv_behavior, lp_tychusUnit, lv_newstackcount);
    }
    else {
        UnitBehaviorRemove(lp_targetUnit, lv_behavior, lv_existingstackcount);
        UnitBehaviorAdd(lp_targetUnit, lv_behavior, lp_tychusUnit, lv_newstackcount);
    }
}

trigger auto_libCOMM_gf_CM_GPReminderVorazun_Trigger = null;
int auto_libCOMM_gf_CM_GPReminderVorazun_lp_player;

void libCOMM_gf_CM_GPReminderVorazun (int lp_player) {
    auto_libCOMM_gf_CM_GPReminderVorazun_lp_player = lp_player;

    if (auto_libCOMM_gf_CM_GPReminderVorazun_Trigger == null) {
        auto_libCOMM_gf_CM_GPReminderVorazun_Trigger = TriggerCreate("auto_libCOMM_gf_CM_GPReminderVorazun_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CM_GPReminderVorazun_Trigger, false, false);
}

bool auto_libCOMM_gf_CM_GPReminderVorazun_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMM_gf_CM_GPReminderVorazun_lp_player;

    // Automatic Variable Declarations
    // Implementation
    while ((libCOMI_gv_cM_GPRemindersOn[lp_player] == true)) {
        if ((UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
            break;
        }

        Wait(2.0, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOMI_gf_CU_GPHighlightButton(1, true, lp_player);
    libCOMI_gf_CU_GPHighlightButton(2, true, lp_player);
    libCOMI_gf_CU_GPHighlightButton(3, true, lp_player);
    while (!((UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_CM_GPReminderDisable(lp_player);
    return true;
}

void libCOMM_gf_CC_AchievementToggleTimeStop (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        TriggerEnable(libCOMM_gt_CC_AchievementVorazunTimeStop, true);
    }
    else {
        TriggerEnable(libCOMM_gt_CC_AchievementVorazunTimeStop, false);
    }
}

void libCOMM_gf_CM_SoATimeFreezeApply (int lp_castingPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMM_gf_CC_AchievementToggleTimeStop(true);
    PlayerCreateEffectPoint(lp_castingPlayer, "SOATimeFreezeVisual", Point(PointGetX(CameraGetTarget(lp_castingPlayer)), PointGetY(CameraGetTarget(lp_castingPlayer))));
    libCOMI_gf_CC_TimeAITemporarySet(true);
    TriggerEnable(libCOMM_gt_CM_SoATimeFreezeCleanup, true);
    TimerStart(libCOMM_gv_cM_SoATimeFreezeTimer, CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "SOATimeFreeze", "Duration", c_playerAny), false, c_timeGame);
}

void libCOMM_gf_CM_MasteryZagraRoachLifeIncrease (int lp_player) {
    // Variable Declarations
    fixed lv_upgradeCount;
    fixed lv_healthStarting;
    fixed lv_healthPerPoint;
    fixed lv_healthNew;
    fixed lv_damageStarting;
    fixed lv_damagePerPoint;
    fixed lv_damageNew;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_healthStarting = 145.0;
    lv_healthPerPoint = 29.0;
    lv_healthNew = 145.0;
    lv_damageStarting = 16.0;
    lv_damagePerPoint = 0.32;

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryZagaraRoachDropDamageAndHealth", c_techCountCompleteOnly);
    lv_healthNew = (lv_healthStarting+(lv_upgradeCount*lv_healthPerPoint/10));
    CatalogFieldValueSet(c_gameCatalogUnit, "Roach", "LifeMax", lp_player, IntToString(FixedToInt(lv_healthNew)));
    CatalogFieldValueSet(c_gameCatalogUnit, "Roach", "LifeStart", lp_player, IntToString(FixedToInt(lv_healthNew)));
    CatalogFieldValueSet(c_gameCatalogUnit, "RoachBurrowed", "LifeMax", lp_player, IntToString(FixedToInt(lv_healthNew)));
    CatalogFieldValueSet(c_gameCatalogUnit, "RoachBurrowed", "LifeStart", lp_player, IntToString(FixedToInt(lv_healthNew)));
    lv_damageNew = Ceiling((lv_damageStarting+(lv_upgradeCount*lv_damagePerPoint)));
    CatalogFieldValueSet(c_gameCatalogEffect, "AcidSalivaU", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "RoachUMelee", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "ZagaraAcidSalivaU", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "ZagaraRoachUMelee", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "MasteryZagaraRoachDropDamageAndHealthAttackDamageDisplayDummy", "Amount", lp_player, IntToString(FixedToInt((lv_damageNew-lv_damageStarting))));
}

void libCOMM_gf_CU_GPInitZeratul (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoB779DF79_ae = 4;
    const int autoB779DF79_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    libCOMI_gv_cU_GlobalCast2D[lp_player] = true;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "Coop_TopBar_Zeratul/ZeratulTopBar");
    libCOMI_gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "ProphecyState", "NotReady");
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCommandPanel, "ZeratulGlobalCommandPanel");
    libCOMI_gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCommandPanel, "ZeratulSelectionCommandPanel");
    libCOMM_gv_cU_ZeratulSelectionCmdPanel = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoB779DF79_ai >= 0 && lv_buttonIndex <= autoB779DF79_ae) || (autoB779DF79_ai < 0 && lv_buttonIndex >= autoB779DF79_ae) ) ; lv_buttonIndex += autoB779DF79_ai ) {
        DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "ProphecyButtonContainer" + IntToString(lv_buttonIndex-1));
        libCOMM_gv_cU_ZeratulSelectionButtonContainers[(lv_buttonIndex - 1)] = DialogControlLastCreated();
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "ArtifactState", "NotCollected");
    }
    DialogControlSetAnimationState(libCOMM_gv_cU_ZeratulSelectionButtonContainers[0], PlayerGroupAll(), "ArtifactState", "Collected");
    DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), "CurrentArtifact", "1");
    DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), "AvatarState", "None");
    DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupSingle(lp_player), true);
    TriggerEnable(libCOMM_gt_CU_ZeratulProphecyNotReady, true);
    TriggerEnable(libCOMM_gt_CU_ZeratulProphecyReady, true);
    TriggerEnable(libCOMM_gt_CU_ZeratulArtifactCollected, true);
    TriggerEnable(libCOMM_gt_CU_ZeratulArtifactUpgraded, true);
    TriggerEnable(libCOMM_gt_CU_ZeratulArtifactUsed, true);
    libCOMM_gf_CU_ZeratulArtifactHintTrack(lp_player);
}

trigger auto_libCOMM_gf_CU_ZeratulArtifactHintTrack_Trigger = null;
int auto_libCOMM_gf_CU_ZeratulArtifactHintTrack_lp_player;

void libCOMM_gf_CU_ZeratulArtifactHintTrack (int lp_player) {
    auto_libCOMM_gf_CU_ZeratulArtifactHintTrack_lp_player = lp_player;

    if (auto_libCOMM_gf_CU_ZeratulArtifactHintTrack_Trigger == null) {
        auto_libCOMM_gf_CU_ZeratulArtifactHintTrack_Trigger = TriggerCreate("auto_libCOMM_gf_CU_ZeratulArtifactHintTrack_TriggerFunc");
    }

    TriggerExecute(auto_libCOMM_gf_CU_ZeratulArtifactHintTrack_Trigger, false, false);
}

bool auto_libCOMM_gf_CU_ZeratulArtifactHintTrack_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMM_gf_CU_ZeratulArtifactHintTrack_lp_player;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), "HintLevel", IntToString(libCOMM_gf_CM_Zeratul_ProphecyHintLevel(libCOMM_gv_cM_ZeratulProphecyArtifactNumber)));
        Wait(1.0, c_timeGame);
    }
    return true;
}

void libCOMM_gf_CM_Zeratul_ApplyDevolve (unit lp_targetUnit) {
    // Variable Declarations
    fixed lv_lifePercentage;
    fixed lv_shieldPercentage;
    fixed lv_energyPercentage;
    string lv_oldUnitType;
    string lv_newUnitType;
    int lv_owner;
    point lv_spawnPosition;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lifePercentage = UnitGetPropertyFixed(lp_targetUnit, c_unitPropLifePercent, c_unitPropCurrent);
    lv_shieldPercentage = UnitGetPropertyFixed(lp_targetUnit, c_unitPropShieldsPercent, c_unitPropCurrent);
    lv_oldUnitType = UnitGetType(lp_targetUnit);
    lv_newUnitType = libCOMM_gf_CM_Zeratul_DevolveGetNewUnitType(lv_oldUnitType, (libCOMM_gf_CM_Zeratul_DevolveGetUnitTier(UnitGetType(lp_targetUnit)) - 1));
    lv_owner = UnitGetOwner(lp_targetUnit);

    // Implementation
    if ((lv_newUnitType == null)) {
        return ;
    }

    lv_spawnPosition = UnitGetPosition(lp_targetUnit);
    PointSetFacing(lv_spawnPosition, UnitGetFacing(lp_targetUnit));
    UnitRemove(lp_targetUnit);
    libNtve_gf_CreateUnitsAtPoint2(1, lv_newUnitType, c_unitCreateIgnorePlacement, lv_owner, lv_spawnPosition);
    UnitGroupAdd(libCOMM_gv_cM_Zeratul_DevolvedUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, lv_lifePercentage);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, lv_shieldPercentage);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 0.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create ZeratulDevolve");
    AISetUnitSuicide(UnitLastCreated(), true);
}

bool libCOMM_gf_CM_Zeratul_DevolveUnitTypeAllowed (string lp_devolveUnitType) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_devolveUnitType != "Baneling") && (lp_devolveUnitType != "Scourge") && (lp_devolveUnitType != "Oracle") && (lp_devolveUnitType != "Disruptor") && (lp_devolveUnitType != "Reaver") && (lp_devolveUnitType != "SiegeTankSieged") && (lp_devolveUnitType != "InfestedSiegeBreakerSieged") && (lp_devolveUnitType != "LiberatorAG")) {
        return true;
    }

    return false;
}

int libCOMM_gf_CM_Zeratul_DevolveGetUnitTier (string lp_unitType) {
    // Variable Declarations
    string lv_devolutioninstance;
    int lv_targettierindex;
    int lv_targettiersupplyfallbackindex;
    int lv_targetunittypeindex;
    string lv_targetunittype;
    fixed lv_targetunitsupply;
    int lv_numberofdevolutiontiers;
    int lv_numberofunittypespertier;

    // Automatic Variable Declarations
    int autoBC6261AE_ae;
    const int autoBC6261AE_ai = 1;
    int autoEAEBE0A0_ae;
    const int autoEAEBE0A0_ai = 1;

    // Variable Initialization
    lv_targettiersupplyfallbackindex = 1;
    lv_targetunitsupply = UnitTypeGetProperty(lp_unitType, c_unitPropSuppliesUsed);
    lv_numberofdevolutiontiers = UserDataInstanceCount("DevolutionTiers");
    lv_numberofunittypespertier = UserDataFieldValueCount("DevolutionTiers", "UnitsToDevolveInto");

    // Implementation
    autoBC6261AE_ae = lv_numberofdevolutiontiers;
    lv_targettierindex = 1;
    for ( ; ( (autoBC6261AE_ai >= 0 && lv_targettierindex <= autoBC6261AE_ae) || (autoBC6261AE_ai < 0 && lv_targettierindex >= autoBC6261AE_ae) ) ; lv_targettierindex += autoBC6261AE_ai ) {
        lv_devolutioninstance = UserDataInstance("DevolutionTiers", lv_targettierindex);
        if ((lv_targetunitsupply >= UserDataGetFixed("DevolutionTiers", lv_devolutioninstance, "RoughSupply", 1))) {
            lv_targettiersupplyfallbackindex = lv_targettierindex;
        }

        autoEAEBE0A0_ae = lv_numberofunittypespertier;
        lv_targetunittypeindex = 1;
        for ( ; ( (autoEAEBE0A0_ai >= 0 && lv_targetunittypeindex <= autoEAEBE0A0_ae) || (autoEAEBE0A0_ai < 0 && lv_targetunittypeindex >= autoEAEBE0A0_ae) ) ; lv_targetunittypeindex += autoEAEBE0A0_ai ) {
            lv_targetunittype = UserDataGetUnit("DevolutionTiers", lv_devolutioninstance, "UnitsToDevolveInto", lv_targetunittypeindex);
            if ((lv_targetunittype == lp_unitType)) {
                return lv_targettierindex;
            }

        }
    }
    return lv_targettiersupplyfallbackindex;
}

string libCOMM_gf_CM_Zeratul_DevolveGetNewUnitType (string lp_oldUnitType, int lp_newTier) {
    // Variable Declarations
    string lv_devolutioninstance;
    int lv_newtierindex;
    int lv_newunittypeindex;
    string lv_newunittype;
    int lv_numberofdevolutiontiers;
    int lv_numberofunittypespertier;
    string[101] lv_validunittypes;
    int lv_numberofvalidunittypes;
    string lv_oldunitrace;

    // Automatic Variable Declarations
    const int auto51553657_ae = 1;
    const int auto51553657_ai = -1;
    int auto450A0E07_ae;
    const int auto450A0E07_ai = 1;

    // Variable Initialization
    lv_numberofdevolutiontiers = UserDataInstanceCount("DevolutionTiers");
    lv_numberofunittypespertier = UserDataFieldValueCount("DevolutionTiers", "UnitsToDevolveInto");
    lv_oldunitrace = (CatalogFieldValueGet(c_gameCatalogUnit, lp_oldUnitType, "Race", c_playerAny));

    // Implementation
    if ((((lp_newTier >= 1) && (lp_newTier <= lv_numberofdevolutiontiers)) == false)) {
        return null;
    }

    lv_newtierindex = lp_newTier;
    for ( ; ( (auto51553657_ai >= 0 && lv_newtierindex <= auto51553657_ae) || (auto51553657_ai < 0 && lv_newtierindex >= auto51553657_ae) ) ; lv_newtierindex += auto51553657_ai ) {
        lv_devolutioninstance = UserDataInstance("DevolutionTiers", lv_newtierindex);
        lv_numberofvalidunittypes = 0;
        auto450A0E07_ae = lv_numberofunittypespertier;
        lv_newunittypeindex = 1;
        for ( ; ( (auto450A0E07_ai >= 0 && lv_newunittypeindex <= auto450A0E07_ae) || (auto450A0E07_ai < 0 && lv_newunittypeindex >= auto450A0E07_ae) ) ; lv_newunittypeindex += auto450A0E07_ai ) {
            lv_newunittype = UserDataGetUnit("DevolutionTiers", lv_devolutioninstance, "UnitsToDevolveInto", lv_newunittypeindex);
            if ((lv_newunittype != "") && (lv_newunittype != lp_oldUnitType) && (libCOMM_gf_CM_Zeratul_DevolveUnitTypeAllowed(lv_newunittype) == true) && ((CatalogFieldValueGet(c_gameCatalogUnit, lv_newunittype, "Race", c_playerAny)) == lv_oldunitrace)) {
                lv_validunittypes[lv_numberofvalidunittypes] = lv_newunittype;
                lv_numberofvalidunittypes += 1;
            }

        }
        if ((lv_numberofvalidunittypes > 0)) {
            return lv_validunittypes[RandomInt(0, (lv_numberofvalidunittypes - 1))];
        }

    }
    return null;
}

void libCOMM_gf_CM_ZeratulProphecyEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, (lp_event));
}

void libCOMM_gf_CM_SendZeratulProphecyEventArtifact (string lp_event, int lp_zeratulPlayer, unit lp_artifactUnit, int lp_artifactNumber) {
    // Variable Declarations
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroUnit = libCOMI_gf_GetHeroUnitBad(lp_zeratulPlayer, "ZeratulCoop");

    // Implementation
    DataTableSetUnit(false, TriggerEventParamName((lp_event), "ZeratulEventUnit"), lv_heroUnit);
    DataTableSetUnit(false, TriggerEventParamName((lp_event), "ZeratulEventArtifactUnit"), lp_artifactUnit);
    DataTableSetInt(false, TriggerEventParamName((lp_event), "ZeratulEventPlayer"), lp_zeratulPlayer);
    DataTableSetInt(false, TriggerEventParamName((lp_event), "ZeratulEventArtifactNumber"), lp_artifactNumber);
    TriggerSendEvent((lp_event));
}

unit libCOMM_gf_CM_ZeratulProphecyEventGetUnit (int lp_unit) {
    // Automatic Variable Declarations
    int auto24C6AA48_val;

    // Implementation
    auto24C6AA48_val = lp_unit;
    if (auto24C6AA48_val == libCOMM_ge_CM_ZeratulProphecyEventUnits_ZeratulUnit) {
        return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "ZeratulEventUnit"));
    }
    else if (auto24C6AA48_val == libCOMM_ge_CM_ZeratulProphecyEventUnits_ArtifactUnit) {
        return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "ZeratulEventArtifactUnit"));
    }
    else {
    }
    return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "ZeratulEventUnit"));
}

int libCOMM_gf_CM_ZeratulProphecyEventGetArtifactNumber () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), "ZeratulEventArtifactNumber"));
}

int libCOMM_gf_CM_ZeratulProphecyEventGetPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), "ZeratulEventPlayer"));
}

void libCOMM_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb (unit lp_caster, point lp_spawnPoint, point lp_targetPoint) {
    // Variable Declarations
    point lv_point;
    unit lv_orb;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = lp_spawnPoint;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PurificationOrbSmall", c_unitCreateIgnorePlacement, UnitGetOwner(lp_caster), lv_point);
    lv_orb = UnitLastCreated();
    UnitIssueOrder(lv_orb, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
    UnitBehaviorAdd(lv_orb, "ZeratulPurificationNovaSmallOrbSearchBuff", lp_caster, 1);
}

int libCOMM_gf_CM_Zeratul_ProphecyHintLevel (int lp_artifactNumber) {
    // Variable Declarations
    fixed lv_hint_1_timing;
    fixed lv_hint_2_timing;
    fixed lv_hint_3_timing;
    fixed lv_masteryTimeReduction;

    // Automatic Variable Declarations
    int autoC7C495E8_val;

    // Variable Initialization
    lv_masteryTimeReduction = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryZeratulArtifactSpawnRateDisplayDummy", "Amount", libCOMM_gv_cM_ZeratulPlayer);

    // Implementation
    autoC7C495E8_val = lp_artifactNumber;
    if (autoC7C495E8_val == 3) {
        lv_hint_1_timing = libCOMM_gv_cM_ZeratulArtifact_3_Hint_1_Timing;
        lv_hint_2_timing = libCOMM_gv_cM_ZeratulArtifact_3_Hint_2_Timing;
        lv_hint_3_timing = libCOMM_gv_cM_ZeratulArtifact_3_Hint_3_Timing;
    }
    else if (autoC7C495E8_val == 2) {
        lv_hint_1_timing = libCOMM_gv_cM_ZeratulArtifact_2_Hint_1_Timing;
        lv_hint_2_timing = libCOMM_gv_cM_ZeratulArtifact_2_Hint_2_Timing;
        lv_hint_3_timing = libCOMM_gv_cM_ZeratulArtifact_2_Hint_3_Timing;
    }
    else if (autoC7C495E8_val == 1) {
        lv_hint_1_timing = libCOMM_gv_cM_ZeratulArtifact_1_Hint_1_Timing;
        lv_hint_2_timing = libCOMM_gv_cM_ZeratulArtifact_1_Hint_2_Timing;
        lv_hint_3_timing = libCOMM_gv_cM_ZeratulArtifact_1_Hint_3_Timing;
    }
    else {
        lv_hint_1_timing = (libCOMM_gv_cM_ZeratulProphecyArtifactNumber * 300.0);
        lv_hint_2_timing = (lv_hint_1_timing + 60.0);
        lv_hint_3_timing = (lv_hint_2_timing + 60.0);
    }
    if ((GameGetMissionTime() >= (lv_hint_3_timing - lv_masteryTimeReduction))) {
        return 3;
    }
    else if ((GameGetMissionTime() >= (lv_hint_2_timing - lv_masteryTimeReduction))) {
        return 2;
    }
    else if ((GameGetMissionTime() >= (lv_hint_1_timing - lv_masteryTimeReduction))) {
        return 1;
    }
    return 0;
}

void libCOMM_gf_CM_Zeratul_GiveProphecyHint (int lp_hintLevel) {
    // Variable Declarations
    point lv_randomPoint;
    const fixed lv_hintRadius1 = 35.0;
    const fixed lv_hintRadius2 = 25.0;
    const fixed lv_hintRadius3 = 15.0;
    point lv_p1;
    point lv_p2;
    fixed lv_r1;
    fixed lv_r2;

    // Automatic Variable Declarations
    int autoDE97015C_val;
    int auto139A80B5_val;

    // Variable Initialization

    // Implementation
    if ((lp_hintLevel == 0)) {
        return ;
    }
    else if ((libCOMM_gv_cM_ZeratulProphecyHintUnit != null)) {
        lv_p1 = UnitGetPosition(libCOMM_gv_cM_ZeratulProphecyHintUnit);
        lv_r1 = UnitGetCustomValue(libCOMM_gv_cM_ZeratulProphecyHintUnit, 0);
    }
    else if (true) {
        lv_p1 = PlayerStartLocation(libCOMM_gv_cM_ZeratulPlayer);
        lv_r1 = 150.0;
    }
    lv_p2 = UnitGetPosition(libCOMM_gv_cM_ZeratulProphecyArtifact);
    autoDE97015C_val = lp_hintLevel;
    if (autoDE97015C_val == 1) {
        lv_r2 = lv_hintRadius1;
    }
    else if (autoDE97015C_val == 2) {
        lv_r2 = lv_hintRadius2;
    }
    else if (autoDE97015C_val == 3) {
        lv_r2 = lv_hintRadius3;
    }
    else {
    }
    while (((lv_randomPoint == null) || (DistanceBetweenPoints(lv_randomPoint, lv_p2) > lv_r2) || (RegionContainsPoint(RegionPlayableMap(), lv_randomPoint) == false))) {
        lv_randomPoint = RegionRandomPoint(RegionCircle(lv_p1, (lv_r1 - lv_r2)));
    }
    if ((libCOMM_gv_cM_ZeratulProphecyHintUnit != null)) {
        UnitSetPosition(libCOMM_gv_cM_ZeratulProphecyHintUnit, lv_randomPoint, false);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ProphecyArtifactHintUnit", c_unitCreateIgnorePlacement, libCOMM_gv_cM_ZeratulPlayer, lv_randomPoint);
        libCOMM_gv_cM_ZeratulProphecyHintUnit = UnitLastCreated();
    }
    UnitSetCustomValue(libCOMM_gv_cM_ZeratulProphecyHintUnit, 0, lv_r2);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupSingle(libCOMM_gv_cM_ZeratulPlayer), lv_randomPoint, 2.0, Color(50.20, 100.00, 100.00));
    auto139A80B5_val = lp_hintLevel;
    if (auto139A80B5_val == 1) {
        libNtve_gf_SendActorMessageToUnit(libCOMM_gv_cM_ZeratulProphecyHintUnit, "Signal Hint1");
    }
    else if (auto139A80B5_val == 2) {
        libNtve_gf_SendActorMessageToUnit(libCOMM_gv_cM_ZeratulProphecyHintUnit, "Signal Hint2");
    }
    else if (auto139A80B5_val == 3) {
        libNtve_gf_SendActorMessageToUnit(libCOMM_gv_cM_ZeratulProphecyHintUnit, "Signal Hint3");
    }
    else {
    }
}

void libCOMM_gf_CM_Zeratul_SetProphecyCooldown () {
    // Variable Declarations
    fixed lv_targetMissionTime;
    fixed lv_cooldownTime;
    fixed lv_masteryTimeReduction;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_masteryTimeReduction = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryZeratulArtifactSpawnRateDisplayDummy", "Amount", libCOMM_gv_cM_ZeratulPlayer);

    // Implementation
    if ((libCOMM_gv_cM_ZeratulProphecyArtifactNumber > libCOMM_gf_CM_Zeratul_GetArtifactLimit(libCOMM_gv_cM_ZeratulPlayer))) {
        libNtve_gf_PlayerRemoveCooldown(libCOMM_gv_cM_ZeratulPlayer, "Abil/ProphecyVision");
        return ;
    }
    else if ((libCOMM_gv_cM_ZeratulProphecyArtifactNumber > 3)) {
        lv_targetMissionTime = (-60.0 + libCOMM_gv_cM_ZeratulProphecyArtifactNumber * 300.0 - lv_masteryTimeReduction);
    }
    else if ((libCOMM_gv_cM_ZeratulProphecyArtifactNumber == 3)) {
        lv_targetMissionTime = (840.0 - lv_masteryTimeReduction);
    }
    else if ((libCOMM_gv_cM_ZeratulProphecyArtifactNumber == 2)) {
        lv_targetMissionTime = (540.0 - lv_masteryTimeReduction);
    }
    lv_cooldownTime = MinF((180.0 - lv_masteryTimeReduction), (lv_targetMissionTime - GameGetMissionTime()));
    lv_cooldownTime = MaxF(lv_cooldownTime, 10.0);
    if ((PlayerGetCooldown(libCOMM_gv_cM_ZeratulPlayer, "Abil/ProphecyVision") < lv_cooldownTime)) {
        libNtve_gf_PlayerRemoveCooldown(libCOMM_gv_cM_ZeratulPlayer, "Abil/ProphecyVision");
        PlayerAddCooldown(libCOMM_gv_cM_ZeratulPlayer, "Abil/ProphecyVision", lv_cooldownTime);
    }

}

void libCOMM_gf_CM_Zeratul_SpawnResourcePickups (int lp_count, point lp_location) {
    // Variable Declarations
    fixed lv_randomValue;

    // Automatic Variable Declarations
    playergroup autoF3DBE702_g;
    int autoF3DBE702_var;
    int auto16B245C8_n;
    int auto16B245C8_i;

    // Variable Initialization

    // Implementation
    autoF3DBE702_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    autoF3DBE702_var = -1;
    while (true) {
        autoF3DBE702_var = PlayerGroupNextPlayer(autoF3DBE702_g, autoF3DBE702_var);
        if (autoF3DBE702_var < 0) { break; }
        auto16B245C8_n = lp_count;
        for (auto16B245C8_i = 1; auto16B245C8_i <= auto16B245C8_n; auto16B245C8_i += 1) {
            UnitCreate(1, "ProphecyArtifactMineralPickup", 0, autoF3DBE702_var, lp_location, libNtve_gf_RandomAngle());
            lv_randomValue = RandomFixed(0.0, 100.0);
            if ((lv_randomValue < 50.0)) {
                UnitCreateEffectUnit(UnitLastCreated(), "ItemKnockbackBy2", UnitLastCreated());
            }
            else {
                UnitCreateEffectUnit(UnitLastCreated(), "ItemKnockbackBy3", UnitLastCreated());
            }
            UnitCreate(1, "ProphecyArtifactVespenePickup", 0, autoF3DBE702_var, lp_location, libNtve_gf_RandomAngle());
            lv_randomValue = RandomFixed(0.0, 100.0);
            if ((lv_randomValue < 50.0)) {
                UnitCreateEffectUnit(UnitLastCreated(), "ItemKnockbackBy2", UnitLastCreated());
            }
            else {
                UnitCreateEffectUnit(UnitLastCreated(), "ItemKnockbackBy3", UnitLastCreated());
            }
        }
    }
}

void libCOMM_gf_CM_Zeratul_PlaceArtifact (int lp_p) {
    // Variable Declarations
    point lv_artifactPoint;
    int lv_i;
    int lv_randomIndex;
    int lv_poolIndex;
    int lv_minDistance;
    int lv_maxDistance;

    // Automatic Variable Declarations
    int auto1938460D_val;

    // Variable Initialization

    // Implementation
    lv_artifactPoint = libCOMM_gf_CM_Zeratul_FindArtifactPlacementPointNew(libCOMM_gv_cM_ZeratulProphecyArtifactNumber);
    auto1938460D_val = libCOMM_gv_cM_ZeratulProphecyArtifactNumber;
    if (auto1938460D_val == 1) {
        UnitCreate(1, "ZeratulArtifactPickup1", 0, lp_p, lv_artifactPoint, libNtve_gf_RandomAngle());
    }
    else if (auto1938460D_val == 2) {
        UnitCreate(1, "ZeratulArtifactPickup2", 0, lp_p, lv_artifactPoint, libNtve_gf_RandomAngle());
    }
    else if (auto1938460D_val == 3) {
        UnitCreate(1, "ZeratulArtifactPickup3", 0, lp_p, lv_artifactPoint, libNtve_gf_RandomAngle());
    }
    else {
        UnitCreate(1, "ZeratulArtifactPickupUnlimited", 0, lp_p, lv_artifactPoint, libNtve_gf_RandomAngle());
    }
    libCOMM_gv_cM_ZeratulProphecyArtifact = UnitLastCreated();
    if ((UnitIsValid(libCOMM_gv_cM_ZeratulProphecyCamera) == true)) {
        UnitSetPosition(libCOMM_gv_cM_ZeratulProphecyCamera, UnitGetPosition(libCOMM_gv_cM_ZeratulProphecyArtifact), false);
    }
    else {
        UnitCreate(1, "ProphecyCamera", 0, lp_p, UnitGetPosition(libCOMM_gv_cM_ZeratulProphecyArtifact), 270.0);
        libCOMM_gv_cM_ZeratulProphecyCamera = UnitLastCreated();
        libNtve_gf_ShowHideUnit(libCOMM_gv_cM_ZeratulProphecyCamera, false);
        CameraSetChannel(libCOMM_gv_cM_ZeratulPlayer, libCOMM_gv_cM_ZeratulProphecyCamera, "Camera_Basic", 1, 1.0);
    }
}

void libCOMM_gf_CM_ZeratulProphecyArtifactBadRegion_Set () {
    // Automatic Variable Declarations
    unitgroup auto1B4939B3_g;
    int auto1B4939B3_u;
    unit auto1B4939B3_var;

    // Implementation
    libCOMM_gv_cM_ZeratulProphecyArtifactBadRegion = null;
    auto1B4939B3_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterInvulnerable - 32)), 0, (1 << (c_targetFilterDead - 32))), 0);
    auto1B4939B3_u = UnitGroupCount(auto1B4939B3_g, c_unitCountAll);
    for (;; auto1B4939B3_u -= 1) {
        auto1B4939B3_var = UnitGroupUnitFromEnd(auto1B4939B3_g, auto1B4939B3_u);
        if (auto1B4939B3_var == null) { break; }
        if ((libCOMM_gv_cM_ZeratulProphecyArtifactBadRegion == null)) {
            libCOMM_gv_cM_ZeratulProphecyArtifactBadRegion = RegionCircle(UnitGetPosition(auto1B4939B3_var), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(auto1B4939B3_var), "Radius", UnitGetOwner(auto1B4939B3_var)));
        }
        else {
            RegionAddRegion(libCOMM_gv_cM_ZeratulProphecyArtifactBadRegion, RegionCircle(UnitGetPosition(auto1B4939B3_var), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(auto1B4939B3_var), "Radius", UnitGetOwner(auto1B4939B3_var))));
        }
    }
}

int libCOMM_gf_CM_Zeratul_GetArtifactDifficultyIndex (int lp_artifactNumber, string lp_artifactData) {
    // Variable Declarations
    int lv_artifactdifficultyindex;
    int lv_difficultylevel;

    // Automatic Variable Declarations
    const int auto2EEA4E21_ae = 1;
    const int auto2EEA4E21_ai = -1;

    // Variable Initialization
    lv_difficultylevel = libCOMI_gf_CC_DifficultyIndex(libCOMI_gf_DifficultyLevelForPlayerCoop(libCOMM_gv_cM_ZeratulPlayer));

    // Implementation
    lv_artifactdifficultyindex = MinI(lp_artifactNumber, libCOMM_gv_cM_ZeratulProphecyArtifactFinalUniqueNumber);
    for ( ; ( (auto2EEA4E21_ai >= 0 && lv_artifactdifficultyindex <= auto2EEA4E21_ae) || (auto2EEA4E21_ai < 0 && lv_artifactdifficultyindex >= auto2EEA4E21_ae) ) ; lv_artifactdifficultyindex += auto2EEA4E21_ai ) {
        if ((UserDataGetInt("XAC_ZeratulArtifactPlacement", lp_artifactData, "minDifficulty", lv_artifactdifficultyindex) <= lv_difficultylevel)) {
            return lv_artifactdifficultyindex;
        }

    }
    return 1;
}

point libCOMM_gf_CM_Zeratul_FindArtifactPlacementPointOld (fixed lp_maxDistance) {
    // Variable Declarations
    fixed lv_startLocationBuffer;
    fixed lv_nearbyUnitHealth;
    fixed lv_nearbyUnitHealthLimit;
    fixed lv_distanceBetweenPoints;
    fixed lv_angleDelta;
    fixed lv_angleIter;
    point lv_pointIter;
    fixed lv_radiusIter;
    int lv_validPointsCount;
    point lv_pickedPoint;
    unit lv_dEBUG_lastPicked;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    fixed auto82779DD0_ae;
    fixed auto82779DD0_ai;
    const fixed auto8DA33354_ae = 360.0;
    fixed auto8DA33354_ai;
    unitgroup auto31999576_g;
    int auto31999576_u;
    unit auto31999576_var;

    // Variable Initialization
    lv_startLocationBuffer = 15.0;
    lv_nearbyUnitHealthLimit = 1000.0;
    lv_distanceBetweenPoints = 8.0;
    lv_heroUnit = libCOMI_gf_GetHeroUnit(libCOMM_gv_cM_ZeratulPlayer, "Zeratul");

    // Implementation
    auto82779DD0_ae = lv_startLocationBuffer;
    auto82779DD0_ai = (0.0 - lv_distanceBetweenPoints);
    lv_radiusIter = lp_maxDistance;
    for ( ; ( (auto82779DD0_ai >= 0 && lv_radiusIter <= auto82779DD0_ae) || (auto82779DD0_ai < 0 && lv_radiusIter >= auto82779DD0_ae) ) ; lv_radiusIter += auto82779DD0_ai ) {
        lv_angleDelta = (ASin(((lv_distanceBetweenPoints / 2.0) / lv_radiusIter)) * 2.0);
        auto8DA33354_ai = lv_angleDelta;
        lv_angleIter = RandomFixed(0.0, lv_angleDelta);
        for ( ; ( (auto8DA33354_ai >= 0 && lv_angleIter <= auto8DA33354_ae) || (auto8DA33354_ai < 0 && lv_angleIter >= auto8DA33354_ae) ) ; lv_angleIter += auto8DA33354_ai ) {
            lv_pointIter = PointWithOffsetPolar(PlayerStartLocation(libCOMM_gv_cM_ZeratulPlayer), lv_radiusIter, lv_angleIter);
            if ((IntToFixed(lv_validPointsCount) < (lp_maxDistance * 0.33)) && (PointPathingPassable(lv_pointIter) == true) && (PointPathingCost(PlayerStartLocation(libCOMM_gv_cM_ZeratulPlayer), lv_pointIter) <= FixedToInt(lp_maxDistance)) && (DistanceBetweenPoints(PlayerStartLocation(PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), 1)), lv_pointIter) >= lv_startLocationBuffer) && (DistanceBetweenPoints(PlayerStartLocation(PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), 2)), lv_pointIter) >= lv_startLocationBuffer) && ((UnitIsAlive(lv_heroUnit) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_heroUnit), lv_pointIter) > libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ProphecyArtifactRevealSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)))) {
                lv_nearbyUnitHealth = 0;
                auto31999576_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMM_gv_cM_ZeratulPlayer, c_unitAllianceEnemy, RegionCircle(lv_pointIter, 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto31999576_u = UnitGroupCount(auto31999576_g, c_unitCountAll);
                for (;; auto31999576_u -= 1) {
                    auto31999576_var = UnitGroupUnitFromEnd(auto31999576_g, auto31999576_u);
                    if (auto31999576_var == null) { break; }
                    lv_nearbyUnitHealth += UnitGetPropertyFixed(auto31999576_var, c_unitPropLife, c_unitPropCurrent);
                    lv_nearbyUnitHealth += UnitGetPropertyFixed(auto31999576_var, c_unitPropShields, c_unitPropCurrent);
                }
                if ((lv_nearbyUnitHealth <= lv_nearbyUnitHealthLimit)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCube", 0, 0, lv_pointIter);
                    lv_validPointsCount += 1;
                    if ((RandomFixed(0.0, 1.0) <= (1.0 / lv_validPointsCount))) {
                        lv_pickedPoint = lv_pointIter;
                        if ((UnitIsValid(lv_dEBUG_lastPicked) == true)) {
                            ActorSend(libNtve_gf_MainActorofUnit(lv_dEBUG_lastPicked), "SetTintColor 255,255,255");
                        }

                        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetTintColor 255,0,0");
                        lv_dEBUG_lastPicked = UnitLastCreated();
                    }

                }

            }

        }
    }
    return lv_pickedPoint;
}

point libCOMM_gf_CM_Zeratul_FindArtifactPlacementPointNew (int lp_artifactNumber) {
    // Variable Declarations
    string lv_artifactPlacementData;
    int lv_artifactIndex;
    point lv_artifactOrigin;
    fixed lv_minSearchRadius;
    fixed lv_maxSearchRadius;
    fixed lv_maxWalkingDistance;
    bool lv_checkPathing;
    point lv_pathingCheckPoint;
    fixed lv_nearbyUnitHealth;
    fixed lv_nearbyUnitHealthLimit;
    fixed lv_zeratulSearchRadius;
    bool lv_pointIsPassableAndNotNearZeratul;
    fixed lv_distanceBetweenPoints;
    fixed lv_angleDelta;
    fixed lv_angleIter;
    point lv_pointIter;
    fixed lv_radiusIter;
    int lv_validPointsCount;
    point lv_pickedPoint;
    unit lv_dEBUG_lastPicked;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    fixed auto22016781_ae;
    fixed auto22016781_ai;
    const fixed autoC4CE9F08_ae = 360.0;
    fixed autoC4CE9F08_ai;
    unitgroup auto9AC6A2C9_g;
    int auto9AC6A2C9_u;
    unit auto9AC6A2C9_var;

    // Variable Initialization
    lv_artifactPlacementData = libCOMM_gf_CM_Zeratul_GetArtifactPlacementDataInstance();
    lv_artifactIndex = libCOMM_gf_CM_Zeratul_GetArtifactDifficultyIndex(lp_artifactNumber, lv_artifactPlacementData);
    lv_artifactOrigin = libCOMM_gf_CM_Zeratul_GetArtifactPlacementOrigin(lv_artifactPlacementData);
    lv_minSearchRadius = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "minSearchRadius", lv_artifactIndex);
    lv_maxSearchRadius = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "maxSearchRadius", lv_artifactIndex);
    lv_maxWalkingDistance = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "maxWalkingDistance", lv_artifactIndex);
    lv_checkPathing = (UserDataGetInt("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "checkPathing", lv_artifactIndex) != 0);
    lv_pathingCheckPoint = UnitTypePlacementFromPoint("ZeratulCoop", libCOMM_gv_cM_ZeratulPlayer, lv_artifactOrigin, 500.0);
    lv_nearbyUnitHealthLimit = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "maxNearbyHealth", lv_artifactIndex);
    lv_zeratulSearchRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ProphecyArtifactRevealSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny);
    lv_distanceBetweenPoints = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "distanceBetweenPoints", 1);
    lv_heroUnit = libCOMI_gf_GetHeroUnit(libCOMM_gv_cM_ZeratulPlayer, "Zeratul");

    // Implementation
    libCOMM_gf_CM_ZeratulProphecyArtifactBadRegion_Set();
    auto22016781_ae = lv_minSearchRadius;
    auto22016781_ai = (0.0 - lv_distanceBetweenPoints);
    lv_radiusIter = lv_maxSearchRadius;
    for ( ; ( (auto22016781_ai >= 0 && lv_radiusIter <= auto22016781_ae) || (auto22016781_ai < 0 && lv_radiusIter >= auto22016781_ae) ) ; lv_radiusIter += auto22016781_ai ) {
        lv_angleDelta = (ASin(((lv_distanceBetweenPoints / 2.0) / lv_radiusIter)) * 2.0);
        autoC4CE9F08_ai = lv_angleDelta;
        lv_angleIter = RandomFixed(0.0, lv_angleDelta);
        for ( ; ( (autoC4CE9F08_ai >= 0 && lv_angleIter <= autoC4CE9F08_ae) || (autoC4CE9F08_ai < 0 && lv_angleIter >= autoC4CE9F08_ae) ) ; lv_angleIter += autoC4CE9F08_ai ) {
            lv_pointIter = PointWithOffsetPolar(lv_artifactOrigin, lv_radiusIter, lv_angleIter);
            lv_pointIsPassableAndNotNearZeratul = ((PointPathingPassable(lv_pointIter) == true) && (!(UnitIsAlive(lv_heroUnit)) || (DistanceBetweenPoints(UnitGetPosition(lv_heroUnit), lv_pointIter) > lv_zeratulSearchRadius)) && (RegionContainsPoint(libCOMM_gv_cM_ZeratulProphecyArtifactBadRegion, lv_pointIter) == false));
            if ((lv_pointIsPassableAndNotNearZeratul == true) && ((lv_checkPathing == false) || (PointPathingIsConnected(lv_pathingCheckPoint, lv_pointIter) == true)) && ((lv_maxWalkingDistance == 0.0) || (PointPathingCost(lv_pathingCheckPoint, lv_pointIter) <= FixedToInt(lv_maxWalkingDistance)))) {
                if ((lv_nearbyUnitHealthLimit > 0.0)) {
                    lv_nearbyUnitHealth = 0;
                    auto9AC6A2C9_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMM_gv_cM_ZeratulPlayer, c_unitAllianceEnemy, RegionCircle(lv_pointIter, 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto9AC6A2C9_u = UnitGroupCount(auto9AC6A2C9_g, c_unitCountAll);
                    for (;; auto9AC6A2C9_u -= 1) {
                        auto9AC6A2C9_var = UnitGroupUnitFromEnd(auto9AC6A2C9_g, auto9AC6A2C9_u);
                        if (auto9AC6A2C9_var == null) { break; }
                        if (((UnitFilterMatch(auto9AC6A2C9_var, UnitGetOwner(auto9AC6A2C9_var), UnitFilter(0, 0, (1 << c_targetFilterStructure), 0)) == true) || (UnitGetType(auto9AC6A2C9_var) == "PhotonCannon") || (UnitGetType(auto9AC6A2C9_var) == "SpineCrawler") || (UnitGetType(auto9AC6A2C9_var) == "Bunker"))) {
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto9AC6A2C9_var, c_unitPropLife, c_unitPropCurrent);
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto9AC6A2C9_var, c_unitPropShields, c_unitPropCurrent);
                        }

                    }
                }

                if (((lv_nearbyUnitHealthLimit <= 0.0) || (lv_nearbyUnitHealth <= lv_nearbyUnitHealthLimit))) {
                    lv_validPointsCount += 1;
                    if ((RandomFixed(0.0, 1.0) <= (1.0 / lv_validPointsCount))) {
                        lv_pickedPoint = lv_pointIter;
                    }

                }

            }
        }
    }
    if ((lv_validPointsCount == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMM_8D0504BD"), true);
        return UnitTypePlacementFromPoint("ZeratulArtifactPickup1", libCOMM_gv_cM_ZeratulPlayer, lv_artifactOrigin, 500.0);
    }

    return lv_pickedPoint;
}

point libCOMM_gf_CM_Zeratul_FindArtifactPlacementPointDebug (int lp_artifactNumber, color lp_color, color lp_pickedColor) {
    // Variable Declarations
    string lv_artifactPlacementData;
    int lv_artifactIndex;
    point lv_artifactOrigin;
    fixed lv_minSearchRadius;
    fixed lv_maxSearchRadius;
    fixed lv_maxWalkingDistance;
    bool lv_checkPathing;
    point lv_pathingCheckPoint;
    fixed lv_nearbyUnitHealth;
    fixed lv_nearbyUnitHealthLimit;
    fixed lv_zeratulSearchRadius;
    bool lv_pointIsPassableAndNotNearZeratul;
    fixed lv_distanceBetweenPoints;
    fixed lv_angleDelta;
    fixed lv_angleIter;
    point lv_pointIter;
    fixed lv_radiusIter;
    int lv_validPointsCount;
    point lv_pickedPoint;
    unit lv_dEBUG_lastPicked;
    string lv_tintactormessage;
    string lv_pickedtintactormessage;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    fixed autoFC7EE10F_ae;
    fixed autoFC7EE10F_ai;
    const fixed autoFCBF9785_ae = 360.0;
    fixed autoFCBF9785_ai;
    unitgroup autoB6333930_g;
    int autoB6333930_u;
    unit autoB6333930_var;

    // Variable Initialization
    lv_artifactPlacementData = libCOMM_gf_CM_Zeratul_GetArtifactPlacementDataInstance();
    lv_artifactIndex = libCOMM_gf_CM_Zeratul_GetArtifactDifficultyIndex(lp_artifactNumber, lv_artifactPlacementData);
    lv_artifactOrigin = libCOMM_gf_CM_Zeratul_GetArtifactPlacementOrigin(lv_artifactPlacementData);
    lv_minSearchRadius = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "minSearchRadius", lv_artifactIndex);
    lv_maxSearchRadius = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "maxSearchRadius", lv_artifactIndex);
    lv_maxWalkingDistance = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "maxWalkingDistance", lv_artifactIndex);
    lv_checkPathing = (UserDataGetInt("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "checkPathing", lv_artifactIndex) != 0);
    lv_pathingCheckPoint = UnitTypePlacementFromPoint("ZeratulCoop", libCOMM_gv_cM_ZeratulPlayer, lv_artifactOrigin, 500.0);
    lv_nearbyUnitHealthLimit = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "maxNearbyHealth", lv_artifactIndex);
    lv_zeratulSearchRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ProphecyArtifactRevealSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny);
    lv_distanceBetweenPoints = UserDataGetFixed("XAC_ZeratulArtifactPlacement", lv_artifactPlacementData, "distanceBetweenPoints", 1);
    lv_tintactormessage = (("SetTintColor " + libNtve_gf_ConvertColorToString(lp_color)));
    lv_pickedtintactormessage = (("SetTintColor " + libNtve_gf_ConvertColorToString(lp_pickedColor)));
    lv_heroUnit = libCOMI_gf_GetHeroUnit(libCOMM_gv_cM_ZeratulPlayer, "Zeratul");

    // Implementation
    libCOMM_gf_CM_ZeratulProphecyArtifactBadRegion_Set();
    autoFC7EE10F_ae = lv_minSearchRadius;
    autoFC7EE10F_ai = (0.0 - lv_distanceBetweenPoints);
    lv_radiusIter = lv_maxSearchRadius;
    for ( ; ( (autoFC7EE10F_ai >= 0 && lv_radiusIter <= autoFC7EE10F_ae) || (autoFC7EE10F_ai < 0 && lv_radiusIter >= autoFC7EE10F_ae) ) ; lv_radiusIter += autoFC7EE10F_ai ) {
        lv_angleDelta = (ASin(((lv_distanceBetweenPoints / 2.0) / lv_radiusIter)) * 2.0);
        autoFCBF9785_ai = lv_angleDelta;
        lv_angleIter = RandomFixed(0.0, lv_angleDelta);
        for ( ; ( (autoFCBF9785_ai >= 0 && lv_angleIter <= autoFCBF9785_ae) || (autoFCBF9785_ai < 0 && lv_angleIter >= autoFCBF9785_ae) ) ; lv_angleIter += autoFCBF9785_ai ) {
            lv_pointIter = PointWithOffsetPolar(lv_artifactOrigin, lv_radiusIter, lv_angleIter);
            lv_pointIsPassableAndNotNearZeratul = ((PointPathingPassable(lv_pointIter) == true) && (!(UnitIsAlive(lv_heroUnit)) || (DistanceBetweenPoints(UnitGetPosition(lv_heroUnit), lv_pointIter) > lv_zeratulSearchRadius)) && (RegionContainsPoint(libCOMM_gv_cM_ZeratulProphecyArtifactBadRegion, lv_pointIter) == false));
            if ((lv_pointIsPassableAndNotNearZeratul == true) && ((lv_checkPathing == false) || (PointPathingIsConnected(lv_pathingCheckPoint, lv_pointIter) == true)) && ((lv_maxWalkingDistance == 0.0) || (PointPathingCost(lv_pathingCheckPoint, lv_pointIter) <= FixedToInt(lv_maxWalkingDistance)))) {
                if ((lv_nearbyUnitHealthLimit > 0.0)) {
                    lv_nearbyUnitHealth = 0;
                    autoB6333930_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMM_gv_cM_ZeratulPlayer, c_unitAllianceEnemy, RegionCircle(lv_pointIter, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    autoB6333930_u = UnitGroupCount(autoB6333930_g, c_unitCountAll);
                    for (;; autoB6333930_u -= 1) {
                        autoB6333930_var = UnitGroupUnitFromEnd(autoB6333930_g, autoB6333930_u);
                        if (autoB6333930_var == null) { break; }
                        if (((UnitFilterMatch(autoB6333930_var, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure), 0)) == true) || (UnitGetType(autoB6333930_var) == "PhotonCannon") || (UnitGetType(autoB6333930_var) == "SpineCrawler") || (UnitGetType(autoB6333930_var) == "Bunker"))) {
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(autoB6333930_var, c_unitPropLife, c_unitPropCurrent);
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(autoB6333930_var, c_unitPropShields, c_unitPropCurrent);
                        }

                    }
                }

                if (((lv_nearbyUnitHealthLimit <= 0.0) || (lv_nearbyUnitHealth <= lv_nearbyUnitHealthLimit))) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCube", 0, 0, lv_pointIter);
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), lv_tintactormessage);
                    lv_validPointsCount += 1;
                    if ((RandomFixed(0.0, 1.0) <= (1.0 / lv_validPointsCount))) {
                        lv_pickedPoint = lv_pointIter;
                        if ((UnitIsValid(lv_dEBUG_lastPicked) == true)) {
                            ActorSend(libNtve_gf_MainActorofUnit(lv_dEBUG_lastPicked), lv_tintactormessage);
                        }

                        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), lv_pickedtintactormessage);
                        lv_dEBUG_lastPicked = UnitLastCreated();
                    }

                }

            }
        }
    }
    TextExpressionSetToken("Param/Expression/lib_COMM_6B5386D3", "A", IntToText(lv_validPointsCount));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMM_6B5386D3"), true);
    if ((lv_validPointsCount == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMM_213E048D"), true);
        return UnitTypePlacementFromPoint("ZeratulArtifactPickup1", libCOMM_gv_cM_ZeratulPlayer, lv_artifactOrigin, 0.0);
    }

    return lv_pickedPoint;
}

string libCOMM_gf_CM_Zeratul_GetArtifactPlacementDataInstance () {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    string auto3BC7A75B_userType;
    int auto3BC7A75B_i;

    // Variable Initialization

    // Implementation
    auto3BC7A75B_userType = "XAC_ZeratulArtifactPlacement";
    auto3BC7A75B_i = 1;
    for ( ; auto3BC7A75B_i <= UserDataInstanceCount(auto3BC7A75B_userType) ; auto3BC7A75B_i += 1 ) {
        lv_instance = UserDataInstance(auto3BC7A75B_userType, auto3BC7A75B_i);
        if ((UserDataGetGameLink("XAC_ZeratulArtifactPlacement", lv_instance, "MapLink", 1) == libCOMI_gf_CC_CurrentMap())) {
            return lv_instance;
        }

    }
    return "GlobalDefault";
}

point libCOMM_gf_CM_Zeratul_GetArtifactPlacementOrigin (string lp_artifactPlacementData) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("XAC_ZeratulArtifactPlacement", lp_artifactPlacementData, "useZeratulArtifactOrigin", 1) != 0)) {
        return PointFromName("ZeratulArtifactOrigin");
    }

    return MidPoint(PlayerStartLocation(1), PlayerStartLocation(2));
}

int libCOMM_gf_CM_Zeratul_GetArtifactLimit (int lp_zeratulPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return RoundI(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ZeratulArtifactLimitDummy", "Amount", lp_zeratulPlayer));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugCommanderCooldowns
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DebugCommanderCooldowns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto2EC4D856_val;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2EC4D856_val = libCOMI_gf_GetPlayerCommanderGameLink(EventPlayer());
    if (auto2EC4D856_val == "Fenix") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "SOASummonFenix");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "SOASummonFenixDragoon");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "SOASummonFenixArbiter");
    }
    else if (auto2EC4D856_val == "Alarak") {
        libNtve_gf_UnitAbilityRemoveChargeUsed(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "AlarakStructureOvercharge", "Abil/AlarakStructureOvercharge");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/AlarakACSummonDeathfleetTarget");
    }
    else if (auto2EC4D856_val == "Artanis") {
        libNtve_gf_UnitRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SOACaster");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SoASuperShield", "Abil/SoASuperShield");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SOAOrbitalStrikeActivate", "Abil/SOAOrbitalStrikeActivate");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SOAStrafeAttack", "Abil/SOAStrafeAttack");
    }
    else if (auto2EC4D856_val == "Vorazun") {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SOADarkPylon", "Abil/SOADarkPylon");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SOAShadowGuardCalldown", "Abil/SOAShadowGuardCalldown");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SOATimeFreeze", "Abil/SOATimeFreeze");
    }
    else if (auto2EC4D856_val == "Karax") {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SOAThermalLanceActivate", "Abil/SOAThermalLanceActivate");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SOAMapWideChrono", "Abil/SOAMapWideChrono");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SOAPurifierBeam", "Abil/SOAPurifierBeam");
    }
    else if (auto2EC4D856_val == "Raynor") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/VoidCoopSummonHyperion");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/BansheeAirstrike");
    }
    else if (auto2EC4D856_val == "Swann") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DrakkenLaserDrillBFG");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DrakkenLaserDrillNuke");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/SpecialDelivery");
    }
    else if (auto2EC4D856_val == "Nova") {
        libNtve_gf_PlayerRemoveChargeUsed(EventPlayer(), "Abil/NovaDefensiveMatrixDrone");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "NovaGriffinBombingRunActivate", "Abil/NovaGriffinBombingRunActivate");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "NovaGriffinTransportLoadUnits", "Abil/NovaGriffinTransportLoadUnits");
    }
    else if (auto2EC4D856_val == "Abathur") {
        libNtve_gf_PlayerRemoveChargeUsed(EventPlayer(), "Abil/ToxicNestBuild");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "AbathurMend", "Abil/AbathurMend");
        libNtve_gf_UnitAbilityRemoveChargeUsed(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "AbathurMend", "Abil/AbathurMend");
    }
    else if (auto2EC4D856_val == "Stukov") {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SIStukovInfestStructure", "Abil/SIStukovInfestStructure");
        libNtve_gf_UnitAbilityRemoveChargeUsed(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SIStukovInfestStructureUpgraded", "Abil/SIStukovInfestStructureUpgraded");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/StukovSummonApocalisk");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/StukovSummonAleksander");
    }
    else if (auto2EC4D856_val == "Dehaka") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DehakaGlevigTopBar");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DehakaMurvarTopBar");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DehakaDakrunTopBar");
    }
    else {
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_COMM_7DF24E99") + IntToText(EventPlayer())), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DebugCommanderCooldowns_Init () {
    libCOMM_gt_CM_DebugCommanderCooldowns = TriggerCreate("libCOMM_gt_CM_DebugCommanderCooldowns_Func");
    TriggerAddEventChatMessage(libCOMM_gt_CM_DebugCommanderCooldowns, c_playerAny, "-coopcd", false);
    TriggerAddEventChatMessage(libCOMM_gt_CM_DebugCommanderCooldowns, c_playerAny, "cdr", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldColorUnitCreate (Alarak/Fenix)
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_ShieldColorUnitCreateAlarakFenix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_commander;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();
    lv_commander = PlayerCommander(UnitGetOwner(lv_unit));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_commander == "Alarak")) {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "AliasAdd _ShieldRed");
    }

    if ((lv_commander == "Fenix")) {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "AliasAdd _ShieldYellow");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_ShieldColorUnitCreateAlarakFenix_Init () {
    libCOMM_gt_ShieldColorUnitCreateAlarakFenix = TriggerCreate("libCOMM_gt_ShieldColorUnitCreateAlarakFenix_Func");
    TriggerAddEventUnitCreated(libCOMM_gt_ShieldColorUnitCreateAlarakFenix, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldColorUnitMorph (Alarak/Fenix)
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_ShieldColorUnitMorphAlarakFenix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_commander;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_commander = PlayerCommander(UnitGetOwner(lv_unit));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_commander == "Alarak")) {
        libNtve_gf_SendActorMessageToUnit(lv_unit, "AliasAdd _ShieldRed");
    }

    if ((lv_commander == "Fenix")) {
        libNtve_gf_SendActorMessageToUnit(lv_unit, "AliasAdd _ShieldYellow");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_ShieldColorUnitMorphAlarakFenix_Init () {
    libCOMM_gt_ShieldColorUnitMorphAlarakFenix = TriggerCreate("libCOMM_gt_ShieldColorUnitMorphAlarakFenix_Func");
    TriggerAddEventUnitAbility(libCOMM_gt_ShieldColorUnitMorphAlarakFenix, null, null, c_abilMorphStageActorEnd, false);
    TriggerAddEventUnitAbility(libCOMM_gt_ShieldColorUnitMorphAlarakFenix, null, null, c_abilBuildStageFinish, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_ShieldColorUnitMorphAlarakFenix, null, "PowerUserWarpable", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_TopBar Notifications Enable/Disable
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_AF_TopBarNotificationsEnableDisable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_UT_DevCommandsActive(libCOMI_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOMM_gt_AF_TopBarClicked) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMM_58029908"));
        TriggerEnable(libCOMM_gt_AF_TopBarClicked, true);
        TriggerEnable(libCOMM_gt_AF_MouseEntersTopBar, true);
        TriggerEnable(libCOMM_gt_AF_MouseExitsTopBar, true);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMM_1486DD4B"));
        TriggerEnable(libCOMM_gt_AF_TopBarClicked, false);
        TriggerEnable(libCOMM_gt_AF_MouseEntersTopBar, false);
        TriggerEnable(libCOMM_gt_AF_MouseExitsTopBar, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_AF_TopBarNotificationsEnableDisable_Init () {
    libCOMM_gt_AF_TopBarNotificationsEnableDisable = TriggerCreate("libCOMM_gt_AF_TopBarNotificationsEnableDisable_Func");
    TriggerAddEventChatMessage(libCOMM_gt_AF_TopBarNotificationsEnableDisable, c_playerAny, "-topbar", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_TopBar Clicked
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_AF_TopBarClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vButtonIndex;
    soundlink lv_vSound;
    text lv_vColor;
    text lv_vColorReady;

    // Automatic Variable Declarations
    int autoBD33842E_val;

    // Variable Initialization
    lv_vSound = SoundLink("UI_CampaignHintNotify", -1);
    lv_vColor = StringExternal("Param/Value/lib_COMM_D27017F7");
    lv_vColorReady = StringExternal("Param/Value/lib_COMM_4BAF47BE");

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((EventDialogControl() == libCOMM_gv_aF_TopbarButton[0][EventPlayer()]) || (EventDialogControl() == libCOMM_gv_aF_TopbarButton[1][EventPlayer()]) || (EventDialogControl() == libCOMM_gv_aF_TopbarButton[2][EventPlayer()]) || (EventDialogControl() == libCOMM_gv_aF_TopbarButton[3][EventPlayer()]) || (EventDialogControl() == libCOMM_gv_aF_TopbarButton[4][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoBD33842E_val = EventDialogControl();
    if (autoBD33842E_val == libCOMM_gv_aF_TopbarButton[0][EventPlayer()]) {
        lv_vButtonIndex = 0;
    }
    else if (autoBD33842E_val == libCOMM_gv_aF_TopbarButton[1][EventPlayer()]) {
        lv_vButtonIndex = 1;
    }
    else if (autoBD33842E_val == libCOMM_gv_aF_TopbarButton[2][EventPlayer()]) {
        lv_vButtonIndex = 2;
    }
    else if (autoBD33842E_val == libCOMM_gv_aF_TopbarButton[3][EventPlayer()]) {
        lv_vButtonIndex = 3;
    }
    else if (autoBD33842E_val == libCOMM_gv_aF_TopbarButton[4][EventPlayer()]) {
        lv_vButtonIndex = 4;
    }
    else {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    if (((libCOMM_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex) == "") || ((libCOMI_gf_ActiveCommanderForPlayer3(EventPlayer()) == "Zagara") && (UnitGroupUnit(UnitSubgroupSelected(EventPlayer()), 1) != libCOMI_gf_GetHeroUnitBad(EventPlayer(), "ZagaraVoidCoop"))) || ((libCOMI_gf_ActiveCommanderForPlayer3(EventPlayer()) == "Kerrigan") && (UnitGroupUnit(UnitSubgroupSelected(EventPlayer()), 1) != libCOMI_gf_GetHeroUnitBad(EventPlayer(), "K5Kerrigan"))) || ((libCOMI_gf_ActiveCommanderForPlayer3(EventPlayer()) == "Nova") && (EventDialogControl() == libCOMM_gv_aF_TopbarButton[4][EventPlayer()]) && ((UnitGroupUnit(UnitSubgroupSelected(EventPlayer()), 1) != libCOMI_gf_GetHeroUnitBad(EventPlayer(), "NovaCoop")) || (UnitHasBehavior2(libCOMI_gf_GetHeroUnitBad(EventPlayer(), "NovaCoop"), "NovaCombatSuit") == true))))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    if ((libCOMM_gf_AF_GetAbility(EventPlayer(), lv_vButtonIndex) == null)) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    else if ((libCOMM_gf_AF_AbilityIsAvailable(EventPlayer(), lv_vButtonIndex) == false)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COMM_683812B6", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_COMM_683812B6", "B", StringExternal(libCOMM_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMM_683812B6"));
    }
    else if ((libCOMM_gf_AF_GetCharges(EventPlayer(), lv_vButtonIndex) > 0.0)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COMM_3E51C0CC", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_COMM_3E51C0CC", "B", StringExternal(libCOMM_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
        TextExpressionSetToken("Param/Expression/lib_COMM_3E51C0CC", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_COMM_3E51C0CC", "A", FixedToText(libCOMM_gf_AF_GetCharges(EventPlayer(), lv_vButtonIndex), 0));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMM_3E51C0CC"));
    }
    else if ((((libCOMM_gf_AF_AbilityHasCooldownAndEnergyCost(EventPlayer(), lv_vButtonIndex) == false) && (libCOMM_gf_AF_GetCooldown(EventPlayer(), lv_vButtonIndex) == 0.0)) || ((libCOMM_gf_AF_AbilityHasCooldownAndEnergyCost(EventPlayer(), lv_vButtonIndex) == true) && (libCOMM_gf_AF_GetCooldown(EventPlayer(), lv_vButtonIndex) == 0.0) && (libCOMM_gf_AF_EnergyCostofAbility(libCOMM_gf_AF_GetAbility(EventPlayer(), lv_vButtonIndex)) <= UnitGetPropertyFixed(libCOMM_gf_CM_PlayerGetGlobalCaster2(EventPlayer()), c_unitPropEnergy, c_unitPropCurrent))))) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COMM_DF073BEC", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_COMM_DF073BEC", "B", StringExternal(libCOMM_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMM_DF073BEC"));
    }
    else if ((libCOMM_gf_AF_GetCooldown(EventPlayer(), lv_vButtonIndex) > 0.0)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COMM_0E9FBDB7", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_COMM_0E9FBDB7", "B", StringExternal(libCOMM_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
        TextExpressionSetToken("Param/Expression/lib_COMM_0E9FBDB7", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_COMM_0E9FBDB7", "A", FixedToText(libCOMM_gf_AF_GetCooldown(EventPlayer(), lv_vButtonIndex), 0));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMM_0E9FBDB7"));
    }
    else if (true) {
        if ((libCOMM_gf_AF_EnergyCostofAbility(libCOMM_gf_AF_GetAbility(EventPlayer(), lv_vButtonIndex)) <= UnitGetPropertyFixed(libCOMM_gf_CM_PlayerGetGlobalCaster2(EventPlayer()), c_unitPropEnergy, c_unitPropCurrent))) {
            SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
            TextExpressionSetToken("Param/Expression/lib_COMM_F8FB2E05", "B", lv_vColorReady);
            TextExpressionSetToken("Param/Expression/lib_COMM_F8FB2E05", "C", StringExternal(libCOMM_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
            TextExpressionSetToken("Param/Expression/lib_COMM_F8FB2E05", "B", lv_vColorReady);
            TextExpressionSetToken("Param/Expression/lib_COMM_F8FB2E05", "A", FixedToText(UnitGetPropertyFixed(libCOMM_gf_CM_PlayerGetGlobalCaster2(EventPlayer()), c_unitPropEnergy, c_unitPropCurrent), 0));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMM_F8FB2E05"));
        }
        else {
            SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
            TextExpressionSetToken("Param/Expression/lib_COMM_0A70AA2C", "B", lv_vColor);
            TextExpressionSetToken("Param/Expression/lib_COMM_0A70AA2C", "C", StringExternal(libCOMM_gf_AF_GetButtonText(EventPlayer(), lv_vButtonIndex)));
            TextExpressionSetToken("Param/Expression/lib_COMM_0A70AA2C", "B", lv_vColor);
            TextExpressionSetToken("Param/Expression/lib_COMM_0A70AA2C", "A", FixedToText(UnitGetPropertyFixed(libCOMM_gf_CM_PlayerGetGlobalCaster2(EventPlayer()), c_unitPropEnergy, c_unitPropCurrent), 0));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMM_0A70AA2C"));
        }
    }
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_AF_TopBarClicked_Init () {
    libCOMM_gt_AF_TopBarClicked = TriggerCreate("libCOMM_gt_AF_TopBarClicked_Func");
    TriggerEnable(libCOMM_gt_AF_TopBarClicked, false);
    TriggerAddEventDialogControl(libCOMM_gt_AF_TopBarClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MouseEntersTopBar
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_AF_MouseEntersTopBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOMM_gv_aF_TopbarButton[0][EventPlayer()]) || (EventDialogControl() == libCOMM_gv_aF_TopbarButton[1][EventPlayer()]) || (EventDialogControl() == libCOMM_gv_aF_TopbarButton[2][EventPlayer()]) || (EventDialogControl() == libCOMM_gv_aF_TopbarButton[3][EventPlayer()]) || (EventDialogControl() == libCOMM_gv_aF_TopbarButton[4][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupSingle(EventPlayer()), c_uiCommandAllowSmartClick, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_AF_MouseEntersTopBar_Init () {
    libCOMM_gt_AF_MouseEntersTopBar = TriggerCreate("libCOMM_gt_AF_MouseEntersTopBar_Func");
    TriggerEnable(libCOMM_gt_AF_MouseEntersTopBar, false);
    TriggerAddEventDialogControl(libCOMM_gt_AF_MouseEntersTopBar, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MouseExitsTopBar
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_AF_MouseExitsTopBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOMM_gv_aF_TopbarButton[0][EventPlayer()]) || (EventDialogControl() == libCOMM_gv_aF_TopbarButton[1][EventPlayer()]) || (EventDialogControl() == libCOMM_gv_aF_TopbarButton[2][EventPlayer()]) || (EventDialogControl() == libCOMM_gv_aF_TopbarButton[3][EventPlayer()]) || (EventDialogControl() == libCOMM_gv_aF_TopbarButton[4][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupSingle(EventPlayer()), c_uiCommandAllowSmartClick, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_AF_MouseExitsTopBar_Init () {
    libCOMM_gt_AF_MouseExitsTopBar = TriggerCreate("libCOMM_gt_AF_MouseExitsTopBar_Func");
    TriggerEnable(libCOMM_gt_AF_MouseExitsTopBar, false);
    TriggerAddEventDialogControl(libCOMM_gt_AF_MouseExitsTopBar, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_GPReminderAbilityUsed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_GPReminderAbilityUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC28E37D0_g;
    int autoC28E37D0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    autoC28E37D0_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoC28E37D0_var = -1;
    while (true) {
        autoC28E37D0_var = PlayerGroupNextPlayer(autoC28E37D0_g, autoC28E37D0_var);
        if (autoC28E37D0_var < 0) { break; }
        if ((libCOMI_gv_cM_GPRemindersOn[autoC28E37D0_var] == true)) {
            return true;
        }

    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_GPReminderAbilityUsed_Init () {
    libCOMM_gt_CM_GPReminderAbilityUsed = TriggerCreate("libCOMM_gt_CM_GPReminderAbilityUsed_Func");
    TriggerEnable(libCOMM_gt_CM_GPReminderAbilityUsed, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SoASuperShield", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SOAOrbitalStrikeActivate", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("VoidSentryBlackHole", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SOADarkPylon", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SOAShadowGuardCalldown", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SpawnToxicNest", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("HHTrainTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Build
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CreepTumorBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "CreepTumorExhausted", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CreepTumorBuild_Init () {
    libCOMM_gt_CreepTumorBuild = TriggerCreate("libCOMM_gt_CreepTumorBuild_Func");
    TriggerAddEventUnitAbility(libCOMM_gt_CreepTumorBuild, null, AbilityCommand("CreepTumorBuild", 0), c_abilBuildStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Deathrattle Scrap Deaths
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_BanelingScourgeDeathrattleScrapDeaths_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingUnitMineralCost;
    int lv_dyingUnitVespeneCost;
    int lv_dyingUnitPlayer;
    int lv_scrapPlayerDivisor;
    int lv_hornerCommander;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dyingUnitPlayer = UnitGetOwner(EventUnit());
    lv_scrapPlayerDivisor = 10;
    lv_hornerCommander = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Horner", libCOMI_gf_GetAlliedCommandersPlayersCopy());

    // Conditions
    if (testConds) {
        if (!((lv_dyingUnitPlayer != c_playerAny))) {
            return false;
        }

        if (!((lv_hornerCommander != c_playerAny))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "HHScrapPickup", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "HotSSplitterlingBig") || (UnitGetType(EventUnit()) == "HotSSplitterlingBigBurrowed") || (UnitGetType(EventUnit()) == "Scourge") || (UnitGetType(EventUnit()) == "HHReaper") || (UnitGetType(EventUnit()) == "HHReaperFlying") || (UnitGetType(EventUnit()) == "HHHellion") || (UnitGetType(EventUnit()) == "HHHellionTank") || (UnitGetType(EventUnit()) == "HHWidowMine") || (UnitGetType(EventUnit()) == "HHWidowMineBurrowed") || (UnitGetType(EventUnit()) == "Supplicant")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_GetPlayerCommanderUserData(UnitGetOwner(EventUnitCreatedUnit())) == "Horner")) {
        lv_scrapPlayerDivisor = 5;
    }

    lv_dyingUnitMineralCost = (FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(0) + "]", EventPlayer()))) / lv_scrapPlayerDivisor);
    lv_dyingUnitVespeneCost = (FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(1) + "]", EventPlayer()))) / lv_scrapPlayerDivisor);
    if ((lv_dyingUnitMineralCost > 0)) {
        if ((RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerDoubleSalvageChanceDisplayDummy", "Amount", libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Horner", libCOMI_gf_GetAlliedCommandersPlayers()))))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, PointWithOffset(UnitGetPosition(EventUnit()), -0.25, 0.0));
            libCOMM_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, PointWithOffset(UnitGetPosition(EventUnit()), 0.25, 0.0));
            libCOMM_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, UnitGetPosition(EventUnit()));
            libCOMM_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_BanelingScourgeDeathrattleScrapDeaths_Init () {
    libCOMM_gt_BanelingScourgeDeathrattleScrapDeaths = TriggerCreate("libCOMM_gt_BanelingScourgeDeathrattleScrapDeaths_Func");
    TriggerEnable(libCOMM_gt_BanelingScourgeDeathrattleScrapDeaths, false);
    TriggerAddEventUnitDied(libCOMM_gt_BanelingScourgeDeathrattleScrapDeaths, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Econ Drop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_BanelingScourgeEconDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    string lv_resource;
    int lv_itPlayer;
    int lv_kerriganCommander;

    // Automatic Variable Declarations
    playergroup auto25916AE3_g;

    // Variable Initialization
    lv_kerriganCommander = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Kerrigan", libCOMI_gf_GetAlliedCommandersPlayers());

    // Conditions
    if (testConds) {
        if (!((lv_kerriganCommander != c_playerAny))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "KerriganVoidCoopEconDrop") == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "Scourge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = UnitGetPosition(EventUnit());
    lv_resource = "KerriganVoidCoopEconDropLT1";
    auto25916AE3_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto25916AE3_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_resource, 0, lv_itPlayer, lv_position);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_BanelingScourgeEconDrop_Init () {
    libCOMM_gt_BanelingScourgeEconDrop = TriggerCreate("libCOMM_gt_BanelingScourgeEconDrop_Func");
    TriggerEnable(libCOMM_gt_BanelingScourgeEconDrop, false);
    TriggerAddEventUnitDied(libCOMM_gt_BanelingScourgeEconDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Locusts
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_BanelingScourgeLocusts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_locustUnitType;
    int lv_rand;
    fixed lv_foodCompare;
    int lv_abathurCommander;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_locustUnitType = "Locust";
    lv_rand = RandomInt(1, 100);
    lv_foodCompare = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)) * -16.0);
    lv_abathurCommander = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Abathur", libCOMI_gf_GetAlliedCommandersPlayers());

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0)) == false))) {
            return false;
        }

        if (!((lv_abathurCommander != c_playerAny))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_abathurCommander, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(lv_abathurCommander, "AbathurEnemyDeathCreateLocusts", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "Scourge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetHeight(EventUnit()) >= 1)) {
        lv_locustUnitType = "LocustFlying";
    }

    if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
        lv_foodCompare = 8;
    }

    if (((FixedToInt(lv_foodCompare) + libCOMM_gv_cM_Abathur_Enemy_Death_Create_Locusts_Random_Modifier) >= lv_rand)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_locustUnitType, c_unitCreateIgnorePlacement, lv_abathurCommander, UnitGetPosition(EventUnit()));
        PlayerCreateEffectUnit(lv_abathurCommander, "AbathurLocustTimedLife", UnitLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_BanelingScourgeLocusts_Init () {
    libCOMM_gt_BanelingScourgeLocusts = TriggerCreate("libCOMM_gt_BanelingScourgeLocusts_Func");
    TriggerEnable(libCOMM_gt_BanelingScourgeLocusts, false);
    TriggerAddEventUnitDied(libCOMM_gt_BanelingScourgeLocusts, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Essence Drop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_BanelingScourgeEssenceDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_essenceUnitCount;
    int lv_essenceBaseAmount;
    int lv_essenceCasualMultiplier;
    int lv_essenceNormalMultiplier;
    fixed lv_essenceHardMultiplier;
    int lv_essenceBrutalMultiplier;
    int lv_dehakaPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_essenceCasualMultiplier = 2;
    lv_essenceNormalMultiplier = 2;
    lv_essenceHardMultiplier = 1.5;
    lv_essenceBrutalMultiplier = 1;
    lv_dehakaPlayer = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Dehaka", libCOMI_gf_GetAlliedCommandersPlayers());

    // Conditions
    if (testConds) {
        if (!((lv_dehakaPlayer != c_playerAny))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_dehakaPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_CT_UnitSpawnedByMutator(EventUnit()) == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "Scourge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_dehakaPlayer == c_playerAny)) {
        return true;
    }

    lv_essenceBaseAmount = 1;
    lv_essenceUnitCount = libNtve_gf_DifficultyValueInt((lv_essenceBaseAmount * lv_essenceCasualMultiplier), (lv_essenceBaseAmount * lv_essenceNormalMultiplier), FixedToInt(Ceiling((lv_essenceBaseAmount * lv_essenceHardMultiplier))), (lv_essenceBaseAmount * lv_essenceBrutalMultiplier));
    if ((lv_essenceUnitCount > 0)) {
        libCOMM_gv_cM_DebugDehakaEssenceDroppedNormal += lv_essenceUnitCount;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "EssencePickup", c_unitCreateIgnorePlacement, lv_dehakaPlayer, UnitGetPosition(EventUnit()));
        libCOMM_gf_CM_Dehaka_EssenceSetStack(UnitLastCreated(), lv_essenceUnitCount);
        UnitBehaviorRemove(UnitLastCreated(), "EssenceCreated", 1);
        libCOMM_gf_CM_Dehaka_EssenceScale(UnitLastCreated(), true);
        libCOMM_gf_CM_Dehaka_EssenceMerge(UnitLastCreated(), lv_essenceUnitCount);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_BanelingScourgeEssenceDrop_Init () {
    libCOMM_gt_BanelingScourgeEssenceDrop = TriggerCreate("libCOMM_gt_BanelingScourgeEssenceDrop_Func");
    TriggerEnable(libCOMM_gt_BanelingScourgeEssenceDrop, false);
    TriggerAddEventUnitDied(libCOMM_gt_BanelingScourgeEssenceDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Biomass Drop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_BanelingScourgeBiomassDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassUnitCount;
    int lv_indexPlayer;
    int lv_biomassBaseAmount;
    int lv_biomassCasualMultiplier;
    int lv_biomassNormalMultiplier;
    fixed lv_biomassHardMultiplier;
    int lv_biomassBrutalMultiplier;
    int lv_biomassToxicNestMultiplier;
    int lv_dyingUnitSupply;
    int lv_abathurPlayer;
    fixed lv_doubleBiomassChance;

    // Automatic Variable Declarations
    playergroup autoC5698030_g;

    // Variable Initialization
    lv_biomassCasualMultiplier = 2;
    lv_biomassNormalMultiplier = 2;
    lv_biomassHardMultiplier = 1.5;
    lv_biomassBrutalMultiplier = 1;
    lv_biomassToxicNestMultiplier = 2;
    lv_abathurPlayer = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Abathur", libCOMI_gf_GetAlliedCommandersPlayers());

    // Conditions
    if (testConds) {
        if (!((lv_abathurPlayer != c_playerAny))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != c_playerAny))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_abathurPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((lv_abathurPlayer != c_playerAny))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_CT_UnitSpawnedByMutator(EventUnit()) == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "Scourge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC5698030_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoC5698030_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer) == "Abathur") && (libNtve_gf_PlayerIsEnemy(lv_indexPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_AllyMutual) == false)) {
            lv_dyingUnitSupply = FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)));
            lv_doubleBiomassChance = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryAbathurDoubleBiomassDisplayDummy", "Amount", lv_indexPlayer);
            if (((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true) || (UnitHasBehavior2(EventUnit(), "CritterExplode") == true))) {
                lv_biomassBaseAmount = 1;
            }
            if ((((TechTreeUpgradeCount(lv_indexPlayer, "AbathurToxicNestIcreasedBiomass", c_techCountCompleteOnly) == 1) && (UnitHasBehavior2(EventUnit(), "ToxicNestVirulentNest") == true)) || ((TechTreeUpgradeCount(lv_indexPlayer, "MasteryAbathurDoubleBiomass", c_techCountCompleteOnly) > 0) && (RandomFixed(0.0, 100.0) <= lv_doubleBiomassChance)))) {
                lv_biomassUnitCount = (libNtve_gf_DifficultyValueInt((lv_biomassBaseAmount * lv_biomassCasualMultiplier), (lv_biomassBaseAmount * lv_biomassNormalMultiplier), FixedToInt(Ceiling((lv_biomassBaseAmount * lv_biomassHardMultiplier))), (lv_biomassBaseAmount * lv_biomassBrutalMultiplier)) * lv_biomassToxicNestMultiplier);
            }
            else {
                lv_biomassUnitCount = libNtve_gf_DifficultyValueInt((lv_biomassBaseAmount * lv_biomassCasualMultiplier), (lv_biomassBaseAmount * lv_biomassNormalMultiplier), FixedToInt(Ceiling((lv_biomassBaseAmount * lv_biomassHardMultiplier))), (lv_biomassBaseAmount * lv_biomassBrutalMultiplier));
            }
            if ((lv_biomassUnitCount > 0)) {
                libCOMM_gv_cM_DebugAbathurBiomassDroppedNormal += lv_biomassUnitCount;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "BiomassPickup", c_unitCreateIgnorePlacement, lv_abathurPlayer, UnitGetPosition(EventUnit()));
                libCOMM_gf_CM_Abathur_BiomassSetStack(UnitLastCreated(), lv_biomassUnitCount);
                UnitBehaviorRemove(UnitLastCreated(), "BiomassCreated", 1);
                libCOMM_gf_CM_Abathur_BiomassScale(UnitLastCreated(), true);
                libCOMM_gf_CM_Abathur_BiomassMerge(UnitLastCreated(), lv_biomassUnitCount);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_BanelingScourgeBiomassDrop_Init () {
    libCOMM_gt_BanelingScourgeBiomassDrop = TriggerCreate("libCOMM_gt_BanelingScourgeBiomassDrop_Func");
    TriggerEnable(libCOMM_gt_BanelingScourgeBiomassDrop, false);
    TriggerAddEventUnitDied(libCOMM_gt_BanelingScourgeBiomassDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAShiftCheatFailSafeThermal
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoAShiftCheatFailSafeThermal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    abilcmd lv_cmd;
    string lv_abil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = libCOMI_gv_yY_GPCasterUnit[EventPlayer()];
    lv_cmd = AbilityCommand("SOAThermalLanceActivate", 0);
    lv_abil = AbilityCommandGetAbility(lv_cmd);

    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetCooldown(lv_caster, lv_abil, CatalogFieldValueGet(c_gameCatalogAbil, lv_abil, "Cost[" + IntToString(0) + "].Cooldown.Link", EventPlayer())) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilitySpendExplicit(lv_caster, lv_cmd, c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoAShiftCheatFailSafeThermal_Init () {
    libCOMM_gt_CM_SoAShiftCheatFailSafeThermal = TriggerCreate("libCOMM_gt_CM_SoAShiftCheatFailSafeThermal_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_SoAShiftCheatFailSafeThermal, c_playerAny, "SOAThermalLanceSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAShiftCheatFailSafeHHCallFleet
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoAShiftCheatFailSafeHHCallFleet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    abilcmd lv_cmd;
    string lv_abil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = libCOMI_gv_yY_GPCasterUnit[EventPlayer()];
    lv_cmd = AbilityCommand("HornerAirFleetActivate", 0);
    lv_abil = AbilityCommandGetAbility(lv_cmd);

    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetCooldown(lv_caster, lv_abil, CatalogFieldValueGet(c_gameCatalogAbil, lv_abil, "Cost[" + IntToString(0) + "].Cooldown.Link", EventPlayer())) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilitySpendExplicit(lv_caster, lv_cmd, c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoAShiftCheatFailSafeHHCallFleet_Init () {
    libCOMM_gt_CM_SoAShiftCheatFailSafeHHCallFleet = TriggerCreate("libCOMM_gt_CM_SoAShiftCheatFailSafeHHCallFleet_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_SoAShiftCheatFailSafeHHCallFleet, c_playerAny, "HornerAirFleetInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAShiftCheatFailSafeNovaBombing
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoAShiftCheatFailSafeNovaBombing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    abilcmd lv_cmd;
    string lv_abil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = libCOMI_gv_yY_GPCasterUnit[EventPlayer()];
    lv_cmd = AbilityCommand("NovaGriffinBombingRunActivate", 0);
    lv_abil = AbilityCommandGetAbility(lv_cmd);

    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetCooldown(lv_caster, lv_abil, CatalogFieldValueGet(c_gameCatalogAbil, lv_abil, "Cost[" + IntToString(0) + "].Cooldown.Link", EventPlayer())) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilitySpendExplicit(lv_caster, lv_cmd, c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoAShiftCheatFailSafeNovaBombing_Init () {
    libCOMM_gt_CM_SoAShiftCheatFailSafeNovaBombing = TriggerCreate("libCOMM_gt_CM_SoAShiftCheatFailSafeNovaBombing_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_SoAShiftCheatFailSafeNovaBombing, c_playerAny, "NovaGriffinBombingRunInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingForceOff
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoATargetingForceOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto25DDC9C2_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CM_SoATargetingCancel, false);
    TriggerEnable(libCOMM_gt_CM_SoATargetingPointChosen, false);
    TriggerEnable(libCOMM_gt_CM_SoATargetingDirectionChosen, false);
    libCOMM_gv_cM_SoAExitInstantly = true;
    auto25DDC9C2_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto25DDC9C2_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMM_gv_cM_SoATargetingPhase[lv_indexPlayer] != libCOMM_ge_CM_SoATargetingPhaseType_None)) {
            libCOMM_gv_cM_SoATargetingTransitioning[lv_indexPlayer] = false;
            UISetTargetingOrder(PlayerGroupSingle(lv_indexPlayer), libCOMI_gv_yY_GPCasterGroup[lv_indexPlayer], null, false);
            libCOMM_gf_CM_SoATargetingCancel(lv_indexPlayer);
        }

    }
    libCOMM_gv_cM_SoATargetingUsageCount = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoATargetingForceOff_Init () {
    libCOMM_gt_CM_SoATargetingForceOff = TriggerCreate("libCOMM_gt_CM_SoATargetingForceOff_Func");
    TriggerAddEventGeneric(libCOMM_gt_CM_SoATargetingForceOff, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingDeactivated
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoATargetingDeactivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_yY_GPCasterGroup[lv_casterPlayer], null, false);
    libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer] = 0;
    libCOMM_gf_CM_SoATargetingModeExit(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoATargetingDeactivated_Init () {
    libCOMM_gt_CM_SoATargetingDeactivated = TriggerCreate("libCOMM_gt_CM_SoATargetingDeactivated_Func");
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_SoATargetingDeactivated, null, "SOAOrbitalStrikeActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_SoATargetingDeactivated, null, "SOAGravitonBombActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_SoATargetingDeactivated, null, "SOAThermalLanceActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_SoATargetingDeactivated, null, "SOAStrafeAttackActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_SoATargetingDeactivated, null, "NovaGriffinBombingRunActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_SoATargetingDeactivated, null, "HornerAirFleetActivate", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingPointChosen
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoATargetingPointChosen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMM_gv_cM_SoATargetingPhase[EventPlayer()] == libCOMM_ge_CM_SoATargetingPhaseType_Location))) {
            return false;
        }

        if (!((libCOMM_gv_cM_SoATargetingChargesSpent[EventPlayer()] < libCOMM_gv_cM_SoATargetingChargesTotal[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
    lv_casterPlayer = EventPlayer();
    if ((VisIsVisibleForPlayer(lv_casterPlayer, lv_targetPoint) == false)) {
        return true;
    }

    libCOMM_gv_cM_SoATargetingCycling[lv_casterPlayer] = true;
    libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer] += 1;
    libNtve_gf_CreateActorAtPoint(libCOMM_gv_cM_SoATargetingModel[lv_casterPlayer], lv_targetPoint);
    libCOMM_gv_cM_SoATargetingActors[libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
    if ((libCOMM_gv_cM_SoATargetingUnitType[lv_casterPlayer] == null)) {
        UnitIssueOrder(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer], OrderTargetingPoint(libCOMM_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer], lv_targetPoint), c_orderQueueAddToEnd);
        libCOMI_gf_CU_TargetingSetCharges((libCOMM_gv_cM_SoATargetingChargesTotal[lv_casterPlayer]-libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]), libCOMM_gv_cM_SoATargetingChargesTotal[lv_casterPlayer], lv_casterPlayer);
        if ((libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer] == libCOMM_gv_cM_SoATargetingChargesTotal[lv_casterPlayer])) {
            Wait(0.125, c_timeGame);
            UnitBehaviorRemove(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer], libCOMM_gv_cM_SoATargetingBehavior[lv_casterPlayer], 1);
        }
        else {
            Wait(0.1, c_timeGame);
            UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_yY_GPCasterGroup[lv_casterPlayer], libCOMM_gv_cM_SoATargetingOrder[lv_casterPlayer], false);
        }
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMM_gv_cM_SoATargetingUnitType[lv_casterPlayer], 0, lv_casterPlayer, lv_targetPoint);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        libCOMM_gv_cM_SoATargetingUnit[libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer] = UnitLastCreated();
        libCOMM_gv_cM_SoATargetingDirectionGroup[lv_casterPlayer] = libNtve_gf_ConvertUnitToUnitGroup(libCOMM_gv_cM_SoATargetingUnit[libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer]);
        Wait(0.1, c_timeGame);
        if ((UnitIsValid(libCOMM_gv_cM_SoATargetingUnit[libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer]) == true)) {
            UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMM_gv_cM_SoATargetingDirectionGroup[lv_casterPlayer], OrderTargetingPoint(libCOMM_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer], UnitGetPosition(libCOMM_gv_cM_SoATargetingUnit[libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer])), false);
            libCOMI_gf_CU_TargetingSetInstructionText(libCOMM_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer], lv_casterPlayer);
            libCOMM_gv_cM_SoATargetingPhase[lv_casterPlayer] = libCOMM_ge_CM_SoATargetingPhaseType_Direction;
        }

    }
    libCOMM_gv_cM_SoATargetingCycling[lv_casterPlayer] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoATargetingPointChosen_Init () {
    libCOMM_gt_CM_SoATargetingPointChosen = TriggerCreate("libCOMM_gt_CM_SoATargetingPointChosen_Func");
    TriggerEnable(libCOMM_gt_CM_SoATargetingPointChosen, false);
    TriggerAddEventUnitOrder(libCOMM_gt_CM_SoATargetingPointChosen, null, AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0));
    TriggerAddEventUnitOrder(libCOMM_gt_CM_SoATargetingPointChosen, null, AbilityCommand("SOAThermalLanceTargetingDummy", 0));
    TriggerAddEventUnitOrder(libCOMM_gt_CM_SoATargetingPointChosen, null, AbilityCommand("SOAGravitonBomb", 0));
    TriggerAddEventUnitOrder(libCOMM_gt_CM_SoATargetingPointChosen, null, AbilityCommand("NovaGriffinBombingRunTargetingDummy", 0));
    TriggerAddEventUnitOrder(libCOMM_gt_CM_SoATargetingPointChosen, null, AbilityCommand("HornerAirFleetTargetingDummy", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingDirectionChosen
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoATargetingDirectionChosen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMM_gv_cM_SoATargetingPhase[EventPlayer()] == libCOMM_ge_CM_SoATargetingPhaseType_Direction))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = EventPlayer();
    libCOMM_gv_cM_SoATargetingCycling[lv_casterPlayer] = true;
    lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
    libCOMM_gv_cM_SoATargetingUnrefundableStageEntered[lv_casterPlayer] = true;
    libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
    ActorSend(libCOMM_gv_cM_SoATargetingActors[libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer], "Signal Destroy");
    if ((UnitIsValid(libCOMM_gv_cM_SoATargetingUnit[libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer]) == false)) {
        return true;
    }

    libNtve_gf_MakeUnitFacePoint(libCOMM_gv_cM_SoATargetingUnit[libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer], lv_targetPoint, 0.0);
    libCOMI_gf_CU_TargetingSetCharges((libCOMM_gv_cM_SoATargetingChargesTotal[lv_casterPlayer]-libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]), libCOMM_gv_cM_SoATargetingChargesTotal[lv_casterPlayer], lv_casterPlayer);
    if ((libCOMM_gv_cM_SoATargetingChargesSpent[lv_casterPlayer] == libCOMM_gv_cM_SoATargetingChargesTotal[lv_casterPlayer])) {
        UnitBehaviorRemove(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer], libCOMM_gv_cM_SoATargetingBehavior[lv_casterPlayer], 1);
        Wait(0.1, c_timeGame);
    }
    else {
        libCOMI_gf_CU_TargetingSetInstructionText(libCOMM_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer], lv_casterPlayer);
        Wait(0.1, c_timeGame);
        if ((libCOMM_gv_cM_SoATargetingAlreadyCanceled[lv_casterPlayer] == false)) {
            UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_yY_GPCasterGroup[lv_casterPlayer], libCOMM_gv_cM_SoATargetingOrder[lv_casterPlayer], false);
        }

        libCOMM_gv_cM_SoATargetingPhase[lv_casterPlayer] = libCOMM_ge_CM_SoATargetingPhaseType_Location;
    }
    libCOMM_gv_cM_SoATargetingCycling[lv_casterPlayer] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoATargetingDirectionChosen_Init () {
    libCOMM_gt_CM_SoATargetingDirectionChosen = TriggerCreate("libCOMM_gt_CM_SoATargetingDirectionChosen_Func");
    TriggerEnable(libCOMM_gt_CM_SoATargetingDirectionChosen, false);
    TriggerAddEventUnitOrder(libCOMM_gt_CM_SoATargetingDirectionChosen, null, AbilityCommand("SOAThermalLanceExecute", 0));
    TriggerAddEventUnitOrder(libCOMM_gt_CM_SoATargetingDirectionChosen, null, AbilityCommand("NovaGriffinBombingRunExecute", 0));
    TriggerAddEventUnitOrder(libCOMM_gt_CM_SoATargetingDirectionChosen, null, AbilityCommand("HornerAirFleetExecute", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingEffectFired
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoATargetingEffectFired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_SoATargetingCleanupActorsAndUnits(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoATargetingEffectFired_Init () {
    libCOMM_gt_CM_SoATargetingEffectFired = TriggerCreate("libCOMM_gt_CM_SoATargetingEffectFired_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_SoATargetingEffectFired, c_playerAny, "SOAOrbitalStrikeCP");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_SoATargetingEffectFired, c_playerAny, "SOAGravitonBombLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingCancel
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoATargetingCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMM_gv_cM_SoATargetingCycling[EventPlayer()] == false))) {
            return false;
        }

        if (!(((EventTargetModeAbilCmd() == AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("SOAThermalLanceTargetingDummy", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("SOAGravitonBomb", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("SOAThermalLanceExecute", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("NovaGriffinBombingRunExecute", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("NovaGriffinBombingRunTargetingDummy", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("HornerAirFleetExecute", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("HornerAirFleetTargetingDummy", 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_SoATargetingCancel(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoATargetingCancel_Init () {
    libCOMM_gt_CM_SoATargetingCancel = TriggerCreate("libCOMM_gt_CM_SoATargetingCancel_Func");
    TriggerEnable(libCOMM_gt_CM_SoATargetingCancel, false);
    TriggerAddEventTargetModeUpdate(libCOMM_gt_CM_SoATargetingCancel, c_playerAny, null, c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingCancelFromUI
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoATargetingCancelFromUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_SoATargetingCancel(libCOMI_gf_CU_TargetingTriggeringPlayer());
    UISetTargetingOrder(PlayerGroupSingle(libCOMI_gf_CU_TargetingTriggeringPlayer()), libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_yY_GPCasterUnit[libCOMI_gf_CU_TargetingTriggeringPlayer()]), null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoATargetingCancelFromUI_Init () {
    libCOMM_gt_CM_SoATargetingCancelFromUI = TriggerCreate("libCOMM_gt_CM_SoATargetingCancelFromUI_Func");
    libCOMI_gf_CU_TargetingCancel(libCOMM_gt_CM_SoATargetingCancelFromUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingCameraShake
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoATargetingCameraShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    fixed[4] lv_cameraPosition;
    fixed[4] lv_effectPosition;
    int lv_player;
    point lv_effectTargetPoint;
    point lv_cameraTargetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_effectTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cameraTargetPoint = CameraGetTarget(lv_player);
    lv_cameraPosition[0] = PointGetX(lv_cameraTargetPoint);
    lv_cameraPosition[1] = (PointGetY(lv_cameraTargetPoint)-(Cos(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
    lv_cameraPosition[2] = (WorldHeight(c_heightMapGround, lv_cameraTargetPoint)+(Sin(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
    lv_effectPosition[0] = PointGetX(lv_effectTargetPoint);
    lv_effectPosition[1] = PointGetY(lv_effectTargetPoint);
    lv_effectPosition[2] = WorldHeight(c_heightMapGround, lv_effectTargetPoint);
    lv_distance = SquareRoot((Pow((lv_cameraPosition[0]-lv_effectPosition[0]), 2.0) + Pow((lv_cameraPosition[1]-lv_effectPosition[1]), 2.0) + Pow((lv_cameraPosition[2]-lv_effectPosition[2]), 2.0)));
    CameraShakeStart(lv_player, c_cameraPositionTarget, c_cameraDirectionZ, MaxF((1-(lv_distance/50)), 0.0), 2.5, 100.0, 0.1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoATargetingCameraShake_Init () {
    libCOMM_gt_CM_SoATargetingCameraShake = TriggerCreate("libCOMM_gt_CM_SoATargetingCameraShake_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_SoATargetingCameraShake, c_playerAny, "SOAOrbitalStrikeImpactSearch");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_SoATargetingCameraShake, c_playerAny, "SOAGravitonBombCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrono Anim Speed On
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_ChronoAnimSpeedOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_buff;
    unit lv_unit;
    fixed lv_scale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buff = EventUnitBehavior();
    lv_unit = EventUnit();
    lv_scale = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_buff, "Modification.RateMultiplierArray[" + IntToString(0) + "]", UnitBehaviorEffectPlayer(lv_unit, lv_buff, c_effectPlayerCaster, 0)));

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_unit, (("AnimSetTimeScaleGlobal " + FixedToString(lv_scale, c_fixedPrecisionAny) + " " + (lv_buff))));
    libNtve_gf_SendActorMessageToUnit(lv_unit, (("AnimSetTimeScaleGlobal " + FixedToString(lv_scale, c_fixedPrecisionAny) + " " + (lv_buff))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_ChronoAnimSpeedOn_Init () {
    libCOMM_gt_ChronoAnimSpeedOn = TriggerCreate("libCOMM_gt_ChronoAnimSpeedOn_Func");
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_ChronoAnimSpeedOn, null, "SOAMapWideChronoPassiveTarget", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_ChronoAnimSpeedOn, null, "SOAMapWideChrono", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_ChronoAnimSpeedOn, null, "TimeWarpProduction", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrono Anim Speed Off
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_ChronoAnimSpeedOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_buff;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buff = EventUnitBehavior();
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_unit, (("AnimClearTimeScaleGlobal " + (lv_buff))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_ChronoAnimSpeedOff_Init () {
    libCOMM_gt_ChronoAnimSpeedOff = TriggerCreate("libCOMM_gt_ChronoAnimSpeedOff_Func");
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_ChronoAnimSpeedOff, null, "SOAMapWideChronoPassiveTarget", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_ChronoAnimSpeedOff, null, "SOAMapWideChrono", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_ChronoAnimSpeedOff, null, "TimeWarpProduction", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAGravitonBombActivated
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoAGravitonBombActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMM_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "SOAGravitonBombActivate";
    libCOMM_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("SOAGravitonBombExecute", 0);
    libCOMM_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/SOAGravitonBombActivate";
    libCOMM_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "SOAGravitonBombActivate";
    libCOMM_gv_cM_SoATargetingModel[lv_casterPlayer] = "SOAGravitonBombTargetModel";
    libCOMM_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAGravitonBomb", 0), UnitGetPosition(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer]));
    libCOMM_gv_cM_SoATargetingUnitType[lv_casterPlayer] = null;
    libCOMM_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 3;
    libCOMM_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMM_19A5CDC1");
    libCOMM_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = null;
    libCOMM_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoAGravitonBombActivated_Init () {
    libCOMM_gt_CM_SoAGravitonBombActivated = TriggerCreate("libCOMM_gt_CM_SoAGravitonBombActivated_Func");
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_SoAGravitonBombActivated, null, "SOAGravitonBombActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreArtanisKaraxOrbitalStrike
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreArtanisKaraxOrbitalStrike_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ArtanisSoADamage", FixedToInt(libCOMM_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreArtanisKaraxOrbitalStrike_Init () {
    libCOMM_gt_CC_ScoreArtanisKaraxOrbitalStrike = TriggerCreate("libCOMM_gt_CC_ScoreArtanisKaraxOrbitalStrike_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreArtanisKaraxOrbitalStrike, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreArtanisKaraxOrbitalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAOrbitalStrikeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAOrbitalStrikeActivated
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoAOrbitalStrikeActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMM_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "SOAOrbitalStrikeActivate";
    libCOMM_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("SOAOrbitalStrikeExecute", 0);
    libCOMM_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/SOAOrbitalStrikeActivate";
    libCOMM_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "SOAOrbitalStrikeActivate";
    libCOMM_gv_cM_SoATargetingModel[lv_casterPlayer] = "SOAOrbitalStrikeTargetModel";
    libCOMM_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0), UnitGetPosition(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer]));
    libCOMM_gv_cM_SoATargetingUnitType[lv_casterPlayer] = null;
    libCOMM_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 5;
    libCOMM_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMM_CC25E90D");
    libCOMM_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = null;
    libCOMM_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoAOrbitalStrikeActivated_Init () {
    libCOMM_gt_CM_SoAOrbitalStrikeActivated = TriggerCreate("libCOMM_gt_CM_SoAOrbitalStrikeActivated_Func");
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_SoAOrbitalStrikeActivated, null, "SOAOrbitalStrikeActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAOrbitalStrikeActivatedKarax
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoAOrbitalStrikeActivatedKarax_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "KaraxCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libCOMM_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeKarax", 0), UnitGetPosition(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer]));
    UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_yY_GPCasterGroup[lv_casterPlayer], libCOMM_gv_cM_SoATargetingOrder[lv_casterPlayer], false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoAOrbitalStrikeActivatedKarax_Init () {
    libCOMM_gt_CM_SoAOrbitalStrikeActivatedKarax = TriggerCreate("libCOMM_gt_CM_SoAOrbitalStrikeActivatedKarax_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_SoAOrbitalStrikeActivatedKarax, c_playerAny, "SOAOrbitalStrikeCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderAlarak
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderAlarak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto2DA74008_g;
    int auto2DA74008_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Alarak");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreAlarakDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreAlarakHeal, true);
    TriggerEnable(libCOMM_gt_CC_ScoreAlarakSacrificeHeal, true);
    TriggerEnable(libCOMM_gt_CM_Alarak_Sacrific_Scale, true);
    TriggerEnable(libCOMM_gt_CM_Alarak_Upgrade, true);
    TriggerEnable(libCOMM_gt_CM_AlarakLightningStrikes_FlashOn, true);
    TriggerEnable(libCOMM_gt_CM_AlarakLightningStrikes_FlashOff, true);
    TriggerEnable(libCOMM_gt_CM_AlarakLightningStrikes_Sacriface, true);
    TriggerEnable(libCOMM_gt_CM_Alarak_SoulAbsorption_Impact, true);
    TriggerEnable(libCOMM_gt_CM_Alarak_SoulAbsorption_Launch, true);
    TriggerEnable(libCOMM_gt_CM_Alarak_SoulAbsorption_PrestigeMechBuff, true);
    TriggerEnable(libCOMM_gt_CM_Alarak_EmpowerAdd, true);
    TriggerEnable(libCOMM_gt_CM_Alarak_EmpowerRemove, true);
    TriggerEnable(libCOMM_gt_CM_Alarak_EmpowerWorshiperAdd, true);
    TriggerEnable(libCOMM_gt_CM_Alarak_EmpowerWorshiperRemove, true);
    TriggerEnable(libCOMM_gt_CM_Alarak_EmpowerUpdate, true);
    auto2DA74008_g = lv_players;
    auto2DA74008_var = -1;
    while (true) {
        auto2DA74008_var = PlayerGroupNextPlayer(auto2DA74008_g, auto2DA74008_var);
        if (auto2DA74008_var < 0) { break; }
        if ((TechTreeUnitIsAllowed(auto2DA74008_var, "CoopCasterAlarak") == true)) {
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionAlarakOvercharge, true);
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionAlarakDeathFleet, true);
            libCOMI_gf_CM_CommanderVOAbilityWatch(auto2DA74008_var, SoundLink("AlarakCommander_DFReady", -1), "Abil/AlarakACSummonDeathfleetTarget", null, AbilityCommand("AlarakACSummonDeathfleetTarget", 0));
            libCOMI_gf_CreateACCaster(auto2DA74008_var, "CoopCasterAlarak");
            libCOMM_gf_CU_GPInitAlarak(auto2DA74008_var);
        }

        TriggerEnable(libCOMM_gt_CM_AbilityTransmissionAlarakEmpower, true);
        TriggerEnable(libCOMM_gt_CM_AbilityTransmissionAlarakSacrifice, true);
        libCOMI_gf_CM_CommanderVOAbilityWatch(auto2DA74008_var, SoundLink("AlarakCommander_EMReady", -1), "Abil/AlarakEmpower", libCOMI_gf_GetHeroUnitBad(auto2DA74008_var, "AlarakCoop"), null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderAlarak_Init () {
    libCOMM_gt_DUT_CommanderAlarak = TriggerCreate("libCOMM_gt_DUT_CommanderAlarak_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderAlarak, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPAlarakGemPress
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_GPAlarakGemPress_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto17B65871_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto17B65871_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto17B65871_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((EventDialogControl() == libCOMM_gv_cU_GPAlarakButton[lv_indexPlayer])) {
            libCOMM_gv_cU_GPAlarakGemClickCount += 1;
            if ((ModI(libCOMM_gv_cU_GPAlarakGemClickCount, 2) == 1)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lv_indexPlayer]), "WorkStart");
                SoundPlayForPlayer(SoundLink("AlarakGemActivate", 0), c_maxPlayers, PlayerGroupSingle(lv_indexPlayer), 100.0, 0.0);
            }
            else {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lv_indexPlayer]), "WorkEnd");
                SoundPlayForPlayer(SoundLink("AlarakGemDeactivate", 0), c_maxPlayers, PlayerGroupSingle(lv_indexPlayer), 100.0, 0.0);
            }
            if ((libCOMM_gv_cU_GPAlarakGemClickCount == 7)) {
                libCOMI_gf_CM_CommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 0), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((libCOMM_gv_cU_GPAlarakGemClickCount == 9)) {
                libCOMI_gf_CM_CommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 1), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((libCOMM_gv_cU_GPAlarakGemClickCount == 11)) {
                libCOMI_gf_CM_CommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 2), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((libCOMM_gv_cU_GPAlarakGemClickCount == 13)) {
                libCOMI_gf_CM_CommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 3), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((libCOMM_gv_cU_GPAlarakGemClickCount == 15)) {
                libCOMI_gf_CM_CommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 4), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((libCOMM_gv_cU_GPAlarakGemClickCount == 17)) {
                libCOMI_gf_CM_CommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 5), PlayerGroupSingle(lv_indexPlayer));
                libCOMM_gv_cU_GPAlarakGemClickCount = -1;
            }
            TriggerEnable(TriggerGetCurrent(), false);
            Wait(2.5, c_timeReal);
            TriggerEnable(TriggerGetCurrent(), true);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_GPAlarakGemPress_Init () {
    libCOMM_gt_CU_GPAlarakGemPress = TriggerCreate("libCOMM_gt_CU_GPAlarakGemPress_Func");
    TriggerEnable(libCOMM_gt_CU_GPAlarakGemPress, false);
    TriggerAddEventDialogControl(libCOMM_gt_CU_GPAlarakGemPress, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakEmpower
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionAlarakEmpower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_EmpowerMe", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionAlarakEmpower_Init () {
    libCOMM_gt_CM_AbilityTransmissionAlarakEmpower = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionAlarakEmpower_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionAlarakEmpower, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionAlarakEmpower, null, AbilityCommand("AlarakEmpower", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakDeathFleet
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionAlarakDeathFleet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_DeathFleet", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionAlarakDeathFleet_Init () {
    libCOMM_gt_CM_AbilityTransmissionAlarakDeathFleet = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionAlarakDeathFleet_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionAlarakDeathFleet, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionAlarakDeathFleet, null, AbilityCommand("AlarakACSummonDeathfleetTarget", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakOvercharge
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionAlarakOvercharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitTargetUnit() != null) && (UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitTargetUnit()))) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_StructureOverchargeAlly", -1), PlayerGroupAll());
    }
    else {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_StructureOvercharge", -1), PlayerGroupAll());
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionAlarakOvercharge_Init () {
    libCOMM_gt_CM_AbilityTransmissionAlarakOvercharge = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionAlarakOvercharge_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionAlarakOvercharge, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionAlarakOvercharge, null, AbilityCommand("AlarakStructureOvercharge", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakSacrifice
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionAlarakSacrifice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), SoundLink("AlarakCommander_Sacrifice", -1), PlayerGroupSingle(EventPlayer()));
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionAlarakSacrifice_Init () {
    libCOMM_gt_CM_AbilityTransmissionAlarakSacrifice = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionAlarakSacrifice_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionAlarakSacrifice, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_AbilityTransmissionAlarakSacrifice, c_playerAny, "AlarakTheStrongestSurviveSearchImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAlarakDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreAlarakDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "AlarakCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreAlarakDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "AlarakDamage", FixedToInt(libCOMM_gv_cC_ScoreAlarakDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreAlarakDmg_Init () {
    libCOMM_gt_CC_ScoreAlarakDmg = TriggerCreate("libCOMM_gt_CC_ScoreAlarakDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreAlarakDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreAlarakDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAlarakHeal
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreAlarakHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "Alarak"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "AlarakCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreAlarakHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "AlarakSelfHeals", FixedToInt(libCOMM_gv_cC_ScoreAlarakHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreAlarakHeal_Init () {
    libCOMM_gt_CC_ScoreAlarakHeal = TriggerCreate("libCOMM_gt_CC_ScoreAlarakHeal_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreAlarakHeal, false);
    TriggerAddEventUnitHealed(libCOMM_gt_CC_ScoreAlarakHeal, null, c_unitVitalAny, "SoulAbsorptionMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAlarakSacrificeHeal
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreAlarakSacrificeHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "Alarak"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "AlarakCoop"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitHealLaunchUnit()) != "AlarakCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreAlarakHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "AlarakSelfHeals", FixedToInt(libCOMM_gv_cC_ScoreAlarakHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreAlarakSacrificeHeal_Init () {
    libCOMM_gt_CC_ScoreAlarakSacrificeHeal = TriggerCreate("libCOMM_gt_CC_ScoreAlarakSacrificeHeal_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreAlarakSacrificeHeal, false);
    TriggerAddEventUnitHealed(libCOMM_gt_CC_ScoreAlarakSacrificeHeal, null, c_unitVitalAny, "AlarakTheStrongestSurviveStealLife");
    TriggerAddEventUnitHealed(libCOMM_gt_CC_ScoreAlarakSacrificeHeal, null, c_unitVitalAny, "AlarakTheStrongestSurviveStealShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Train
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_SupplicantWarpTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_actualCreator;
    unit lv_warpGate;
    point lv_p;
    order lv_order1;
    order lv_order2;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_warpGate = EventUnit();
    lv_p = UnitGetPosition(lv_u);
    lv_order1 = OrderTargetingPoint(libCOMM_gv_supplicantWarpTrainActualCommand, PointWithOffset(lv_p, -0.5, 0.0));
    lv_order2 = OrderTargetingPoint(libCOMM_gv_supplicantWarpTrainActualCommand, PointWithOffset(lv_p, 0.5, 0.0));
    lv_player = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_u) == libCOMM_gv_supplicantWarpTrainDummyUnitLink))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, libCOMM_gv_supplicantWarpTrainCreatorUnitLink, c_unitCreateIgnorePlacement, lv_player, lv_p, 270.0);
    lv_actualCreator = UnitLastCreated();
    if ((UnitOrderIsValid(lv_actualCreator, lv_order1) == false) && (UnitOrderIsValid(lv_actualCreator, lv_order2) == false)) {
        UnitAbilityAddChargeUsed(lv_warpGate, libCOMM_gv_warpGateTrainAbility, "WarpGateTrain", -1.0);
        UnitRemove(lv_actualCreator);
        return true;
    }

    UnitIssueOrder(lv_actualCreator, lv_order1, c_orderQueueAddToFront);
    UnitIssueOrder(lv_actualCreator, lv_order2, c_orderQueueAddToFront);
    UnitBehaviorAdd(lv_actualCreator, libCOMM_gv_supplicantWarpTrainCreatorWarpGateFinderBehaviorLink, lv_warpGate, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_SupplicantWarpTrain_Init () {
    libCOMM_gt_SupplicantWarpTrain = TriggerCreate("libCOMM_gt_SupplicantWarpTrain_Func");
    TriggerAddEventUnitCreated(libCOMM_gt_SupplicantWarpTrain, null, libCOMM_gv_warpGateTrainAbility, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Actual Train
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_SupplicantActualTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_warpSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_warpSource = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_u, libCOMM_gv_supplicantWarpTrainWarpPowerCheckBehaviorLink, lv_warpSource, 1);
    UnitBehaviorAdd(lv_u, libCOMM_gv_supplicantWarpTrainCreatorFinderBehaviorLink, lv_warpSource, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_SupplicantActualTrain_Init () {
    libCOMM_gt_SupplicantActualTrain = TriggerCreate("libCOMM_gt_SupplicantActualTrain_Func");
    TriggerAddEventUnitCreated(libCOMM_gt_SupplicantActualTrain, null, libCOMM_gv_supplicantWarpTrainActualAbility, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Finish
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_SupplicantWarpFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_supplicant;
    unit lv_creator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supplicant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_supplicant, libCOMM_gv_supplicantWarpTrainCreatorFinderBehaviorLink) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_creator = UnitBehaviorEffectUnit(lv_supplicant, libCOMM_gv_supplicantWarpTrainCreatorFinderBehaviorLink, c_effectUnitCaster, 0);
    UnitBehaviorRemove(lv_supplicant, libCOMM_gv_supplicantWarpTrainCreatorFinderBehaviorLink, 1);
    UnitRemove(lv_creator);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_SupplicantWarpFinish_Init () {
    libCOMM_gt_SupplicantWarpFinish = TriggerCreate("libCOMM_gt_SupplicantWarpFinish_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_SupplicantWarpFinish, c_playerAny, libCOMM_gv_supplicantWarpTrainActualUnitBirthEventLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Cancel
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_SupplicantWarpCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_supplicant;
    unit lv_creator;
    unit lv_warpGate;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supplicant = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_creator = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(lv_creator, libCOMM_gv_supplicantWarpTrainWarpRefundBehaviorLink) > 0)) {
        lv_warpGate = UnitBehaviorEffectUnit(lv_creator, libCOMM_gv_supplicantWarpTrainCreatorWarpGateFinderBehaviorLink, c_effectUnitCaster, 0);
        UnitAbilityAddChargeUsed(lv_warpGate, libCOMM_gv_warpGateTrainAbility, "WarpGateTrain", -1.0);
        UnitRemove(lv_creator);
    }
    else {
        UnitBehaviorAdd(lv_creator, libCOMM_gv_supplicantWarpTrainWarpRefundBehaviorLink, lv_supplicant, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_SupplicantWarpCancel_Init () {
    libCOMM_gt_SupplicantWarpCancel = TriggerCreate("libCOMM_gt_SupplicantWarpCancel_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_SupplicantWarpCancel, c_playerAny, libCOMM_gv_supplicantWarpTrainActualUnitCancelEventLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_Upgrade
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Alarak_Upgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_upgrade;
    int lv_player;
    int lv_level;

    // Automatic Variable Declarations
    string autoFDEAC96B_val;

    // Variable Initialization
    lv_upgrade = EventUpgradeName();
    lv_player = EventPlayer();
    lv_level = TechTreeUpgradeCount(lv_player, lv_upgrade, c_techCountCompleteOnly);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventPlayer()) == "Alarak"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFDEAC96B_val = lv_upgrade;
    if (autoFDEAC96B_val == "ProtossGroundArmorsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirArmorsLevel1", lv_level);
    }
    else if (autoFDEAC96B_val == "ProtossGroundArmorsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirArmorsLevel2", lv_level);
    }
    else if (autoFDEAC96B_val == "ProtossGroundArmorsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirArmorsLevel3", lv_level);
    }
    else if (autoFDEAC96B_val == "ProtossGroundWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirWeaponsLevel1", lv_level);
    }
    else if (autoFDEAC96B_val == "ProtossGroundWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirWeaponsLevel2", lv_level);
    }
    else if (autoFDEAC96B_val == "ProtossGroundWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirWeaponsLevel3", lv_level);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Alarak_Upgrade_Init () {
    libCOMM_gt_CM_Alarak_Upgrade = TriggerCreate("libCOMM_gt_CM_Alarak_Upgrade_Func");
    TriggerEnable(libCOMM_gt_CM_Alarak_Upgrade, false);
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_Alarak_Upgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_Sacrific_Scale
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Alarak_Sacrific_Scale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sacrificCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventUnit())) == "Alarak") && (UnitHasBehavior2(EventUnit(), "AscendantSacrificeSelfBuff") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sacrificCount = UnitBehaviorCount(EventUnit(), "AscendantSacrificeSelfBuff");
    if ((lv_sacrificCount > 10)) {
        lv_sacrificCount = 10;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(((0.05 * lv_sacrificCount) + 1.0), 3))));
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), libNtve_gf_Signal(IntToString(lv_sacrificCount)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Alarak_Sacrific_Scale_Init () {
    libCOMM_gt_CM_Alarak_Sacrific_Scale = TriggerCreate("libCOMM_gt_CM_Alarak_Sacrific_Scale_Func");
    TriggerEnable(libCOMM_gt_CM_Alarak_Sacrific_Scale, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Alarak_Sacrific_Scale, null, "AscendantSacrificeSelfBuff", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AlarakLightningStrikes_FlashOn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AlarakLightningStrikes_FlashOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupSingle(lv_p), AbilityCommand("AlarakACDeadlyCharge", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AlarakLightningStrikes_FlashOn_Init () {
    libCOMM_gt_CM_AlarakLightningStrikes_FlashOn = TriggerCreate("libCOMM_gt_CM_AlarakLightningStrikes_FlashOn_Func");
    TriggerEnable(libCOMM_gt_CM_AlarakLightningStrikes_FlashOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_AlarakLightningStrikes_FlashOn, null, "AlarakLightningStrikes", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AlarakLightningStrikes_FlashOff
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AlarakLightningStrikes_FlashOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupSingle(lv_p), AbilityCommand("AlarakACDeadlyCharge", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AlarakLightningStrikes_FlashOff_Init () {
    libCOMM_gt_CM_AlarakLightningStrikes_FlashOff = TriggerCreate("libCOMM_gt_CM_AlarakLightningStrikes_FlashOff_Func");
    TriggerEnable(libCOMM_gt_CM_AlarakLightningStrikes_FlashOff, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_AlarakLightningStrikes_FlashOff, null, "AlarakLightningStrikes", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AlarakLightningStrikes_Sacriface
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AlarakLightningStrikes_Sacriface_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_alarakHero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_alarakHero = libCOMI_gf_GetHeroUnit(UnitGetOwner(EventUnit()), "Alarak");

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_alarakHero) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_alarakHero) == "AlarakCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_alarakHero, libCOMM_gv_cM_AlarakLightningStrikes_Behavior, lv_alarakHero, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AlarakLightningStrikes_Sacriface_Init () {
    libCOMM_gt_CM_AlarakLightningStrikes_Sacriface = TriggerCreate("libCOMM_gt_CM_AlarakLightningStrikes_Sacriface_Func");
    TriggerEnable(libCOMM_gt_CM_AlarakLightningStrikes_Sacriface, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AlarakLightningStrikes_Sacriface, null, libCOMM_gv_cM_AlarakLightningStrikes_SacrificeCmd, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_SoulAbsorption_Impact
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Alarak_SoulAbsorption_Impact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missile;
    unit lv_alarak;
    fixed lv_amout;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_alarak = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_amout = UnitGetCustomValue(lv_missile, 63);
    lv_p = UnitGetOwner(lv_alarak);

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogReferenceSet("Effect,SoulAbsorptionMU,VitalArray[Life].Change", lv_p, FixedToString(lv_amout, c_fixedPrecisionAny));
    CatalogReferenceSet("Effect,SoulAbsorptionMU,VitalArray[Shields].Change", lv_p, FixedToString(lv_amout, c_fixedPrecisionAny));
    UnitCreateEffectUnit(lv_alarak, libCOMM_gv_cM_Alarak_SoulAbsorption_ScoreTrackerEffect, lv_alarak);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Alarak_SoulAbsorption_Impact_Init () {
    libCOMM_gt_CM_Alarak_SoulAbsorption_Impact = TriggerCreate("libCOMM_gt_CM_Alarak_SoulAbsorption_Impact_Func");
    TriggerEnable(libCOMM_gt_CM_Alarak_SoulAbsorption_Impact, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Alarak_SoulAbsorption_Impact, c_playerAny, libCOMM_gv_cM_Alarak_SoulAbsorption_ImpactEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_SoulAbsorption_Launch
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Alarak_SoulAbsorption_Launch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_victimType;
    unit lv_missile;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_victimType = EventPlayerEffectUsedUnitType(c_effectUnitTarget);
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(lv_missile, 63, (UnitTypeGetProperty(lv_victimType, c_unitPropSuppliesUsed) * libCOMM_gv_cM_Alarak_SoulAbsorption_FoodFactor));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Alarak_SoulAbsorption_Launch_Init () {
    libCOMM_gt_CM_Alarak_SoulAbsorption_Launch = TriggerCreate("libCOMM_gt_CM_Alarak_SoulAbsorption_Launch_Func");
    TriggerEnable(libCOMM_gt_CM_Alarak_SoulAbsorption_Launch, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Alarak_SoulAbsorption_Launch, c_playerAny, libCOMM_gv_cM_Alarak_SoulAbsorption_LaunchEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_SoulAbsorption_PrestigeMechBuff
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Alarak_SoulAbsorption_PrestigeMechBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentStack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentStack = UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CommanderPrestigeAlarakMechBuff");

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_currentStack == 0)) {
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CommanderPrestigeAlarakMechDisplay", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
        libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Create Glaze_Alarak_COOP_PrestigeMechBuff");
    }

    lv_currentStack = (lv_currentStack + 1);
    libCOMI_gf_SetUnitAttributePoints("CommanderPrestigeAlarakMechBuff", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_currentStack);
    if ((lv_currentStack >= 8)) {
        ActorScopeSend(ActorScopeFromUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "Signal PrestigeMechAnimGroupC");
    }
    else if ((lv_currentStack >= 4)) {
        ActorScopeSend(ActorScopeFromUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "Signal PrestigeMechAnimGroupB");
    }
    else if (true) {
        ActorScopeSend(ActorScopeFromUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "Signal PrestigeMechAnimGroupA");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Alarak_SoulAbsorption_PrestigeMechBuff_Init () {
    libCOMM_gt_CM_Alarak_SoulAbsorption_PrestigeMechBuff = TriggerCreate("libCOMM_gt_CM_Alarak_SoulAbsorption_PrestigeMechBuff_Func");
    TriggerEnable(libCOMM_gt_CM_Alarak_SoulAbsorption_PrestigeMechBuff, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Alarak_SoulAbsorption_PrestigeMechBuff, c_playerAny, "AlarakTheStrongestSurvivePrestigeMechBuffTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerAdd
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Alarak_EmpowerAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_PlayerIsCommander(lv_p) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_Alarak_EmpowerSlaves[lv_p], lv_u);
    if ((TriggerIsEnabled(libCOMM_gt_CM_Alarak_EmpowerUpdate) == true)) {
        TriggerExecute(libCOMM_gt_CM_Alarak_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Alarak_EmpowerAdd_Init () {
    libCOMM_gt_CM_Alarak_EmpowerAdd = TriggerCreate("libCOMM_gt_CM_Alarak_EmpowerAdd_Func");
    TriggerEnable(libCOMM_gt_CM_Alarak_EmpowerAdd, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Alarak_EmpowerAdd, c_playerAny, libCOMM_gv_cM_Alarak_EmpowerAuraTargetPlayerStartEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerRemove
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Alarak_EmpowerRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_PlayerIsCommander(lv_p) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libCOMM_gv_cM_Alarak_EmpowerSlaves[lv_p], lv_u);
    ActorScopeSend(ActorScopeFromUnit(lv_u), (("Signal " + "Destroy" + IntToString(lv_p))));
    if ((TriggerIsEnabled(libCOMM_gt_CM_Alarak_EmpowerUpdate) == true)) {
        TriggerExecute(libCOMM_gt_CM_Alarak_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Alarak_EmpowerRemove_Init () {
    libCOMM_gt_CM_Alarak_EmpowerRemove = TriggerCreate("libCOMM_gt_CM_Alarak_EmpowerRemove_Func");
    TriggerEnable(libCOMM_gt_CM_Alarak_EmpowerRemove, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Alarak_EmpowerRemove, c_playerAny, libCOMM_gv_cM_Alarak_EmpowerAuraTargetPlayerFinalEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerWorshiperAdd
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Alarak_EmpowerWorshiperAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_PlayerIsCommander(lv_p) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_Alarak_EmpowerWorshipers[lv_p], lv_u);
    if ((TriggerIsEnabled(libCOMM_gt_CM_Alarak_EmpowerUpdate) == true)) {
        TriggerExecute(libCOMM_gt_CM_Alarak_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Alarak_EmpowerWorshiperAdd_Init () {
    libCOMM_gt_CM_Alarak_EmpowerWorshiperAdd = TriggerCreate("libCOMM_gt_CM_Alarak_EmpowerWorshiperAdd_Func");
    TriggerEnable(libCOMM_gt_CM_Alarak_EmpowerWorshiperAdd, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Alarak_EmpowerWorshiperAdd, null, "WorshipAlarak", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerWorshiperRemove
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Alarak_EmpowerWorshiperRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto447F0255_g;

    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    auto447F0255_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto447F0255_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        UnitGroupRemove(libCOMM_gv_cM_Alarak_EmpowerWorshipers[lv_itPlayer], lv_u);
    }
    if ((TriggerIsEnabled(libCOMM_gt_CM_Alarak_EmpowerUpdate) == true)) {
        TriggerExecute(libCOMM_gt_CM_Alarak_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Alarak_EmpowerWorshiperRemove_Init () {
    libCOMM_gt_CM_Alarak_EmpowerWorshiperRemove = TriggerCreate("libCOMM_gt_CM_Alarak_EmpowerWorshiperRemove_Func");
    TriggerEnable(libCOMM_gt_CM_Alarak_EmpowerWorshiperRemove, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Alarak_EmpowerWorshiperRemove, null, "WorshipAlarak", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Alarak_EmpowerUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_slave;
    fixed[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_totalSupply;
    int lv_player;
    fixed lv_abilityPower;
    fixed lv_attackDamage;

    // Automatic Variable Declarations
    const int autoBF64849A_ae = 2;
    const int autoBF64849A_ai = 1;
    unitgroup auto475368FD_g;
    int auto475368FD_u;
    unitgroup autoC01F2CF4_g;
    int autoC01F2CF4_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.0625, c_timeGame);
    lv_player = 1;
    for ( ; ( (autoBF64849A_ai >= 0 && lv_player <= autoBF64849A_ae) || (autoBF64849A_ai < 0 && lv_player >= autoBF64849A_ae) ) ; lv_player += autoBF64849A_ai ) {
        auto475368FD_g = libCOMM_gv_cM_Alarak_EmpowerSlaves[lv_player];
        auto475368FD_u = UnitGroupCount(auto475368FD_g, c_unitCountAll);
        for (;; auto475368FD_u -= 1) {
            lv_slave = UnitGroupUnitFromEnd(auto475368FD_g, auto475368FD_u);
            if (lv_slave == null) { break; }
            if ((UnitHasBehavior2(lv_slave, libCOMM_gv_cM_Alarak_EmpowerAuraTarget) == true)) {
                if (true) {
                }

                if ((((UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed) == 0.0) && (UnitTypeTestAttribute(UnitGetType(lv_slave), c_unitAttributeHeroic) == true)) || (UnitHasBehavior2(lv_slave, "HHMercStarportCargoInstalled") == true))) {
                    lv_totalSupply[lv_player] += 3.0;
                }
                else if ((UnitFilterMatch(lv_slave, lv_player, UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0)) == true)) {
                    lv_totalSupply[lv_player] += (UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed) * 2.0);
                }
                else if (true) {
                    lv_totalSupply[lv_player] += UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed);
                }
            }
            else {
                UnitGroupRemove(libCOMM_gv_cM_Alarak_EmpowerSlaves[lv_player], lv_slave);
            }
        }
        autoC01F2CF4_g = libCOMM_gv_cM_Alarak_EmpowerWorshipers[lv_player];
        autoC01F2CF4_u = UnitGroupCount(autoC01F2CF4_g, c_unitCountAll);
        for (;; autoC01F2CF4_u -= 1) {
            lv_slave = UnitGroupUnitFromEnd(autoC01F2CF4_g, autoC01F2CF4_u);
            if (lv_slave == null) { break; }
            if ((UnitHasBehavior2(lv_slave, libCOMM_gv_cM_Alarak_EmpowerWorshiperTarget) == true)) {
                lv_totalSupply[lv_player] += UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed);
            }
            else {
                UnitGroupRemove(libCOMM_gv_cM_Alarak_EmpowerSlaves[lv_player], lv_slave);
            }
        }
        if ((lv_totalSupply[lv_player] <= 100.0)) {
            lv_attackDamage = (libCOMM_gv_cM_Alarak_EmpowerBaseDmgInc * lv_totalSupply[lv_player]);
            lv_abilityPower = (libCOMM_gv_cM_Alarak_EmpowerBaseSpellDmgeIncPercent * lv_totalSupply[lv_player]);
        }
        else {
            lv_attackDamage = (libCOMM_gv_cM_Alarak_EmpowerBaseDmgInc * lv_totalSupply[lv_player]);
            lv_abilityPower = (((libCOMM_gv_cM_Alarak_EmpowerBaseSpellDmgeIncPercent * libCOMM_gv_cM_Alarak_EmpowerDiminishingReturnsMultiplier) * (lv_totalSupply[lv_player] - libCOMM_gv_cM_Alarak_EmpowerDiminishingReturnsSupplyThreshold)) + (libCOMM_gv_cM_Alarak_EmpowerBaseSpellDmgeIncPercent * libCOMM_gv_cM_Alarak_EmpowerDiminishingReturnsSupplyThreshold));
        }
        CatalogFieldValueSet(c_gameCatalogBehavior, libCOMM_gv_cM_Alarak_EmpowerBehaviorCaster, "Modification.DamageDealtFraction[Spell]", lv_player, FixedToString(lv_abilityPower, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, libCOMM_gv_cM_Alarak_EmpowerBehaviorCaster, "Modification.DamageDealtUnscaled[Melee]", lv_player, FixedToString(lv_attackDamage, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, libCOMM_gv_cM_Alarak_EmpowerBehaviorCaster, "Modification.DamageDealtUnscaled[Ranged]", lv_player, FixedToString(lv_attackDamage, c_fixedPrecisionAny));
        if ((lv_totalSupply[lv_player] > 0.0)) {
            TechTreeBehaviorAllow(lv_player, libCOMM_gv_cM_Alarak_EmpowerBehaviorCaster, true);
        }
        else {
            TechTreeBehaviorAllow(lv_player, libCOMM_gv_cM_Alarak_EmpowerBehaviorCaster, false);
        }
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Alarak_EmpowerUpdate_Init () {
    libCOMM_gt_CM_Alarak_EmpowerUpdate = TriggerCreate("libCOMM_gt_CM_Alarak_EmpowerUpdate_Func");
    TriggerEnable(libCOMM_gt_CM_Alarak_EmpowerUpdate, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderArtanis
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderArtanis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoD6AC8091_g;
    int autoD6AC8091_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Artanis");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreArtanisAbsorb, true);
    TriggerEnable(libCOMM_gt_CC_ScoreArtanisBombardment, true);
    TriggerEnable(libCOMM_gt_CC_ScoreArtanisKaraxOrbitalStrike, true);
    autoD6AC8091_g = lv_players;
    autoD6AC8091_var = -1;
    while (true) {
        autoD6AC8091_var = PlayerGroupNextPlayer(autoD6AC8091_g, autoD6AC8091_var);
        if (autoD6AC8091_var < 0) { break; }
        if ((TechTreeUnitIsAllowed(autoD6AC8091_var, "SoACasterArtanis") == true)) {
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionArtanisSuperShields, true);
            libCOMI_gf_CM_CommanderVOAbilityWatchUnit(autoD6AC8091_var, SoundLink("ExecutorAlert_ArtanisOverchargeReady", -1), "Abil/SoASuperShield", libCOMI_gv_yY_GPCasterUnit[autoD6AC8091_var], "SoASuperShield");
            libCOMI_gf_CM_CommanderVOAbilityWatchUnit(autoD6AC8091_var, SoundLink("ExecutorAlert_ArtanisSolarBombardReady", -1), "Abil/SOAStrafeAttack", libCOMI_gv_yY_GPCasterUnit[autoD6AC8091_var], "SOAStrafeAttack");
            libCOMI_gf_CreateACCaster(autoD6AC8091_var, "SoACasterArtanis");
            libCOMI_gf_CU_GPInitEnergyCaster(autoD6AC8091_var, "SoACasterArtanis");
            libCOMI_gf_CU_GPSoAUpdateVitals(autoD6AC8091_var);
            if ((TechTreeUpgradeCount(autoD6AC8091_var, "MasteryArtanisStartingAndMaxSoAEnergy", c_techCountCompleteOnly) > 0)) {
                TextExpressionSetToken("Param/Expression/lib_COMM_F66C6704", "STDTOOLTIP", StringExternal("UI/SoAMissionEnergyTooltip"));
                TextExpressionSetToken("Param/Expression/lib_COMM_F66C6704", "ENERGY", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryArtanisStartingAndMaxSoAEnergyDisplayDummy", "Amount", autoD6AC8091_var)));
                libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_GPEnergyTooltip[autoD6AC8091_var], TextExpressionAssemble("Param/Expression/lib_COMM_F66C6704"), PlayerGroupSingle(autoD6AC8091_var));
            }

            UnitCreateEffectPoint(libCOMI_gv_yY_GPCasterUnit[autoD6AC8091_var], "SOAPylonPowerCoop", libCOMI_gf_GetPlayerHeroPosition(autoD6AC8091_var));
            if (((libCOMI_gf_DifficultyLevelForPlayerCoop(autoD6AC8091_var) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(autoD6AC8091_var) == 4) || (libCOMI_gf_CC_CommanderLevel(autoD6AC8091_var, libCOMI_gf_ActiveCommanderForPlayer(autoD6AC8091_var)) <= 2))) {
                libCOMI_gv_cM_GPRemindersOn[autoD6AC8091_var] = true;
                TriggerEnable(libCOMM_gt_CM_GPReminderAbilityUsed, true);
                libCOMM_gf_CM_GPReminderArtanis(autoD6AC8091_var);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderArtanis_Init () {
    libCOMM_gt_DUT_CommanderArtanis = TriggerCreate("libCOMM_gt_DUT_CommanderArtanis_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderArtanis, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementArtanisSolarBombardmentUsed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AchievementArtanisSolarBombardmentUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderArtanisArtanisWMD", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AchievementArtanisSolarBombardmentUsed_Init () {
    libCOMM_gt_CM_AchievementArtanisSolarBombardmentUsed = TriggerCreate("libCOMM_gt_CM_AchievementArtanisSolarBombardmentUsed_Func");
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AchievementArtanisSolarBombardmentUsed, null, AbilityCommand("SOAStrafeAttack", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoAStrafeActivated
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_PM_SoAStrafeActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_radius;
    fixed lv_radiusMinimum;
    fixed lv_radiusMaximum;
    int lv_i;
    fixed lv_r;
    int lv_casterPlayer;
    point lv_targetPoint;
    int lv_masteryCount;
    fixed lv_masteryBonusPerPoint;
    fixed lv_masteryBonusTotal;
    fixed lv_shotCount;

    // Automatic Variable Declarations
    fixed auto5D0BCD07_ae;
    const fixed auto5D0BCD07_ai = 1.0;

    // Variable Initialization
    lv_radiusMinimum = 2.0;
    lv_radiusMaximum = 10.0;
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_masteryBonusPerPoint = 0.02;
    lv_masteryBonusTotal = 1.0;
    lv_shotCount = 100.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "MasteryArtanisSolarBombardment", c_techCountQueuedOrBetter) >= 1)) {
        lv_masteryCount = TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "MasteryArtanisSolarBombardment", c_techCountQueuedOrBetter);
        lv_masteryBonusTotal += (lv_masteryCount * lv_masteryBonusPerPoint);
        lv_shotCount *= lv_masteryBonusTotal;
        lv_radiusMaximum *= lv_masteryBonusTotal;
    }

    auto5D0BCD07_ae = lv_shotCount;
    lv_r = 1.0;
    for ( ; ( (auto5D0BCD07_ai >= 0 && lv_r <= auto5D0BCD07_ae) || (auto5D0BCD07_ai < 0 && lv_r >= auto5D0BCD07_ae) ) ; lv_r += auto5D0BCD07_ai ) {
        lv_radius = (((lv_r / lv_shotCount) * (lv_radiusMaximum - lv_radiusMinimum)) + lv_radiusMinimum);
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        if ((TechTreeUpgradeCount(EventPlayer(), "SOAStrafeAttackUpgrade", c_techCountQueuedOrBetter) >= 1)) {
            UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
            UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        }

        Wait(0.15, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_PM_SoAStrafeActivated_Init () {
    libCOMM_gt_PM_SoAStrafeActivated = TriggerCreate("libCOMM_gt_PM_SoAStrafeActivated_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_PM_SoAStrafeActivated, c_playerAny, "SOAStrafeAttackCreateTargeter");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoASuperShieldsActivated
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_PM_SoASuperShieldsActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pCommander;
    int lv_itCommander;

    // Automatic Variable Declarations
    playergroup autoD2A8C2A7_g;
    unitgroup autoED4A1C12_g;
    int autoED4A1C12_u;
    unit autoED4A1C12_var;

    // Variable Initialization
    lv_pCommander = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    autoD2A8C2A7_g = libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_pCommander);
    lv_itCommander = -1;
    while (true) {
        lv_itCommander = PlayerGroupNextPlayer(autoD2A8C2A7_g, lv_itCommander);
        if (lv_itCommander < 0) { break; }
        autoED4A1C12_g = UnitGroup(null, lv_itCommander, RegionEntireMap(), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoED4A1C12_u = UnitGroupCount(autoED4A1C12_g, c_unitCountAll);
        for (;; autoED4A1C12_u -= 1) {
            autoED4A1C12_var = UnitGroupUnitFromEnd(autoED4A1C12_g, autoED4A1C12_u);
            if (autoED4A1C12_var == null) { break; }
            if ((UnitGetType(autoED4A1C12_var) != "KerriganVoidCoopEconDropLT1") && (UnitGetType(autoED4A1C12_var) != "KerriganVoidCoopEconDrop1") && (UnitGetType(autoED4A1C12_var) != "KerriganVoidCoopEconDrop2") && (UnitGetType(autoED4A1C12_var) != "KerriganVoidCoopEconDrop3") && (UnitGetType(autoED4A1C12_var) != "KerriganVoidCoopEconDrop4") && (UnitGetType(autoED4A1C12_var) != "KerriganVoidCoopEconDrop5")) {
                UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOASuperShieldApply", autoED4A1C12_var);
            }

        }
    }
    Wait(StringToFixed(CatalogReferenceGet("Behavior,SOASuperShield,Duration", c_playerAny)), c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_PM_SoASuperShieldsActivated_Init () {
    libCOMM_gt_PM_SoASuperShieldsActivated = TriggerCreate("libCOMM_gt_PM_SoASuperShieldsActivated_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_PM_SoASuperShieldsActivated, c_playerAny, "SOASuperShieldDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionArtanisSuperShields
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionArtanisSuperShields_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(EventPlayer());
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("ArtanisCommander_Shield", -1), PlayerGroupAll());
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(libCOMI_gf_CC_PlayerAlly(EventPlayer())), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionArtanisSuperShields_Init () {
    libCOMM_gt_CM_AbilityTransmissionArtanisSuperShields = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionArtanisSuperShields_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionArtanisSuperShields, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionArtanisSuperShields, null, AbilityCommand("SoASuperShield", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreArtanisAbsorb
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreArtanisAbsorb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())] += EventUnitDamageAbsorbed();
    PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "ArtanisShieldAbsorb", FixedToInt(libCOMM_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())]));
    if ((libCOMI_gf_ActiveCommanderForPlayer(UnitGetOwner(EventUnit())) != "Artanis")) {
        if (((FixedToInt(libCOMM_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())]) - FixedToInt(libCOMM_gv_cC_ScoreArtanisAbsorbLast[UnitGetOwner(EventUnit())])) > 5)) {
            AchievementTermQuantityAdd(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), "CommanderArtanisSolalright", (FixedToInt(libCOMM_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())]) - FixedToInt(libCOMM_gv_cC_ScoreArtanisAbsorbLast[UnitGetOwner(EventUnit())])));
            libCOMM_gv_cC_ScoreArtanisAbsorbLast[UnitGetOwner(EventUnit())] = libCOMM_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())];
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreArtanisAbsorb_Init () {
    libCOMM_gt_CC_ScoreArtanisAbsorb = TriggerCreate("libCOMM_gt_CC_ScoreArtanisAbsorb_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreArtanisAbsorb, false);
    TriggerAddEventUnitDamageAbsorbed(libCOMM_gt_CC_ScoreArtanisAbsorb, null, "SOASuperShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreArtanisBombardment
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreArtanisBombardment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ArtanisSoADamage", FixedToInt(libCOMM_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreArtanisBombardment_Init () {
    libCOMM_gt_CC_ScoreArtanisBombardment = TriggerCreate("libCOMM_gt_CC_ScoreArtanisBombardment_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreArtanisBombardment, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreArtanisBombardment, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAStrafeAttackDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugAbathurBiomassReport
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DebugAbathurBiomassReport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COMM_62173AFF", "A", IntToText(libCOMM_gv_cM_DebugAbathurBiomassCollected));
    TextExpressionSetToken("Param/Expression/lib_COMM_62173AFF", "B", IntToText(libCOMM_gv_cM_DebugAbathurBiomassDroppedNormal));
    TextExpressionSetToken("Param/Expression/lib_COMM_62173AFF", "C", IntToText(libCOMM_gv_cM_DebugAbathurBiomassLost));
    TextExpressionSetToken("Param/Expression/lib_COMM_62173AFF", "D", IntToText(libCOMM_gv_cM_DebugAbathurBiomassDroppedRefund));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_COMM_62173AFF"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DebugAbathurBiomassReport_Init () {
    libCOMM_gt_CM_DebugAbathurBiomassReport = TriggerCreate("libCOMM_gt_CM_DebugAbathurBiomassReport_Func");
    TriggerAddEventChatMessage(libCOMM_gt_CM_DebugAbathurBiomassReport, c_playerAny, "-bioreport", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderAbathur
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderAbathur_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto1FCA1A9D_g;
    int auto1FCA1A9D_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Abathur");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreAbathurMonsterDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreAbathurHealing, true);
    TriggerEnable(libCOMM_gt_CM_Abathur_BiomassDrop, true);
    TriggerEnable(libCOMM_gt_CM_Abathur_BiomassRefund, true);
    TriggerEnable(libCOMM_gt_CM_Abathur_BiomassScaler, true);
    TriggerEnable(libCOMM_gt_CM_Abathur_BiomassTrain, true);
    TriggerEnable(libCOMM_gt_CM_Abathur_BiomassPickup, true);
    TriggerEnable(libCOMM_gt_CM_Abathur_BiomassManualUpdate, true);
    TriggerEnable(libCOMM_gt_CM_DebugAbathurBiomassLost, true);
    TriggerEnable(libCOMM_gt_CM_Abathur_MeleeBonusUpgrade, true);
    TriggerEnable(libCOMM_gt_CM_Abathur_ToxicNest, true);
    TriggerEnable(libCOMM_gt_CM_Abathur_SwarmHostLocustLaunchCast, true);
    TriggerEnable(libCOMM_gt_CM_Abathur_RavagerSpellCooldown, true);
    TriggerEnable(libCOMM_gt_CM_Abathur_ToxicNestDeathFailsafe, true);
    TriggerEnable(libCOMM_gt_BanelingScourgeLocusts, true);
    TriggerEnable(libCOMM_gt_BanelingScourgeBiomassDrop, true);
    auto1FCA1A9D_g = lv_players;
    auto1FCA1A9D_var = -1;
    while (true) {
        auto1FCA1A9D_var = PlayerGroupNextPlayer(auto1FCA1A9D_g, auto1FCA1A9D_var);
        if (auto1FCA1A9D_var < 0) { break; }
        TriggerEnable(libCOMM_gt_CM_AbilityTransmissionAbathurMend, true);
        libCOMI_gf_CM_CommanderVOAbilityWatchUnit(auto1FCA1A9D_var, SoundLink("IzshaAlert_AbathurMend", -1), "Abil/AbathurMend", libCOMI_gv_yY_GPCasterUnit[auto1FCA1A9D_var], "AbathurMend");
        libCOMM_gf_CM_AbilityTransmissionAbathurNestReminderActionVer(auto1FCA1A9D_var);
        libCOMI_gf_CreateACCaster(auto1FCA1A9D_var, "CoopCasterAbathur");
        libCOMI_gf_CU_GPInitCommonCaster(auto1FCA1A9D_var, "CoopCasterAbathur", "Coop_GlobalCastingTemplates/ZergCasterPanelTemplate", "Coop_GlobalCastingTemplates/ZergGlobalCommandPanelTemplate", 2, "Cutscenes\\UI_ZergCastingPanel.SC2Cutscene", "");
        if ((TechTreeUpgradeCount(auto1FCA1A9D_var, "AbathurEnemyDeathCreateLocusts", c_techCountQueuedOrBetter) > 0)) {
            TriggerEnable(libCOMM_gt_CM_Abathur_Enemy_Death_Create_Locusts, true);
        }

        if (((libCOMI_gf_DifficultyLevelForPlayerCoop(auto1FCA1A9D_var) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(auto1FCA1A9D_var) == 4) || (libCOMI_gf_CC_CommanderLevel(auto1FCA1A9D_var, libCOMI_gf_ActiveCommanderForPlayer(auto1FCA1A9D_var)) <= 2))) {
            libCOMI_gv_cM_GPRemindersOn[auto1FCA1A9D_var] = true;
            TriggerEnable(libCOMM_gt_CM_GPReminderAbilityUsed, true);
            libCOMM_gf_CM_GPReminderAbathur(auto1FCA1A9D_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderAbathur_Init () {
    libCOMM_gt_DUT_CommanderAbathur = TriggerCreate("libCOMM_gt_DUT_CommanderAbathur_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderAbathur, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AbathurChosen
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_MM_AbathurChosen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeLevelDelta() == 1))) {
            return false;
        }

        if (!((EventUpgradeName() == "AbathurCommander"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_MM_BiomassSizeUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_MM_AbathurChosen_Init () {
    libCOMM_gt_MM_AbathurChosen = TriggerCreate("libCOMM_gt_MM_AbathurChosen_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_MM_AbathurChosen, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_BiomassSizeUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_MM_BiomassSizeUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassCountTotal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (libCOMI_gf_ActiveCommanderForPlayer3(UnitGetOwner(EventUnit())) == "Abathur") && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    libCOMI_gf_MM_UnitScaleController(EventUnit(), 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_MM_BiomassSizeUpdate_Init () {
    libCOMM_gt_MM_BiomassSizeUpdate = TriggerCreate("libCOMM_gt_MM_BiomassSizeUpdate_Func");
    TriggerEnable(libCOMM_gt_MM_BiomassSizeUpdate, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_MM_BiomassSizeUpdate, null, "BiomassBuff1", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_MM_BiomassSizeUpdate, null, "BiomassBuff10", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_MM_BiomassSizeUpdate, null, "BiomassBuff100", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAbathurMend
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionAbathurMend_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AbathurCommander_Mend", -1), PlayerGroupAll());
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionAbathurMend_Init () {
    libCOMM_gt_CM_AbilityTransmissionAbathurMend = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionAbathurMend_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionAbathurMend, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionAbathurMend, null, AbilityCommand("AbathurMend", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAbathurHealing
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreAbathurHealing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "Abathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreAbathurHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "AbathurHealingReceived", FixedToInt(libCOMM_gv_cC_ScoreAbathurHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreAbathurHealing_Init () {
    libCOMM_gt_CC_ScoreAbathurHealing = TriggerCreate("libCOMM_gt_CC_ScoreAbathurHealing_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreAbathurHealing, false);
    TriggerAddEventUnitHealed(libCOMM_gt_CC_ScoreAbathurHealing, null, c_unitVitalAny, "AbathurMendInitialHealer");
    TriggerAddEventUnitHealed(libCOMM_gt_CC_ScoreAbathurHealing, null, c_unitVitalAny, "AbathurMendSecondaryHealer");
    TriggerAddEventUnitHealed(libCOMM_gt_CC_ScoreAbathurHealing, null, c_unitVitalAny, "QueenBurstHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAbathurMonsterDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreAbathurMonsterDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "Brutalisk") || (UnitGetType(EventUnitDamageSourceUnit()) == "AbathurSymbioteBrutalisk") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSLeviathan") || (UnitGetType(EventUnitDamageSourceUnit()) == "AbathurSymbioteLeviathan")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreAbathurMonsterDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "AbathurMonsterDamage", FixedToInt(libCOMM_gv_cC_ScoreAbathurMonsterDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreAbathurMonsterDmg_Init () {
    libCOMM_gt_CC_ScoreAbathurMonsterDmg = TriggerCreate("libCOMM_gt_CC_ScoreAbathurMonsterDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreAbathurMonsterDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreAbathurMonsterDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_ToxicNestDeathFailsafe
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Abathur_ToxicNestDeathFailsafe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Abathur_ToxicNestDeathFailsafe_Init () {
    libCOMM_gt_CM_Abathur_ToxicNestDeathFailsafe = TriggerCreate("libCOMM_gt_CM_Abathur_ToxicNestDeathFailsafe_Func");
    TriggerEnable(libCOMM_gt_CM_Abathur_ToxicNestDeathFailsafe, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Abathur_ToxicNestDeathFailsafe, c_playerAny, "KillCaster");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_MeleeBonusUpgrade
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Abathur_MeleeBonusUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderUserData(EventPlayer()) == "Abathur"))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueModify(c_gameCatalogEffect, "BrutalizeDamage", "Amount", EventPlayer(), "3", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "Brutalize", "Level", EventPlayer(), "1", c_upgradeOperationAdd);
    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel1")) {
        CatalogFieldValueSet(c_gameCatalogWeapon, "Brutalize", "Icon", EventPlayer(), "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level1.dds");
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel2")) {
        CatalogFieldValueSet(c_gameCatalogWeapon, "Brutalize", "Icon", EventPlayer(), "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level2.dds");
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel3")) {
        CatalogFieldValueSet(c_gameCatalogWeapon, "Brutalize", "Icon", EventPlayer(), "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level3.dds");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Abathur_MeleeBonusUpgrade_Init () {
    libCOMM_gt_CM_Abathur_MeleeBonusUpgrade = TriggerCreate("libCOMM_gt_CM_Abathur_MeleeBonusUpgrade_Func");
    TriggerEnable(libCOMM_gt_CM_Abathur_MeleeBonusUpgrade, false);
    TriggerAddEventUnitResearchProgress(libCOMM_gt_CM_Abathur_MeleeBonusUpgrade, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassDrop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Abathur_BiomassDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassUnitCount;
    int lv_indexPlayer;
    fixed lv_biomassBaseAmount;
    fixed lv_biomassCasualMultiplier;
    fixed lv_biomassNormalMultiplier;
    fixed lv_biomassHardMultiplier;
    fixed lv_biomassBrutalMultiplier;
    fixed lv_biomassToxicNestMultiplier;
    fixed lv_dyingUnitSupply;
    int lv_abathurAllyOfKillingPlayer;
    fixed lv_doubleBiomassChance;
    fixed lv_expectedDrop;
    fixed lv_fractionChance;

    // Automatic Variable Declarations
    playergroup auto35954D48_g;

    // Variable Initialization
    lv_biomassCasualMultiplier = 2.5;
    lv_biomassNormalMultiplier = 2.5;
    lv_biomassHardMultiplier = 2.0;
    lv_biomassBrutalMultiplier = 1.25;
    lv_biomassToxicNestMultiplier = 1.0;
    lv_abathurAllyOfKillingPlayer = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Abathur", libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(libNtve_gf_KillingPlayer()));

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(libNtve_gf_KillingPlayer(), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_AllyMutual) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != c_playerAny))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_CT_UnitSpawnedByMutator(EventUnit()) == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }

        if (!((lv_abathurAllyOfKillingPlayer != c_playerAny))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto35954D48_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto35954D48_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer) == "Abathur") && (libNtve_gf_PlayerIsEnemy(lv_indexPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_AllyMutual) == false)) {
            lv_dyingUnitSupply = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0));
            lv_doubleBiomassChance = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryAbathurDoubleBiomassDisplayDummy", "Amount", lv_indexPlayer);
            if ((UnitHasBehavior2(EventUnit(), "CritterExplode") == true)) {
                lv_biomassBaseAmount = 1;
            }
            else if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
                lv_biomassBaseAmount = 12;
            }
            else if ((lv_dyingUnitSupply < -4)) {
                lv_biomassBaseAmount = 12;
            }
            else if (true) {
                lv_biomassBaseAmount = (-2*lv_dyingUnitSupply);
            }
            if ((TechTreeUpgradeCount(lv_indexPlayer, "AbathurToxicNestIcreasedBiomass", c_techCountCompleteOnly) == 1) && (UnitHasBehavior2(EventUnit(), "ToxicNestVirulentNest") == true)) {
                lv_biomassToxicNestMultiplier = 1.5;
            }

            if ((TechTreeUpgradeCount(lv_indexPlayer, "MasteryAbathurDoubleBiomass", c_techCountCompleteOnly) > 0) && (RandomFixed(0.0, 100.0) <= lv_doubleBiomassChance)) {
                lv_biomassToxicNestMultiplier = 2.0;
            }

            lv_expectedDrop = (libNtve_gf_DifficultyValueFixed(lv_biomassCasualMultiplier, lv_biomassNormalMultiplier, lv_biomassHardMultiplier, lv_biomassBrutalMultiplier) * lv_biomassBaseAmount * lv_biomassToxicNestMultiplier);
            lv_biomassUnitCount = CeilingI(lv_expectedDrop);
            lv_fractionChance = (lv_expectedDrop - lv_biomassUnitCount);
            if ((RandomFixed(0.0, 1.0) <= lv_fractionChance)) {
                lv_biomassUnitCount += 1;
            }

            if ((lv_biomassUnitCount > 0)) {
                libCOMM_gv_cM_DebugAbathurBiomassDroppedNormal += lv_biomassUnitCount;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "BiomassPickup", c_unitCreateIgnorePlacement, lv_abathurAllyOfKillingPlayer, UnitGetPosition(EventUnit()));
                libCOMM_gf_CM_Abathur_BiomassSetStack(UnitLastCreated(), lv_biomassUnitCount);
                UnitBehaviorRemove(UnitLastCreated(), "BiomassCreated", 1);
                libCOMM_gf_CM_Abathur_BiomassScale(UnitLastCreated(), true);
                libCOMM_gf_CM_Abathur_BiomassMerge(UnitLastCreated(), lv_biomassUnitCount);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Abathur_BiomassDrop_Init () {
    libCOMM_gt_CM_Abathur_BiomassDrop = TriggerCreate("libCOMM_gt_CM_Abathur_BiomassDrop_Func");
    TriggerEnable(libCOMM_gt_CM_Abathur_BiomassDrop, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Abathur_BiomassDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassPickup
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Abathur_BiomassPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassMaxStacks;
    int lv_biomassCountTargetTotal;
    int lv_biomassCountStored;
    int lv_biomassCountStoredTemp;
    int lv_biomass100Stacks;
    int lv_biomass10Stacks;
    int lv_biomass1Stacks;
    int lv_biomassNewStackCount;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_biomassMaxStacks = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "AbathurBiomassMaxStacksDummy", "Amount", EventPlayer());
    lv_biomassCountStored = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));
    lv_biomassCountStoredTemp = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_biomassCountTargetTotal = (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff100") * 100);
    lv_biomassCountTargetTotal += (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff10") * 10);
    lv_biomassCountTargetTotal += UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff1");
    lv_biomass100Stacks = TruncI((lv_biomassCountStoredTemp / 100));
    lv_biomassCountStoredTemp -= (lv_biomass100Stacks * 100);
    lv_biomass10Stacks = TruncI((lv_biomassCountStoredTemp / 10));
    lv_biomassCountStoredTemp -= (lv_biomass10Stacks * 10);
    lv_biomass1Stacks = lv_biomassCountStoredTemp;
    lv_biomassNewStackCount = (lv_biomassCountStored + lv_biomassCountTargetTotal);
    if ((lv_biomassNewStackCount > lv_biomassMaxStacks)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BiomassPickupLM", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        lv_biomassCountStoredTemp = (lv_biomassMaxStacks - lv_biomassCountTargetTotal);
        libCOMM_gf_CM_Abathur_BiomassSetStack(EventPlayerEffectUsedUnit(c_effectUnitCaster), FixedToInt((UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63) - lv_biomassCountStoredTemp)));
        libCOMM_gf_CM_Abathur_BiomassScale(EventPlayerEffectUsedUnit(c_effectUnitCaster), false);
        libCOMM_gv_cM_DebugAbathurBiomassCollected += lv_biomassCountStoredTemp;
        lv_biomass100Stacks = TruncI((lv_biomassCountStoredTemp / 100));
        lv_biomassCountStoredTemp -= (lv_biomass100Stacks * 100);
        lv_biomass10Stacks = TruncI((lv_biomassCountStoredTemp / 10));
        lv_biomassCountStoredTemp -= (lv_biomass10Stacks * 10);
        lv_biomass1Stacks = lv_biomassCountStoredTemp;
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassMaxedMarker", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff100PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass100Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff10PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass10Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff1", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass1Stacks);
        ActorScopeSend(ActorScopeFromUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "Signal BiomassAnimGroupC");
    }
    else {
        libCOMM_gv_cM_DebugAbathurBiomassCollected += lv_biomassCountStored;
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BiomassTravelling", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BiomassPickupFullLM", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff100PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass100Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff10PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass10Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff1", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass1Stacks);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Abathur_BiomassPickup_Init () {
    libCOMM_gt_CM_Abathur_BiomassPickup = TriggerCreate("libCOMM_gt_CM_Abathur_BiomassPickup_Func");
    TriggerEnable(libCOMM_gt_CM_Abathur_BiomassPickup, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Abathur_BiomassPickup, c_playerAny, "BiomassPickupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassRefund
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Abathur_BiomassRefund_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_indexPlayer;
    point lv_position;
    int lv_biomassCountTotal;
    fixed lv_biomassRefundChance;
    int lv_biomassRefundScaling;
    int lv_biomassRefundAmount;
    int lv_biomassDropCountLarge;
    int lv_biomassDropCountSmall;
    int lv_killedPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_biomassRefundChance = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "AbathurBiomassRefundDummy", "Amount", UnitGetOwner(EventUnit()));
    lv_biomassRefundScaling = 1;
    lv_killedPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) != "Locust") && (libCOMI_gf_GetPlayerCommanderGameLink(lv_killedPlayer) == "Abathur") && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true)) && (UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), 0)) == true) && ((libNtve_gf_UnitIsHidden(EventUnit()) == false) || (EventUnitDamageEffect() == libCOMI_gv_cM_CargoDeathKillEffect)) && (lv_biomassRefundChance > 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_biomassRefundChance >= RandomFixed(0.0, 100.0))) {
        lv_biomassCountTotal = (UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100);
        lv_biomassCountTotal += (UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10);
        lv_biomassCountTotal += UnitBehaviorCount(EventUnit(), "BiomassBuff1");
        lv_biomassRefundAmount = FixedToInt((lv_biomassCountTotal / lv_biomassRefundScaling));
        libCOMM_gv_cM_DebugAbathurBiomassDroppedRefund += lv_biomassRefundAmount;
        libCOMM_gv_cM_DebugAbathurBiomassLost -= lv_biomassRefundAmount;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BiomassPickup", c_unitCreateIgnorePlacement, lv_killedPlayer, UnitGetPosition(EventUnit()));
        libCOMM_gf_CM_Abathur_BiomassSetStack(UnitLastCreated(), lv_biomassRefundAmount);
        UnitBehaviorRemove(UnitLastCreated(), "BiomassCreated", 1);
        libCOMM_gf_CM_Abathur_BiomassScale(UnitLastCreated(), true);
        libCOMM_gf_CM_Abathur_BiomassMerge(UnitLastCreated(), lv_biomassRefundAmount);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Abathur_BiomassRefund_Init () {
    libCOMM_gt_CM_Abathur_BiomassRefund = TriggerCreate("libCOMM_gt_CM_Abathur_BiomassRefund_Func");
    TriggerEnable(libCOMM_gt_CM_Abathur_BiomassRefund, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Abathur_BiomassRefund, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugAbathurBiomassLost
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DebugAbathurBiomassLost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) != "Locust") && (libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventUnit())) == "Abathur") && (UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true))) {
        TextExpressionSetToken("Param/Expression/lib_COMM_F048434A", "A", UnitGetName(EventUnit()));
        TextExpressionSetToken("Param/Expression/lib_COMM_F048434A", "B", IntToText((UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100)));
        TextExpressionSetToken("Param/Expression/lib_COMM_F048434A", "C", IntToText((UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10)));
        TextExpressionSetToken("Param/Expression/lib_COMM_F048434A", "D", IntToText(UnitBehaviorCount(EventUnit(), "BiomassBuff1")));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMM_F048434A"), false);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMM_74FB8602", "A", UnitGetName(EventUnit()));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMM_74FB8602"), false);
        return true;
    }
    libCOMM_gv_cM_DebugAbathurBiomassLost += (UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100);
    libCOMM_gv_cM_DebugAbathurBiomassLost += (UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10);
    libCOMM_gv_cM_DebugAbathurBiomassLost += UnitBehaviorCount(EventUnit(), "BiomassBuff1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DebugAbathurBiomassLost_Init () {
    libCOMM_gt_CM_DebugAbathurBiomassLost = TriggerCreate("libCOMM_gt_CM_DebugAbathurBiomassLost_Func");
    TriggerEnable(libCOMM_gt_CM_DebugAbathurBiomassLost, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_DebugAbathurBiomassLost, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassTrain
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Abathur_BiomassTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_trainUnit;
    int lv_biomassBuff100Count;
    int lv_biomassBuff10Count;
    int lv_biomassBuff1Count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventUnit())) == "Abathur") && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true)) && ((libNtve_gf_TriggeringProgressUnitType() == "RavagerAbathur") || (libNtve_gf_TriggeringProgressUnitType() == "GuardianMP") || (libNtve_gf_TriggeringProgressUnitType() == "Devourer"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexPlayer = UnitGetOwner(EventUnit());
    lv_trainUnit = EventUnitProgressUnit();
    lv_biomassBuff100Count = UnitBehaviorCount(EventUnit(), "BiomassBuff100");
    lv_biomassBuff10Count = UnitBehaviorCount(EventUnit(), "BiomassBuff10");
    lv_biomassBuff1Count = UnitBehaviorCount(EventUnit(), "BiomassBuff1");
    libCOMM_gf_CM_Abathur_BiomassTransfer(lv_indexPlayer, lv_trainUnit, lv_biomassBuff100Count, lv_biomassBuff10Count, lv_biomassBuff1Count);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Abathur_BiomassTrain_Init () {
    libCOMM_gt_CM_Abathur_BiomassTrain = TriggerCreate("libCOMM_gt_CM_Abathur_BiomassTrain_Func");
    TriggerEnable(libCOMM_gt_CM_Abathur_BiomassTrain, false);
    TriggerAddEventUnitTrainProgress(libCOMM_gt_CM_Abathur_BiomassTrain, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassManualUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Abathur_BiomassManualUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_Abathur_BiomassSetStack(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    libCOMM_gf_CM_Abathur_BiomassScale(EventPlayerEffectUsedUnit(c_effectUnitCaster), true);
    libCOMM_gf_CM_Abathur_BiomassMerge(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Abathur_BiomassManualUpdate_Init () {
    libCOMM_gt_CM_Abathur_BiomassManualUpdate = TriggerCreate("libCOMM_gt_CM_Abathur_BiomassManualUpdate_Func");
    TriggerEnable(libCOMM_gt_CM_Abathur_BiomassManualUpdate, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Abathur_BiomassManualUpdate, c_playerAny, "BiomassCreatedDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassScaler
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Abathur_BiomassScaler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassMaxStacks;
    int lv_biomassCountTotal;
    int lv_biomassVisualIndicatorInterval;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_biomassMaxStacks = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "AbathurBiomassMaxStacksDummy", "Amount", UnitGetOwner(EventUnit()));

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventUnit())) == "Abathur") && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_biomassCountTotal = (UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100);
    lv_biomassCountTotal += (UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10);
    lv_biomassCountTotal += UnitBehaviorCount(EventUnit(), "BiomassBuff1");
    if ((lv_biomassCountTotal > lv_biomassMaxStacks)) {
        lv_biomassCountTotal = lv_biomassMaxStacks;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString((0.25 / lv_biomassMaxStacks * lv_biomassCountTotal + 1.25), 3))));
    if ((lv_biomassCountTotal >= 10)) {
        ActorScopeSend(ActorScopeFromUnit(EventUnit()), "Create BiomassBuffGlaze");
    }

    lv_biomassVisualIndicatorInterval = ((lv_biomassMaxStacks - 10) / 3);
    if ((lv_biomassCountTotal > (lv_biomassVisualIndicatorInterval * 2 + 10))) {
        ActorScopeSend(ActorScopeFromUnit(EventUnit()), "Signal BiomassAnimGroupC");
    }
    else if ((lv_biomassCountTotal > (lv_biomassVisualIndicatorInterval + 10))) {
        ActorScopeSend(ActorScopeFromUnit(EventUnit()), "Signal BiomassAnimGroupB");
    }
    else if ((lv_biomassCountTotal > 10)) {
        ActorScopeSend(ActorScopeFromUnit(EventUnit()), "Signal BiomassAnimGroupA");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Abathur_BiomassScaler_Init () {
    libCOMM_gt_CM_Abathur_BiomassScaler = TriggerCreate("libCOMM_gt_CM_Abathur_BiomassScaler_Func");
    TriggerEnable(libCOMM_gt_CM_Abathur_BiomassScaler, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Abathur_BiomassScaler, null, "BiomassBuff1", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Abathur_BiomassScaler, null, "BiomassBuff10", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Abathur_BiomassScaler, null, "BiomassBuff100", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_Enemy_Death_Create_Locusts
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Abathur_Enemy_Death_Create_Locusts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_locustUnitType;
    int lv_rand;
    fixed lv_foodCompare;
    int lv_abathurAllyOfKillingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_locustUnitType = "Locust";
    lv_rand = RandomInt(1, 100);
    lv_foodCompare = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)) * -16.0);
    lv_abathurAllyOfKillingPlayer = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Abathur", libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(libNtve_gf_KillingPlayer()));

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0)) == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }

        if (!((lv_abathurAllyOfKillingPlayer != c_playerAny))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_abathurAllyOfKillingPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetHeight(EventUnit()) >= 1)) {
        lv_locustUnitType = "LocustFlying";
    }

    if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
        lv_foodCompare = 8;
    }

    if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
        lv_foodCompare = 96;
    }

    if (((FixedToInt(lv_foodCompare) + libCOMM_gv_cM_Abathur_Enemy_Death_Create_Locusts_Random_Modifier) >= lv_rand)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_locustUnitType, c_unitCreateIgnorePlacement, lv_abathurAllyOfKillingPlayer, UnitGetPosition(EventUnit()));
        PlayerCreateEffectUnit(lv_abathurAllyOfKillingPlayer, "AbathurLocustTimedLife", UnitLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Abathur_Enemy_Death_Create_Locusts_Init () {
    libCOMM_gt_CM_Abathur_Enemy_Death_Create_Locusts = TriggerCreate("libCOMM_gt_CM_Abathur_Enemy_Death_Create_Locusts_Func");
    TriggerEnable(libCOMM_gt_CM_Abathur_Enemy_Death_Create_Locusts, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Abathur_Enemy_Death_Create_Locusts, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_ToxicNest
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Abathur_ToxicNest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "AbathurCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    if ((UnitAbilityChargeInfo(EventUnit(), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) > 0.0)) {
        UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer]), OrderTargetingPoint(AbilityCommand("SpawnToxicNest", 0), UnitGetPosition(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer])), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Abathur_ToxicNest_Init () {
    libCOMM_gt_CM_Abathur_ToxicNest = TriggerCreate("libCOMM_gt_CM_Abathur_ToxicNest_Func");
    TriggerEnable(libCOMM_gt_CM_Abathur_ToxicNest, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Abathur_ToxicNest, null, AbilityCommand("SpawnToxicNest", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_SwarmHostLocustLaunchCast
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Abathur_SwarmHostLocustLaunchCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cooldown;
    fixed lv_multiplier;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "AbathurCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cooldown = UnitWeaponPeriod(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    lv_multiplier = UnitWeaponSpeedMultiplier(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitAbilityReset(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("LocustLaunch", 0), c_spendLocationUnit);
    UnitModifyCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Abil/LocustLaunch", ((lv_cooldown * lv_multiplier) / 16.0), c_cooldownOperationSet);
    UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SwarmHostEggAnimation", ((lv_cooldown * lv_multiplier) / 16.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Abathur_SwarmHostLocustLaunchCast_Init () {
    libCOMM_gt_CM_Abathur_SwarmHostLocustLaunchCast = TriggerCreate("libCOMM_gt_CM_Abathur_SwarmHostLocustLaunchCast_Func");
    TriggerEnable(libCOMM_gt_CM_Abathur_SwarmHostLocustLaunchCast, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Abathur_SwarmHostLocustLaunchCast, c_playerAny, "LocustCreateSet");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Abathur_SwarmHostLocustLaunchCast, c_playerAny, "LocustWeaponCreateSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_RavagerSpellCooldown
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Abathur_RavagerSpellCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cooldown;
    fixed lv_multiplier;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "AbathurCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cooldown = UnitAbilityGetCooldown(lv_unit, "RavagerAbathurCorrosiveBile", "Abil/RavagerAbathurCorrosiveBile");
    lv_multiplier = UnitWeaponSpeedMultiplier(lv_unit, 1);
    UnitAbilityReset(lv_unit, AbilityCommand("RavagerAbathurCorrosiveBile", 0), c_spendLocationAll);
    UnitAbilityAddCooldown(lv_unit, "RavagerAbathurCorrosiveBile", "Abil/RavagerAbathurCorrosiveBile", (lv_cooldown*lv_multiplier));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Abathur_RavagerSpellCooldown_Init () {
    libCOMM_gt_CM_Abathur_RavagerSpellCooldown = TriggerCreate("libCOMM_gt_CM_Abathur_RavagerSpellCooldown_Func");
    TriggerEnable(libCOMM_gt_CM_Abathur_RavagerSpellCooldown, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Abathur_RavagerSpellCooldown, c_playerAny, "RavagerCorrosiveBileAoeLaunchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderDehaka
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderDehaka_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    unit lv_dehakaUnit;

    // Automatic Variable Declarations
    playergroup autoE1728E31_g;
    int autoE1728E31_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Dehaka");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreDehakaDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreDehakaConsumeSupply, true);
    TriggerEnable(libCOMM_gt_CM_Dehaka_EssenceDrop, true);
    TriggerEnable(libCOMM_gt_CM_Dehaka_EssencePickup, true);
    TriggerEnable(libCOMM_gt_CM_Dehaka_EssenceManualUpdate, true);
    TriggerEnable(libCOMM_gt_CM_DehakaAutocastSettingsOn, true);
    TriggerEnable(libCOMM_gt_CM_DehakaAutocastSettingsOff, true);
    TriggerEnable(libCOMM_gt_CM_DehakaAutocastBossSummonStateAdjust, true);
    TriggerEnable(libCOMM_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs, true);
    TriggerEnable(libCOMM_gt_CM_Dehaka_LevelUp_Stage3, true);
    TriggerEnable(libCOMM_gt_CM_Dehaka_LevelUp_Stun_Off, true);
    TriggerEnable(libCOMM_gt_CM_Dehaka_UnitCostRefund, true);
    TriggerEnable(libCOMM_gt_CM_DehakaDenReviveFootprintOn, true);
    TriggerEnable(libCOMM_gt_CM_DehakaDenReviveFootprintOff, true);
    TriggerEnable(libCOMM_gt_CM_DehakaDenReviveEatTextTagDead, true);
    TriggerEnable(libCOMM_gt_CM_DehakaDenReviveEatTextTagRevived, true);
    TriggerEnable(libCOMM_gt_CM_DehakaDenReviveEatUsed, true);
    TriggerEnable(libCOMM_gt_CM_DehakaBossFacingSetting, true);
    TriggerEnable(libCOMM_gt_CM_DehakaMutaliskReviveCooldownOn, true);
    TriggerEnable(libCOMM_gt_CM_DehakaMammothBreathLookAtStart, true);
    TriggerEnable(libCOMM_gt_CM_DehakaMammothBreathLookAtStop, true);
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeExecuted, true);
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeDetachFailSafe, true);
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeLaunchFailSafe, true);
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeEffectHeroic, true);
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeLearnLevel2, true);
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeLearnLevel3, true);
    TriggerEnable(libCOMM_gt_CM_DehakaLearn, true);
    TriggerEnable(libCOMM_gt_CM_DehakaPackLeaderGlevigBuilt, true);
    TriggerEnable(libCOMM_gt_CM_DehakaPackLeaderMurvarBuilt, true);
    TriggerEnable(libCOMM_gt_CM_DehakaPackLeaderDakrunBuilt, true);
    TriggerEnable(libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorAdd, true);
    TriggerEnable(libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorRemove, true);
    TriggerEnable(libCOMM_gt_CM_DehakaReviveEatButtonClicked, true);
    TriggerEnable(libCOMM_gt_CM_DehakaReviveTimerAdjustments, true);
    TriggerEnable(libCOMM_gt_CM_DehakaGlevigTimerAdjustments, true);
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeTimeStopHackOn, true);
    TriggerEnable(libCOMM_gt_CM_DehakaGeneThornsOn, true);
    TriggerEnable(libCOMM_gt_CM_Dehaka_LevelUp_LearnOrder, true);
    TriggerEnable(libCOMM_gt_CM_Dehaka_PrestigeClone, true);
    TriggerEnable(libCOMM_gt_CM_Dehaka_PrestigeCloneRevive, true);
    TriggerEnable(libCOMM_gt_BanelingScourgeEssenceDrop, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaGlevig, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaMurvar, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaDakrun, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaPrimalWurm, true);
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionDehakaGlevigConstruct, true);
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionDehakaMurvarConstruct, true);
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionDehakaDakrunConstruct, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLearn, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLevel, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt, true);
    autoE1728E31_g = lv_players;
    autoE1728E31_var = -1;
    while (true) {
        autoE1728E31_var = PlayerGroupNextPlayer(autoE1728E31_g, autoE1728E31_var);
        if (autoE1728E31_var < 0) { break; }
        libCOMI_gf_CM_CommanderVOAbilityWatch(autoE1728E31_var, SoundLink("DehakaCommander_GlevigReady", -1), "Abil/DehakaGlevigTopBar", null, null);
        libCOMI_gf_CM_CommanderVOAbilityWatch(autoE1728E31_var, SoundLink("DehakaCommander_MurvarReady", -1), "Abil/DehakaMurvarTopBar", null, null);
        libCOMI_gf_CM_CommanderVOAbilityWatch(autoE1728E31_var, SoundLink("DehakaCommander_DakrunReady", -1), "Abil/DehakaDakrunTopBar", null, null);
        libCOMM_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer(autoE1728E31_var);
        libCOMM_gv_cM_DehakaVODehakaPlayer = autoE1728E31_var;
        libCOMI_gf_UT_Dehaka_DevourCooldownScoreCheck();
        if ((TechTreeUpgradeCount(autoE1728E31_var, "CommanderLevel", c_techCountCompleteOnly) >= 5)) {
            libCOMM_gv_cM_DehakaLevelsMax[autoE1728E31_var] = 12;
            libCOMM_gv_cM_DehakaVeterencyBehavior[autoE1728E31_var] = "DehakaVeterancyCoopMedium";
        }

        if ((TechTreeUpgradeCount(autoE1728E31_var, "CommanderLevel", c_techCountCompleteOnly) >= 12)) {
            libCOMM_gv_cM_DehakaLevelsMax[autoE1728E31_var] = 14;
            libCOMM_gv_cM_DehakaVeterencyBehavior[autoE1728E31_var] = "DehakaVeterancyCoopHigh";
        }

        if ((TechTreeUpgradeCount(autoE1728E31_var, "CommanderLevel", c_techCountCompleteOnly) >= 14)) {
            libCOMM_gv_cM_DehakaLevelsMax[autoE1728E31_var] = 15;
            libCOMM_gv_cM_DehakaVeterencyBehavior[autoE1728E31_var] = "DehakaVeterancyCoopFinal";
        }

        libCOMM_gf_CM_Dehaka_SetLevelValues(autoE1728E31_var);
        libCOMI_gf_CreateACCaster(autoE1728E31_var, "CoopCasterDehaka");
        libCOMI_gf_CU_GPInitCommonCaster(autoE1728E31_var, "CoopCasterDehaka", "Coop_GlobalCastingTemplates/ZergCasterPanelTemplate", "Coop_GlobalCastingTemplates/DehakaGlobalCommandPanelTemplate", 4, "Cutscenes\\UI_DehakaCastingPanel.SC2Cutscene", "");
        if ((TechTreeUnitIsAllowed(autoE1728E31_var, "DehakaCoopReviveCocoon") == true)) {
            libCOMI_gf_CreateACStructure(autoE1728E31_var, "DehakaCoopReviveCocoon");
            lv_dehakaUnit = libCOMI_gf_GetHeroUnitBad(autoE1728E31_var, "DehakaCoop");
            UnitBehaviorAdd(lv_dehakaUnit, libCOMM_gv_cM_DehakaVeterencyBehavior[autoE1728E31_var], lv_dehakaUnit, 1);
            if ((TechTreeUpgradeCount(autoE1728E31_var, "MasteryDehakaAttackSpeed", c_techCountCompleteOnly) >= 1)) {
                libCOMM_gv_cM_Dehaka_EssenceAttribute = "DehakaAttEssenceMastery";
                UnitBehaviorAdd(lv_dehakaUnit, "DehakaAttEssenceMastery", lv_dehakaUnit, 1);
                UnitBehaviorRemove(lv_dehakaUnit, "DehakaAttEssence", 1);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderDehaka_Init () {
    libCOMM_gt_DUT_CommanderDehaka = TriggerCreate("libCOMM_gt_DUT_CommanderDehaka_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderDehaka, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaGlevig
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionDehakaGlevig_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("DehakaCommander_SummonGlevig", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionDehakaGlevig_Init () {
    libCOMM_gt_CM_AbilityTransmissionDehakaGlevig = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionDehakaGlevig_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaGlevig, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionDehakaGlevig, null, AbilityCommand("DehakaGlevigTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaMurvar
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionDehakaMurvar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("DehakaCommander_SummonMurvar", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionDehakaMurvar_Init () {
    libCOMM_gt_CM_AbilityTransmissionDehakaMurvar = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionDehakaMurvar_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaMurvar, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionDehakaMurvar, null, AbilityCommand("DehakaMurvarTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaDakrun
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionDehakaDakrun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("DehakaCommander_SummonDakrun", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionDehakaDakrun_Init () {
    libCOMM_gt_CM_AbilityTransmissionDehakaDakrun = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionDehakaDakrun_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaDakrun, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionDehakaDakrun, null, AbilityCommand("DehakaDakrunTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaPrimalWurm
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionDehakaPrimalWurm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("DehakaCommander_SummonPrimalWurm", -1), PlayerGroupAll());
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionDehakaPrimalWurm_Init () {
    libCOMM_gt_CM_AbilityTransmissionDehakaPrimalWurm = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionDehakaPrimalWurm_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaPrimalWurm, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionDehakaPrimalWurm, null, AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionDehakaGlevigConstruct
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_UnitTransmissionDehakaGlevigConstruct_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnitProgressUnit())), SoundLink("DehakaCommander_ConstructGlevig", -1), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_UnitTransmissionDehakaGlevigConstruct_Init () {
    libCOMM_gt_CM_UnitTransmissionDehakaGlevigConstruct = TriggerCreate("libCOMM_gt_CM_UnitTransmissionDehakaGlevigConstruct_Func");
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionDehakaGlevigConstruct, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_UnitTransmissionDehakaGlevigConstruct, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionDehakaMurvarConstruct
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_UnitTransmissionDehakaMurvarConstruct_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "DehakaMurvarStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnitProgressUnit())), SoundLink("DehakaCommander_ConstructMurvar", -1), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_UnitTransmissionDehakaMurvarConstruct_Init () {
    libCOMM_gt_CM_UnitTransmissionDehakaMurvarConstruct = TriggerCreate("libCOMM_gt_CM_UnitTransmissionDehakaMurvarConstruct_Func");
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionDehakaMurvarConstruct, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_UnitTransmissionDehakaMurvarConstruct, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionDehakaDakrunConstruct
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_UnitTransmissionDehakaDakrunConstruct_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "DehakaDakrunStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnitProgressUnit())), SoundLink("DehakaCommander_ConstructDakrun", -1), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_UnitTransmissionDehakaDakrunConstruct_Init () {
    libCOMM_gt_CM_UnitTransmissionDehakaDakrunConstruct = TriggerCreate("libCOMM_gt_CM_UnitTransmissionDehakaDakrunConstruct_Func");
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionDehakaDakrunConstruct, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_UnitTransmissionDehakaDakrunConstruct, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaChangeReminderLevel
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLevel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(libCOMM_gv_cM_DehakaVOLearnReminderTimer) <= 0.0)) {
        TimerStart(libCOMM_gv_cM_DehakaVOLearnReminderTimer, libCOMM_gv_cMC_DehakaVOLearnReminderDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLevel_Init () {
    libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLevel = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLevel_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLevel, false);
    TriggerAddEventUnitGainLevel(libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLevel, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaChangeReminderLearn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLearn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_HeroCanSpendSkillPoint(EventUnit(), AbilityCommandGetAbility(EventUnitAbility())) == false)) {
        libNtve_gf_StopTimer(libCOMM_gv_cM_DehakaVOLearnReminderTimer);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLearn_Init () {
    libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLearn = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLearn_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLearn, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLearn, null, libCOMM_gv_dataDehakaLearnAbilCmdLink, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaChangeReminderTimerExpire
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMM_gv_cM_DehakaVODehakaPlayer, SoundLink("DehakaCommander_ChangeReminder", -1), PlayerGroupSingle(libCOMM_gv_cM_DehakaVODehakaPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire_Init () {
    libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire, false);
    TriggerAddEventTimer(libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire, libCOMM_gv_cM_DehakaVOLearnReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaWurmStructureBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_DehakaVOWurmStructureAlive = true;
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureKilled, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt_Init () {
    libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaWurmStructureKilled
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_DehakaVOWurmStructureAlive = false;
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureKilled_Init () {
    libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureKilled = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureKilled_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureKilled, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreDehakaDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreDehakaDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreDehakaDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "DehakaDamage", FixedToInt(libCOMM_gv_cC_ScoreDehakaDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreDehakaDmg_Init () {
    libCOMM_gt_CC_ScoreDehakaDmg = TriggerCreate("libCOMM_gt_CC_ScoreDehakaDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreDehakaDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreDehakaDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreDehakaConsumeSupply
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreDehakaConsumeSupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeEat) == true))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreDehakaConsumeSupply[EventUnitDamageSourcePlayer()] += UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropNormal);
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "DehakaConsume", FixedToInt(libCOMM_gv_cC_ScoreDehakaConsumeSupply[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreDehakaConsumeSupply_Init () {
    libCOMM_gt_CC_ScoreDehakaConsumeSupply = TriggerCreate("libCOMM_gt_CC_ScoreDehakaConsumeSupply_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreDehakaConsumeSupply, false);
    TriggerAddEventUnitDied(libCOMM_gt_CC_ScoreDehakaConsumeSupply, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaGeneThornsOn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaGeneThornsOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_u, EventUnitBehavior(), lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaGeneThornsOn_Init () {
    libCOMM_gt_CM_DehakaGeneThornsOn = TriggerCreate("libCOMM_gt_CM_DehakaGeneThornsOn_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaGeneThornsOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_DehakaGeneThornsOn, null, "DehakaGeneThorns", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaDenReviveFootprintOn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaDenReviveFootprintOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    point lv_point;
    int lv_x;
    int lv_y;
    point lv_pointInteger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);
    lv_point = UnitGetPosition(lv_u);
    lv_x = FixedToInt(PointGetX(lv_point));
    lv_y = FixedToInt(PointGetY(lv_point));
    lv_pointInteger = Point(lv_x, lv_y);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_point != lv_pointInteger)) {
        UnitSetPosition(lv_u, lv_pointInteger, false);
    }

    UnitCreate(1, "DehakaCoopReviveCocoonFootPrint", c_unitCreateIgnorePlacement, lv_p, lv_pointInteger, 270.0);
    libCOMM_gv_cM_DehakaReviveFootprint[lv_p] = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaDenReviveFootprintOn_Init () {
    libCOMM_gt_CM_DehakaDenReviveFootprintOn = TriggerCreate("libCOMM_gt_CM_DehakaDenReviveFootprintOn_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaDenReviveFootprintOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_DehakaDenReviveFootprintOn, null, "DehakaFirstReviveTimer", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_DehakaDenReviveFootprintOn, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaDenReviveFootprintOff
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaDenReviveFootprintOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(libCOMM_gv_cM_DehakaReviveFootprint[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaDenReviveFootprintOff_Init () {
    libCOMM_gt_CM_DehakaDenReviveFootprintOff = TriggerCreate("libCOMM_gt_CM_DehakaDenReviveFootprintOff_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaDenReviveFootprintOff, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_DehakaDenReviveFootprintOff, null, "DehakaFirstReviveTimer", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_DehakaDenReviveFootprintOff, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaDenReviveEatTextTagDead
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaDenReviveEatTextTagDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);
    lv_point = UnitGetPosition(lv_u);

    // Conditions
    if (testConds) {
        if (!((libCOMM_gv_cM_DehakaReviveEatTextTag[lv_p] == c_textTagNone))) {
            return false;
        }

        if (!((libCOMM_gv_cM_DehakaReviveEatUsed[lv_p] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/lib_COMM_B5FEB38C"), 18, lv_point, 1.0, true, false, PlayerGroupSingle(lv_p));
    TextTagAttachToUnit(TextTagLastCreated(), lv_u, 2.5);
    libCOMM_gv_cM_DehakaReviveEatTextTag[lv_p] = TextTagLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaDenReviveEatTextTagDead_Init () {
    libCOMM_gt_CM_DehakaDenReviveEatTextTagDead = TriggerCreate("libCOMM_gt_CM_DehakaDenReviveEatTextTagDead_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaDenReviveEatTextTagDead, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_DehakaDenReviveEatTextTagDead, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaDenReviveEatTextTagRevived
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaDenReviveEatTextTagRevived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((libCOMM_gv_cM_DehakaReviveEatTextTag[lv_p] != c_textTagNone))) {
            return false;
        }

        if (!((libCOMM_gv_cM_DehakaReviveEatUsed[lv_p] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libCOMM_gv_cM_DehakaReviveEatTextTag[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaDenReviveEatTextTagRevived_Init () {
    libCOMM_gt_CM_DehakaDenReviveEatTextTagRevived = TriggerCreate("libCOMM_gt_CM_DehakaDenReviveEatTextTagRevived_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaDenReviveEatTextTagRevived, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_DehakaDenReviveEatTextTagRevived, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaDenReviveEatUsed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaDenReviveEatUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((libCOMM_gv_cM_DehakaReviveEatTextTag[lv_p] != c_textTagNone))) {
            return false;
        }

        if (!((libCOMM_gv_cM_DehakaReviveEatUsed[lv_p] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libCOMM_gv_cM_DehakaReviveEatTextTag[lv_p]);
    libCOMM_gv_cM_DehakaReviveEatUsed[lv_p] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaDenReviveEatUsed_Init () {
    libCOMM_gt_CM_DehakaDenReviveEatUsed = TriggerCreate("libCOMM_gt_CM_DehakaDenReviveEatUsed_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaDenReviveEatUsed, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_DehakaDenReviveEatUsed, null, AbilityCommand("DehakaConcoonEatSearch", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaBossFacingSetting
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaBossFacingSetting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(EventUnit(), 315.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaBossFacingSetting_Init () {
    libCOMM_gt_CM_DehakaBossFacingSetting = TriggerCreate("libCOMM_gt_CM_DehakaBossFacingSetting_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaBossFacingSetting, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_DehakaBossFacingSetting, null, "DehakaBossesSummonDelay", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaMutaliskReviveCooldownOn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaMutaliskReviveCooldownOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    string lv_behavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_behavior = EventUnitBehavior();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddCooldown(lv_u, libCOMM_gv_cM_DehakaMutaliskReviveCooldownIndicator, "Behavior/PrimalReconstitutionCooldownIndicator", UnitBehaviorDurationTotal(lv_u, lv_behavior));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaMutaliskReviveCooldownOn_Init () {
    libCOMM_gt_CM_DehakaMutaliskReviveCooldownOn = TriggerCreate("libCOMM_gt_CM_DehakaMutaliskReviveCooldownOn_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaMutaliskReviveCooldownOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_DehakaMutaliskReviveCooldownOn, null, libCOMM_gv_cM_DehakaMutaliskReviveCooldownBehavior, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaMammoth Breath Look At Start
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaMammothBreathLookAtStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dehaka;
    unit lv_missile;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dehaka = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    ActorLookAtTypeStart(libNtve_gf_MainActorofUnit(lv_dehaka), "InstantHeadOnly", libNtve_gf_MainActorofUnit(lv_missile));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaMammothBreathLookAtStart_Init () {
    libCOMM_gt_CM_DehakaMammothBreathLookAtStart = TriggerCreate("libCOMM_gt_CM_DehakaMammothBreathLookAtStart_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaMammothBreathLookAtStart, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_DehakaMammothBreathLookAtStart, c_playerAny, "MammothBreathCreatePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaMammoth Breath Look At Stop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaMammothBreathLookAtStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dehaka;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dehaka = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    ActorLookAtTypeStop(libNtve_gf_MainActorofUnit(lv_dehaka), "SlowHeadOnly");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaMammothBreathLookAtStop_Init () {
    libCOMM_gt_CM_DehakaMammothBreathLookAtStop = TriggerCreate("libCOMM_gt_CM_DehakaMammothBreathLookAtStop_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaMammothBreathLookAtStop, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_DehakaMammothBreathLookAtStop, c_playerAny, "MammothBreathSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeTimeStopHackOn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaConsumeTimeStopHackOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_unit, "TimeStopImmune") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_unit, "TimeStopImmune", lv_unit, 1);
    UnitBehaviorSetDurationRemaining(lv_unit, "TimeStopImmune", 5.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaConsumeTimeStopHackOn_Init () {
    libCOMM_gt_CM_DehakaConsumeTimeStopHackOn = TriggerCreate("libCOMM_gt_CM_DehakaConsumeTimeStopHackOn_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeTimeStopHackOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_DehakaConsumeTimeStopHackOn, null, "DehakaConsume", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeExecuted
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaConsumeExecuted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dehakaUnit;
    unit lv_targetUnit;
    fixed lv_targetLife;
    int lv_dehakaPlayer;
    point lv_casterPoint;
    string lv_userInstance;
    int lv_i;
    int lv_c;
    string lv_effect;
    unitfilter lv_effectFilter;
    string lv_effectFilterString;
    text lv_text;
    text lv_textNew;
    fixed lv_cooldownModifier;

    // Automatic Variable Declarations
    int autoD3286662_ae;
    const int autoD3286662_ai = 1;

    // Variable Initialization
    lv_dehakaUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_targetLife = UnitGetPropertyFixed(lv_targetUnit, c_unitPropVitality, c_unitPropCurrent);
    lv_dehakaPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_casterPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterPoint);
    lv_c = UserDataInstanceCount(libCOMM_gv_c_DehakaConsumeEffectUserType);
    lv_effectFilter = UnitFilter(0, 0, 0, 0);
    lv_effectFilterString = "";
    lv_cooldownModifier = 1.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_dehakaUnit, libCOMM_gv_c_DehakaConsumeBehaviorDisable, c_unitBehaviorCountAll);
    if ((UnitHasBehavior2(lv_targetUnit, "ImpalerDehakaTenderize") == true)) {
        lv_cooldownModifier = 0.25;
    }

    if ((((TechTreeUpgradeCount(lv_dehakaPlayer, "MutatorIsPlayer1", c_techCountCompleteOnly) >= 1) && (UnitHasBehavior2(lv_targetUnit, "MutatorImmunetoPlayer1") == true)) || ((TechTreeUpgradeCount(lv_dehakaPlayer, "MutatorIsPlayer2", c_techCountCompleteOnly) >= 1) && (UnitHasBehavior2(lv_targetUnit, "MutatorImmunetoPlayer2") == true)))) {
        UnitAbilityAddCooldown(lv_dehakaUnit, libCOMM_gv_c_DehakaConsumeAbil, libCOMM_gv_c_DehakaConsumeCooldownLink, 3.0);
    }
    else {
        if ((UnitFilterMatch(lv_targetUnit, lv_dehakaPlayer, libCOMM_gv_c_DehakaConsumeCooldownFilter) == true)) {
            if ((lv_targetLife >= 600.0)) {
                UnitAbilityAddCooldown(lv_dehakaUnit, libCOMM_gv_c_DehakaConsumeAbil, libCOMM_gv_c_DehakaConsumeCooldownLink, ((600.0 * lv_cooldownModifier) * libCOMM_gv_c_DehakaConsumeLifeCooldownFactor));
            }
            else {
                UnitAbilityAddCooldown(lv_dehakaUnit, libCOMM_gv_c_DehakaConsumeAbil, libCOMM_gv_c_DehakaConsumeCooldownLink, ((lv_targetLife * lv_cooldownModifier) * libCOMM_gv_c_DehakaConsumeLifeCooldownFactor));
            }
        }

        autoD3286662_ae = lv_c;
        lv_i = 1;
        for ( ; ( (autoD3286662_ai >= 0 && lv_i <= autoD3286662_ae) || (autoD3286662_ai < 0 && lv_i >= autoD3286662_ae) ) ; lv_i += autoD3286662_ai ) {
            lv_userInstance = UserDataInstance(libCOMM_gv_c_DehakaConsumeEffectUserType, lv_i);
            lv_effectFilterString = UserDataGetString(libCOMM_gv_c_DehakaConsumeEffectUserType, lv_userInstance, "Filter", 1);
            lv_effectFilter = libNtve_gf_ConvertTargetFilterStringToUnitFilter(lv_effectFilterString);
            if ((UnitFilterMatch(lv_targetUnit, lv_dehakaPlayer, lv_effectFilter) == true)) {
                lv_effect = UserDataGetGameLink(libCOMM_gv_c_DehakaConsumeEffectUserType, lv_userInstance, "Effect", 1);
                lv_textNew = UserDataGetText(libCOMM_gv_c_DehakaConsumeEffectUserType, lv_userInstance, "Text", 1);
                UnitCreateEffectUnit(lv_dehakaUnit, lv_effect, lv_dehakaUnit);
                TextExpressionSetToken("Param/Expression/lib_COMM_F0A0623B", "A", lv_text);
                TextExpressionSetToken("Param/Expression/lib_COMM_F0A0623B", "B", lv_textNew);
                lv_text = TextExpressionAssemble("Param/Expression/lib_COMM_F0A0623B");
            }

        }
        UnitCreateEffectUnit(lv_dehakaUnit, libCOMM_gv_c_DehakaConsumeEffectTriggerEffect, lv_targetUnit);
        if ((UnitGetType(lv_targetUnit) == "MutatorAmonDehaka")) {
            SoundPlayOnUnitForPlayer(SoundLink("DehakaEatDehaka", -1), c_maxPlayers, PlayerGroupAll(), lv_dehakaUnit, 1.0, 100.0, 0.0);
        }

        if ((UnitFilterMatch(lv_targetUnit, lv_dehakaPlayer, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0)) == true)) {
            UnitCreateEffectUnit(lv_dehakaUnit, "DehakaConsumeEffectHealBiological", lv_dehakaUnit);
        }
        else {
            UnitCreateEffectUnit(lv_dehakaUnit, "DehakaConsumeEffectHealOther", lv_dehakaUnit);
        }
        if ((UnitHasBehavior2(lv_targetUnit, "SupplyLT1") == true)) {
            AchievementTermQuantityAdd(lv_dehakaPlayer, "CommanderDehakaSupply", 1);
        }
        else {
            AchievementTermQuantityAdd(lv_dehakaPlayer, "CommanderDehakaSupply", (CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_targetUnit), "Food", EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)) * -1));
        }
        AchievementTermQuantityAdd(lv_dehakaPlayer, "CommanderDehakaDamage", FixedToInt(lv_targetLife));
        if (((UnitHasBehavior2(lv_targetUnit, "MutatorMasterController") == false) && (UnitHasBehavior2(lv_targetUnit, "MutatorJustDie") == false))) {
            UnitSetPropertyFixed(lv_targetUnit, c_unitPropLife, 1.0);
        }

    }
    ActorSend(libNtve_gf_MainActorofUnit(lv_targetUnit), "HostSiteOpsSet ::Host");
    UnitSetHeight(lv_targetUnit, UnitGetPropertyFixed(lv_targetUnit, c_unitPropHeight, c_unitPropNormal), 1.0);
    UnitBehaviorRemove(lv_targetUnit, "ForceLowDeath", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaConsumeExecuted_Init () {
    libCOMM_gt_CM_DehakaConsumeExecuted = TriggerCreate("libCOMM_gt_CM_DehakaConsumeExecuted_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeExecuted, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_DehakaConsumeExecuted, c_playerAny, libCOMM_gv_c_DehakaConsumeEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeDetachFailSafe
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaConsumeDetachFailSafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(lv_targetUnit), "HostSiteOpsSet ::Host");
    UnitSetHeight(lv_targetUnit, UnitGetPropertyFixed(lv_targetUnit, c_unitPropHeight, c_unitPropNormal), 1.0);
    UnitBehaviorRemove(lv_targetUnit, "ForceLowDeath", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaConsumeDetachFailSafe_Init () {
    libCOMM_gt_CM_DehakaConsumeDetachFailSafe = TriggerCreate("libCOMM_gt_CM_DehakaConsumeDetachFailSafe_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeDetachFailSafe, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_DehakaConsumeDetachFailSafe, c_playerAny, "DehakaConsumeLaunchTargetVisualImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeLaunchFailSafe
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaConsumeLaunchFailSafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    if ((libNtve_gf_PlayerCanCreateEffectOnUnit(1, "TargetIsBeingDraggedByDehaka", lv_targetUnit) == false)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_targetUnit), "HostSiteOpsSet ::Host");
        ActorSend(libNtve_gf_MainActorofUnit(lv_targetUnit), "RefClear ::Host");
        UnitSetHeight(lv_targetUnit, UnitGetPropertyFixed(lv_targetUnit, c_unitPropHeight, c_unitPropNormal), 1.0);
        UnitBehaviorRemove(lv_targetUnit, "ForceLowDeath", 1);
        UnitBehaviorRemove(lv_targetUnit, "DehakaConsumeStunned", 1);
        UnitBehaviorRemove(lv_targetUnit, "DehakaConsume", 1);
        UnitBehaviorRemove(lv_targetUnit, "DehakaConsumeTentacle", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DehakaConsumeDisableCommandCard", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaConsumeLaunchFailSafe_Init () {
    libCOMM_gt_CM_DehakaConsumeLaunchFailSafe = TriggerCreate("libCOMM_gt_CM_DehakaConsumeLaunchFailSafe_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeLaunchFailSafe, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_DehakaConsumeLaunchFailSafe, c_playerAny, "DehakaConsumeLaunchTargetVisual");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeEffectHeroic
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaConsumeEffectHeroic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    int lv_amount;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    lv_amount = libCOMM_gv_c_DehakaConsumeEffectHeroicEssenceAmount;
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EssencePickup", c_unitCreateIgnorePlacement, lv_p, lv_point);
    libCOMM_gf_CM_Dehaka_EssenceSetStack(UnitLastCreated(), lv_amount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaConsumeEffectHeroic_Init () {
    libCOMM_gt_CM_DehakaConsumeEffectHeroic = TriggerCreate("libCOMM_gt_CM_DehakaConsumeEffectHeroic_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeEffectHeroic, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_DehakaConsumeEffectHeroic, c_playerAny, libCOMM_gv_c_DehakaConsumeEffectHeroicLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeLearnLevel2
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaConsumeLearnLevel2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_durationModifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_durationModifier = 1.667;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressAbility() == "DehakaConsume"))) {
            return false;
        }

        if (!((UnitAbilityGetLevel(EventUnit(), libNtve_gf_TriggeringProgressAbility()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectAir", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectArmored", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectDetector", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectHeroic", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectLight", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectMassive", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectMechanical", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectPsionic", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaConsumeLearnLevel2_Init () {
    libCOMM_gt_CM_DehakaConsumeLearnLevel2 = TriggerCreate("libCOMM_gt_CM_DehakaConsumeLearnLevel2_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeLearnLevel2, false);
    TriggerAddEventUnitLearnProgress(libCOMM_gt_CM_DehakaConsumeLearnLevel2, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeLearnLevel3
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaConsumeLearnLevel3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_lifeCooldownFactorReductionPercent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lifeCooldownFactorReductionPercent = 0.2;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressAbility() == "DehakaConsume"))) {
            return false;
        }

        if (!((UnitAbilityGetLevel(EventUnit(), "DehakaConsume") == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_c_DehakaConsumeLifeCooldownFactor *= (1.0 - lv_lifeCooldownFactorReductionPercent);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaConsumeLearnLevel3_Init () {
    libCOMM_gt_CM_DehakaConsumeLearnLevel3 = TriggerCreate("libCOMM_gt_CM_DehakaConsumeLearnLevel3_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaConsumeLearnLevel3, false);
    TriggerAddEventUnitLearnProgress(libCOMM_gt_CM_DehakaConsumeLearnLevel3, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka Learn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaLearn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_ug;
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ug = UnitGroupEmpty();
    lv_u = EventUnit();
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_HeroCanSpendSkillPoint(lv_u, AbilityCommandGetAbility(EventUnitAbility())) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_u), "HaloStart");
        UISetButtonFaceHighlighted(PlayerGroupSingle(UnitGetOwner(lv_u)), "DehakaLearnAbilities", true);
    }
    else {
        lv_ug = UnitGroupSelected(lv_p);
        UnitClearSelection(lv_p);
        UnitSelect(lv_u, lv_p, true);
        UnitGroupSelect(lv_ug, lv_p, true);
        ActorSend(libNtve_gf_MainActorofUnit(lv_u), "HaloStop");
        UISetButtonFaceHighlighted(PlayerGroupSingle(UnitGetOwner(lv_u)), "DehakaLearnAbilities", false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaLearn_Init () {
    libCOMM_gt_CM_DehakaLearn = TriggerCreate("libCOMM_gt_CM_DehakaLearn_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaLearn, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_DehakaLearn, null, libCOMM_gv_dataDehakaLearnAbilCmdLink, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaPackLeaderGlevigBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaPackLeaderGlevigBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_building;
    int lv_player;
    fixed lv_dehakaNydusDestroyerTopBarCooldown;
    fixed lv_dehakaNydusDestroyerTopBarCharges;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_building = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_building);

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_cM_DehakaBossBuildingBuilt_Glevig[lv_player] == false)) {
        libCOMM_gv_cM_DehakaBossBuildingBuilt_Glevig[lv_player] = true;
        PlayerAddCooldown(lv_player, "Abil/DehakaGlevigTopBar", 120.0);
        lv_dehakaNydusDestroyerTopBarCooldown = PlayerGetChargeRegen(lv_player, "Abil/DehakaNydusDestroyerTopBar");
        lv_dehakaNydusDestroyerTopBarCharges = PlayerGetChargeUsed(lv_player, "Abil/DehakaNydusDestroyerTopBar");
        PlayerAddChargeUsed(lv_player, "Abil/DehakaNydusDestroyerTopBar", (3.0 - lv_dehakaNydusDestroyerTopBarCharges));
        PlayerAddChargeRegenRemaining(lv_player, "Abil/DehakaNydusDestroyerTopBar", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "DehakaNydusDestroyerTopBar", "InfoArray[" + IntToString(0) + "].Charge.TimeStart", lv_player) - lv_dehakaNydusDestroyerTopBarCooldown));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaPackLeaderGlevigBuilt_Init () {
    libCOMM_gt_CM_DehakaPackLeaderGlevigBuilt = TriggerCreate("libCOMM_gt_CM_DehakaPackLeaderGlevigBuilt_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaPackLeaderGlevigBuilt, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_DehakaPackLeaderGlevigBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaPackLeaderMurvarBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaPackLeaderMurvarBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_building;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_building = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_building);

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "DehakaMurvarStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_cM_DehakaBossBuildingBuilt_Murvar[lv_player] == false)) {
        libCOMM_gv_cM_DehakaBossBuildingBuilt_Murvar[lv_player] = true;
        PlayerAddCooldown(lv_player, "Abil/DehakaMurvarTopBar", 60.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaPackLeaderMurvarBuilt_Init () {
    libCOMM_gt_CM_DehakaPackLeaderMurvarBuilt = TriggerCreate("libCOMM_gt_CM_DehakaPackLeaderMurvarBuilt_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaPackLeaderMurvarBuilt, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_DehakaPackLeaderMurvarBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaPackLeaderDakrunBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaPackLeaderDakrunBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_building;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_building = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_building);

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "DehakaDakrunStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_cM_DehakaBossBuildingBuilt_Dakrun[lv_player] == false)) {
        libCOMM_gv_cM_DehakaBossBuildingBuilt_Dakrun[lv_player] = true;
        PlayerAddCooldown(lv_player, "Abil/DehakaDakrunTopBar", 60.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaPackLeaderDakrunBuilt_Init () {
    libCOMM_gt_CM_DehakaPackLeaderDakrunBuilt = TriggerCreate("libCOMM_gt_CM_DehakaPackLeaderDakrunBuilt_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaPackLeaderDakrunBuilt, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_DehakaPackLeaderDakrunBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaReviveGas Worker Behavior Add
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_drone;
    unit lv_gasStation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_drone = EventUnit();
    lv_gasStation = OrderGetTargetUnit(EventUnitOrder());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_drone) == "DehakaDrone"))) {
            return false;
        }

        if (!((UnitGetType(lv_gasStation) == "Extractor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_drone, "GasWorker", lv_drone, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorAdd_Init () {
    libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorAdd = TriggerCreate("libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorAdd_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorAdd, false);
    TriggerAddEventUnitOrder(libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorAdd, null, AbilityCommand("DroneHarvest", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaReviveGas Worker Behavior Remove
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_drone;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_drone = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_drone) == "DehakaDrone"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_drone, "GasWorker", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorRemove_Init () {
    libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorRemove = TriggerCreate("libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorRemove_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorRemove, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorRemove, null, AbilityCommand("DroneHarvest", 255), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorRemove, null, AbilityCommand("DroneHarvest", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaRevive Eat Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaReviveEatButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroUnit;
    unit lv_reviverUnit;
    fixed lv_reviveTimer;
    int lv_needs;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroUnit = libCOMI_gf_GetHeroUnitBad(EventPlayer(), "DehakaCoop");
    lv_reviverUnit = libCOMI_gf_GetHeroReviverUnit(lv_heroUnit);
    lv_reviveTimer = UnitBehaviorDuration(lv_reviverUnit, "DehakaNormalReviveTimer");
    lv_needs = RoundI((lv_reviveTimer/(-libCOMM_gv_cM_DehakaEatReviveTimerAdjustment)));

    // Conditions
    if (testConds) {
        if (!((lv_reviveTimer > 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_needs > 0)) {
        CatalogReferenceModify("Abil,DehakaCoopReviveEat,MaxCargoCount", EventPlayer(), IntToString(lv_needs), c_upgradeOperationSet);
        CatalogReferenceModify("Abil,DehakaCoopReviveEat,TotalCargoSpace", EventPlayer(), IntToString(lv_needs), c_upgradeOperationSet);
        UnitAbilityEnable(lv_reviverUnit, "DehakaConcoonEatSearch", true);
    }
    else {
        UnitAbilityEnable(lv_reviverUnit, "DehakaConcoonEatSearch", false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaReviveEatButtonClicked_Init () {
    libCOMM_gt_CM_DehakaReviveEatButtonClicked = TriggerCreate("libCOMM_gt_CM_DehakaReviveEatButtonClicked_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaReviveEatButtonClicked, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_DehakaReviveEatButtonClicked, null, AbilityCommand("DehakaConcoonEatSearch", 0), c_unitAbilStageExecute, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_DehakaReviveEatButtonClicked, c_playerAny, "DehakaCoopReviveEatKillSet");
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_DehakaReviveEatButtonClicked, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaRevive Timer Adjustments
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaReviveTimerAdjustments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_heroUnitIndex;
    unit lv_heroReviverUnit;
    string lv_heroReviveLink;
    fixed lv_reviveTimer;
    fixed lv_reviveTimerAdjustment;
    fixed lv_healthAdjustment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroUnit = libCOMI_gf_GetHeroUnitBad(EventPlayer(), "DehakaCoop");
    lv_heroUnitIndex = libCOMI_gf_GetHeroUnitIndex(lv_heroUnit);
    lv_heroReviverUnit = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviverUnit;
    lv_heroReviveLink = "";
    lv_reviveTimerAdjustment = libCOMM_gv_cM_DehakaEatReviveTimerAdjustment;
    lv_healthAdjustment = ((AbsF(libCOMM_gv_cM_DehakaEatReviveTimerAdjustment) / libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DehakaNormalReviveTimer", "Duration", EventPlayer())) * UnitGetPropertyFixed(lv_heroReviverUnit, c_unitPropLifeMax, c_unitPropCurrent));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_reviveTimer = UnitBehaviorDuration(lv_heroReviverUnit, "DehakaNormalReviveTimer");
    lv_reviveTimer += lv_reviveTimerAdjustment;
    UnitBehaviorSetDurationRemaining(lv_heroReviverUnit, "DehakaNormalReviveTimer", lv_reviveTimer);
    UnitSetPropertyFixed(lv_heroReviverUnit, c_unitPropLife, (UnitGetPropertyFixed(lv_heroReviverUnit, c_unitPropLife, c_unitPropCurrent) + lv_healthAdjustment));
    PlayerAddCooldown(EventPlayer(), libCOMI_gf_GetHeroReviveLink(lv_heroUnit), lv_reviveTimerAdjustment);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaReviveTimerAdjustments_Init () {
    libCOMM_gt_CM_DehakaReviveTimerAdjustments = TriggerCreate("libCOMM_gt_CM_DehakaReviveTimerAdjustments_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaReviveTimerAdjustments, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_DehakaReviveTimerAdjustments, c_playerAny, "DehakaCoopReviveEatKillSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka Glevig Timer Adjustments
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaGlevigTimerAdjustments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_researchElapsed;
    fixed lv_researchTotal;
    fixed lv_researchTimerAdjustment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_researchTimerAdjustment = 31.0;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_researchElapsed = UnitQueueItemTime(EventUnit(), c_unitQueueTimeElapsed, 1);
    lv_researchElapsed += lv_researchTimerAdjustment;
    lv_researchTotal = UnitQueueItemTime(EventUnit(), c_unitQueueTimeTotal, 1);
    if ((lv_researchTotal != 0.0)) {
        UnitSetProgressComplete(EventUnit(), 1, FixedToInt(((lv_researchElapsed / lv_researchTotal) * 100)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaGlevigTimerAdjustments_Init () {
    libCOMM_gt_CM_DehakaGlevigTimerAdjustments = TriggerCreate("libCOMM_gt_CM_DehakaGlevigTimerAdjustments_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaGlevigTimerAdjustments, false);
    TriggerAddEventUnitCargo(libCOMM_gt_CM_DehakaGlevigTimerAdjustments, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaAutocastSettingsOn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaAutocastSettingsOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd autoBA55B53B_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoBA55B53B_val = EventUnitAbility();
    if (autoBA55B53B_val == AbilityCommand("DehakaGlevigFirebreath", 0)) {
        libCOMM_gv_dehakaGlevigFirebreathAutocast[EventPlayer()] = true;
    }
    else if (autoBA55B53B_val == AbilityCommand("MurvarCoopPuke", 0)) {
        libCOMM_gv_dehakaMurvarPukeAutocast[EventPlayer()] = true;
    }
    else if (autoBA55B53B_val == AbilityCommand("CoopMurvarSpawnCreepers", 0)) {
        libCOMM_gv_dehakaMurvarSpawnCreepersAutocast[EventPlayer()] = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaAutocastSettingsOn_Init () {
    libCOMM_gt_CM_DehakaAutocastSettingsOn = TriggerCreate("libCOMM_gt_CM_DehakaAutocastSettingsOn_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaAutocastSettingsOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMM_gt_CM_DehakaAutocastSettingsOn, null, AbilityCommand("DehakaGlevigFirebreath", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMM_gt_CM_DehakaAutocastSettingsOn, null, AbilityCommand("MurvarCoopPuke", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMM_gt_CM_DehakaAutocastSettingsOn, null, AbilityCommand("CoopMurvarSpawnCreepers", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaAutocastSettingsOff
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaAutocastSettingsOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd autoED840682_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoED840682_val = EventUnitAbility();
    if (autoED840682_val == AbilityCommand("DehakaGlevigFirebreath", 0)) {
        libCOMM_gv_dehakaGlevigFirebreathAutocast[EventPlayer()] = false;
    }
    else if (autoED840682_val == AbilityCommand("MurvarCoopPuke", 0)) {
        libCOMM_gv_dehakaMurvarPukeAutocast[EventPlayer()] = false;
    }
    else if (autoED840682_val == AbilityCommand("CoopMurvarSpawnCreepers", 0)) {
        libCOMM_gv_dehakaMurvarSpawnCreepersAutocast[EventPlayer()] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaAutocastSettingsOff_Init () {
    libCOMM_gt_CM_DehakaAutocastSettingsOff = TriggerCreate("libCOMM_gt_CM_DehakaAutocastSettingsOff_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaAutocastSettingsOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMM_gt_CM_DehakaAutocastSettingsOff, null, AbilityCommand("DehakaGlevigFirebreath", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMM_gt_CM_DehakaAutocastSettingsOff, null, AbilityCommand("MurvarCoopPuke", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMM_gt_CM_DehakaAutocastSettingsOff, null, AbilityCommand("CoopMurvarSpawnCreepers", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaAutocastBossSummonStateAdjust
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_DehakaAutocastBossSummonStateAdjust_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto08D63F26_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto08D63F26_val = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    if (auto08D63F26_val == "DehakaGlevig") {
        if ((libCOMM_gv_dehakaGlevigFirebreathAutocast[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            Wait(0.0625, c_timeGame);
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaGlevigFirebreathSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

    }
    else if (auto08D63F26_val == "DehakaMurvar") {
        if ((libCOMM_gv_dehakaMurvarPukeAutocast[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaMurvarAcidPukeSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

        if ((libCOMM_gv_dehakaMurvarSpawnCreepersAutocast[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaMurvarSpawnCreepersSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_DehakaAutocastBossSummonStateAdjust_Init () {
    libCOMM_gt_CM_DehakaAutocastBossSummonStateAdjust = TriggerCreate("libCOMM_gt_CM_DehakaAutocastBossSummonStateAdjust_Func");
    TriggerEnable(libCOMM_gt_CM_DehakaAutocastBossSummonStateAdjust, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_DehakaAutocastBossSummonStateAdjust, c_playerAny, "DehakaTopBarSummonTimedLifeAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_EssenceDrop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Dehaka_EssenceDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_essenceUnitCount;
    int lv_essenceBaseAmount;
    int lv_essenceCasualMultiplier;
    int lv_essenceNormalMultiplier;
    fixed lv_essenceHardMultiplier;
    int lv_essenceBrutalMultiplier;
    int lv_dyingUnitSupply;
    int lv_dehakaPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_essenceCasualMultiplier = 2;
    lv_essenceNormalMultiplier = 2;
    lv_essenceHardMultiplier = 1.5;
    lv_essenceBrutalMultiplier = 1;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(libNtve_gf_KillingPlayer()), EventPlayer()) == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_CT_UnitSpawnedByMutator(EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dehakaPlayer = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Dehaka", libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(libNtve_gf_KillingPlayer()));
    if ((lv_dehakaPlayer == c_playerAny)) {
        return true;
    }

    lv_dyingUnitSupply = FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)));
    if (((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true) || (UnitHasBehavior2(EventUnit(), "CritterExplode") == true))) {
        lv_essenceBaseAmount = 1;
    }
    else if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
        lv_essenceBaseAmount = 12;
    }
    else if ((lv_dyingUnitSupply == -1)) {
        lv_essenceBaseAmount = 2;
    }
    else if ((lv_dyingUnitSupply == -2)) {
        lv_essenceBaseAmount = 4;
    }
    else if ((lv_dyingUnitSupply == -3)) {
        lv_essenceBaseAmount = 6;
    }
    else if ((lv_dyingUnitSupply == -4)) {
        lv_essenceBaseAmount = 8;
    }
    else if ((lv_dyingUnitSupply < -4)) {
        lv_essenceBaseAmount = 12;
    }
    lv_essenceUnitCount = libNtve_gf_DifficultyValueInt((lv_essenceBaseAmount * lv_essenceCasualMultiplier), (lv_essenceBaseAmount * lv_essenceNormalMultiplier), FixedToInt(Ceiling((lv_essenceBaseAmount * lv_essenceHardMultiplier))), (lv_essenceBaseAmount * lv_essenceBrutalMultiplier));
    if ((lv_essenceUnitCount > 0)) {
        libCOMM_gv_cM_DebugDehakaEssenceDroppedNormal += lv_essenceUnitCount;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "EssencePickup", c_unitCreateIgnorePlacement, lv_dehakaPlayer, UnitGetPosition(EventUnit()));
        libCOMM_gf_CM_Dehaka_EssenceSetStack(UnitLastCreated(), lv_essenceUnitCount);
        UnitBehaviorRemove(UnitLastCreated(), "EssenceCreated", 1);
        libCOMM_gf_CM_Dehaka_EssenceScale(UnitLastCreated(), true);
        libCOMM_gf_CM_Dehaka_EssenceMerge(UnitLastCreated(), lv_essenceUnitCount);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Dehaka_EssenceDrop_Init () {
    libCOMM_gt_CM_Dehaka_EssenceDrop = TriggerCreate("libCOMM_gt_CM_Dehaka_EssenceDrop_Func");
    TriggerEnable(libCOMM_gt_CM_Dehaka_EssenceDrop, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Dehaka_EssenceDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_EssencePickup
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Dehaka_EssencePickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_val;
    fixed lv_period;
    fixed lv_addition;
    int lv_essenceCountStored;
    int lv_player;
    fixed lv_heal;
    fixed lv_extraLife;
    unit lv_collectorUnit;
    string lv_collectorUnitType;
    int lv_doublehealmastery;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_essenceCountStored = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_heal = (lv_essenceCountStored*libNtve_gf_CatalogReferenceGetAsReal("Effect,DehakaHealAmountPerEssenceDummy,Amount", lv_player));
    lv_extraLife = (lv_essenceCountStored*libNtve_gf_CatalogReferenceGetAsReal("Effect,DehakaMaxLifeAmountPerEssenceDummy,Amount", lv_player));
    lv_collectorUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_collectorUnitType = UnitGetType(lv_collectorUnit);
    lv_doublehealmastery = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryDehakaDoubleHealEssenceDisplayDummy", "Amount", lv_player);
    lv_heroUnit = UnitGroupUnit(UnitGroup("DehakaCoop", lv_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1), 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_collectorUnit, "DehakaTopBarSummonTimedLife") == true)) {
        lv_collectorUnit = lv_heroUnit;
        lv_collectorUnitType = UnitGetType(lv_collectorUnit);
    }

    libCOMM_gv_cM_Dehaka_TotalEssence[lv_player] += lv_essenceCountStored;
    UnitSetCustomValue(lv_collectorUnit, libCOMM_gv_cM_DehakaEssenceIndex, (UnitGetCustomValue(lv_collectorUnit, libCOMM_gv_cM_DehakaEssenceIndex) + lv_essenceCountStored));
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "EssenceTravelling", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "EssencePickupFullLM", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    CatalogFieldValueSet(c_gameCatalogEffect, "EssenceDehakaDummyStacks", "Amount", EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), FixedToString(libCOMM_gv_cM_Dehaka_TotalEssence[lv_player], c_fixedPrecisionAny));
    UnitSetAttributePoint(lv_collectorUnit, libCOMM_gv_cM_Dehaka_EssenceAttribute, true, RoundI(UnitGetCustomValue(lv_collectorUnit, libCOMM_gv_cM_DehakaEssenceIndex)));
    UnitXPAddXP(lv_collectorUnit, libCOMM_gv_cM_DehakaVeterencyBehavior[lv_player], lv_essenceCountStored);
    libCOMM_gf_CM_Dehaka_LevelUp(lv_player, lv_collectorUnit);
    if ((RandomInt(1, 100) <= lv_doublehealmastery)) {
        UnitSetPropertyFixed(lv_collectorUnit, c_unitPropLife, (UnitGetPropertyFixed(lv_collectorUnit, c_unitPropLife, c_unitPropCurrent) + (lv_heal + lv_heal)));
    }
    else {
        UnitSetPropertyFixed(lv_collectorUnit, c_unitPropLife, (UnitGetPropertyFixed(lv_collectorUnit, c_unitPropLife, c_unitPropCurrent) + lv_heal));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Dehaka_EssencePickup_Init () {
    libCOMM_gt_CM_Dehaka_EssencePickup = TriggerCreate("libCOMM_gt_CM_Dehaka_EssencePickup_Func");
    TriggerEnable(libCOMM_gt_CM_Dehaka_EssencePickup, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Dehaka_EssencePickup, c_playerAny, "EssencePickupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_EssenceManualUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Dehaka_EssenceManualUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_Dehaka_EssenceSetStack(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    libCOMM_gf_CM_Dehaka_EssenceScale(EventPlayerEffectUsedUnit(c_effectUnitCaster), true);
    libCOMM_gf_CM_Dehaka_EssenceMerge(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Dehaka_EssenceManualUpdate_Init () {
    libCOMM_gt_CM_Dehaka_EssenceManualUpdate = TriggerCreate("libCOMM_gt_CM_Dehaka_EssenceManualUpdate_Func");
    TriggerEnable(libCOMM_gt_CM_Dehaka_EssenceManualUpdate, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Dehaka_EssenceManualUpdate, c_playerAny, "EssenceCreatedDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_LevelUp_Stage2_ColossusLegs
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto2F0DC527_val;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "DehakaCoop") || (UnitGetType(EventUnit()) == "DehakaCoopClone")))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(EventUnit(), null) >= 6))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "DehakaMassive") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2F0DC527_val = UnitGetType(EventUnit());
    if (auto2F0DC527_val == "DehakaCoop") {
        TechTreeUpgradeAddLevel(EventPlayer(), "DehakaCoopStage2", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "DehakaColossusLegs", 1);
    }
    else if (auto2F0DC527_val == "DehakaCoopClone") {
        TechTreeUpgradeAddLevel(EventPlayer(), "DehakaCoopCloneStage2", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "DehakaCloneColossusLegs", 1);
    }
    else {
    }
    UnitBehaviorAdd(EventUnit(), "DehakaModelSwapStun", EventUnit(), 1);
    UnitBehaviorAdd(EventUnit(), "DehakaMassive", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs_Init () {
    libCOMM_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs = TriggerCreate("libCOMM_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs_Func");
    TriggerEnable(libCOMM_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs, false);
    TriggerAddEventUnitGainLevel(libCOMM_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_LevelUp_Stage3
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Dehaka_LevelUp_Stage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto2F33F8FF_val;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "DehakaCoop") || (UnitGetType(EventUnit()) == "DehakaCoopClone")))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(EventUnit(), null) >= 10))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "DehakaCoopAirTargetable") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2F33F8FF_val = UnitGetType(EventUnit());
    if (auto2F33F8FF_val == "DehakaCoop") {
        TechTreeUpgradeAddLevel(EventPlayer(), "DehakaCoopStage3", 1);
    }
    else if (auto2F33F8FF_val == "DehakaCoopClone") {
        TechTreeUpgradeAddLevel(EventPlayer(), "DehakaCoopCloneStage3", 1);
    }
    else {
    }
    UnitBehaviorAdd(EventUnit(), "DehakaCoopAirTargetable", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Dehaka_LevelUp_Stage3_Init () {
    libCOMM_gt_CM_Dehaka_LevelUp_Stage3 = TriggerCreate("libCOMM_gt_CM_Dehaka_LevelUp_Stage3_Func");
    TriggerEnable(libCOMM_gt_CM_Dehaka_LevelUp_Stage3, false);
    TriggerAddEventUnitGainLevel(libCOMM_gt_CM_Dehaka_LevelUp_Stage3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_LevelUp_Stun_Off
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Dehaka_LevelUp_Stun_Off_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_HeroCanSpendSkillPoint(lv_u, "DehakaLearn") == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_u), "HaloStart");
    }
    else {
        ActorSend(libNtve_gf_MainActorofUnit(lv_u), "HaloStop");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Dehaka_LevelUp_Stun_Off_Init () {
    libCOMM_gt_CM_Dehaka_LevelUp_Stun_Off = TriggerCreate("libCOMM_gt_CM_Dehaka_LevelUp_Stun_Off_Func");
    TriggerEnable(libCOMM_gt_CM_Dehaka_LevelUp_Stun_Off, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Dehaka_LevelUp_Stun_Off, null, "DehakaModelSwapStun", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_LevelUp_LearnOrder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Dehaka_LevelUp_LearnOrder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder())) == "DehakaLearn"))) {
            return false;
        }

        if (!((OrderGetFlag(EventUnitOrder(), c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(EventUnitOrder(), c_cmdQueued) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "CancelDehakaLearn", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Dehaka_LevelUp_LearnOrder_Init () {
    libCOMM_gt_CM_Dehaka_LevelUp_LearnOrder = TriggerCreate("libCOMM_gt_CM_Dehaka_LevelUp_LearnOrder_Func");
    TriggerEnable(libCOMM_gt_CM_Dehaka_LevelUp_LearnOrder, false);
    TriggerAddEventUnitOrder(libCOMM_gt_CM_Dehaka_LevelUp_LearnOrder, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_UnitCostRefund
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Dehaka_UnitCostRefund_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropVespene, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(1) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Dehaka_UnitCostRefund_Init () {
    libCOMM_gt_CM_Dehaka_UnitCostRefund = TriggerCreate("libCOMM_gt_CM_Dehaka_UnitCostRefund_Func");
    TriggerEnable(libCOMM_gt_CM_Dehaka_UnitCostRefund, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Dehaka_UnitCostRefund, c_playerAny, "DehakaTrainLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_PrestigeClone
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Dehaka_PrestigeClone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dehakaclone;
    int lv_dehakaplayer;
    order lv_order;
    unit lv_heroUnit;
    int lv_heroUnitIndex;
    unit lv_reviver;
    point lv_rallyPoint;
    unit lv_rallyUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dehakaclone = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_dehakaplayer = UnitGetOwner(lv_dehakaclone);
    lv_heroUnit = UnitGroupUnit(UnitGroup("DehakaCoop", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1), 1);
    lv_heroUnitIndex = libCOMI_gf_GetHeroUnitIndex(lv_heroUnit);
    lv_reviver = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviverUnit;
    lv_rallyPoint = UnitRallyPointTargetPoint(lv_reviver, 1, 1);
    lv_rallyUnit = UnitRallyPointTargetUnit(lv_reviver, 1, 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(lv_rallyUnit) == true)) {
        lv_order = OrderTargetingUnit(AbilityCommand("move", 0), lv_rallyUnit);
    }
    else {
        lv_order = OrderTargetingPoint(AbilityCommand("move", 0), lv_rallyPoint);
    }
    OrderSetFlag(lv_order, c_cmdSmartRally, true);
    UnitIssueOrder(lv_dehakaclone, lv_order, c_orderQueueReplace);
    UnitBehaviorAdd(lv_dehakaclone, libCOMM_gv_cM_DehakaVeterencyBehavior[lv_dehakaplayer], lv_dehakaclone, 1);
    if ((TechTreeUpgradeCount(lv_dehakaplayer, "MasteryDehakaAttackSpeed", c_techCountCompleteOnly) >= 1)) {
        UnitBehaviorAdd(lv_dehakaclone, "DehakaAttEssenceMastery", lv_dehakaclone, 1);
        UnitBehaviorRemove(lv_dehakaclone, "DehakaAttEssence", 1);
    }

    libCOMM_gf_CM_Dehaka_LevelUp(lv_dehakaplayer, lv_dehakaclone);
    libCOMI_gf_SetHeroPanelUnitOverride(2, lv_dehakaclone, lv_dehakaplayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Dehaka_PrestigeClone_Init () {
    libCOMM_gt_CM_Dehaka_PrestigeClone = TriggerCreate("libCOMM_gt_CM_Dehaka_PrestigeClone_Func");
    TriggerEnable(libCOMM_gt_CM_Dehaka_PrestigeClone, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Dehaka_PrestigeClone, c_playerAny, "CommanderPrestigeDehakaCloneRegisterTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_PrestigeCloneRevive
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Dehaka_PrestigeCloneRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dehakaclone;
    int lv_dehakaplayer;
    order lv_order;
    unit lv_heroUnit;
    int lv_heroUnitIndex;
    unit lv_reviver;
    point lv_rallyPoint;
    unit lv_rallyUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dehakaclone = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_dehakaplayer = UnitGetOwner(lv_dehakaclone);
    lv_heroUnit = UnitGroupUnit(UnitGroup("DehakaCoop", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1), 1);
    lv_heroUnitIndex = libCOMI_gf_GetHeroUnitIndex(lv_heroUnit);
    lv_reviver = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviverUnit;
    lv_rallyPoint = UnitRallyPointTargetPoint(lv_reviver, 1, 1);
    lv_rallyUnit = UnitRallyPointTargetUnit(lv_reviver, 1, 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(lv_rallyUnit) == true)) {
        lv_order = OrderTargetingUnit(AbilityCommand("move", 0), lv_rallyUnit);
    }
    else {
        lv_order = OrderTargetingPoint(AbilityCommand("move", 0), lv_rallyPoint);
    }
    OrderSetFlag(lv_order, c_cmdSmartRally, true);
    UnitIssueOrder(lv_dehakaclone, lv_order, c_orderQueueReplace);
    libCOMM_gf_CM_Dehaka_LevelUp(lv_dehakaplayer, lv_dehakaclone);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Dehaka_PrestigeCloneRevive_Init () {
    libCOMM_gt_CM_Dehaka_PrestigeCloneRevive = TriggerCreate("libCOMM_gt_CM_Dehaka_PrestigeCloneRevive_Func");
    TriggerEnable(libCOMM_gt_CM_Dehaka_PrestigeCloneRevive, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Dehaka_PrestigeCloneRevive, c_playerAny, "CommanderPrestigeDehakaCloneRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderFenix
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderFenix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoC07469AE_g;
    int autoC07469AE_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Fenix");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreFenixChampionDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreFenixSuitDmg, true);
    TriggerExecute(libCOMM_gt_CM_Fenix_ChampionInitialSetup, true, false);
    TriggerEnable(libCOMM_gt_CM_Fenix_SentryNullShield, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_TaldarinDetonationStore, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_TaldarinDetonationRelease, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_AchievementCarrierResearched, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_AchievementCarrierAmount, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_ConclaiveTrainStart, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_ConclaiveTrainStop, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger, true);
    TriggerEnable(libCOMM_gt_CM_FenixAutocastSettingsOn, true);
    TriggerEnable(libCOMM_gt_CM_FenixAutocastSettingsOff, true);
    TriggerEnable(libCOMM_gt_CM_FenixAutocastSuitSummonStateAdjust, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_ChargedBusterOnCost, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_ChargedBusterOffCost, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_HeroSpawn, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_HeroSpawnCleanup, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_HeroKilled, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_SuicideUpdateVital, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_ResearchRemoveSuicide, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_RallySetToFenix, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixMassRecall, true);
    TriggerEnable(libCOMM_gt_CM_HeroTransmissionFenixHeroDies, true);
    TriggerEnable(libCOMM_gt_CM_HeroTransmissionFenixHeroRepaired, true);
    TriggerEnable(libCOMM_gt_CM_HeroTransmissionFenixNameChange, true);
    autoC07469AE_g = lv_players;
    autoC07469AE_var = -1;
    while (true) {
        autoC07469AE_var = PlayerGroupNextPlayer(autoC07469AE_g, autoC07469AE_var);
        if (autoC07469AE_var < 0) { break; }
        libCOMM_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime(autoC07469AE_var, "SOASummonFenix", libCOMI_gv_yY_GPCasterUnit[autoC07469AE_var]);
        if ((TechTreeUnitIsAllowed(autoC07469AE_var, "FenixAltarOfPsiStorms") == true)) {
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixCreateKaldalis, true);
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixCreateTalis, true);
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixCreateTaldarin, true);
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixCreateWarbringer, true);
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixCreateMojo, true);
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixCreateClolarion, true);
            libCOMI_gf_CreateACStructure(autoC07469AE_var, "FenixAltarOfPsiStorms");
            libCOMM_gv_cM_Fenix_ChampionStructure[autoC07469AE_var] = UnitLastCreated();
        }

        if ((TechTreeUnitIsAllowed(autoC07469AE_var, "SoACasterFenix") == true)) {
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixZealotSuit, true);
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixDragoonSuit, true);
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixArbiterSuit, true);
            libCOMI_gf_CreateACCaster(autoC07469AE_var, "SoACasterFenix");
            libCOMM_gf_CU_GPInitFenix(autoC07469AE_var);
            libNtve_gf_SetDialogItemUnit(libCOMI_gv_cU_GPCmdPanel[autoC07469AE_var], libCOMI_gv_yY_GPCasterUnit[autoC07469AE_var], PlayerGroupSingle(autoC07469AE_var));
            libCOMM_gf_FenixInitialDummySpawn(autoC07469AE_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderFenix_Init () {
    libCOMM_gt_DUT_CommanderFenix = TriggerCreate("libCOMM_gt_DUT_CommanderFenix_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderFenix, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateTalis
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionFenixCreateTalis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_AdeptChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionFenixCreateTalis_Init () {
    libCOMM_gt_CM_AbilityTransmissionFenixCreateTalis = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionFenixCreateTalis_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixCreateTalis, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionFenixCreateTalis, null, AbilityCommand("FenixTalisAdeptMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateKaldalis
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionFenixCreateKaldalis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ZealotChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionFenixCreateKaldalis_Init () {
    libCOMM_gt_CM_AbilityTransmissionFenixCreateKaldalis = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionFenixCreateKaldalis_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixCreateKaldalis, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionFenixCreateKaldalis, null, AbilityCommand("FenixKaldalisZealotMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateTaldarin
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionFenixCreateTaldarin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ImmortalChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionFenixCreateTaldarin_Init () {
    libCOMM_gt_CM_AbilityTransmissionFenixCreateTaldarin = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionFenixCreateTaldarin_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixCreateTaldarin, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionFenixCreateTaldarin, null, AbilityCommand("FenixTaldarinImmortalMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateWarbringer
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionFenixCreateWarbringer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ColossusChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionFenixCreateWarbringer_Init () {
    libCOMM_gt_CM_AbilityTransmissionFenixCreateWarbringer = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionFenixCreateWarbringer_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixCreateWarbringer, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionFenixCreateWarbringer, null, AbilityCommand("FenixWarbringerColossusMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateMojo
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionFenixCreateMojo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ScoutChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionFenixCreateMojo_Init () {
    libCOMM_gt_CM_AbilityTransmissionFenixCreateMojo = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionFenixCreateMojo_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixCreateMojo, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionFenixCreateMojo, null, AbilityCommand("FenixMojoScoutMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateClolarion
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionFenixCreateClolarion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_CarrierChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionFenixCreateClolarion_Init () {
    libCOMM_gt_CM_AbilityTransmissionFenixCreateClolarion = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionFenixCreateClolarion_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixCreateClolarion, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionFenixCreateClolarion, null, AbilityCommand("FenixClolarionCarrierMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixZealotSuit
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionFenixZealotSuit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_cM_FenixVOTalandarRecalled[EventPlayer()] == false) && (TechTreeUpgradeCount(EventPlayer(), "AStrongHeart", c_techCountCompleteOnly) > 0)) {
        libCOMM_gv_cM_FenixVOTalandarRecalled[EventPlayer()] = true;
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(EventPlayer()));
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(EventPlayer()), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMM_DF193A0B"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }

    if (((libCOMM_gv_cM_FenixVOTransmissionFirstPlay[1][lv_player] == true) || (RandomInt(1, 100) <= libCOMM_gv_cMC_FenixVOTransmissionProbablity) || (TimerGetRemaining(libCOMM_gv_cM_FenixVOTransmissionTimer) <= 0.0))) {
        libCOMM_gv_cM_FenixVOTransmissionFirstPlay[1][lv_player] = false;
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ZealotSuit", -1), PlayerGroupAll());
        TimerStart(libCOMM_gv_cM_FenixVOTransmissionTimer, libCOMM_gv_cMC_FenixVOTransmissionTimerDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionFenixZealotSuit_Init () {
    libCOMM_gt_CM_AbilityTransmissionFenixZealotSuit = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionFenixZealotSuit_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixZealotSuit, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionFenixZealotSuit, null, AbilityCommand("SOASummonFenix", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixDragoonSuit
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionFenixDragoonSuit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_cM_FenixVOTalandarRecalled[EventPlayer()] == false) && (TechTreeUpgradeCount(EventPlayer(), "AStrongHeart", c_techCountCompleteOnly) > 0)) {
        libCOMM_gv_cM_FenixVOTalandarRecalled[EventPlayer()] = true;
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(EventPlayer()));
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(UnitGetOwner(lv_unit)), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMM_C60628E8"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }

    if (((libCOMM_gv_cM_FenixVOTransmissionFirstPlay[2][lv_player] == true) || (RandomInt(1, 100) <= libCOMM_gv_cMC_FenixVOTransmissionProbablity) || (TimerGetRemaining(libCOMM_gv_cM_FenixVOTransmissionTimer) <= 0.0))) {
        libCOMM_gv_cM_FenixVOTransmissionFirstPlay[2][lv_player] = false;
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_DragoonSuit", -1), PlayerGroupAll());
        TimerStart(libCOMM_gv_cM_FenixVOTransmissionTimer, libCOMM_gv_cMC_FenixVOTransmissionTimerDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionFenixDragoonSuit_Init () {
    libCOMM_gt_CM_AbilityTransmissionFenixDragoonSuit = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionFenixDragoonSuit_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixDragoonSuit, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionFenixDragoonSuit, null, AbilityCommand("SOASummonFenixDragoon", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixArbiterSuit
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionFenixArbiterSuit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_cM_FenixVOTalandarRecalled[lv_player] == false) && (TechTreeUpgradeCount(lv_player, "AStrongHeart", c_techCountCompleteOnly) > 0)) {
        libCOMM_gv_cM_FenixVOTalandarRecalled[lv_player] = true;
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(lv_player));
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMM_F341A687"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }

    if (((libCOMM_gv_cM_FenixVOTransmissionFirstPlay[3][lv_player] == true) || (RandomInt(1, 100) <= libCOMM_gv_cMC_FenixVOTransmissionProbablity) || (TimerGetRemaining(libCOMM_gv_cM_FenixVOTransmissionTimer) <= 0.0))) {
        libCOMM_gv_cM_FenixVOTransmissionFirstPlay[3][lv_player] = false;
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixCommander_ArbiterSuit", -1), libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_player));
        TimerStart(libCOMM_gv_cM_FenixVOTransmissionTimer, libCOMM_gv_cMC_FenixVOTransmissionTimerDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionFenixArbiterSuit_Init () {
    libCOMM_gt_CM_AbilityTransmissionFenixArbiterSuit = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionFenixArbiterSuit_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixArbiterSuit, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionFenixArbiterSuit, null, AbilityCommand("SOASummonFenixArbiter", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixMassRecall
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionFenixMassRecall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_MassRecall", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionFenixMassRecall_Init () {
    libCOMM_gt_CM_AbilityTransmissionFenixMassRecall = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionFenixMassRecall_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionFenixMassRecall, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionFenixMassRecall, null, AbilityCommand("ArbiterMPRecall", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroTransmissionFenixHeroDies
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_HeroTransmissionFenixHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() != EventUnit()))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCOMM_gv_cM_Fenix_HeroGroup[lv_player], EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "FenixCoop")) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ZealotSuitDestroyed", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }

    if ((UnitGetType(EventUnit()) == "FenixDragoon")) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_DragoonSuitDestroyed", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }

    if ((UnitGetType(EventUnit()) == "FenixArbiter")) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ArbiterSuitDestroyed", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_HeroTransmissionFenixHeroDies_Init () {
    libCOMM_gt_CM_HeroTransmissionFenixHeroDies = TriggerCreate("libCOMM_gt_CM_HeroTransmissionFenixHeroDies_Func");
    TriggerEnable(libCOMM_gt_CM_HeroTransmissionFenixHeroDies, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_HeroTransmissionFenixHeroDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroTransmissionFenixHeroRepaired
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_HeroTransmissionFenixHeroRepaired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    string autoC4B25682_val;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    autoC4B25682_val = UnitGetType(EventUnit());
    if (autoC4B25682_val == UnitGetType(libCOMM_gv_cM_Fenix_Suits[1][lv_player])) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixCommander_ZealotSuitReady", -1), PlayerGroupSingle(lv_player));
    }
    else if (autoC4B25682_val == UnitGetType(libCOMM_gv_cM_Fenix_Suits[2][lv_player])) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixCommander_DragoonSuitReady", -1), PlayerGroupSingle(lv_player));
    }
    else if (autoC4B25682_val == UnitGetType(libCOMM_gv_cM_Fenix_Suits[3][lv_player])) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixCommander_ArbiterSuitReady", -1), PlayerGroupSingle(lv_player));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_HeroTransmissionFenixHeroRepaired_Init () {
    libCOMM_gt_CM_HeroTransmissionFenixHeroRepaired = TriggerCreate("libCOMM_gt_CM_HeroTransmissionFenixHeroRepaired_Func");
    TriggerEnable(libCOMM_gt_CM_HeroTransmissionFenixHeroRepaired, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_HeroTransmissionFenixHeroRepaired, null, "SOASummonFenixCooldownDummy", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_HeroTransmissionFenixHeroRepaired, null, "SOASummonFenixDragoonCooldownDummy", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_HeroTransmissionFenixHeroRepaired, null, "SOASummonFenixArbiterCooldownDummy", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroTransmissionFenixNameChange
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_HeroTransmissionFenixNameChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMM_gv_cM_FenixVOTalandarRecalled[EventPlayer()] = true;
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_HeroTransmissionFenixNameChange_Init () {
    libCOMM_gt_CM_HeroTransmissionFenixNameChange = TriggerCreate("libCOMM_gt_CM_HeroTransmissionFenixNameChange_Func");
    TriggerEnable(libCOMM_gt_CM_HeroTransmissionFenixNameChange, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_HeroTransmissionFenixNameChange, null, AbilityCommand("ForgeResearch", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreFenixChampionDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreFenixChampionDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "FenixKaldalisZealot") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixTalisAdept") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixTalisAdeptPhaseShift") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixTaldarinImmortal") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixWarbringerColossus") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixMojoScout") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixClolarionCarrier") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixClolarionInterceptor") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixClolarionBomber")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreFenixChampionDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "FenixChampionDamage", FixedToInt(libCOMM_gv_cC_ScoreFenixChampionDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreFenixChampionDmg_Init () {
    libCOMM_gt_CC_ScoreFenixChampionDmg = TriggerCreate("libCOMM_gt_CC_ScoreFenixChampionDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreFenixChampionDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreFenixChampionDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreFenixSuitDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreFenixSuitDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "FenixArbiter") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixCoop") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixDragoon")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreFenixSuitDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "FenixSuitDamage", FixedToInt(libCOMM_gv_cC_ScoreFenixSuitDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreFenixSuitDmg_Init () {
    libCOMM_gt_CC_ScoreFenixSuitDmg = TriggerCreate("libCOMM_gt_CC_ScoreFenixSuitDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreFenixSuitDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreFenixSuitDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryFenixResearchCostReduction
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_MasteryFenixResearchCostReduction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "MasteryFenixReducedResearchCosts"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_MasteryResearchCostReduction(EventPlayer(), "MasteryFenixReducedResearchCosts", 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_MasteryFenixResearchCostReduction_Init () {
    libCOMM_gt_CM_MasteryFenixResearchCostReduction = TriggerCreate("libCOMM_gt_CM_MasteryFenixResearchCostReduction_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_MasteryFenixResearchCostReduction, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_AchievementCarrierAmount
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_AchievementCarrierAmount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Carrier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_fenixAchievementCarrierAmount[lv_player] += 1;
    if ((libCOMM_gv_fenixAchievementCarrierAmount[lv_player] == 4) && (libCOMM_gv_fenixAchievementCarrierResearched[lv_player] == true) && (GameGetMissionTime() <= 600.0)) {
        AchievementAward(lv_player, "CommanderFenixCarrier");
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_AchievementCarrierAmount_Init () {
    libCOMM_gt_CM_Fenix_AchievementCarrierAmount = TriggerCreate("libCOMM_gt_CM_Fenix_AchievementCarrierAmount_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_AchievementCarrierAmount, false);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Fenix_AchievementCarrierAmount, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_AchievementCarrierResearched
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_AchievementCarrierResearched_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "FenixChampionClolarionCarrier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_fenixAchievementCarrierResearched[EventPlayer()] = true;
    if ((libCOMM_gv_fenixAchievementCarrierAmount[EventPlayer()] == 4) && (libCOMM_gv_fenixAchievementCarrierResearched[EventPlayer()] == true) && (GameGetMissionTime() <= 600.0)) {
        AchievementAward(EventPlayer(), "CommanderFenixCarrier");
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_AchievementCarrierResearched_Init () {
    libCOMM_gt_CM_Fenix_AchievementCarrierResearched = TriggerCreate("libCOMM_gt_CM_Fenix_AchievementCarrierResearched_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_AchievementCarrierResearched, false);
    TriggerAddEventUnitResearchProgress(libCOMM_gt_CM_Fenix_AchievementCarrierResearched, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_TaldarinDetonationStore
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_TaldarinDetonationStore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageDone;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventUnitDamageSourcePlayer(), "FenixImmortalDetonationShot", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), EventUnitDamageSourcePlayer(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageDone = EventUnitDamageAttempted();
    UnitSetCustomValue(EventUnit(), 62, (UnitGetCustomValue(EventUnit(), 62) + lv_damageDone));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_TaldarinDetonationStore_Init () {
    libCOMM_gt_CM_Fenix_TaldarinDetonationStore = TriggerCreate("libCOMM_gt_CM_Fenix_TaldarinDetonationStore_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_TaldarinDetonationStore, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CM_Fenix_TaldarinDetonationStore, null, c_unitDamageTypeAny, c_unitDamageEither, "FenixTaldarinImmortalPhaseDisruptors");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_TaldarinDetonationRelease
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_TaldarinDetonationRelease_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;
    fixed lv_fraction;
    int lv_fenixPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "FenixImmortalDetonation") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_fenixPlayer = UnitBehaviorEffectPlayer(EventUnit(), "FenixImmortalDetonation", c_effectPlayerCaster, 0);
    lv_fraction = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "FenixTaldarinImmortalDetonationDummyFraction", "Amount", lv_fenixPlayer)) / 100);
    lv_amount = (UnitGetCustomValue(EventUnit(), 62) * lv_fraction);
    CatalogFieldValueSet(c_gameCatalogEffect, "FenixImmortalDetonationDamage", "Amount", lv_fenixPlayer, FixedToString(lv_amount, c_fixedPrecisionAny));
    if ((UnitIsAlive(libCOMM_gv_cM_Fenix_ChampionUnit[4][lv_fenixPlayer]) == true)) {
        UnitCreateEffectPoint(libCOMM_gv_cM_Fenix_ChampionUnit[4][lv_fenixPlayer], "FenixImmortalDetonationSearchArea", UnitGetPosition(EventUnit()));
    }
    else {
        PlayerCreateEffectPoint(lv_fenixPlayer, "FenixImmortalDetonationSearchArea", UnitGetPosition(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_TaldarinDetonationRelease_Init () {
    libCOMM_gt_CM_Fenix_TaldarinDetonationRelease = TriggerCreate("libCOMM_gt_CM_Fenix_TaldarinDetonationRelease_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_TaldarinDetonationRelease, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Fenix_TaldarinDetonationRelease, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_HeroSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_HeroSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_kills;
    unit lv_fenixUnitNew;
    int lv_fenixPlayer;
    unit lv_fenixUnitOld;
    bool lv_selected;
    bool lv_activedSubGroupSelected;
    unitgroup lv_fenixPlayerSelectionGroup;
    unitgroup lv_fenixPlayerActivedSubGroup;

    // Automatic Variable Declarations
    unitgroup auto2E473728_g;
    int auto2E473728_u;
    unit auto2E473728_var;
    string auto5F996874_val;
    const int auto3F75EE12_ae = 3;
    const int auto3F75EE12_ai = 1;
    const int autoF95F91B8_ae = 3;
    const int autoF95F91B8_ai = 1;
    const int autoE3F2790A_ae = 3;
    const int autoE3F2790A_ai = 1;

    // Variable Initialization
    lv_fenixUnitNew = EventUnitCreatedUnit();
    lv_fenixPlayer = UnitGetOwner(lv_fenixUnitNew);
    lv_fenixUnitOld = libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer];
    lv_fenixPlayerSelectionGroup = UnitGroupSelected(lv_fenixPlayer);
    lv_fenixPlayerActivedSubGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_fenixUnitOld, "CommanderPrestigeFenixSuitSwapTimedLife", 1);
    UnitGroupAdd(libCOMM_gv_cM_Fenix_HeroGroup[lv_fenixPlayer], EventUnitCreatedUnit());
    if ((libCOMM_gv_cM_Fenix_KilledSelf[UnitGetOwner(EventUnit())] == false)) {
        UnitBehaviorAdd(lv_fenixUnitNew, "FenixExplode", lv_fenixUnitNew, 1);
    }

    libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer] = lv_fenixUnitNew;
    libCOMM_gv_cM_Fenix_ActiveHero_Abil[lv_fenixPlayer] = EventUnitCreatedAbil();
    auto2E473728_g = libCOMM_gv_cM_Fenix_HeroGroup[lv_fenixPlayer];
    auto2E473728_u = UnitGroupCount(auto2E473728_g, c_unitCountAll);
    for (;; auto2E473728_u -= 1) {
        auto2E473728_var = UnitGroupUnitFromEnd(auto2E473728_g, auto2E473728_u);
        if (auto2E473728_var == null) { break; }
        if ((UnitIsAlive(auto2E473728_var) == true)) {
            lv_kills += libNtve_gf_UnitGetPropertyKills(auto2E473728_var, c_unitPropCurrent);
        }

    }
    if ((lv_kills > 0)) {
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropKills, lv_kills);
        libCOMM_gv_cM_Fenix_KillCount[UnitGetOwner(EventUnit())] = lv_kills;
    }
    else {
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropKills, libCOMM_gv_cM_Fenix_KillCount[UnitGetOwner(EventUnit())]);
    }
    DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonActiveImage[1][UnitGetOwner(lv_fenixUnitNew)], PlayerGroupSingle(UnitGetOwner(lv_fenixUnitNew)), false);
    DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonActiveImage[2][UnitGetOwner(lv_fenixUnitNew)], PlayerGroupSingle(UnitGetOwner(lv_fenixUnitNew)), false);
    DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonActiveImage[3][UnitGetOwner(lv_fenixUnitNew)], PlayerGroupSingle(UnitGetOwner(lv_fenixUnitNew)), false);
    auto5F996874_val = UnitGetType(EventUnitCreatedUnit());
    if (auto5F996874_val == "FenixCoop") {
        libCOMM_gv_cM_Fenix_ActiveHero_Slot[lv_fenixPlayer] = 1;
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropLife, UnitGetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[1][lv_fenixPlayer], c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropShields, UnitGetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[1][lv_fenixPlayer], c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropEnergy, UnitGetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[1][lv_fenixPlayer], c_unitPropEnergy, c_unitPropCurrent));
        libCOMI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], UnitGetOwner(EventUnitCreatedUnit()), 1);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lv_fenixPlayer]), "WorkStart");
        lv_i = 1;
        for ( ; ( (auto3F75EE12_ai >= 0 && lv_i <= auto3F75EE12_ae) || (auto3F75EE12_ai < 0 && lv_i >= auto3F75EE12_ae) ) ; lv_i += auto3F75EE12_ai ) {
            if (((PlayerGetCooldown(lv_fenixPlayer, (libCOMM_gv_cM_Fenix_AbilCmdArray[lv_i])) <= 0.0) && ((libCOMM_gv_cM_Fenix_AbilCmdArray[lv_i]) != (libCOMM_gv_cM_Fenix_ActiveHero_Abil[lv_fenixPlayer])))) {
                PlayerAddCooldown(lv_fenixPlayer, (libCOMM_gv_cM_Fenix_AbilCmdArray[lv_i]), libCOMM_gv_cM_Fenix_SuitSwapCooldown);
            }

        }
    }
    else if (auto5F996874_val == "FenixDragoon") {
        libCOMM_gv_cM_Fenix_ActiveHero_Slot[lv_fenixPlayer] = 2;
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropLife, UnitGetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[2][lv_fenixPlayer], c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropShields, UnitGetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[2][lv_fenixPlayer], c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropEnergy, UnitGetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[2][lv_fenixPlayer], c_unitPropEnergy, c_unitPropCurrent));
        libCOMI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], UnitGetOwner(lv_fenixUnitNew), 2);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[UnitGetOwner(lv_fenixUnitNew)]), "WorkStart");
        lv_i = 1;
        for ( ; ( (autoF95F91B8_ai >= 0 && lv_i <= autoF95F91B8_ae) || (autoF95F91B8_ai < 0 && lv_i >= autoF95F91B8_ae) ) ; lv_i += autoF95F91B8_ai ) {
            if (((PlayerGetCooldown(lv_fenixPlayer, (libCOMM_gv_cM_Fenix_AbilCmdArray[lv_i])) <= 0.0) && ((libCOMM_gv_cM_Fenix_AbilCmdArray[lv_i]) != (libCOMM_gv_cM_Fenix_ActiveHero_Abil[lv_fenixPlayer])))) {
                PlayerAddCooldown(lv_fenixPlayer, (libCOMM_gv_cM_Fenix_AbilCmdArray[lv_i]), libCOMM_gv_cM_Fenix_SuitSwapCooldown);
            }

        }
    }
    else if (auto5F996874_val == "FenixArbiter") {
        libCOMM_gv_cM_Fenix_ActiveHero_Slot[lv_fenixPlayer] = 3;
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropLife, UnitGetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[3][lv_fenixPlayer], c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropShields, UnitGetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[3][lv_fenixPlayer], c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropEnergy, UnitGetPropertyFixed(libCOMM_gv_cM_Fenix_Suits[3][lv_fenixPlayer], c_unitPropEnergy, c_unitPropCurrent));
        libCOMI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], UnitGetOwner(lv_fenixUnitNew), 3);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lv_fenixPlayer]), "WorkStart");
        lv_i = 1;
        for ( ; ( (autoE3F2790A_ai >= 0 && lv_i <= autoE3F2790A_ae) || (autoE3F2790A_ai < 0 && lv_i >= autoE3F2790A_ae) ) ; lv_i += autoE3F2790A_ai ) {
            if (((PlayerGetCooldown(lv_fenixPlayer, (libCOMM_gv_cM_Fenix_AbilCmdArray[lv_i])) <= 0.0) && ((libCOMM_gv_cM_Fenix_AbilCmdArray[lv_i]) != (libCOMM_gv_cM_Fenix_ActiveHero_Abil[lv_fenixPlayer])))) {
                PlayerAddCooldown(lv_fenixPlayer, (libCOMM_gv_cM_Fenix_AbilCmdArray[lv_i]), libCOMM_gv_cM_Fenix_SuitSwapCooldown);
            }

        }
    }
    else {
    }
    libCOMM_gf_CM_Fenix_SetActiveHeroUIState(EventUnitCreatedUnit(), true);
    libCOMI_gf_SetHeroPanelUnit(libCOMM_gv_cMC_Fenix_HeroIndex, EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()));
    libCOMM_gf_CM_Fenix_SetActiveHeroRally(EventUnitCreatedUnit());
    libCOMM_gf_TransferGuardianShell(lv_fenixUnitOld, lv_fenixUnitNew);
    UnitCreateEffectUnit(lv_fenixUnitNew, "CopyTargetSelectionAndControlGroups", lv_fenixUnitOld);
    if ((UnitGroupCount(lv_fenixPlayerSelectionGroup, c_unitCountAlive) > 0)) {
        lv_fenixPlayerActivedSubGroup = UnitSubgroupSelected(lv_fenixPlayer);
        lv_selected = UnitIsSelected(lv_fenixUnitOld, lv_fenixPlayer);
        lv_activedSubGroupSelected = UnitGroupHasUnit(lv_fenixPlayerActivedSubGroup, lv_fenixUnitOld);
    }

    UnitSelect(libCOMM_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], lv_fenixPlayer, false);
    if ((lv_selected == true)) {
        UnitGroupRemove(lv_fenixPlayerSelectionGroup, lv_fenixUnitOld);
        UnitGroupRemove(lv_fenixPlayerActivedSubGroup, lv_fenixUnitOld);
        UnitGroupAdd(lv_fenixPlayerSelectionGroup, lv_fenixUnitNew);
        if ((lv_activedSubGroupSelected == true)) {
            UnitGroupAdd(lv_fenixPlayerActivedSubGroup, lv_fenixUnitNew);
        }

        UnitClearSelection(lv_fenixPlayer);
        Wait(0.0625, c_timeGame);
        UnitGroupSelect(lv_fenixPlayerActivedSubGroup, lv_fenixPlayer, true);
        UnitGroupSelect(lv_fenixPlayerSelectionGroup, lv_fenixPlayer, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_HeroSpawn_Init () {
    libCOMM_gt_CM_Fenix_HeroSpawn = TriggerCreate("libCOMM_gt_CM_Fenix_HeroSpawn_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_HeroSpawn, false);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Fenix_HeroSpawn, null, "SOASummonFenix", null);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Fenix_HeroSpawn, null, "SOASummonFenixArbiter", null);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Fenix_HeroSpawn, null, "SOASummonFenixDragoon", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_HeroSpawnCleanup
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_HeroSpawnCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto45592741_g;
    int auto45592741_u;
    unit auto45592741_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "SOASummonFenixHeroSummonSelfCleanupDummy")) {
        libCOMM_gf_CM_Fenix_VitalMatch(EventPlayerEffectUsedUnit(c_effectUnitTarget));
        DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonActiveImage[1][lv_player], PlayerGroupSingle(lv_player), false);
        DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonActiveImage[2][lv_player], PlayerGroupSingle(lv_player), false);
        DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonActiveImage[3][lv_player], PlayerGroupSingle(lv_player), false);
        libCOMM_gv_cM_Fenix_ActiveHero[lv_player] = null;
        libCOMM_gv_cM_Fenix_ActiveHero_Abil[lv_player] = "";
        UnitCreateEffectUnit(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SOASummonFenixHeroSummonCasterBehaviorCleanup", libCOMI_gv_yY_GPCasterUnit[EventPlayer()]);
        libCOMI_gv_cU_HeroExists[lv_player][libCOMM_gv_cMC_Fenix_HeroIndex] = false;
        libCOMM_gf_CM_Fenix_SetActiveHeroUIState(EventPlayerEffectUsedUnit(c_effectUnitTarget), false);
        libCOMI_gf_CU_ShowHideHeroPanel(false, libCOMM_gv_cMC_Fenix_HeroIndex);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lv_player]), "WorkEnd");
        UnitBehaviorAddPlayer(EventPlayerEffectUsedUnit(c_effectUnitTarget), "SOASummonFenixWarpOutAnimation", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), 1);
        Wait(0.67, c_timeGame);
        UnitRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    else {
        Wait(0.0625, c_timeGame);
        auto45592741_g = libCOMM_gv_cM_Fenix_HeroGroup[lv_player];
        auto45592741_u = UnitGroupCount(auto45592741_g, c_unitCountAll);
        for (;; auto45592741_u -= 1) {
            auto45592741_var = UnitGroupUnitFromEnd(auto45592741_g, auto45592741_u);
            if (auto45592741_var == null) { break; }
            if (((auto45592741_var != libCOMM_gv_cM_Fenix_ActiveHero[lv_player]))) {
                libCOMM_gf_CM_Fenix_VitalMatch(auto45592741_var);
                UnitBehaviorAddPlayer(auto45592741_var, "SOASummonFenixWarpOutAnimation", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), 1);
                Wait(0.67, c_timeGame);
                UnitRemove(auto45592741_var);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_HeroSpawnCleanup_Init () {
    libCOMM_gt_CM_Fenix_HeroSpawnCleanup = TriggerCreate("libCOMM_gt_CM_Fenix_HeroSpawnCleanup_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_HeroSpawnCleanup, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Fenix_HeroSpawnCleanup, c_playerAny, "SOASummonFenixHeroSummonCleanupDummy");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Fenix_HeroSpawnCleanup, c_playerAny, "SOASummonFenixHeroSummonSelfCleanupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_HeroKilled
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_HeroKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_unitType;

    // Automatic Variable Declarations
    string auto636B7A29_val;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_unitType = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOMM_gv_cM_Fenix_HeroGroup[lv_player], EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "FenixCoop")) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMM_707A4894"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonActiveImage[1][lv_player], PlayerGroupSingle(lv_player), false);
    }

    if ((UnitGetType(EventUnit()) == "FenixDragoon")) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMM_BA14AF4F"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonActiveImage[2][lv_player], PlayerGroupSingle(lv_player), false);
    }

    if ((UnitGetType(EventUnit()) == "FenixArbiter")) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMM_B5A4FB28"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonActiveImage[3][lv_player], PlayerGroupSingle(lv_player), false);
    }

    libCOMM_gf_CM_Fenix_VitalMatch(EventUnit());
    libCOMM_gv_cM_Fenix_KillCount[UnitGetOwner(EventUnit())] = libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent);
    UnitCreateEffectUnit(libCOMI_gv_yY_GPCasterUnit[EventPlayer()], "SOASummonFenixHeroSummonCasterBehaviorCleanup", libCOMI_gv_yY_GPCasterUnit[EventPlayer()]);
    libCOMI_gv_cU_HeroExists[UnitGetOwner(EventUnit())][libCOMM_gv_cMC_Fenix_HeroIndex] = false;
    if ((libNtve_gf_KillingUnit() == EventUnit()) && (libCOMM_gv_cM_Fenix_KilledSelf[lv_player] == false) && (EventUnitDamageEffect() == "FenixSuicide")) {
        libCOMM_gv_cM_Fenix_KilledSelf[lv_player] = true;
        libCOMM_gv_cM_Fenix_KillCount[lv_player] += 1;
        TechTreeBehaviorAllow(lv_player, "FenixExplode", false);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AStrongHeart", 1);
        SoundChannelStop(PlayerGroupSingle(lv_player), c_soundCategoryVoice);
        auto636B7A29_val = lv_unitType;
        if (auto636B7A29_val == "FenixArbiter") {
            libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread(lv_player, AbilityCommand("SOASummonFenixArbiter", 0), EventUnitDamageSourcePoint());
        }
        else if (auto636B7A29_val == "FenixCoop") {
            libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread(lv_player, AbilityCommand("SOASummonFenix", 0), EventUnitDamageSourcePoint());
        }
        else if (auto636B7A29_val == "FenixDragoon") {
            libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread(lv_player, AbilityCommand("SOASummonFenixDragoon", 0), EventUnitDamageSourcePoint());
        }
        else {
            libCOMM_gf_CM_Fenix_SuicideRecallTalandarThread(lv_player, AbilityCommand("SOASummonFenix", 0), EventUnitDamageSourcePoint());
        }
    }
    else {
        PlayerAddCooldown(lv_player, (libCOMM_gv_cM_Fenix_ActiveHero_Abil[lv_player]), 180.0);
    }
    libCOMM_gv_cM_Fenix_ActiveHero_Abil[lv_player] = "";
    libCOMM_gf_CM_Fenix_SetActiveHeroUIState(EventUnit(), false);
    libCOMI_gf_CU_ShowHideHeroPanel(false, libCOMM_gv_cMC_Fenix_HeroIndex);
    CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lv_player]), "WorkEnd");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_HeroKilled_Init () {
    libCOMM_gt_CM_Fenix_HeroKilled = TriggerCreate("libCOMM_gt_CM_Fenix_HeroKilled_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_HeroKilled, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Fenix_HeroKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_SuicideUpdateVital
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_SuicideUpdateVital_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_Fenix_SuicideLife[EventPlayer()] = EventPlayerEffectUsedAmountFixed(c_effectAmountShieldsChanged, true);
    libCOMM_gv_cM_Fenix_SuicideShield[EventPlayer()] = EventPlayerEffectUsedAmountFixed(c_effectAmountLifeChanged, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_SuicideUpdateVital_Init () {
    libCOMM_gt_CM_Fenix_SuicideUpdateVital = TriggerCreate("libCOMM_gt_CM_Fenix_SuicideUpdateVital_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_SuicideUpdateVital, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Fenix_SuicideUpdateVital, c_playerAny, "FenixSuicide");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ResearchRemoveSuicide
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ResearchRemoveSuicide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_Fenix_KilledSelf[lv_player] = true;
    UnitBehaviorRemove(libCOMM_gv_cM_Fenix_ActiveHero[lv_player], "FenixExplode", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ResearchRemoveSuicide_Init () {
    libCOMM_gt_CM_Fenix_ResearchRemoveSuicide = TriggerCreate("libCOMM_gt_CM_Fenix_ResearchRemoveSuicide_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_ResearchRemoveSuicide, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Fenix_ResearchRemoveSuicide, null, AbilityCommand("ForgeResearch", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_RallySetToFenix
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_RallySetToFenix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventUnitTargetUnit()) == true) && (EventUnitTargetUnit() == libCOMM_gv_cM_Fenix_ActiveHero[libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Fenix", libCOMI_gf_GetAlliedCommandersPlayersCopy())])) {
        UnitGroupAdd(libCOMM_gv_cM_Fenix_RalliedGroup, EventUnit());
    }
    else {
        UnitGroupRemove(libCOMM_gv_cM_Fenix_RalliedGroup, EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_RallySetToFenix_Init () {
    libCOMM_gt_CM_Fenix_RallySetToFenix = TriggerCreate("libCOMM_gt_CM_Fenix_RallySetToFenix_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_RallySetToFenix, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Fenix_RallySetToFenix, null, AbilityCommand("Rally", 0), c_abilRallyStagePlace, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ChampionInitialSetup
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ChampionInitialSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_Fenix_ChampionUnitType[1] = "FenixKaldalisZealot";
    libCOMM_gv_cM_Fenix_ChampionUnitType[2] = "FenixTalisAdept";
    libCOMM_gv_cM_Fenix_ChampionUnitType[3] = "FenixMojoScout";
    libCOMM_gv_cM_Fenix_ChampionUnitType[4] = "FenixTaldarinImmortal";
    libCOMM_gv_cM_Fenix_ChampionUnitType[5] = "FenixWarbringerColossus";
    libCOMM_gv_cM_Fenix_ChampionUnitType[6] = "FenixClolarionCarrier";
    libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[1] = "ZealotPurifier";
    libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[2] = "AdeptFenix";
    libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[3] = "Scout";
    libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[4] = "Immortal";
    libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[5] = "ColossusPurifier";
    libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[6] = "Carrier";
    libCOMM_gv_cM_Fenix_ChampionMorphAbil[1] = AbilityCommand("FenixKaldalisZealotMorph", 0);
    libCOMM_gv_cM_Fenix_ChampionMorphAbil[2] = AbilityCommand("FenixTalisAdeptMorph", 0);
    libCOMM_gv_cM_Fenix_ChampionMorphAbil[3] = AbilityCommand("FenixMojoScoutMorph", 0);
    libCOMM_gv_cM_Fenix_ChampionMorphAbil[4] = AbilityCommand("FenixTaldarinImmortalMorph", 0);
    libCOMM_gv_cM_Fenix_ChampionMorphAbil[5] = AbilityCommand("FenixWarbringerColossusMorph", 0);
    libCOMM_gv_cM_Fenix_ChampionMorphAbil[6] = AbilityCommand("FenixClolarionCarrierMorph", 0);
    libCOMM_gv_cM_Fenix_ChampionNetworkUpgrades[1] = "FenixNetworkedSuperiorityZealot";
    libCOMM_gv_cM_Fenix_ChampionNetworkUpgrades[2] = "FenixNetworkedSuperiorityAdept";
    libCOMM_gv_cM_Fenix_ChampionNetworkUpgrades[3] = "FenixNetworkedSuperiorityScout";
    libCOMM_gv_cM_Fenix_ChampionNetworkUpgrades[4] = "FenixNetworkedSuperiorityImmortal";
    libCOMM_gv_cM_Fenix_ChampionNetworkUpgrades[5] = "FenixNetworkedSuperiorityColossus";
    libCOMM_gv_cM_Fenix_ChampionNetworkUpgrades[6] = "FenixNetworkedSuperiorityCarrier";
    libCOMM_gv_cM_Fenix_ChampionShellCountEffects[1] = "FenixChampionShellCountZealot";
    libCOMM_gv_cM_Fenix_ChampionShellCountEffects[2] = "FenixChampionShellCountAdept";
    libCOMM_gv_cM_Fenix_ChampionShellCountEffects[3] = "FenixChampionShellCountScout";
    libCOMM_gv_cM_Fenix_ChampionShellCountEffects[4] = "FenixChampionShellCountImmortal";
    libCOMM_gv_cM_Fenix_ChampionShellCountEffects[5] = "FenixChampionShellCountColossus";
    libCOMM_gv_cM_Fenix_ChampionShellCountEffects[6] = "FenixChampionShellCountCarrier";
    libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[1] = "FenixChampionSwapBoostZealot";
    libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[2] = "FenixChampionSwapBoostAdept";
    libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[3] = "FenixChampionSwapBoostScout";
    libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[4] = "FenixChampionSwapBoostImmortal";
    libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[5] = "FenixChampionSwapBoostColossus";
    libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[6] = "FenixChampionSwapBoostCarrier";
    TriggerEnable(libCOMM_gt_CM_Fenix_ChampionPotentialVoluteerTrained, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_ChampionBuildingReBuilt, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_ChampionUpgradeResearched, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_ChampionMorphed, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_ChampionDies, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_NetworkedUnitDies, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_ProbiusSwap, true);
    TriggerEnable(libCOMM_gt_CM_Fenix_AvengingProtocol_BuffExpires, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ChampionInitialSetup_Init () {
    libCOMM_gt_CM_Fenix_ChampionInitialSetup = TriggerCreate("libCOMM_gt_CM_Fenix_ChampionInitialSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Champion Potential Voluteer Trained
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ChampionPotentialVoluteerTrained_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    const int auto327FBDD3_ae = libCOMM_gv_cMC_Fenix_ChampionCount;
    const int auto327FBDD3_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(lv_player, "FenixCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[1]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[2]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[3]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[4]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[5]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUnitCreatedAbil() == "WarpGateTrain") || (EventUnitCreatedAbil() == "StargateTrain"))) {
        Wait(5.0, c_timeGame);
    }

    if ((UnitIsAlive(EventUnitCreatedUnit()) == true)) {
        lv_i = 1;
        for ( ; ( (auto327FBDD3_ai >= 0 && lv_i <= auto327FBDD3_ae) || (auto327FBDD3_ai < 0 && lv_i >= auto327FBDD3_ae) ) ; lv_i += auto327FBDD3_ai ) {
            if ((UnitGetType(EventUnitCreatedUnit()) == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[lv_i])) {
                UnitGroupAdd(libCOMM_gv_cM_Fenix_ChampionVolunteerUnitGroup[lv_i][lv_player], EventUnitCreatedUnit());
                libCOMM_gf_CM_Fenix_UpdateNetworkValues(lv_i, UnitGetOwner(EventUnitCreatedUnit()));
                libCOMM_gf_CM_Fenix_UpdateFenixChampionShellCountValues(lv_i, UnitGetOwner(EventUnitCreatedUnit()));
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ChampionPotentialVoluteerTrained_Init () {
    libCOMM_gt_CM_Fenix_ChampionPotentialVoluteerTrained = TriggerCreate("libCOMM_gt_CM_Fenix_ChampionPotentialVoluteerTrained_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_ChampionPotentialVoluteerTrained, false);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Fenix_ChampionPotentialVoluteerTrained, null, "GatewayTrain", null);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Fenix_ChampionPotentialVoluteerTrained, null, "WarpGateTrain", null);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Fenix_ChampionPotentialVoluteerTrained, null, "StargateTrain", null);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Fenix_ChampionPotentialVoluteerTrained, null, "RoboticsFacilityTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Champion Building ReBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ChampionBuildingReBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "FenixAltarOfPsiStorms"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_Fenix_ChampionStructure[UnitGetOwner(EventUnitCreatedUnit())] = EventUnitCreatedUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ChampionBuildingReBuilt_Init () {
    libCOMM_gt_CM_Fenix_ChampionBuildingReBuilt = TriggerCreate("libCOMM_gt_CM_Fenix_ChampionBuildingReBuilt_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_ChampionBuildingReBuilt, false);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Fenix_ChampionBuildingReBuilt, null, "ProtossBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Champion Upgrade Researched
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ChampionUpgradeResearched_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    string auto355A6BF4_val;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto355A6BF4_val = libNtve_gf_TriggeringProgressUpgrade();
    if (auto355A6BF4_val == "FenixChampionKaldalisZealot") {
        libCOMM_gv_cM_Fenix_ChampionAvailable[1][lv_player] = true;
        TriggerEnable(libCOMM_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMM_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto355A6BF4_val == "FenixChampionTalisAdept") {
        libCOMM_gv_cM_Fenix_ChampionAvailable[2][lv_player] = true;
        TriggerEnable(libCOMM_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMM_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto355A6BF4_val == "FenixChampionMojoScout") {
        libCOMM_gv_cM_Fenix_ChampionAvailable[3][lv_player] = true;
        TriggerEnable(libCOMM_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMM_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto355A6BF4_val == "FenixChampionTaldarinImmortal") {
        libCOMM_gv_cM_Fenix_ChampionAvailable[4][lv_player] = true;
        TriggerEnable(libCOMM_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMM_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto355A6BF4_val == "FenixChampionWarbringerColossus") {
        libCOMM_gv_cM_Fenix_ChampionAvailable[5][lv_player] = true;
        TriggerEnable(libCOMM_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMM_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto355A6BF4_val == "FenixChampionClolarionCarrier") {
        libCOMM_gv_cM_Fenix_ChampionAvailable[6][lv_player] = true;
        TriggerEnable(libCOMM_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMM_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ChampionUpgradeResearched_Init () {
    libCOMM_gt_CM_Fenix_ChampionUpgradeResearched = TriggerCreate("libCOMM_gt_CM_Fenix_ChampionUpgradeResearched_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_ChampionUpgradeResearched, false);
    TriggerAddEventUnitResearchProgress(libCOMM_gt_CM_Fenix_ChampionUpgradeResearched, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Champion Timers
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ChampionTimers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_volunteer;
    int lv_i;
    fixed lv_foundUnitRange;
    unit lv_foundUnit;
    int lv_itPlayerFenix;

    // Automatic Variable Declarations
    playergroup auto50CB018E_g;
    const int auto04DACE38_ae = libCOMM_gv_cMC_Fenix_ChampionCount;
    const int auto04DACE38_ai = 1;
    const int auto37B45E0C_ae = libCOMM_gv_cMC_Fenix_ChampionCount;
    const int auto37B45E0C_ai = 1;
    unitgroup auto0A4A1AB1_g;
    int auto0A4A1AB1_u;
    unit auto0A4A1AB1_var;

    // Variable Initialization
    lv_foundUnitRange = 500.0;

    // Actions
    if (!runActions) {
        return true;
    }

    auto50CB018E_g = libCOMI_gf_CC_PlayersOfCommander("Fenix");
    lv_itPlayerFenix = -1;
    while (true) {
        lv_itPlayerFenix = PlayerGroupNextPlayer(auto50CB018E_g, lv_itPlayerFenix);
        if (lv_itPlayerFenix < 0) { break; }
        lv_i = 1;
        for ( ; ( (auto04DACE38_ai >= 0 && lv_i <= auto04DACE38_ae) || (auto04DACE38_ai < 0 && lv_i >= auto04DACE38_ae) ) ; lv_i += auto04DACE38_ai ) {
            libCOMM_gv_cM_Fenix_ChampionRespawnTimer[lv_i][lv_itPlayerFenix] -= 1.0;
        }
        if (((UnitIsAlive(libCOMM_gv_cM_Fenix_ChampionStructure[lv_itPlayerFenix]) == true) && (UnitGetType(libCOMM_gv_cM_Fenix_ChampionStructure[lv_itPlayerFenix]) == "FenixAltarOfPsiStorms"))) {
            lv_i = 1;
            for ( ; ( (auto37B45E0C_ai >= 0 && lv_i <= auto37B45E0C_ae) || (auto37B45E0C_ai < 0 && lv_i >= auto37B45E0C_ae) ) ; lv_i += auto37B45E0C_ai ) {
                if (((libCOMM_gv_cM_Fenix_ChampionAvailable[lv_i][lv_itPlayerFenix] == true) && (UnitIsAlive(libCOMM_gv_cM_Fenix_ChampionUnit[lv_i][lv_itPlayerFenix]) == false) && (libCOMM_gv_cM_Fenix_ChampionRespawnTimer[lv_i][lv_itPlayerFenix] <= 0.0))) {
                    lv_volunteer = null;
                    auto0A4A1AB1_g = libCOMM_gv_cM_Fenix_ChampionVolunteerUnitGroup[lv_i][lv_itPlayerFenix];
                    auto0A4A1AB1_u = UnitGroupCount(auto0A4A1AB1_g, c_unitCountAll);
                    for (;; auto0A4A1AB1_u -= 1) {
                        auto0A4A1AB1_var = UnitGroupUnitFromEnd(auto0A4A1AB1_g, auto0A4A1AB1_u);
                        if (auto0A4A1AB1_var == null) { break; }
                        if ((UnitIsAlive(auto0A4A1AB1_var) == true) && (DistanceBetweenPoints(UnitGetPosition(auto0A4A1AB1_var), libCOMM_gv_cM_Fenix_ChampionDeathPosition[lv_i][lv_itPlayerFenix]) < lv_foundUnitRange)) {
                            lv_volunteer = auto0A4A1AB1_var;
                            lv_foundUnitRange = DistanceBetweenPoints(UnitGetPosition(auto0A4A1AB1_var), libCOMM_gv_cM_Fenix_ChampionDeathPosition[lv_i][lv_itPlayerFenix]);
                        }

                    }
                    if ((lv_volunteer != null)) {
                        UnitIssueOrder(lv_volunteer, Order(libCOMM_gv_cM_Fenix_ChampionMorphAbil[lv_i]), c_orderQueueAddToFront);
                    }

                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ChampionTimers_Init () {
    libCOMM_gt_CM_Fenix_ChampionTimers = TriggerCreate("libCOMM_gt_CM_Fenix_ChampionTimers_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_ChampionTimers, false);
    TriggerAddEventTimePeriodic(libCOMM_gt_CM_Fenix_ChampionTimers, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ChampionMorphed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ChampionMorphed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_player;
    unit lv_newChampion;

    // Automatic Variable Declarations
    const int autoCB9B9839_ae = libCOMM_gv_cMC_Fenix_ChampionCount;
    const int autoCB9B9839_ai = 1;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_newChampion = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoCB9B9839_ai >= 0 && lv_i <= autoCB9B9839_ae) || (autoCB9B9839_ai < 0 && lv_i >= autoCB9B9839_ae) ) ; lv_i += autoCB9B9839_ai ) {
        if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == libCOMM_gv_cM_Fenix_ChampionUnitType[lv_i])) {
            PlayerCreateEffectPoint(UnitGetOwner(libCOMM_gv_cM_Fenix_ChampionStructure[lv_player]), "FenixChampionSwapLaunch", UnitGetPosition(libCOMM_gv_cM_Fenix_ChampionStructure[lv_player]));
            UnitCreateEffectUnit(lv_newChampion, "CopyTargetSelectionAndControlGroups", libCOMM_gv_cM_Fenix_ChampionUnit[lv_i][lv_player]);
            if ((UnitIsAlive(libCOMM_gv_cM_Fenix_ChampionUnit[lv_i][lv_player]) == false)) {
                UnitRemove(libCOMM_gv_cM_Fenix_ChampionUnit[lv_i][lv_player]);
            }

            libCOMM_gv_cM_Fenix_ChampionUnit[lv_i][lv_player] = lv_newChampion;
            UnitSetPropertyFixed(libCOMM_gv_cM_Fenix_ChampionUnit[lv_i][lv_player], c_unitPropKills, libCOMM_gv_cM_Fenix_ChampionKills[lv_i][lv_player]);
            libCOMM_gf_CM_Fenix_AvengingProtocol(lv_i, lv_player, 5);
            UnitGroupRemove(libCOMM_gv_cM_Fenix_ChampionVolunteerUnitGroup[lv_i][lv_player], lv_newChampion);
            libCOMM_gf_CM_Fenix_UpdateNetworkValues(lv_i, UnitGetOwner(lv_newChampion));
            libCOMM_gf_CM_Fenix_UpdateFenixChampionShellCountValues(lv_i, UnitGetOwner(lv_newChampion));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ChampionMorphed_Init () {
    libCOMM_gt_CM_Fenix_ChampionMorphed = TriggerCreate("libCOMM_gt_CM_Fenix_ChampionMorphed_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_ChampionMorphed, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Fenix_ChampionMorphed, c_playerAny, "FenixChampionSwapImpactUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ChampionDies
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ChampionDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadChampion;
    int lv_player;

    // Automatic Variable Declarations
    string autoA1E8A62F_val;

    // Variable Initialization
    lv_deadChampion = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_deadChampion);

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(UnitGetOwner(lv_deadChampion), "FenixChampionSwapLaunch", UnitGetPosition(lv_deadChampion));
    autoA1E8A62F_val = UnitGetType(lv_deadChampion);
    if (autoA1E8A62F_val == libCOMM_gv_cM_Fenix_ChampionUnitType[1]) {
        libCOMM_gv_cM_Fenix_ChampionRespawnTimer[1][lv_player] = 1.0;
        libCOMM_gv_cM_Fenix_ChampionKills[1][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCOMM_gv_cM_Fenix_ChampionDeathPosition[1][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (autoA1E8A62F_val == libCOMM_gv_cM_Fenix_ChampionUnitType[2]) {
        libCOMM_gv_cM_Fenix_ChampionRespawnTimer[2][lv_player] = 1.0;
        libCOMM_gv_cM_Fenix_ChampionKills[2][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCOMM_gv_cM_Fenix_ChampionDeathPosition[2][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (autoA1E8A62F_val == libCOMM_gv_cM_Fenix_ChampionUnitType[3]) {
        libCOMM_gv_cM_Fenix_ChampionRespawnTimer[3][lv_player] = 1.0;
        libCOMM_gv_cM_Fenix_ChampionKills[3][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCOMM_gv_cM_Fenix_ChampionDeathPosition[3][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (autoA1E8A62F_val == libCOMM_gv_cM_Fenix_ChampionUnitType[4]) {
        libCOMM_gv_cM_Fenix_ChampionRespawnTimer[4][lv_player] = 1.0;
        libCOMM_gv_cM_Fenix_ChampionKills[4][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCOMM_gv_cM_Fenix_ChampionDeathPosition[4][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (autoA1E8A62F_val == libCOMM_gv_cM_Fenix_ChampionUnitType[5]) {
        libCOMM_gv_cM_Fenix_ChampionRespawnTimer[5][lv_player] = 1.0;
        libCOMM_gv_cM_Fenix_ChampionKills[5][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCOMM_gv_cM_Fenix_ChampionDeathPosition[5][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (autoA1E8A62F_val == libCOMM_gv_cM_Fenix_ChampionUnitType[6]) {
        libCOMM_gv_cM_Fenix_ChampionRespawnTimer[6][lv_player] = 1.0;
        libCOMM_gv_cM_Fenix_ChampionKills[6][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCOMM_gv_cM_Fenix_ChampionDeathPosition[6][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else {
    }
    if ((UnitIsAlive(libCOMM_gv_cM_Fenix_ChampionStructure[lv_player]) == true)) {
        PlayerCreateEffectPoint(UnitGetOwner(libCOMM_gv_cM_Fenix_ChampionStructure[lv_player]), "FenixChampionSwapImpact", UnitGetPosition(libCOMM_gv_cM_Fenix_ChampionStructure[lv_player]));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ChampionDies_Init () {
    libCOMM_gt_CM_Fenix_ChampionDies = TriggerCreate("libCOMM_gt_CM_Fenix_ChampionDies_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_ChampionDies, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Fenix_ChampionDies, c_playerAny, "FenixAIChampionDeathEvent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_NetworkedUnitDies
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_NetworkedUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_avengingprotocolindex;
    int lv_avengingprotocolstacks;

    // Automatic Variable Declarations
    string autoA2781073_val;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventUnit())) == "Fenix") && ((UnitGetType(EventUnit()) == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[1]) || (UnitGetType(EventUnit()) == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[2]) || (UnitGetType(EventUnit()) == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[3]) || (UnitGetType(EventUnit()) == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[4]) || (UnitGetType(EventUnit()) == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[5]) || (UnitGetType(EventUnit()) == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[6]))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA2781073_val = UnitGetType(EventUnit());
    if (autoA2781073_val == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[1]) {
        UnitGroupRemove(libCOMM_gv_cM_Fenix_ChampionVolunteerUnitGroup[1][lv_player], EventUnit());
        libCOMM_gf_CM_Fenix_UpdateNetworkValues(1, lv_player);
        libCOMM_gf_CM_Fenix_UpdateFenixChampionShellCountValues(1, lv_player);
        lv_avengingprotocolindex = 1;
        lv_avengingprotocolstacks = 3;
    }
    else if (autoA2781073_val == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[2]) {
        UnitGroupRemove(libCOMM_gv_cM_Fenix_ChampionVolunteerUnitGroup[2][lv_player], EventUnit());
        libCOMM_gf_CM_Fenix_UpdateNetworkValues(2, lv_player);
        libCOMM_gf_CM_Fenix_UpdateFenixChampionShellCountValues(2, lv_player);
        lv_avengingprotocolindex = 2;
        lv_avengingprotocolstacks = 2;
    }
    else if (autoA2781073_val == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[3]) {
        UnitGroupRemove(libCOMM_gv_cM_Fenix_ChampionVolunteerUnitGroup[3][lv_player], EventUnit());
        libCOMM_gf_CM_Fenix_UpdateNetworkValues(3, lv_player);
        libCOMM_gf_CM_Fenix_UpdateFenixChampionShellCountValues(3, lv_player);
        lv_avengingprotocolindex = 3;
        lv_avengingprotocolstacks = 3;
    }
    else if (autoA2781073_val == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[4]) {
        UnitGroupRemove(libCOMM_gv_cM_Fenix_ChampionVolunteerUnitGroup[4][lv_player], EventUnit());
        libCOMM_gf_CM_Fenix_UpdateNetworkValues(4, lv_player);
        libCOMM_gf_CM_Fenix_UpdateFenixChampionShellCountValues(4, lv_player);
        lv_avengingprotocolindex = 4;
        lv_avengingprotocolstacks = 4;
    }
    else if (autoA2781073_val == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[5]) {
        UnitGroupRemove(libCOMM_gv_cM_Fenix_ChampionVolunteerUnitGroup[5][lv_player], EventUnit());
        libCOMM_gf_CM_Fenix_UpdateNetworkValues(5, lv_player);
        libCOMM_gf_CM_Fenix_UpdateFenixChampionShellCountValues(5, lv_player);
        lv_avengingprotocolindex = 5;
        lv_avengingprotocolstacks = 6;
    }
    else if (autoA2781073_val == libCOMM_gv_cM_Fenix_ChampionUnitReplaceType[6]) {
        UnitGroupRemove(libCOMM_gv_cM_Fenix_ChampionVolunteerUnitGroup[6][lv_player], EventUnit());
        libCOMM_gf_CM_Fenix_UpdateNetworkValues(6, lv_player);
        libCOMM_gf_CM_Fenix_UpdateFenixChampionShellCountValues(6, lv_player);
        lv_avengingprotocolindex = 6;
        lv_avengingprotocolstacks = 6;
    }
    else {
    }
    if ((lv_avengingprotocolindex > 0) && (lv_avengingprotocolstacks > 0) && (UnitHasBehavior2(EventUnit(), "FenixSuppressAvengingProtocol") == false)) {
        libCOMM_gf_CM_Fenix_AvengingProtocol(lv_avengingprotocolindex, lv_player, lv_avengingprotocolstacks);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_NetworkedUnitDies_Init () {
    libCOMM_gt_CM_Fenix_NetworkedUnitDies = TriggerCreate("libCOMM_gt_CM_Fenix_NetworkedUnitDies_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_NetworkedUnitDies, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Fenix_NetworkedUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ProbiusSwap
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ProbiusSwap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Probe"))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionKaldalisZealot", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionClolarionCarrier", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionMojoScout", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionTalisAdept", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionTaldarinImmortal", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionWarbringerColossus", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(UnitGetOwner(libCOMM_gv_cM_Fenix_ChampionStructure[lv_player]), "FenixChampionSwapLaunch", UnitGetPosition(libCOMM_gv_cM_Fenix_ChampionStructure[UnitGetOwner(EventUnitCreatedUnit())]));
    PlayerCreateEffectPoint(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionSwapImpactSet", UnitGetPosition(EventUnitCreatedUnit()));
    UnitBehaviorAdd(EventUnitCreatedUnit(), "FenixProbiusProbe", EventUnitCreatedUnit(), 1);
    UnitBehaviorAdd(EventUnitCreatedUnit(), "FenixChampionMorphStun", EventUnitCreatedUnit(), 1);
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "Create FenixProbiusProbe");
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ProbiusSwap_Init () {
    libCOMM_gt_CM_Fenix_ProbiusSwap = TriggerCreate("libCOMM_gt_CM_Fenix_ProbiusSwap_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_ProbiusSwap, false);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Fenix_ProbiusSwap, null, "NexusTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_AvengingProtocol_BuffExpires
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_AvengingProtocol_BuffExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    string autoDB4A0296_val;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libCOMI_gf_GetPlayerCommanderGameLink(EventPlayer()) == "Fenix")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDB4A0296_val = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    if (autoDB4A0296_val == libCOMM_gv_cM_Fenix_ChampionUnitType[1]) {
        libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[1] = 0;
    }
    else if (autoDB4A0296_val == libCOMM_gv_cM_Fenix_ChampionUnitType[2]) {
        libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[2] = 0;
    }
    else if (autoDB4A0296_val == libCOMM_gv_cM_Fenix_ChampionUnitType[3]) {
        libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[3] = 0;
    }
    else if (autoDB4A0296_val == libCOMM_gv_cM_Fenix_ChampionUnitType[4]) {
        libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[4] = 0;
    }
    else if (autoDB4A0296_val == libCOMM_gv_cM_Fenix_ChampionUnitType[5]) {
        libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[5] = 0;
    }
    else if (autoDB4A0296_val == libCOMM_gv_cM_Fenix_ChampionUnitType[6]) {
        libCOMM_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[6] = 0;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_AvengingProtocol_BuffExpires_Init () {
    libCOMM_gt_CM_Fenix_AvengingProtocol_BuffExpires = TriggerCreate("libCOMM_gt_CM_Fenix_AvengingProtocol_BuffExpires_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_AvengingProtocol_BuffExpires, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Fenix_AvengingProtocol_BuffExpires, c_playerAny, "FenixChampionAvengingProtocolExpireDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ConclaiveTrainStart
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ConclaiveTrainStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "FenixAltarOfPsiStorms"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COMM_FE3FB5C6", "UpgradeName", StringExternal((libNtve_gf_TriggeringProgressUpgrade())));
    ActorSendAsText(libNtve_gf_MainActorofUnit(EventUnit()), TextExpressionAssemble("Param/Expression/lib_COMM_FE3FB5C6"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ConclaiveTrainStart_Init () {
    libCOMM_gt_CM_Fenix_ConclaiveTrainStart = TriggerCreate("libCOMM_gt_CM_Fenix_ConclaiveTrainStart_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_ConclaiveTrainStart, false);
    TriggerAddEventUnitResearchProgress(libCOMM_gt_CM_Fenix_ConclaiveTrainStart, null, c_unitProgressStageStart);
    TriggerAddEventUnitResearchProgress(libCOMM_gt_CM_Fenix_ConclaiveTrainStart, null, c_unitProgressStageResume);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ConclaiveTrainStop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ConclaiveTrainStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "FenixAltarOfPsiStorms"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COMM_187A365A", "UpgradeName", StringExternal((libNtve_gf_TriggeringProgressUpgrade())));
    ActorSendAsText(libNtve_gf_MainActorofUnit(EventUnit()), TextExpressionAssemble("Param/Expression/lib_COMM_187A365A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ConclaiveTrainStop_Init () {
    libCOMM_gt_CM_Fenix_ConclaiveTrainStop = TriggerCreate("libCOMM_gt_CM_Fenix_ConclaiveTrainStop_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_ConclaiveTrainStop, false);
    TriggerAddEventUnitResearchProgress(libCOMM_gt_CM_Fenix_ConclaiveTrainStop, null, c_unitProgressStagePause);
    TriggerAddEventUnitResearchProgress(libCOMM_gt_CM_Fenix_ConclaiveTrainStop, null, c_unitProgressStageCancel);
    TriggerAddEventUnitResearchProgress(libCOMM_gt_CM_Fenix_ConclaiveTrainStop, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ChampionAugmentAbilitySoundTrigger
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitTargetUnit())) > 8.0)) {
        libNtve_gf_SendActorMessageToUnit(libCOMM_gv_cM_Fenix_ChampionUnit[3][EventPlayer()], "Signal TargetLongRange");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(libCOMM_gv_cM_Fenix_ChampionUnit[3][EventPlayer()], "Signal TargetShortRange");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger_Init () {
    libCOMM_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger = TriggerCreate("libCOMM_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger, null, AbilityCommand("FenixMojoMissiles", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Charged Buster On Cost
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ChargedBusterOnCost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogAbil, "ChargedBuster", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogAbil, "FenixDragoonAirBomb", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), "0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ChargedBusterOnCost_Init () {
    libCOMM_gt_CM_Fenix_ChargedBusterOnCost = TriggerCreate("libCOMM_gt_CM_Fenix_ChargedBusterOnCost_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_ChargedBusterOnCost, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Fenix_ChargedBusterOnCost, null, "ChargeBuster", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Charged Buster Off Cost
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_ChargedBusterOffCost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "ChargedBuster", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), 1.0, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "FenixDragoonAirBomb", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), 1.0, c_upgradeOperationMultiply);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_ChargedBusterOffCost_Init () {
    libCOMM_gt_CM_Fenix_ChargedBusterOffCost = TriggerCreate("libCOMM_gt_CM_Fenix_ChargedBusterOffCost_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_ChargedBusterOffCost, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Fenix_ChargedBusterOffCost, null, "ChargeBuster", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_FenixAutocastSettingsOn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_FenixAutocastSettingsOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd autoD05F731B_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD05F731B_val = EventUnitAbility();
    if (autoD05F731B_val == AbilityCommand("FenixSoAWhirlwind", 0)) {
        libCOMM_gv_fenixWhirlwindAutocast[EventPlayer()] = true;
    }
    else if (autoD05F731B_val == AbilityCommand("VoidShieldCapacitor", 0)) {
        libCOMM_gv_fenixShieldCapacitorAutocast[EventPlayer()] = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_FenixAutocastSettingsOn_Init () {
    libCOMM_gt_CM_FenixAutocastSettingsOn = TriggerCreate("libCOMM_gt_CM_FenixAutocastSettingsOn_Func");
    TriggerEnable(libCOMM_gt_CM_FenixAutocastSettingsOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMM_gt_CM_FenixAutocastSettingsOn, null, AbilityCommand("FenixSoAWhirlwind", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMM_gt_CM_FenixAutocastSettingsOn, null, AbilityCommand("VoidShieldCapacitor", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_FenixAutocastSettingsOff
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_FenixAutocastSettingsOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd auto1FFCFCD8_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1FFCFCD8_val = EventUnitAbility();
    if (auto1FFCFCD8_val == AbilityCommand("FenixSoAWhirlwind", 0)) {
        libCOMM_gv_fenixWhirlwindAutocast[EventPlayer()] = false;
    }
    else if (auto1FFCFCD8_val == AbilityCommand("VoidShieldCapacitor", 0)) {
        libCOMM_gv_fenixShieldCapacitorAutocast[EventPlayer()] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_FenixAutocastSettingsOff_Init () {
    libCOMM_gt_CM_FenixAutocastSettingsOff = TriggerCreate("libCOMM_gt_CM_FenixAutocastSettingsOff_Func");
    TriggerEnable(libCOMM_gt_CM_FenixAutocastSettingsOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMM_gt_CM_FenixAutocastSettingsOff, null, AbilityCommand("FenixSoAWhirlwind", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMM_gt_CM_FenixAutocastSettingsOff, null, AbilityCommand("VoidShieldCapacitor", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_FenixAutocastSuitSummonStateAdjust
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_FenixAutocastSuitSummonStateAdjust_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto0BF1B94A_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0BF1B94A_val = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    if (auto0BF1B94A_val == "FenixCoop") {
        if ((libCOMM_gv_fenixWhirlwindAutocast[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            Wait(0.0625, c_timeGame);
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FenixSoAWhirlwindSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

        if ((libCOMM_gv_fenixShieldCapacitorAutocast[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            Wait(0.0625, c_timeGame);
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FenixVoidShieldCapacitorSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_FenixAutocastSuitSummonStateAdjust_Init () {
    libCOMM_gt_CM_FenixAutocastSuitSummonStateAdjust = TriggerCreate("libCOMM_gt_CM_FenixAutocastSuitSummonStateAdjust_Func");
    TriggerEnable(libCOMM_gt_CM_FenixAutocastSuitSummonStateAdjust, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_FenixAutocastSuitSummonStateAdjust, c_playerAny, "SOASummonFenixWarpInOutAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementFenixChampionAllExist
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AchievementFenixChampionAllExist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto10896D1B_ae = libCOMM_gv_cMC_Fenix_ChampionCount;
    const int auto10896D1B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto10896D1B_ai >= 0 && lv_i <= auto10896D1B_ae) || (auto10896D1B_ai < 0 && lv_i >= auto10896D1B_ae) ) ; lv_i += auto10896D1B_ai ) {
        if ((UnitIsAlive(libCOMM_gv_cM_Fenix_ChampionUnit[lv_i][EventPlayer()]) == false)) {
            return true;
        }

    }
    AchievementAward(EventPlayer(), "CommanderFenixAllChampions");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AchievementFenixChampionAllExist_Init () {
    libCOMM_gt_CM_AchievementFenixChampionAllExist = TriggerCreate("libCOMM_gt_CM_AchievementFenixChampionAllExist_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_AchievementFenixChampionAllExist, c_playerAny, "FenixChampionSwapImpactUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_SentryNullShield
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Fenix_SentryNullShield_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0), "FenixSentryNullShieldReflect", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - (EventUnitDamageAbsorbed() / 2.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Fenix_SentryNullShield_Init () {
    libCOMM_gt_CM_Fenix_SentryNullShield = TriggerCreate("libCOMM_gt_CM_Fenix_SentryNullShield_Func");
    TriggerEnable(libCOMM_gt_CM_Fenix_SentryNullShield, false);
    TriggerAddEventUnitDamageAbsorbed(libCOMM_gt_CM_Fenix_SentryNullShield, null, "SentryFenixNullShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderHanHorner
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderHanHorner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoEDDC3B66_g;
    int autoEDDC3B66_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Horner");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreHornerScrapPickup, true);
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_PlatformCreated, true);
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_PlatformDies, true);
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_BomberLaunched, true);
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_BomberReturned, true);
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_BomberRebuilt, true);
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected, true);
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_Individual_TargetSelected, true);
    TriggerEnable(libCOMM_gt_CM_Horner_SupplyAchievement, true);
    TriggerEnable(libCOMM_gt_CM_Horner_StarportCreateTechLabOrder, true);
    TriggerEnable(libCOMM_gt_CM_Horner_StarportCreateTechLabStart, true);
    TriggerEnable(libCOMM_gt_CM_Horner_StarportCreateTechLabFinish, true);
    TriggerEnable(libCOMM_gt_CM_Horner_AirFleet_Activated, true);
    TriggerEnable(libCOMM_gt_CM_Horner_DeathRattleHellionFearApply, true);
    TriggerExecute(libCOMM_gt_NovaUnitNames_GenerateNameList, false, false);
    TriggerEnable(libCOMM_gt_NovaUnitNames_Assign, true);
    TriggerEnable(libCOMM_gt_NovaUnitNames_KillCountUpdate, true);
    TriggerEnable(libCOMM_gt_CM_Horner_DeathRattle_Reaper, true);
    TriggerEnable(libCOMM_gt_CM_Horner_DeathRattle_WidowMine, true);
    TriggerEnable(libCOMM_gt_CM_Horner_DeathRattle_Hellion, true);
    TriggerEnable(libCOMM_gt_CM_Horner_DeathRattle_Hellbat, true);
    TriggerEnable(libCOMM_gt_CM_Horner_MTO_Upgrade, true);
    TriggerEnable(libCOMM_gt_CM_Horner_DoubleSupplyStun, true);
    TriggerEnable(libCOMM_gt_CM_Horner_StarportRecreateTechLabOrder, true);
    TriggerEnable(libCOMM_gt_CM_Horner_StarportRecreate, true);
    TriggerEnable(libCOMM_gt_CM_Horner_StarportFinishCreateTechLabOrder, true);
    TriggerEnable(libCOMM_gt_CM_Horner_HangerFinish, true);
    TriggerEnable(libCOMM_gt_CM_Horner_VikingTacticalJumpMorph, true);
    TriggerEnable(libCOMM_gt_CM_Horner_MagMines, true);
    TriggerEnable(libCOMM_gt_CC_ScoreHornerMagMineDmg, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionHornerFleet, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionHornerStation, true);
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionHornerBomberBuild, true);
    autoEDDC3B66_g = lv_players;
    autoEDDC3B66_var = -1;
    while (true) {
        autoEDDC3B66_var = PlayerGroupNextPlayer(autoEDDC3B66_g, autoEDDC3B66_var);
        if (autoEDDC3B66_var < 0) { break; }
        libCOMM_gf_CM_AbilityTransmissionHornerFleetReminderActionVer(autoEDDC3B66_var, SoundLink("HornerHan_CallFleet", -1), "Abil/HornerAirFleetActivate", libCOMI_gv_yY_GPCasterUnit[autoEDDC3B66_var], "HornerAirFleetActivate");
        libCOMI_gf_CM_CommanderVOAbilityWatch(autoEDDC3B66_var, SoundLink("HornerHan_Spacestation", -1), "Abil/HHSummonMercenarySpaceStation", null, null);
        libCOMM_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer(autoEDDC3B66_var);
        libCOMM_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer(autoEDDC3B66_var);
        libCOMM_gv_cM_HornerVOHornerPlayer = autoEDDC3B66_var;
        libCOMI_gf_CreateACCaster(autoEDDC3B66_var, "CoopCasterHorner");
        libCOMI_gf_CU_GPInitCommonCaster(autoEDDC3B66_var, "CoopCasterHorner", "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate", 4, "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", "FourButtons");
        libCOMI_gf_CreateACStructure(autoEDDC3B66_var, "HHStarport");
        libNtve_gf_SetUpgradeLevelForPlayer(autoEDDC3B66_var, "HHMercStarportLimitCount", CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HHMercStarportLimitDummy", "Amount", autoEDDC3B66_var));
        if ((TechTreeUpgradeCount(autoEDDC3B66_var, "HHScrapPickup", c_techCountQueuedOrBetter) == 1)) {
            TriggerEnable(libCOMM_gt_CM_Horner_ScrapDrop, true);
            TriggerEnable(libCOMM_gt_CM_Horner_ScrapPickup, true);
            TriggerEnable(libCOMM_gt_CM_Horner_ScrapDropForSwannWreckage, true);
            TriggerEnable(libCOMM_gt_BanelingScourgeDeathrattleScrapDeaths, true);
        }

        if (((libCOMI_gf_DifficultyLevelForPlayerCoop(autoEDDC3B66_var) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(autoEDDC3B66_var) == 4) || (libCOMI_gf_CC_CommanderLevel(autoEDDC3B66_var, libCOMI_gf_ActiveCommanderForPlayer(autoEDDC3B66_var)) <= 2))) {
            libCOMI_gv_cM_GPRemindersOn[autoEDDC3B66_var] = true;
            TriggerEnable(libCOMM_gt_CM_GPReminderAbilityUsed, true);
            libCOMM_gf_CM_GPReminderHorner(autoEDDC3B66_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderHanHorner_Init () {
    libCOMM_gt_DUT_CommanderHanHorner = TriggerCreate("libCOMM_gt_DUT_CommanderHanHorner_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderHanHorner, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionHornerFleet
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionHornerFleet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("HornerHan_CallFleetUsed", -1), PlayerGroupAll());
    libCOMM_gv_cM_HornerVOFleetOffCooldown = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionHornerFleet_Init () {
    libCOMM_gt_CM_AbilityTransmissionHornerFleet = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionHornerFleet_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionHornerFleet, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionHornerFleet, null, AbilityCommand("HornerAirFleetExecute", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionHornerStation
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionHornerStation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("HornerHan_SpacestationUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionHornerStation_Init () {
    libCOMM_gt_CM_AbilityTransmissionHornerStation = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionHornerStation_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionHornerStation, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionHornerStation, null, AbilityCommand("HHSummonMercenarySpaceStation", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionHornerBomberBuild
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_UnitTransmissionHornerBomberBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "HHBomberPlatform"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_HornerVOBomberBuilt = true;
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionHornerBomberUse, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionHornerBomberReminder, true);
    TimerStart(libCOMM_gv_cM_HornerVOBomberReminderTimer, libCOMM_gv_cMC_HornerVOBomberReminderDelay, false, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_UnitTransmissionHornerBomberBuild_Init () {
    libCOMM_gt_CM_UnitTransmissionHornerBomberBuild = TriggerCreate("libCOMM_gt_CM_UnitTransmissionHornerBomberBuild_Func");
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionHornerBomberBuild, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_UnitTransmissionHornerBomberBuild, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionHornerBomberUse
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionHornerBomberUse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCOMM_gv_cM_HornerVOBomberReminderTimer, libCOMM_gv_cMC_HornerVOBomberReminderDelay, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionHornerBomberUse_Init () {
    libCOMM_gt_CM_AbilityTransmissionHornerBomberUse = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionHornerBomberUse_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionHornerBomberUse, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionHornerBomberUse, null, AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionHornerBomberUse, null, AbilityCommand("HHBomberPlatformAreaBombOrder", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionHornerBomberReminder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionHornerBomberReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[libCOMM_gv_cM_HornerVOHornerPlayer], AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), c_unitAbilChargeCountLeft) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(libCOMM_gv_cM_HornerVOHornerPlayer), SoundLink("HornerHan_BomberPlatformReady", -1), PlayerGroupSingle(libCOMM_gv_cM_HornerVOHornerPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionHornerBomberReminder_Init () {
    libCOMM_gt_CM_AbilityTransmissionHornerBomberReminder = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionHornerBomberReminder_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionHornerBomberReminder, false);
    TriggerAddEventTimer(libCOMM_gt_CM_AbilityTransmissionHornerBomberReminder, libCOMM_gv_cM_HornerVOBomberReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreHornerMagMineDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreHornerMagMineDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreHornerMagMineDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "HornerMagMineDamage", FixedToInt(libCOMM_gv_cC_ScoreHornerMagMineDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreHornerMagMineDmg_Init () {
    libCOMM_gt_CC_ScoreHornerMagMineDmg = TriggerCreate("libCOMM_gt_CC_ScoreHornerMagMineDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreHornerMagMineDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreHornerMagMineDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "HHMagneticMineWeaponSearchDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreHornerScrapPickup
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreHornerScrapPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minerals;
    int lv_vespene;
    int lv_totalResources;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_minerals = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 62));
    lv_vespene = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));
    lv_totalResources = (lv_minerals + lv_vespene);
    libCOMM_gv_cC_ScoreHornerScrapResources[EventPlayer()] += lv_totalResources;
    PlayerScoreValueSetFromInt(EventPlayer(), "HornerScrapCollected", FixedToInt(libCOMM_gv_cC_ScoreHornerScrapResources[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreHornerScrapPickup_Init () {
    libCOMM_gt_CC_ScoreHornerScrapPickup = TriggerCreate("libCOMM_gt_CC_ScoreHornerScrapPickup_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreHornerScrapPickup, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CC_ScoreHornerScrapPickup, c_playerAny, "HHScrapPickupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_AirFleet_Activated
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_AirFleet_Activated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMM_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "HornerAirFleetActivate";
    libCOMM_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("HornerAirFleetExecute", 0);
    libCOMM_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/HornerAirFleetActivate";
    libCOMM_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "HornerAirFleetActivate";
    libCOMM_gv_cM_SoATargetingModel[lv_casterPlayer] = "HornerAirFleetTargetingModel";
    libCOMM_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("HornerAirFleetTargetingDummy", 0), UnitGetPosition(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer]));
    libCOMM_gv_cM_SoATargetingUnitType[lv_casterPlayer] = "HornerAirFleetTargeter";
    libCOMM_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 1;
    libCOMM_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMM_D8EA2A45");
    libCOMM_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMM_88664EF1");
    libCOMM_gv_cM_HornerAirFleet_Cost[lv_casterPlayer] = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, "HornerAirFleetActivate", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", lv_casterPlayer));
    libCOMM_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_AirFleet_Activated_Init () {
    libCOMM_gt_CM_Horner_AirFleet_Activated = TriggerCreate("libCOMM_gt_CM_Horner_AirFleet_Activated_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_AirFleet_Activated, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Horner_AirFleet_Activated, null, "HornerAirFleetActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_DeathRattleHellionFearApply
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_DeathRattleHellionFearApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scaredUnit;
    point lv_attackLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaredUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackLocation = PointWithOffsetPolar(UnitGetPosition(lv_scaredUnit), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_scaredUnit), -5.0, lv_attackLocation)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_scaredUnit, "HHHellionTankFear") == true) && (UnitIsAlive(lv_scaredUnit) == true)) {
        UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_scaredUnit), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_scaredUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_DeathRattleHellionFearApply_Init () {
    libCOMM_gt_CM_Horner_DeathRattleHellionFearApply = TriggerCreate("libCOMM_gt_CM_Horner_DeathRattleHellionFearApply_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_DeathRattleHellionFearApply, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Horner_DeathRattleHellionFearApply, null, "HHHellionTankFear", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_DeathRattle_Reaper
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_DeathRattle_Reaper_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_maxRange;
    unit lv_reaper;
    unit lv_target;
    fixed lv_distance;
    fixed lv_range;
    point lv_targetpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxRange = 6.5;
    lv_reaper = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_distance = DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_range = MinF(lv_distance, lv_maxRange);
    lv_targetpoint = libNtve_gf_PointOffsetTowardsPoint(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), lv_range, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_reaper) == "HHReaper") || (UnitGetType(lv_reaper) == "HHReaperFlying")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "MasteryHornerBetterDeathRattle", c_techCountQueuedOrBetter) >= 1) && (RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerBetterDeathRattleDisplayDummy", "Amount", EventPlayer())))) {
        UnitCreateEffectPoint(lv_reaper, "HHD8ClusterDeathSetUpgrade", lv_targetpoint);
    }
    else {
        UnitCreateEffectPoint(lv_reaper, "HHD8ClusterDeathSet", lv_targetpoint);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_DeathRattle_Reaper_Init () {
    libCOMM_gt_CM_Horner_DeathRattle_Reaper = TriggerCreate("libCOMM_gt_CM_Horner_DeathRattle_Reaper_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_DeathRattle_Reaper, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Horner_DeathRattle_Reaper, c_playerAny, "HHD8ClusterDeathSetTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_DeathRattle_WidowMine
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_DeathRattle_WidowMine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == "HHWidowMine") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == "HHWidowMineBurrowed")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Horner", libCOMI_gf_CC_PlayersOfCommander("Horner")), "MasteryHornerBetterDeathRattle", c_techCountQueuedOrBetter) >= 1) && (RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerBetterDeathRattleDisplayDummy", "Amount", libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Horner", libCOMI_gf_CC_PlayersOfCommander("Horner")))))) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHWidowMineBlossomIssueOrderSetUpgrade", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    else {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHWidowMineBlossomIssueOrderSet", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_DeathRattle_WidowMine_Init () {
    libCOMM_gt_CM_Horner_DeathRattle_WidowMine = TriggerCreate("libCOMM_gt_CM_Horner_DeathRattle_WidowMine_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_DeathRattle_WidowMine, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Horner_DeathRattle_WidowMine, libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Horner", libCOMI_gf_CC_PlayersOfCommander("Horner")), "HHWidowMineBlossomIssueOrderSetTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_DeathRattle_Hellion
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_DeathRattle_Hellion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == "HHHellion")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Horner", libCOMI_gf_CC_PlayersOfCommander("Horner")), "MasteryHornerBetterDeathRattle", c_techCountQueuedOrBetter) >= 1) && (RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerBetterDeathRattleDisplayDummy", "Amount", libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Horner", libCOMI_gf_CC_PlayersOfCommander("Horner")))))) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHHellionStimDeathSetUpgrade", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    else {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHHellionStimDeathSet", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_DeathRattle_Hellion_Init () {
    libCOMM_gt_CM_Horner_DeathRattle_Hellion = TriggerCreate("libCOMM_gt_CM_Horner_DeathRattle_Hellion_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_DeathRattle_Hellion, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Horner_DeathRattle_Hellion, libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Horner", libCOMI_gf_CC_PlayersOfCommander("Horner")), "HHHellionStimDeathSetTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_DeathRattle_Hellbat
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_DeathRattle_Hellbat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == "HHHellionTank")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Horner", libCOMI_gf_CC_PlayersOfCommander("Horner")), "MasteryHornerBetterDeathRattle", c_techCountQueuedOrBetter) >= 1) && (RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerBetterDeathRattleDisplayDummy", "Amount", libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Horner", libCOMI_gf_CC_PlayersOfCommander("Horner")))))) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHHellionTankDeathFearSetUpgrade", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    else {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHHellionTankDeathFearSet", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_DeathRattle_Hellbat_Init () {
    libCOMM_gt_CM_Horner_DeathRattle_Hellbat = TriggerCreate("libCOMM_gt_CM_Horner_DeathRattle_Hellbat_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_DeathRattle_Hellbat, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Horner_DeathRattle_Hellbat, libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Horner", libCOMI_gf_CC_PlayersOfCommander("Horner")), "HHHellionTankDeathFearSetTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_DoubleSupplyStun
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_DoubleSupplyStun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sCV;
    unit lv_supplyDepot;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sCV = EventUnit();
    lv_supplyDepot = EventUnitProgressUnit();
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventUnitProgressUnit())) == "Horner"))) {
            return false;
        }

        if (!((UnitGetType(lv_supplyDepot) == "SupplyDepot"))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "HHDoubleSupply", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_supplyDepot, "HHSupplyDepotInitialStun", lv_supplyDepot, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_DoubleSupplyStun_Init () {
    libCOMM_gt_CM_Horner_DoubleSupplyStun = TriggerCreate("libCOMM_gt_CM_Horner_DoubleSupplyStun_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_DoubleSupplyStun, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_Horner_DoubleSupplyStun, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_MTO_Upgrade
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_MTO_Upgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_upgrade;
    int lv_delta;
    string lv_inInstance;
    string lv_unitType;
    string lv_skin;

    // Automatic Variable Declarations
    string auto4A70990B_userType;
    int auto4A70990B_i;
    string auto23E39DF8_userType;
    string auto23E39DF8_instance;
    string auto23E39DF8_field;
    int auto23E39DF8_i;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_upgrade = EventUpgradeName();
    lv_delta = EventUpgradeLevelDelta();

    // Conditions
    if (testConds) {
        if (!((lv_delta > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4A70990B_userType = "XAC_TheHornersMiraTakeOver";
    auto4A70990B_i = 1;
    for ( ; auto4A70990B_i <= UserDataInstanceCount(auto4A70990B_userType) ; auto4A70990B_i += 1 ) {
        lv_inInstance = UserDataInstance(auto4A70990B_userType, auto4A70990B_i);
        if ((lv_upgrade == UserDataGetGameLink("XAC_TheHornersMiraTakeOver", lv_inInstance, "Upgrade", 1))) {
            lv_skin = UserDataGetGameLink("XAC_TheHornersMiraTakeOver", lv_inInstance, "Skin", 1);
            if ((DataTableGetBool(true, ("CM_MTO_SkinApplied_" + (lv_skin) + "_" + IntToString(lv_player))) == false)) {
                libCOMI_gf_PlayerApplySkinSignal(lv_player, lv_skin, true, "Signal Mira");
                auto23E39DF8_userType = "XAC_TheHornersMiraTakeOver";
                auto23E39DF8_instance = lv_inInstance;
                auto23E39DF8_field = "Affected Units";
                auto23E39DF8_i = 1;
                for ( ; auto23E39DF8_i <= UserDataFieldValueCount(auto23E39DF8_userType,auto23E39DF8_field) ; auto23E39DF8_i += 1 ) {
                    lv_unitType = UserDataGetGameLink(auto23E39DF8_userType,auto23E39DF8_instance,auto23E39DF8_field, auto23E39DF8_i);
                    if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_unitType) == true)) {
                        CatalogFieldValueSet(c_gameCatalogUnit, lv_unitType, "TacticalAIChannel", lv_player, "MiraTakeOver");
                    }

                }
                DataTableSetBool(true, ("CM_MTO_SkinApplied_" + (lv_skin) + "_" + IntToString(lv_player)), true);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_MTO_Upgrade_Init () {
    libCOMM_gt_CM_Horner_MTO_Upgrade = TriggerCreate("libCOMM_gt_CM_Horner_MTO_Upgrade_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_MTO_Upgrade, false);
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_Horner_MTO_Upgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_AssaultGalleonHangerFinish
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_HangerFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_progressUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_progressUnit = EventUnitProgressUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUnitType() == "HHMercStarportCargo")) {
        UnitMagazineArm(lv_unit, AbilityCommand("HHMercStarportHangar", 0), 6);
        UnitBehaviorAdd(lv_unit, "HHMercStarportCargoInstalled", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "HHArmyOOCRegenSpeed", lv_unit, 1);
        Wait(0.0625, c_timeGame);
        UnitKill(lv_progressUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_HangerFinish_Init () {
    libCOMM_gt_CM_Horner_HangerFinish = TriggerCreate("libCOMM_gt_CM_Horner_HangerFinish_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_HangerFinish, false);
    TriggerAddEventUnitArmMagazineProgress(libCOMM_gt_CM_Horner_HangerFinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_ScrapDrop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_ScrapDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingUnitMineralCost;
    int lv_dyingUnitVespeneCost;
    int lv_dyingUnitPlayer;
    int lv_scrapPlayerDivisor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scrapPlayerDivisor = 10;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerIsCommander(UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeTimeout) == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoScrapDrop") != true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0)) != true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dyingUnitPlayer = UnitGetOwner(EventUnit());
    if ((lv_dyingUnitPlayer == c_playerAny)) {
        return true;
    }

    if ((libCOMI_gf_GetPlayerCommanderGameLink(lv_dyingUnitPlayer) == "Horner")) {
        lv_scrapPlayerDivisor = 5;
    }

    lv_dyingUnitMineralCost = (FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(0) + "]", EventPlayer()))) / lv_scrapPlayerDivisor);
    lv_dyingUnitVespeneCost = (FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(1) + "]", EventPlayer()))) / lv_scrapPlayerDivisor);
    if ((UnitHasBehavior2(EventUnit(), "TychusHeroCount") == true)) {
        lv_dyingUnitMineralCost = (250 / lv_scrapPlayerDivisor);
        lv_dyingUnitVespeneCost = 0;
    }

    if ((lv_dyingUnitMineralCost > 0)) {
        if ((RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerDoubleSalvageChanceDisplayDummy", "Amount", libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Horner", libCOMI_gf_CC_PlayersOfCommander("Horner")))))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, PointWithOffset(UnitGetPosition(EventUnit()), -0.25, 0.0));
            libCOMM_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, PointWithOffset(UnitGetPosition(EventUnit()), 0.25, 0.0));
            libCOMM_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, UnitGetPosition(EventUnit()));
            libCOMM_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_ScrapDrop_Init () {
    libCOMM_gt_CM_Horner_ScrapDrop = TriggerCreate("libCOMM_gt_CM_Horner_ScrapDrop_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_ScrapDrop, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Horner_ScrapDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_ScrapDropForSwannWreckage
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_ScrapDropForSwannWreckage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingUnitMineralCost;
    int lv_dyingUnitVespeneCost;
    int lv_dyingUnitPlayer;
    int lv_scrapPlayerDivisor;
    int lv_hornerCommander;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scrapPlayerDivisor = 10;
    lv_hornerCommander = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Horner", libCOMI_gf_GetAlliedCommandersPlayersCopy());

    // Conditions
    if (testConds) {
        if (!((lv_hornerCommander != c_playerAny))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dyingUnitPlayer = UnitGetOwner(EventUnit());
    if ((lv_dyingUnitPlayer == c_playerAny)) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "SiegeTankWreckage")) {
        lv_dyingUnitMineralCost = (UnitTypeGetCost("SiegeTank", c_unitCostMinerals) / lv_scrapPlayerDivisor);
        lv_dyingUnitVespeneCost = (UnitTypeGetCost("SiegeTank", c_unitCostVespene) / lv_scrapPlayerDivisor);
    }

    if ((UnitGetType(EventUnit()) == "ThorWreckageSwann")) {
        lv_dyingUnitMineralCost = (UnitTypeGetCost("Thor", c_unitCostMinerals) / lv_scrapPlayerDivisor);
        lv_dyingUnitVespeneCost = (UnitTypeGetCost("Thor", c_unitCostVespene) / lv_scrapPlayerDivisor);
    }

    if ((lv_dyingUnitMineralCost > 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, UnitGetPosition(EventUnit()));
        libCOMM_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_ScrapDropForSwannWreckage_Init () {
    libCOMM_gt_CM_Horner_ScrapDropForSwannWreckage = TriggerCreate("libCOMM_gt_CM_Horner_ScrapDropForSwannWreckage_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_ScrapDropForSwannWreckage, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Horner_ScrapDropForSwannWreckage, null, AbilityCommand("SiegeTankWreckage", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Horner_ScrapDropForSwannWreckage, null, AbilityCommand("ThorWreckageSwann", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_ScrapPickup
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_ScrapPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minerals;
    int lv_vespene;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_minerals = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 62));
    lv_vespene = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), c_playerPropMinerals, c_playerPropOperAdd, lv_minerals);
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), c_playerPropVespene, c_playerPropOperAdd, lv_vespene);
    if ((lv_minerals > 0) && (lv_vespene > 0)) {
        TextExpressionSetToken("Param/Expression/lib_COMM_EACC9E30", "Minerals", IntToText(lv_minerals));
        TextExpressionSetToken("Param/Expression/lib_COMM_EACC9E30", "Vespene", IntToText(lv_vespene));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMM_EACC9E30"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMM_2A9499FE", "Minerals", IntToText(lv_minerals));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMM_2A9499FE"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    }
    Wait(1.5, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_ScrapPickup_Init () {
    libCOMM_gt_CM_Horner_ScrapPickup = TriggerCreate("libCOMM_gt_CM_Horner_ScrapPickup_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_ScrapPickup, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Horner_ScrapPickup, c_playerAny, "HHScrapPickupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_SupplyAchievement
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_SupplyAchievement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventPlayer()) == "Horner"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_HornerStatUpdate(lv_player);
    if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player) == 4)) && ((libCOMM_gv_miraFactionSupply[lv_player] >= 80.0) && (libCOMM_gv_mattFactionSupply[lv_player] >= 40.0))) {
        AchievementAward(lv_player, "CommanderHornerSupply");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_SupplyAchievement_Init () {
    libCOMM_gt_CM_Horner_SupplyAchievement = TriggerCreate("libCOMM_gt_CM_Horner_SupplyAchievement_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_SupplyAchievement, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Horner_SupplyAchievement, c_playerAny, "TheHornersStatUpdate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_StarportCreateTechLabOrder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_StarportCreateTechLabOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;
    int lv_player;
    point lv_point;
    int lv_x;
    int lv_y;
    point lv_pointGrid;
    fixed lv_hHStarportTrainRavenCooldown;
    fixed lv_hHStarportTrainWraithCooldown;
    fixed lv_hHStarportTrainVikingCooldown;
    fixed lv_hHStarportTrainBattlecruiserCooldown;
    fixed lv_hHStarportTrainRavenCharges;
    fixed lv_hHStarportTrainWraithCharges;
    fixed lv_hHStarportTrainVikingCharges;
    fixed lv_hHStarportTrainBattlecruiserCharges;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = EventPlayer();
    lv_point = UnitGetPosition(lv_starport);
    lv_x = FixedToInt(PointGetX(lv_point));
    lv_y = FixedToInt(PointGetY(lv_point));
    lv_pointGrid = Point((lv_x + 0.5), (lv_y + 0.5));

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_starport, "Signal Entry");
    CatalogReferenceModify("Actor,StarportTechLab,HighlightTooltip", lv_player, "Unit/Name/TechLabMira", c_upgradeOperationSet);
    UnitBehaviorAddPlayer(lv_starport, "PermanentlyUncommandable", lv_player, 1);
    UnitBehaviorAddPlayer(lv_starport, "PermanentlyInvulnerable", lv_player, 1);
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, "HHStarportTrainWraith");
    lv_hHStarportTrainWraithCharges = PlayerGetChargeUsed(lv_player, "HHStarportTrainWraith");
    PlayerAddChargeUsed(lv_player, "HHStarportTrainWraith", (5.0 - lv_hHStarportTrainWraithCharges));
    lv_hHStarportTrainWraithCooldown = PlayerGetChargeRegen(lv_player, "HHStarportTrainWraith");
    PlayerAddChargeRegenRemaining(lv_player, "HHStarportTrainWraith", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHStarportTrainHorner", "InfoArray[" + IntToString(0) + "].Charge.TimeStart", lv_player) - lv_hHStarportTrainWraithCooldown));
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, "HHStarportTrainViking");
    lv_hHStarportTrainVikingCharges = PlayerGetChargeUsed(lv_player, "HHStarportTrainViking");
    PlayerAddChargeUsed(lv_player, "HHStarportTrainViking", (5.0 - lv_hHStarportTrainVikingCharges));
    lv_hHStarportTrainVikingCooldown = PlayerGetChargeRegen(lv_player, "HHStarportTrainViking");
    PlayerAddChargeRegenRemaining(lv_player, "HHStarportTrainViking", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHStarportTrainHorner", "InfoArray[" + IntToString(1) + "].Charge.TimeStart", lv_player) - lv_hHStarportTrainVikingCooldown));
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, "HHStarportTrainBattlecruiser");
    lv_hHStarportTrainBattlecruiserCharges = PlayerGetChargeUsed(lv_player, "HHStarportTrainBattlecruiser");
    PlayerAddChargeUsed(lv_player, "HHStarportTrainBattlecruiser", (5.0 - lv_hHStarportTrainBattlecruiserCharges));
    lv_hHStarportTrainBattlecruiserCooldown = PlayerGetChargeRegen(lv_player, "HHStarportTrainBattlecruiser");
    PlayerAddChargeRegenRemaining(lv_player, "HHStarportTrainBattlecruiser", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHStarportTrainHorner", "InfoArray[" + IntToString(2) + "].Charge.TimeStart", lv_player) - lv_hHStarportTrainBattlecruiserCooldown));
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, "HHStarportTrainRaven");
    lv_hHStarportTrainRavenCharges = PlayerGetChargeUsed(lv_player, "HHStarportTrainRaven");
    PlayerAddChargeUsed(lv_player, "HHStarportTrainRaven", (5.0 - lv_hHStarportTrainRavenCharges));
    lv_hHStarportTrainRavenCooldown = PlayerGetChargeRegen(lv_player, "HHStarportTrainRaven");
    PlayerAddChargeRegenRemaining(lv_player, "HHStarportTrainRaven", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHStarportTrainHorner", "InfoArray[" + IntToString(3) + "].Charge.TimeStart", lv_player) - lv_hHStarportTrainRavenCooldown));
    Wait(5.4, c_timeGame);
    UnitBehaviorRemove(lv_starport, "PermanentlyUncommandable", 1);
    UnitIssueOrder(lv_starport, OrderTargetingPoint(AbilityCommand("HHStarportAddOns", 0), UnitGetPosition(lv_starport)), c_orderQueueReplace);
    UnitBehaviorAddPlayer(lv_starport, "PermanentlyUncommandable", lv_player, 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_StarportCreateTechLabOrder_Init () {
    libCOMM_gt_CM_Horner_StarportCreateTechLabOrder = TriggerCreate("libCOMM_gt_CM_Horner_StarportCreateTechLabOrder_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_StarportCreateTechLabOrder, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Horner_StarportCreateTechLabOrder, c_playerAny, "HHStarportBirthDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_StarportCreateTechLabStart
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_StarportCreateTechLabStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventUnit();
    lv_player = UnitGetOwner(lv_starport);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_starport) == "HHStarport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_Horner_TechLab = EventUnitCreatedUnit();
    UnitBehaviorAddPlayer(libCOMM_gv_cM_Horner_TechLab, "PermanentlyUncommandable", lv_player, 1);
    libNtve_gf_MakeUnitInvulnerable(libCOMM_gv_cM_Horner_TechLab, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_StarportCreateTechLabStart_Init () {
    libCOMM_gt_CM_Horner_StarportCreateTechLabStart = TriggerCreate("libCOMM_gt_CM_Horner_StarportCreateTechLabStart_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_StarportCreateTechLabStart, false);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Horner_StarportCreateTechLabStart, null, "HHStarportAddOns", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_StarportCreateTechLabFinish
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_StarportCreateTechLabFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;
    unit lv_addon;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventUnit();
    lv_addon = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_starport);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_starport, "PermanentlyUncommandable", 1);
    UnitBehaviorRemove(lv_addon, "PermanentlyUncommandable", 1);
    UnitBehaviorRemove(lv_starport, "PermanentlyInvulnerable", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_StarportCreateTechLabFinish_Init () {
    libCOMM_gt_CM_Horner_StarportCreateTechLabFinish = TriggerCreate("libCOMM_gt_CM_Horner_StarportCreateTechLabFinish_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_StarportCreateTechLabFinish, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_Horner_StarportCreateTechLabFinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_StarportRecreateTechLabOrder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_StarportRecreateTechLabOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_starport) == "HHStarport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_starport, OrderTargetingPoint(AbilityCommand("HHStarportAddOns", 0), UnitGetPosition(lv_starport)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_StarportRecreateTechLabOrder_Init () {
    libCOMM_gt_CM_Horner_StarportRecreateTechLabOrder = TriggerCreate("libCOMM_gt_CM_Horner_StarportRecreateTechLabOrder_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_StarportRecreateTechLabOrder, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Horner_StarportRecreateTechLabOrder, null, "StarportTechLab", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_StarportRecreate
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_StarportRecreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_starport) == "HHStarport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHStarport", c_unitCreateConstruct | c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(lv_starport));
    UnitKill(libCOMM_gv_cM_Horner_TechLab);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_StarportRecreate_Init () {
    libCOMM_gt_CM_Horner_StarportRecreate = TriggerCreate("libCOMM_gt_CM_Horner_StarportRecreate_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_StarportRecreate, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Horner_StarportRecreate, c_playerAny, "HHStarportDeathDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_StarportFinishCreateTechLabOrder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_StarportFinishCreateTechLabOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_starport);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_starport) == "HHStarport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_starport, OrderTargetingPoint(AbilityCommand("HHStarportAddOns", 0), UnitGetPosition(lv_starport)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lv_starport, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_StarportFinishCreateTechLabOrder_Init () {
    libCOMM_gt_CM_Horner_StarportFinishCreateTechLabOrder = TriggerCreate("libCOMM_gt_CM_Horner_StarportFinishCreateTechLabOrder_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_StarportFinishCreateTechLabOrder, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_Horner_StarportFinishCreateTechLabOrder, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_PlatformCreated
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_BomberPlatform_PlatformCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_Horner_BomberPlatforms[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libCOMM_gv_cM_Horner_BomberPlatforms_TotalCount[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] = UnitGroupCount(libCOMM_gv_cM_Horner_BomberPlatforms[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], c_unitCountAlive);
    Wait(0.01, c_timeGame);
    libCOMM_gf_CM_Horner_BomberStatusCheck(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    PlayerAddChargeUsed(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "Abil/HHBomberPlatformAreaBombTopBarOrder", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_BomberPlatform_PlatformCreated_Init () {
    libCOMM_gt_CM_Horner_BomberPlatform_PlatformCreated = TriggerCreate("libCOMM_gt_CM_Horner_BomberPlatform_PlatformCreated_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_PlatformCreated, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Horner_BomberPlatform_PlatformCreated, c_playerAny, "HHBomberPlatformCreateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_PlatformDies
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_BomberPlatform_PlatformDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HHBomberPlatform"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(libCOMM_gv_cM_Horner_BomberPlatforms_Ready[EventPlayer()], EventUnit()) == true)) {
        PlayerAddChargeUsed(EventPlayer(), "Abil/HHBomberPlatformAreaBombTopBarOrder", 1.0);
    }

    libCOMM_gf_CM_Horner_BomberStatusCheck(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_BomberPlatform_PlatformDies_Init () {
    libCOMM_gt_CM_Horner_BomberPlatform_PlatformDies = TriggerCreate("libCOMM_gt_CM_Horner_BomberPlatform_PlatformDies_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_PlatformDies, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Horner_BomberPlatform_PlatformDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_BomberLaunched
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_BomberPlatform_BomberLaunched_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_Horner_BomberStatusCheck(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_BomberPlatform_BomberLaunched_Init () {
    libCOMM_gt_CM_Horner_BomberPlatform_BomberLaunched = TriggerCreate("libCOMM_gt_CM_Horner_BomberPlatform_BomberLaunched_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_BomberLaunched, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Horner_BomberPlatform_BomberLaunched, c_playerAny, "HHBomberPlatformAreaBombLaunchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_BomberReturned
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_BomberPlatform_BomberReturned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.01, c_timeGame);
    libCOMM_gf_CM_Horner_BomberStatusCheck(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin));
    PlayerAddChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "Abil/HHBomberPlatformAreaBombTopBarOrder", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_BomberPlatform_BomberReturned_Init () {
    libCOMM_gt_CM_Horner_BomberPlatform_BomberReturned = TriggerCreate("libCOMM_gt_CM_Horner_BomberPlatform_BomberReturned_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_BomberReturned, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Horner_BomberPlatform_BomberReturned, c_playerAny, "HHBomberDockCooldownDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_BomberRebuilt
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_BomberPlatform_BomberRebuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_Horner_BomberStatusCheck(UnitGetOwner(EventUnit()));
    PlayerAddChargeUsed(UnitGetOwner(EventUnit()), "Abil/HHBomberPlatformAreaBombTopBarOrder", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_BomberPlatform_BomberRebuilt_Init () {
    libCOMM_gt_CM_Horner_BomberPlatform_BomberRebuilt = TriggerCreate("libCOMM_gt_CM_Horner_BomberPlatform_BomberRebuilt_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_BomberRebuilt, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Horner_BomberPlatform_BomberRebuilt, null, AbilityCommand("HHBomberPlatformHangar", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_TopBar_TargetSelected
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMM_gv_cM_Horner_BomberPlatforms_ReadyCount[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)] >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pickedUnit = UnitGroupRandomUnit(libCOMM_gv_cM_Horner_BomberPlatforms_Ready[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)], c_unitCountAlive);
    if ((EventPlayerEffectUsedUnit(c_effectUnitTarget) != null)) {
        UnitIssueOrder(lv_pickedUnit, OrderTargetingUnit(AbilityCommand("HHBomberPlatformAreaBombOrder", 0), EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_pickedUnit, OrderTargetingPoint(AbilityCommand("HHBomberPlatformAreaBombOrder", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    }
    if ((UnitAbilityChargeInfo(libCOMI_gv_yY_GPCasterUnit[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)], AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), c_unitAbilChargeCountLeft) > 0.0)) {
        UISetTargetingOrder(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)), libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_yY_GPCasterUnit[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)]), OrderTargetingPoint(AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), UnitGetPosition(libCOMI_gv_yY_GPCasterUnit[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)])), false);
    }

    PlayerAddChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "Abil/HHBomberPlatformAreaBombTopBarOrder", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected_Init () {
    libCOMM_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected = TriggerCreate("libCOMM_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected, c_playerAny, "HHBomberPlatformAreaBombTopBarOrderDummyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_Individual_TargetSelected
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_BomberPlatform_Individual_TargetSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bomberPlayer;
    unit lv_bomberPlatform;
    unit lv_bomber;
    unit lv_bomberTargetUnit;
    point lv_bomberTargetPoint;
    bool lv_bomberTargetIsUnit;
    int lv_bomberState;
    actor lv_bomberTargetActor;
    bool lv_bomberDiveSoundPlayed;

    // Automatic Variable Declarations
    int auto7E1ED1BD_val;

    // Variable Initialization
    lv_bomberPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "Abil/HHBomberPlatformAreaBombTopBarOrder", 1.0);
    lv_bomberPlatform = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    UnitCreate(1, "HHBomber", c_unitCreateIgnorePlacement, lv_bomberPlayer, Point((PointGetX(UnitGetPosition(lv_bomberPlatform)) + 0.26), (PointGetY(UnitGetPosition(lv_bomberPlatform)) - 0.26)), 225.0);
    lv_bomber = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(lv_bomber, "Signal LiftOff");
    UnitSetHeight(lv_bomber, 1.7, 0.0);
    lv_bomberState = 1;
    UnitBehaviorAdd(lv_bomberPlatform, "HHBomberPlatformAreaBombDisabler", lv_bomberPlatform, 1);
    libCOMM_gf_CM_Horner_BomberStatusCheck(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin));
    if ((EventPlayerEffectUsedUnit(c_effectUnitTarget) != null)) {
        lv_bomberTargetIsUnit = true;
        lv_bomberTargetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
        lv_bomberTargetPoint = UnitGetPosition(lv_bomberTargetUnit);
        ActorCreate(ActorScopeFromUnit(lv_bomberTargetUnit), "HHBomberAreaBombWarning", null, null, null);
        lv_bomberTargetActor = libNtve_gf_ActorLastCreated();
        if ((TechTreeUpgradeCount(lv_bomberPlayer, "HHBomberNapalm", c_techCountCompleteOnly) > 0)) {
            ActorSend(lv_bomberTargetActor, "ModelSwap MiraHorner_Bomber_Coop_Cursor_Persist 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
        }

        ActorSend(lv_bomberTargetActor, "Signal OnUnit");
    }
    else {
        lv_bomberTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
        libNtve_gf_CreateActorAtPoint("HHBomberAreaBombWarning", lv_bomberTargetPoint);
        lv_bomberTargetActor = libNtve_gf_ActorLastCreated();
        if ((TechTreeUpgradeCount(lv_bomberPlayer, "HHBomberNapalm", c_techCountCompleteOnly) > 0)) {
            ActorSend(lv_bomberTargetActor, "ModelSwap MiraHorner_Bomber_Coop_Cursor_Persist 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
        }

    }
    UnitSetHeight(lv_bomber, 3.75, 0.5);
    ActorSend(lv_bomberTargetActor, (("SetScale " + CatalogFieldValueGet(c_gameCatalogActor, "HHBomberAreaBombWarning", "Scale", lv_bomberPlayer))));
    libNtve_gf_MakeUnitFacePoint(lv_bomber, lv_bomberTargetPoint, 0.5);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_bomber, "Signal FlyOut");
    UnitIssueOrder(lv_bomber, OrderTargetingPoint(AbilityCommand("move", 0), lv_bomberTargetPoint), c_orderQueueReplace);
    while ((lv_bomberState > 0)) {
        auto7E1ED1BD_val = lv_bomberState;
        if (auto7E1ED1BD_val == 1) {
            if (((lv_bomberTargetIsUnit == true) && (UnitIsAlive(lv_bomberTargetUnit) == true))) {
                lv_bomberTargetPoint = UnitGetPosition(lv_bomberTargetUnit);
                UnitIssueOrder(lv_bomber, OrderTargetingPoint(AbilityCommand("move", 0), lv_bomberTargetPoint), c_orderQueueReplace);
            }

            if (((lv_bomberTargetIsUnit == false))) {
                UnitIssueOrder(lv_bomber, OrderTargetingPoint(AbilityCommand("move", 0), lv_bomberTargetPoint), c_orderQueueReplace);
            }

            if (((DistanceBetweenPoints(UnitGetPosition(lv_bomber), lv_bomberTargetPoint) < 20.0) && (lv_bomberDiveSoundPlayed == false))) {
                libNtve_gf_SendActorMessageToUnit(lv_bomber, "Signal DiveSoundStart");
                lv_bomberDiveSoundPlayed = true;
            }

            if ((DistanceBetweenPoints(UnitGetPosition(lv_bomber), lv_bomberTargetPoint) < 6.0)) {
                UnitCreateEffectPoint(lv_bomber, "HHBomberAreaBombInitialSet", lv_bomberTargetPoint);
                Wait(0.0625, c_timeGame);
                lv_bomberState = 2;
                ActorSend(lv_bomberTargetActor, "Destroy");
            }

        }
        else if (auto7E1ED1BD_val == 2) {
            UnitIssueOrder(lv_bomber, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_bomberPlatform)), c_orderQueueReplace);
            if (((DistanceBetweenPoints(UnitGetPosition(lv_bomber), UnitGetPosition(lv_bomberPlatform)) < 1.0) && (UnitHasBehavior2(lv_bomber, "HHBomberFiredReturnDelay") == false))) {
                UnitCreateEffectUnit(lv_bomberPlatform, "HHBomberPlatformAreaBombReturnSet", lv_bomber);
                UnitRemove(lv_bomber);
                libCOMM_gf_CM_Horner_BomberStatusCheck(lv_bomberPlayer);
                lv_bomberState = 0;
            }

        }
        else {
        }
        if (((UnitIsAlive(lv_bomber) == false) && (lv_bomberState > 0))) {
            lv_bomberState = 0;
            UnitCreateEffectUnit(lv_bomberPlatform, "KillMagazine", lv_bomberPlatform);
            ActorSend(lv_bomberTargetActor, "Destroy");
        }

        if ((UnitIsAlive(lv_bomberPlatform) == false)) {
            UnitKill(lv_bomber);
            libCOMM_gf_CM_Horner_BomberStatusCheck(lv_bomberPlayer);
            lv_bomberState = 0;
            ActorSend(lv_bomberTargetActor, "Destroy");
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_BomberPlatform_Individual_TargetSelected_Init () {
    libCOMM_gt_CM_Horner_BomberPlatform_Individual_TargetSelected = TriggerCreate("libCOMM_gt_CM_Horner_BomberPlatform_Individual_TargetSelected_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_BomberPlatform_Individual_TargetSelected, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Horner_BomberPlatform_Individual_TargetSelected, c_playerAny, "HHBomberPlatformAreaBombOrderTargetDummyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_VikingTacticalJumpMorph
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_VikingTacticalJumpMorph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_unit, Order(AbilityCommand("HHFighterMode", 0)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_VikingTacticalJumpMorph_Init () {
    libCOMM_gt_CM_Horner_VikingTacticalJumpMorph = TriggerCreate("libCOMM_gt_CM_Horner_VikingTacticalJumpMorph_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_VikingTacticalJumpMorph, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Horner_VikingTacticalJumpMorph, null, AbilityCommand("FleetwideJump", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_MagMines
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Horner_MagMines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "HornerCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    if ((UnitAbilityChargeInfo(EventUnit(), AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) > 0.0)) {
        UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer]), OrderTargetingPoint(AbilityCommand("HHTrainTopBar", 0), UnitGetPosition(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer])), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Horner_MagMines_Init () {
    libCOMM_gt_CM_Horner_MagMines = TriggerCreate("libCOMM_gt_CM_Horner_MagMines_Func");
    TriggerEnable(libCOMM_gt_CM_Horner_MagMines, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Horner_MagMines, null, AbilityCommand("HHTrainTopBar", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderKarax
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderKarax_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoDF04659D_g;
    int autoDF04659D_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Karax");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CM_KaraxUnitReviveBarrier, true);
    TriggerEnable(libCOMM_gt_CM_KaraxSolarForgeSOAEnergy, true);
    TriggerEnable(libCOMM_gt_CM_KaraxRepairBeamLimit, true);
    TriggerExecute(libCOMM_gt_CM_KaraxRepairBeamLimit, false, true);
    TriggerEnable(libCOMM_gt_CC_ScoreArtanisKaraxOrbitalStrike, true);
    TriggerEnable(libCOMM_gt_CC_ScoreKaraxSolarLance, true);
    TriggerEnable(libCOMM_gt_CC_ScoreKaraxPurifierBeam, true);
    autoDF04659D_g = lv_players;
    autoDF04659D_var = -1;
    while (true) {
        autoDF04659D_var = PlayerGroupNextPlayer(autoDF04659D_g, autoDF04659D_var);
        if (autoDF04659D_var < 0) { break; }
        libCOMI_gf_CreateACStructure(autoDF04659D_var, "SolarForge");
        if ((TechTreeUnitIsAllowed(autoDF04659D_var, "SoACasterKarax") == true)) {
            libCOMI_gf_CM_CommanderVOAbilityWatch(autoDF04659D_var, SoundLink("ExecutorAlert_KaraxPurifierBeamReady", -1), "Abil/SOAPurifierBeam", null, null);
            TriggerExecute(libCOMM_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost, true, false);
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionKaraxChronoMap, true);
            libCOMI_gf_CreateACCaster(autoDF04659D_var, "SoACasterKarax");
            libCOMI_gf_CU_GPInitEnergyCaster(autoDF04659D_var, "SoACasterKarax");
            libCOMI_gf_CU_GPSoAUpdateVitals(autoDF04659D_var);
            if ((TechTreeUpgradeCount(autoDF04659D_var, "MasteryKaraxStartingAndMaxSoAEnergy", c_techCountCompleteOnly) > 0)) {
                TextExpressionSetToken("Param/Expression/lib_COMM_C651AB51", "STDTOOLTIP", StringExternal("UI/SoAMissionEnergyTooltip"));
                TextExpressionSetToken("Param/Expression/lib_COMM_C651AB51", "ENERGY", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryKaraxStartingAndMaxSoAEnergyDisplayDummy", "Amount", autoDF04659D_var)));
                libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_GPEnergyTooltip[autoDF04659D_var], TextExpressionAssemble("Param/Expression/lib_COMM_C651AB51"), PlayerGroupSingle(autoDF04659D_var));
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderKarax_Init () {
    libCOMM_gt_DUT_CommanderKarax = TriggerCreate("libCOMM_gt_DUT_CommanderKarax_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderKarax, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAThermalLanceActivated
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoAThermalLanceActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMM_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "SOAThermalLanceActivate";
    libCOMM_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("SOAThermalLanceExecute", 0);
    libCOMM_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/SOAThermalLanceActivate";
    libCOMM_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "SOAThermalLanceActivate";
    libCOMM_gv_cM_SoATargetingModel[lv_casterPlayer] = "SOAThermalLanceTargetingModel";
    libCOMM_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAThermalLanceTargetingDummy", 0), UnitGetPosition(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer]));
    libCOMM_gv_cM_SoATargetingUnitType[lv_casterPlayer] = "SOAThermalLanceTargeter";
    libCOMM_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 3;
    libCOMM_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMM_BE2C04CD");
    libCOMM_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMM_784AA310");
    libCOMM_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoAThermalLanceActivated_Init () {
    libCOMM_gt_CM_SoAThermalLanceActivated = TriggerCreate("libCOMM_gt_CM_SoAThermalLanceActivated_Func");
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_SoAThermalLanceActivated, null, "SOAThermalLanceActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingPurifierBeamOn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_PM_SoATargetingPurifierBeamOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StoreUnitSelection(EventPlayer(), libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMM_gv_cM_SoATargetingActivateAbility[EventPlayer()] = "SOAPurifierBeam";
    libCOMM_gv_cM_SoATargetingOrder[EventPlayer()] = null;
    libCOMM_gv_cM_SoATargetingExecuteCommand[EventPlayer()] = null;
    libCOMM_gv_cM_SoATargetingCooldown[EventPlayer()] = "";
    libCOMM_gv_cM_SoATargetingBehavior[EventPlayer()] = null;
    libCOMM_gv_cM_SoATargetingModel[EventPlayer()] = null;
    libCOMM_gv_cM_SoATargetingUnitType[EventPlayer()] = null;
    libCOMM_gv_cM_SoATargetingChargesTotal[EventPlayer()] = 1;
    libCOMM_gv_cM_SoATargetingInstructionsPrimary[EventPlayer()] = StringExternal("Param/Value/lib_COMM_7F8ACE72");
    libCOMM_gf_CM_SoATargetingModeEnter(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_PM_SoATargetingPurifierBeamOn_Init () {
    libCOMM_gt_PM_SoATargetingPurifierBeamOn = TriggerCreate("libCOMM_gt_PM_SoATargetingPurifierBeamOn_Func");
    TriggerAddEventTargetModeUpdate(libCOMM_gt_PM_SoATargetingPurifierBeamOn, c_playerAny, AbilityCommand("SOAPurifierBeam", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingPurifierBeamOff
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_PM_SoATargetingPurifierBeamOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_SoATargetingModeExit(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_PM_SoATargetingPurifierBeamOff_Init () {
    libCOMM_gt_PM_SoATargetingPurifierBeamOff = TriggerCreate("libCOMM_gt_PM_SoATargetingPurifierBeamOff_Func");
    TriggerAddEventTargetModeUpdate(libCOMM_gt_PM_SoATargetingPurifierBeamOff, c_playerAny, AbilityCommand("SOAPurifierBeam", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoASuperChronoApply
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoASuperChronoApply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CC_AchievementToggleSuperChrono(true);
    TriggerEnable(libCOMM_gt_CM_SoASuperChronoCleanup, true);
    TimerStart(libCOMM_gv_cM_SoASuperChronoTimer, CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "SOAMapWideChrono", "Duration", c_playerAny), false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoASuperChronoApply_Init () {
    libCOMM_gt_CM_SoASuperChronoApply = TriggerCreate("libCOMM_gt_CM_SoASuperChronoApply_Func");
    TriggerAddEventUnitAbility(libCOMM_gt_CM_SoASuperChronoApply, null, AbilityCommand("SOAMapWideChrono", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoASuperChronoCleanup
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoASuperChronoCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMM_gf_CC_AchievementToggleSuperChrono(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoASuperChronoCleanup_Init () {
    libCOMM_gt_CM_SoASuperChronoCleanup = TriggerCreate("libCOMM_gt_CM_SoASuperChronoCleanup_Func");
    TriggerEnable(libCOMM_gt_CM_SoASuperChronoCleanup, false);
    TriggerAddEventTimer(libCOMM_gt_CM_SoASuperChronoCleanup, libCOMM_gv_cM_SoASuperChronoTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKaraxPassiveChronoBoost
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_karaxPlayers;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoD9981165_g;

    // Variable Initialization
    lv_karaxPlayers = libCOMI_gf_CC_PlayersOfCommander("Karax");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_karaxPlayers) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= 35.0))) {
        Wait(1.0, c_timeGame);
    }
    autoD9981165_g = lv_karaxPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoD9981165_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((TechTreeUpgradeCount(lv_itPlayer, "KaraxSOAChronoPassive", c_techCountCompleteOnly) > 1)) {
            TriggerQueueEnter();
            libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(lv_itPlayer), SoundLink("KaraxCommander_ChronoPassive", -1), PlayerGroupAll());
            TriggerQueueExit();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Init () {
    libCOMM_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKaraxChronoMap
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionKaraxChronoMap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("KaraxCommander_Chrono", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionKaraxChronoMap_Init () {
    libCOMM_gt_CM_AbilityTransmissionKaraxChronoMap = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionKaraxChronoMap_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionKaraxChronoMap, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionKaraxChronoMap, null, AbilityCommand("SOAMapWideChrono", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKaraxSolarLance
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreKaraxSolarLance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ArtanisSoADamage", FixedToInt(libCOMM_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreKaraxSolarLance_Init () {
    libCOMM_gt_CC_ScoreKaraxSolarLance = TriggerCreate("libCOMM_gt_CC_ScoreKaraxSolarLance_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreKaraxSolarLance, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreKaraxSolarLance, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAThermalLanceDamage");
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreKaraxSolarLance, null, c_unitDamageTypeAny, c_unitDamageEither, "ThermalLancesFireBeamDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKaraxPurifierBeam
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreKaraxPurifierBeam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ArtanisSoADamage", FixedToInt(libCOMM_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreKaraxPurifierBeam_Init () {
    libCOMM_gt_CC_ScoreKaraxPurifierBeam = TriggerCreate("libCOMM_gt_CC_ScoreKaraxPurifierBeam_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreKaraxPurifierBeam, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreKaraxPurifierBeam, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAPurifierBeamDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKaraxChronoProduction
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreKaraxChronoProduction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!(((UnitHasBehavior2(EventUnit(), "SOAMapWideChrono") == true) || (UnitGetType(EventUnit()) == "Larva")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()) != "Karax")) {
        AchievementTermQuantityAdd(libCOMI_gf_CC_PlayerAlly(EventPlayer()), "CommanderKaraxSuperChrono", 1);
    }

    PlayerScoreValueSetFromInt(EventPlayer(), "KaraxChronoCoop", (PlayerScoreValueGetAsInt(EventPlayer(), "KaraxChronoCoop") + 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreKaraxChronoProduction_Init () {
    libCOMM_gt_CC_ScoreKaraxChronoProduction = TriggerCreate("libCOMM_gt_CC_ScoreKaraxChronoProduction_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreKaraxChronoProduction, false);
    TriggerAddEventUnitTrainProgress(libCOMM_gt_CC_ScoreKaraxChronoProduction, null, c_unitProgressStageComplete);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CC_ScoreKaraxChronoProduction, null, c_unitProgressStageComplete);
    TriggerAddEventUnitAbility(libCOMM_gt_CC_ScoreKaraxChronoProduction, null, null, c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryKaraxUnitVitalList
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_MasteryKaraxUnitVitalList_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "MasteryKaraxUnitVital"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostList3(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_MasteryKaraxUnitVitalList_Init () {
    libCOMM_gt_CM_MasteryKaraxUnitVitalList = TriggerCreate("libCOMM_gt_CM_MasteryKaraxUnitVitalList_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_MasteryKaraxUnitVitalList, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_KaraxSolarForgeSOAEnergy
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_KaraxSolarForgeSOAEnergy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "KaraxCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "SolarEfficiencyLevel3", c_techCountCompleteOnly) == 1)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SolarForgeSolarEfficiency3MU", libCOMI_gv_yY_GPCasterUnit[EventPlayer()]);
        libCOMI_gf_CU_GPSoAUpdateVitals(EventPlayer());
    }
    else if ((TechTreeUpgradeCount(EventPlayer(), "SolarEfficiencyLevel2", c_techCountCompleteOnly) == 1)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SolarForgeSolarEfficiency2MU", libCOMI_gv_yY_GPCasterUnit[EventPlayer()]);
        libCOMI_gf_CU_GPSoAUpdateVitals(EventPlayer());
    }
    else if ((TechTreeUpgradeCount(EventPlayer(), "SolarEfficiencyLevel1", c_techCountCompleteOnly) == 1)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SolarForgeSolarEfficiency1MU", libCOMI_gv_yY_GPCasterUnit[EventPlayer()]);
        libCOMI_gf_CU_GPSoAUpdateVitals(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_KaraxSolarForgeSOAEnergy_Init () {
    libCOMM_gt_CM_KaraxSolarForgeSOAEnergy = TriggerCreate("libCOMM_gt_CM_KaraxSolarForgeSOAEnergy_Func");
    TriggerEnable(libCOMM_gt_CM_KaraxSolarForgeSOAEnergy, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_KaraxSolarForgeSOAEnergy, c_playerAny, "SolarForgeBeamImpactDummyMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementKaraxSolarLanceUsed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AchievementKaraxSolarLanceUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderKaraxPurifierBeam", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AchievementKaraxSolarLanceUsed_Init () {
    libCOMM_gt_CM_AchievementKaraxSolarLanceUsed = TriggerCreate("libCOMM_gt_CM_AchievementKaraxSolarLanceUsed_Func");
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AchievementKaraxSolarLanceUsed, null, AbilityCommand("SOAPurifierBeam", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_KaraxRepairBeamLimit
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_KaraxRepairBeamLimit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto197F5551_g;
    int auto197F5551_var;

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "SOARepairBeamExtraTarget"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto197F5551_g = libCOMI_gf_CC_PlayersOfCommander("Karax");
    auto197F5551_var = -1;
    while (true) {
        auto197F5551_var = PlayerGroupNextPlayer(auto197F5551_g, auto197F5551_var);
        if (auto197F5551_var < 0) { break; }
        libCOMM_gf_CM_KaraxSetRepairBeamLimit(auto197F5551_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_KaraxRepairBeamLimit_Init () {
    libCOMM_gt_CM_KaraxRepairBeamLimit = TriggerCreate("libCOMM_gt_CM_KaraxRepairBeamLimit_Func");
    TriggerEnable(libCOMM_gt_CM_KaraxRepairBeamLimit, false);
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_KaraxRepairBeamLimit, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_KaraxUnitReviveBarrier
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_KaraxUnitReviveBarrier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_alliedKaraxPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_alliedKaraxPlayer = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Karax", libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_player));

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_PlayerIsCommander(lv_player) == true))) {
            return false;
        }

        if (!((lv_alliedKaraxPlayer != c_playerAny))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(lv_alliedKaraxPlayer, "KaraxUnitSpawnBarrier", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), libCOMI_gf_GetAlliedPlayer(1), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "KaraxUnitSpawnBarrier", libCOMI_gv_yY_GPCasterUnit[lv_alliedKaraxPlayer], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_KaraxUnitReviveBarrier_Init () {
    libCOMM_gt_CM_KaraxUnitReviveBarrier = TriggerCreate("libCOMM_gt_CM_KaraxUnitReviveBarrier_Func");
    TriggerEnable(libCOMM_gt_CM_KaraxUnitReviveBarrier, false);
    TriggerAddEventUnitRevive(libCOMM_gt_CM_KaraxUnitReviveBarrier, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderKerrigan
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderKerrigan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto8D6E8B0E_g;
    int auto8D6E8B0E_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Kerrigan");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreKerriganResources, true);
    TriggerEnable(libCOMM_gt_CC_ScoreKerriganDmg, true);
    TriggerEnable(libCOMM_gt_CM_MasteryKerriganInstantReviveCooldown, true);
    TriggerEnable(libCOMM_gt_KerriganPsiStrike, true);
    TriggerEnable(libCOMM_gt_KerriganEconDrop, true);
    TriggerEnable(libCOMM_gt_BanelingScourgeEconDrop, true);
    TriggerEnable(libCOMM_gt_KerriganEconDrop, true);
    TriggerEnable(libCOMM_gt_CM_Kerrigan_WeaponSwap, true);
    libCOMM_gf_CM_KerriganMalignantCreep();
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionKerriganCrushingGrip, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionKerriganAssimilation, true);
    auto8D6E8B0E_g = lv_players;
    auto8D6E8B0E_var = -1;
    while (true) {
        auto8D6E8B0E_var = PlayerGroupNextPlayer(auto8D6E8B0E_g, auto8D6E8B0E_var);
        if (auto8D6E8B0E_var < 0) { break; }
        libCOMI_gf_CM_CommanderVOAbilityWatch(auto8D6E8B0E_var, SoundLink("IzshaAlert_KerriganImmobilWave", -1), "Abil/KerriganVoidCoopCrushingGripWave", libCOMI_gf_GetHeroUnitBad(auto8D6E8B0E_var, "K5Kerrigan"), null);
        libCOMI_gf_CM_CommanderVOAbilityWatch(auto8D6E8B0E_var, SoundLink("IzshaAlert_KerriganAssmilAura", -1), "Abil/KerriganVoidCoopEconDrop", libCOMI_gf_GetHeroUnitBad(auto8D6E8B0E_var, "K5Kerrigan"), null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderKerrigan_Init () {
    libCOMM_gt_DUT_CommanderKerrigan = TriggerCreate("libCOMM_gt_DUT_CommanderKerrigan_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderKerrigan, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Zergling Reconstruction
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_EnableZerglingReconstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMM_gt_CM_HatcheryPrimarySearch, false, false);
    libCOMM_gf_EnableDisableZerglingRespawn(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_EnableZerglingReconstruction_Init () {
    libCOMM_gt_EnableZerglingReconstruction = TriggerCreate("libCOMM_gt_EnableZerglingReconstruction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Hatchery Primary Search
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_HatcheryPrimarySearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    fixed lv_distance;
    unit lv_closestHatchery;

    // Automatic Variable Declarations
    playergroup auto5CF5F367_g;

    // Variable Initialization
    lv_distance = 500.0;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5CF5F367_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto5CF5F367_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((UnitGetOwner(libCOMI_gv_cM_PrimaryTownHall[lv_indexPlayer]) != lv_indexPlayer)) {
            UnitBehaviorRemove(libCOMI_gv_cM_PrimaryTownHall[lv_indexPlayer], "ZerglingRespawnPrimary", 1);
        }

        if (((TechTreeBehaviorCount(lv_indexPlayer, "ZerglingRespawnPrimary", c_techCountCompleteOnly) == 0) || (libCOMI_gv_cM_PrimaryTownHall[lv_indexPlayer] == null))) {
            lv_closestHatchery = libCOMI_gf_CM_PrimaryTownHall(lv_indexPlayer);
            if ((lv_closestHatchery != null)) {
                libCOMM_gf_ZerglingRespawnSetPrimaryHatchery(lv_closestHatchery);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_HatcheryPrimarySearch_Init () {
    libCOMM_gt_CM_HatcheryPrimarySearch = TriggerCreate("libCOMM_gt_CM_HatcheryPrimarySearch_Func");
    TriggerEnable(libCOMM_gt_CM_HatcheryPrimarySearch, false);
    TriggerAddEventTimePeriodic(libCOMM_gt_CM_HatcheryPrimarySearch, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Hatchery Egg Models
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_HatcheryEggModels_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_PrimaryTownHall[0] != null) && (TechTreeUpgradeCount(1, "K5ZerglingRespawn", c_techCountCompleteOnly) == 1)) {
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_PrimaryTownHall[0], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 0.0)) {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn1On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn1Off");
        }
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_PrimaryTownHall[0], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 2.0)) {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn2On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn2Off");
        }
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_PrimaryTownHall[0], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 4.0)) {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn3On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn3Off");
        }
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_PrimaryTownHall[0], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 7.0)) {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn4On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn4Off");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_HatcheryEggModels_Init () {
    libCOMM_gt_CM_HatcheryEggModels = TriggerCreate("libCOMM_gt_CM_HatcheryEggModels_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_HatcheryEggModels, 1, "ZerglingRespawnEggCheck");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Hatchery Egg Births
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_HatcheryEggBirths_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_PrimaryTownHall[0] != null) && (TechTreeUpgradeCount(1, "K5ZerglingRespawn", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn1Off");
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn2Off");
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn3Off");
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn4Off");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_HatcheryEggBirths_Init () {
    libCOMM_gt_CM_HatcheryEggBirths = TriggerCreate("libCOMM_gt_CM_HatcheryEggBirths_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_HatcheryEggBirths, 1, "ZerglingRespawnEggBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conjoined Vital Regen On/Off
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_ConjoinedVitalRegenOnOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;
    unit lv_itUnit;
    unitgroup lv_group;
    unitgroup lv_groupA;
    unitgroup lv_groupB;
    unitgroup lv_groupC;
    int lv_stack;
    unit lv_caster;

    // Automatic Variable Declarations
    unitgroup auto8AE07B43_g;
    int auto8AE07B43_u;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();
    lv_group = UnitGroupEmpty();
    lv_groupA = UnitConjoinedGroup(lv_unit, "GreaterNydusWormConjoined");
    lv_groupB = UnitConjoinedGroup(lv_unit, "NydusNetworkConjoined");
    lv_groupC = UnitConjoinedGroup(lv_unit, "NydusWormConjoined");
    lv_stack = UnitBehaviorCount(lv_unit, lv_behavior);
    lv_caster = UnitBehaviorEffectUnit(lv_unit, lv_behavior, c_effectUnitCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_group, lv_groupA);
    UnitGroupAddUnitGroup(lv_group, lv_groupB);
    UnitGroupAddUnitGroup(lv_group, lv_groupC);
    UnitGroupRemove(lv_group, lv_unit);
    auto8AE07B43_g = lv_group;
    auto8AE07B43_u = UnitGroupCount(auto8AE07B43_g, c_unitCountAll);
    for (;; auto8AE07B43_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto8AE07B43_g, auto8AE07B43_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_SetBehaviorCount(lv_itUnit, lv_behavior, lv_caster, lv_stack);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_ConjoinedVitalRegenOnOff_Init () {
    libCOMM_gt_ConjoinedVitalRegenOnOff = TriggerCreate("libCOMM_gt_ConjoinedVitalRegenOnOff_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMM_gt_ConjoinedVitalRegenOnOff, null, c_unitBehaviorFlagUser13, c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMM_gt_ConjoinedVitalRegenOnOff, null, c_unitBehaviorFlagUser13, c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKerriganCrushingGrip
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionKerriganCrushingGrip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("KerriganCommander_CrushingGrip", -1), PlayerGroupAll());
    if ((libCOMM_gv_cM_MengskSnarkExecuted == false) && (libCOMI_gf_CC_CommanderInGame("Mengsk") == true)) {
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        libCOMM_gv_cM_MengskSnarkExecuted = true;
        Wait(0.5, c_timeReal);
        libCOMI_gf_CM_CommanderVOSend(EventPlayer(), SoundLink("MengskCommander_KerriganImmobilizationWave", -1), PlayerGroupAll());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionKerriganCrushingGrip_Init () {
    libCOMM_gt_CM_AbilityTransmissionKerriganCrushingGrip = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionKerriganCrushingGrip_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionKerriganCrushingGrip, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionKerriganCrushingGrip, null, AbilityCommand("KerriganVoidCoopCrushingGripWave", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKerriganAssimilation
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionKerriganAssimilation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("KerriganCommander_Assimilation", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionKerriganAssimilation_Init () {
    libCOMM_gt_CM_AbilityTransmissionKerriganAssimilation = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionKerriganAssimilation_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionKerriganAssimilation, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionKerriganAssimilation, null, AbilityCommand("KerriganVoidCoopEconDrop", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKerriganDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreKerriganDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "K5Kerrigan"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreKerriganDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "KerriganDamage", FixedToInt(libCOMM_gv_cC_ScoreKerriganDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreKerriganDmg_Init () {
    libCOMM_gt_CC_ScoreKerriganDmg = TriggerCreate("libCOMM_gt_CC_ScoreKerriganDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreKerriganDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreKerriganDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKerriganResources
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreKerriganResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto42FFD776_val;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto42FFD776_val = EventPlayerEffectUsedUnitType(c_effectUnitCaster);
    if (auto42FFD776_val == "KerriganVoidCoopEconDropLT1") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+5));
    }
    else if (auto42FFD776_val == "KerriganVoidCoopEconDrop1") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+10));
    }
    else if (auto42FFD776_val == "KerriganVoidCoopEconDrop2") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+15));
    }
    else if (auto42FFD776_val == "KerriganVoidCoopEconDrop3") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+30));
    }
    else if (auto42FFD776_val == "KerriganVoidCoopEconDrop4") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+60));
    }
    else if (auto42FFD776_val == "KerriganVoidCoopEconDrop5") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+75));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreKerriganResources_Init () {
    libCOMM_gt_CC_ScoreKerriganResources = TriggerCreate("libCOMM_gt_CC_ScoreKerriganResources_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreKerriganResources, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CC_ScoreKerriganResources, c_playerAny, "VoidPickupRemoveDelay");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryKerriganResearchSpeedCost
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_MasteryKerriganResearchSpeedCost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "MasteryKerriganResearchSpeedandCost"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_MasteryKerriganResearchSpeedCost(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_MasteryKerriganResearchSpeedCost_Init () {
    libCOMM_gt_CM_MasteryKerriganResearchSpeedCost = TriggerCreate("libCOMM_gt_CM_MasteryKerriganResearchSpeedCost_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_MasteryKerriganResearchSpeedCost, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryKerriganArmyVespeneCostList
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_MasteryKerriganArmyVespeneCostList_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "MasteryKerriganArmyGasCost"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_MasteryKerriganArmyVespeneCostList(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_MasteryKerriganArmyVespeneCostList_Init () {
    libCOMM_gt_CM_MasteryKerriganArmyVespeneCostList = TriggerCreate("libCOMM_gt_CM_MasteryKerriganArmyVespeneCostList_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_MasteryKerriganArmyVespeneCostList, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NYDUS_CREATED
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_NYDUS_CREATED_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_created_point;

    // Automatic Variable Declarations
    playergroup auto74F86583_g;
    int auto74F86583_var;

    // Variable Initialization
    lv_created_point = UnitGetPosition(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "NydusNetwork"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_hide_own_nydus(EventUnitProgressUnit());
    auto74F86583_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayer());
    auto74F86583_var = -1;
    while (true) {
        auto74F86583_var = PlayerGroupNextPlayer(auto74F86583_g, auto74F86583_var);
        if (auto74F86583_var < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusNetworkAlly", c_unitCreateIgnorePlacement, auto74F86583_var, lv_created_point);
        libCOMM_gf_hide_ally_nydus(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_NYDUS_CREATED_Init () {
    libCOMM_gt_NYDUS_CREATED = TriggerCreate("libCOMM_gt_NYDUS_CREATED_Func");
    TriggerAddEventUnitConstructProgress(libCOMM_gt_NYDUS_CREATED, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NYDUS_CREATED 2
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_NYDUS_CREATED2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_created_point;

    // Automatic Variable Declarations
    playergroup auto24035B3D_g;
    int auto24035B3D_var;

    // Variable Initialization
    lv_created_point = UnitGetPosition(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "NydusCanal"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_hide_own_nydus(EventUnitProgressUnit());
    auto24035B3D_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayer());
    auto24035B3D_var = -1;
    while (true) {
        auto24035B3D_var = PlayerGroupNextPlayer(auto24035B3D_g, auto24035B3D_var);
        if (auto24035B3D_var < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanalAlly", c_unitCreateIgnorePlacement, auto24035B3D_var, lv_created_point);
        libCOMM_gf_hide_ally_nydus(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_NYDUS_CREATED2_Init () {
    libCOMM_gt_NYDUS_CREATED2 = TriggerCreate("libCOMM_gt_NYDUS_CREATED2_Func");
    TriggerAddEventUnitConstructProgress(libCOMM_gt_NYDUS_CREATED2, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NYDUS_CREATED 3
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_NYDUS_CREATED3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_created_point;

    // Automatic Variable Declarations
    playergroup autoF17B301B_g;
    int autoF17B301B_var;

    // Variable Initialization
    lv_created_point = UnitGetPosition(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "GreaterNydusWorm"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_hide_own_nydus(EventUnitCreatedUnit());
    autoF17B301B_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayer());
    autoF17B301B_var = -1;
    while (true) {
        autoF17B301B_var = PlayerGroupNextPlayer(autoF17B301B_g, autoF17B301B_var);
        if (autoF17B301B_var < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GreaterNydusWormAlly", c_unitCreateIgnorePlacement, autoF17B301B_var, lv_created_point);
        libCOMM_gf_hide_ally_nydus(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_NYDUS_CREATED3_Init () {
    libCOMM_gt_NYDUS_CREATED3 = TriggerCreate("libCOMM_gt_NYDUS_CREATED3_Func");
    TriggerAddEventUnitCreated(libCOMM_gt_NYDUS_CREATED3, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryKerriganInstantReviveCooldown
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_MasteryKerriganInstantReviveCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroUnit = libCOMI_gf_GetHeroUnitBad(EventPlayer(), "K5Kerrigan");

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_heroUnit, "KerriganInstantReviveCooldown", lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_MasteryKerriganInstantReviveCooldown_Init () {
    libCOMM_gt_CM_MasteryKerriganInstantReviveCooldown = TriggerCreate("libCOMM_gt_CM_MasteryKerriganInstantReviveCooldown_Func");
    TriggerEnable(libCOMM_gt_CM_MasteryKerriganInstantReviveCooldown, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_MasteryKerriganInstantReviveCooldown, c_playerAny, "MasteryKerriganInstantReviveChanced");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Psi Strike
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_KerriganPsiStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    const int auto418A755B_ae = 14;
    const int auto418A755B_ai = 1;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 8.0;
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 8.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto418A755B_ai >= 0 && lv_i <= auto418A755B_ae) || (auto418A755B_ai < 0 && lv_i >= auto418A755B_ae) ) ; lv_i += auto418A755B_ai ) {
        libCOMM_gv_kerriganPsiStrikeFacing[lv_player] = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((libCOMM_gv_kerriganPsiStrikeFacing[lv_player] < (lv_facing - 90.0)) && (libCOMM_gv_kerriganPsiStrikeFacing[lv_player] > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((libCOMM_gv_kerriganPsiStrikeFacing[lv_player] > (lv_facing + 90.0)) && (libCOMM_gv_kerriganPsiStrikeFacing[lv_player] < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
            else {
                if (((libCOMM_gv_kerriganPsiStrikeFacing[lv_player] > (lv_facing + 90.0)) || (libCOMM_gv_kerriganPsiStrikeFacing[lv_player] < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_KerriganPsiStrike_Init () {
    libCOMM_gt_KerriganPsiStrike = TriggerCreate("libCOMM_gt_KerriganPsiStrike_Func");
    TriggerEnable(libCOMM_gt_KerriganPsiStrike, false);
    TriggerAddEventUnitAbility(libCOMM_gt_KerriganPsiStrike, null, AbilityCommand("PsiStrikeWalk", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Econ Drop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_KerriganEconDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    string lv_resource;
    int lv_killer;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto89D9E8C8_g;

    // Variable Initialization
    lv_killer = libNtve_gf_KillingPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "KerriganVoidCoopEconDrop") == true))) {
            return false;
        }

        if (!((((libNtve_gf_KillingPlayer() >= 0) && (libNtve_gf_KillingPlayer() <= 15)) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = UnitGetPosition(EventUnit());
    if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
        lv_resource = "KerriganVoidCoopEconDropLT1";
    }
    else if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
        lv_resource = "KerriganVoidCoopEconDrop4";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -1)) {
        lv_resource = "KerriganVoidCoopEconDrop1";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -2)) {
        lv_resource = "KerriganVoidCoopEconDrop2";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -3)) {
        lv_resource = "KerriganVoidCoopEconDrop3";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -4)) {
        lv_resource = "KerriganVoidCoopEconDrop4";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) < -4)) {
        lv_resource = "KerriganVoidCoopEconDrop5";
    }
    if ((lv_resource == null)) {
        return true;
    }

    auto89D9E8C8_g = libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_killer);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto89D9E8C8_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_resource, 0, lv_itPlayer, lv_position);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_KerriganEconDrop_Init () {
    libCOMM_gt_KerriganEconDrop = TriggerCreate("libCOMM_gt_KerriganEconDrop_Func");
    TriggerEnable(libCOMM_gt_KerriganEconDrop, false);
    TriggerAddEventUnitDied(libCOMM_gt_KerriganEconDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Kerrigan_WeaponSwap
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Kerrigan_WeaponSwap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "MutaliskBroodlord")) {
        UnitWeaponRemove(EventUnit(), "GlaiveWurm");
        UnitWeaponAdd(EventUnit(), "CoopGlaiveWurm", null);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Kerrigan_WeaponSwap_Init () {
    libCOMM_gt_CM_Kerrigan_WeaponSwap = TriggerCreate("libCOMM_gt_CM_Kerrigan_WeaponSwap_Func");
    TriggerEnable(libCOMM_gt_CM_Kerrigan_WeaponSwap, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Kerrigan_WeaponSwap, null, "KerriganOwned", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderMengsk
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderMengsk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto69DE2A2C_g;
    int auto69DE2A2C_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Mengsk");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreMengskDamage, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_GlobalAbilityCast, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_TopBarKills, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_DirtyBombSweetener, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryBombardmentTarget, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryBombardmentCargoChange, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_NuclearAnnihilationSmallNukes, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_RegisterVeteranUnit, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_RemoveVeteranUnit, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_VeteranDies, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_VeteranDing, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_RegisterPropagandaUnit, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_RemovePropagandaUnit, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_PropagandaUpgraded, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_VeterancyEarned, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_MedivacAirlift, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_MedivacAirliftDing, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_EnlistStart, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_EnlistStop, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_ReturnToWork, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_ZerglingMengskSpawn, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_HydraliskMengskSpawn, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_MutaliskMengskSpawn, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_UltraliskMengskSpawn, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_BunkerDepotDropFillCargo, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_ZergSeekDestroy, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_WeaponPickerUpperRegister, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_WeaponPickerUpperUnregister, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_WeaponPickupRegister, true);
    TriggerExecute(libCOMM_gt_CM_Mengsk_WeaponPickup, true, false);
    TriggerEnable(libCOMI_gt_UT_Mengsk_ContaminatedStrikeDmgScore, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryBuilt, true);
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryStarted, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionMengskDirtyBomb, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionMengskForcedConscription, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionMengskNuclearAnnihilation, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionMengskZergCalldown, true);
    auto69DE2A2C_g = lv_players;
    auto69DE2A2C_var = -1;
    while (true) {
        auto69DE2A2C_var = PlayerGroupNextPlayer(auto69DE2A2C_g, auto69DE2A2C_var);
        if (auto69DE2A2C_var < 0) { break; }
        libCOMM_gf_CM_AbilityTransmission_MengskReminders(auto69DE2A2C_var);
        if ((TechTreeUnitIsAllowed(auto69DE2A2C_var, "CoopCasterMengsk") == true)) {
            libCOMI_gf_CreateACCaster(auto69DE2A2C_var, "CoopCasterMengsk");
            libCOMM_gf_CU_GPInitMengsk(auto69DE2A2C_var);
            libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegen(libCOMI_gv_yY_GPCasterUnit[auto69DE2A2C_var]);
            UnitSetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[auto69DE2A2C_var], c_unitPropEnergy, RoundI(UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[auto69DE2A2C_var], c_unitPropEnergy, c_unitPropCurrent)));
            libCOMM_gf_CM_Mengsk_EnergyChanged(auto69DE2A2C_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderMengsk_Init () {
    libCOMM_gt_DUT_CommanderMengsk = TriggerCreate("libCOMM_gt_DUT_CommanderMengsk_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderMengsk, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_ArtilleryBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_PlayerIsCommander(UnitGetOwner(EventUnitProgressUnit())) == true))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "ArtilleryMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnitProgressUnit()), SoundLink("MengskCommander_ArtilleryReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_ArtilleryBuilt_Init () {
    libCOMM_gt_CM_Mengsk_ArtilleryBuilt = TriggerCreate("libCOMM_gt_CM_Mengsk_ArtilleryBuilt_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryBuilt, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_Mengsk_ArtilleryBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryStarted
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_ArtilleryStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_PlayerIsCommander(UnitGetOwner(EventUnitProgressUnit())) == true))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "ArtilleryMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMM_gv_cM_MengskArtilleryBuilt = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_ArtilleryStarted_Init () {
    libCOMM_gt_CM_Mengsk_ArtilleryStarted = TriggerCreate("libCOMM_gt_CM_Mengsk_ArtilleryStarted_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryStarted, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_Mengsk_ArtilleryStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionMengskNuclearAnnihilation
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionMengskNuclearAnnihilation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("MengskCommander_NuclearAnnihilationUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionMengskNuclearAnnihilation_Init () {
    libCOMM_gt_CM_AbilityTransmissionMengskNuclearAnnihilation = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionMengskNuclearAnnihilation_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionMengskNuclearAnnihilation, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionMengskNuclearAnnihilation, null, AbilityCommand("NuclearAnnihilationMengsk", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionMengskDirtyBomb
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionMengskDirtyBomb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(libCOMM_gv_cM_MengskTransmissionTimerDirtyBomb) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCOMM_gv_cM_MengskTransmissionTimerDirtyBomb, 120.0, false, c_timeReal);
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("MengskCommander_DirtyBombUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionMengskDirtyBomb_Init () {
    libCOMM_gt_CM_AbilityTransmissionMengskDirtyBomb = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionMengskDirtyBomb_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionMengskDirtyBomb, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionMengskDirtyBomb, null, AbilityCommand("ArtilleryMengskGlobalExperimentalStrike", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionMengskZergCalldown
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionMengskZergCalldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("MengskCommander_ZergCalldownUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionMengskZergCalldown_Init () {
    libCOMM_gt_CM_AbilityTransmissionMengskZergCalldown = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionMengskZergCalldown_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionMengskZergCalldown, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionMengskZergCalldown, null, AbilityCommand("MengskZergCalldownLevel1", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionMengskZergCalldown, null, AbilityCommand("MengskZergCalldownLevel2", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionMengskZergCalldown, null, AbilityCommand("MengskZergCalldownLevel3", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionMengskZergCalldown, null, AbilityCommand("MengskZergCalldownLevel4", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionMengskForcedConscription
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionMengskForcedConscription_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(libCOMM_gv_cM_MengskTransmissionTimerForcedConscription) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCOMM_gv_cM_MengskTransmissionTimerForcedConscription, 120.0, false, c_timeReal);
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("MengskCommander_ForcedConscriptionUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionMengskForcedConscription_Init () {
    libCOMM_gt_CM_AbilityTransmissionMengskForcedConscription = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionMengskForcedConscription_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionMengskForcedConscription, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionMengskForcedConscription, null, AbilityCommand("BunkerDepotMengskDrop", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreMengskDamage
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreMengskDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventUnitDamageSourcePlayer()) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitDamageSourceUnit()) == "TrooperMengsk") || (UnitGetType(EventUnitDamageSourceUnit()) == "TrooperMengskImproved") || (UnitGetType(EventUnitDamageSourceUnit()) == "TrooperMengskFlamethrower") || (UnitGetType(EventUnitDamageSourceUnit()) == "TrooperMengskAA") || (UnitGetType(EventUnitDamageSourceUnit()) == "SCVMengsk"))) {
        libCOMM_gv_cC_ScoreMengskTrooperDamage[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
        PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "MengskTrooperDamage", FixedToInt(libCOMM_gv_cC_ScoreMengskTrooperDamage[EventUnitDamageSourcePlayer()]));
    }
    else if ((UnitGroupHasUnit(libCOMM_gv_cM_Mengsk_VeteranUnits, EventUnitDamageSourceUnit()) == true)) {
        libCOMM_gv_cC_ScoreMengskRoyalGuardDamage[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
        PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "MengskRoyalGuardDamage", FixedToInt(libCOMM_gv_cC_ScoreMengskRoyalGuardDamage[EventUnitDamageSourcePlayer()]));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreMengskDamage_Init () {
    libCOMM_gt_CC_ScoreMengskDamage = TriggerCreate("libCOMM_gt_CC_ScoreMengskDamage_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreMengskDamage, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreMengskDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryMengskRoyalGuardCostList
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_MasteryMengskRoyalGuardCostList_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "MasteryMengskRoyalGuardCost"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_MasteryMengskRoyalGuardCostList(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_MasteryMengskRoyalGuardCostList_Init () {
    libCOMM_gt_CM_MasteryMengskRoyalGuardCostList = TriggerCreate("libCOMM_gt_CM_MasteryMengskRoyalGuardCostList_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_MasteryMengskRoyalGuardCostList, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_TopBarKills
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_TopBarKills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingplayer;
    string lv_killingeffect;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_killingplayer = UnitGetOwner(EventUnitDamageSourceUnit());
    lv_killingeffect = EventUnitDamageEffect();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnitDamageSourceUnit()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), lv_killingplayer) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GetPlayerCommanderGameLink(lv_killingplayer) == "Mengsk"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "CoopCasterMengsk") || (UnitGetType(EventUnitDamageSourceUnit()) == "ZerglingMengsk") || (UnitGetType(EventUnitDamageSourceUnit()) == "HydraliskMengsk") || (UnitGetType(EventUnitDamageSourceUnit()) == "MutaliskMengsk") || (UnitGetType(EventUnitDamageSourceUnit()) == "UltraliskMengsk") || (lv_killingeffect == "ArtilleryMengskExperimentalStrikePeriodicDamage")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantityAdd(lv_killingplayer, "CommanderMengskTopBarKills", RoundI(EventUnitDamageAmount()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_TopBarKills_Init () {
    libCOMM_gt_CM_Mengsk_TopBarKills = TriggerCreate("libCOMM_gt_CM_Mengsk_TopBarKills_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_TopBarKills, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CM_Mengsk_TopBarKills, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryBombardmentTarget
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_ArtilleryBombardmentTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    fixed lv_radiusMaximumSlop;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_radiusMaximumSlop = 7.5;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ArtilleryMengskBombardmentDropDelayCP", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radiusMaximumSlop)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_ArtilleryBombardmentTarget_Init () {
    libCOMM_gt_CM_Mengsk_ArtilleryBombardmentTarget = TriggerCreate("libCOMM_gt_CM_Mengsk_ArtilleryBombardmentTarget_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryBombardmentTarget, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_ArtilleryBombardmentTarget, c_playerAny, "ArtilleryMengskBombardmentDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryExperimentalStrikeTarget
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ArtilleryMengskExperimentalStrikeDropDeplayCP", RegionRandomPoint(RegionCircle(lv_targetPoint, libCOMM_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget_Init () {
    libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget = TriggerCreate("libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget, c_playerAny, "ArtilleryMengskExperimentalStrikeDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_artillery;
    abilcmd lv_abilityCommand;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup auto47F4E4EC_g;
    int auto47F4E4EC_u;

    // Variable Initialization
    lv_abilityCommand = AbilityCommand("ArtilleryMengskExperimentalStrike",0);
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange = 4.0;
    auto47F4E4EC_g = UnitGroup("ArtilleryMengsk", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    auto47F4E4EC_u = UnitGroupCount(auto47F4E4EC_g, c_unitCountAll);
    for (;; auto47F4E4EC_u -= 1) {
        lv_artillery = UnitGroupUnitFromEnd(auto47F4E4EC_g, auto47F4E4EC_u);
        if (lv_artillery == null) { break; }
        UnitIssueOrder(lv_artillery, OrderTargetingPoint(lv_abilityCommand, lv_targetPoint), c_orderQueueAddToFront);
        if ((libCOMM_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange <= 7.0)) {
            libCOMM_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange += 0.5;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget_Init () {
    libCOMM_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget = TriggerCreate("libCOMM_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget, c_playerAny, "ArtilleryMengskGlobalExperimentalStrikeDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_GlobalAbilityCast
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_GlobalAbilityCast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CoopCasterMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_Mengsk_EnergyChanged(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_GlobalAbilityCast_Init () {
    libCOMM_gt_CM_Mengsk_GlobalAbilityCast = TriggerCreate("libCOMM_gt_CM_Mengsk_GlobalAbilityCast_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_GlobalAbilityCast, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Mengsk_GlobalAbilityCast, null, null, c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryExperimentalStrikeFearApply
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scaredUnit;
    point lv_attackLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaredUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackLocation = PointWithOffsetPolar(UnitGetPosition(lv_scaredUnit), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_scaredUnit), -5.0, lv_attackLocation)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_scaredUnit, "ArtilleryMengskFear") == true) && (UnitIsAlive(lv_scaredUnit) == true)) {
        UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_scaredUnit), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_scaredUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply_Init () {
    libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply = TriggerCreate("libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply, null, "ArtilleryMengskFear", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_NuclearAnnihilationSmallNukes
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_NuclearAnnihilationSmallNukes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    fixed lv_smallNukeMaxPlacementRadius;
    int lv_numSmallNukes;
    int lv_nukeCounter;
    fixed lv_nukeDelay;

    // Automatic Variable Declarations
    int autoEAD9CAC1_ae;
    const int autoEAD9CAC1_ai = 1;

    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_smallNukeMaxPlacementRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "NuclearAnnihilationMengskSmallNukeDummyCP", "RevealRadius", EventPlayer());
    lv_numSmallNukes = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "NuclearAnnihilationMengskSmallNukeDummyCP", "PeriodCount", EventPlayer());
    lv_nukeCounter = 1;
    lv_nukeDelay = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "NuclearAnnihilationMengskSmallNukeDummyCP", "PeriodicPeriodArray[" + IntToString(0) + "]", EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    autoEAD9CAC1_ae = lv_numSmallNukes;
    lv_nukeCounter = 1;
    for ( ; ( (autoEAD9CAC1_ai >= 0 && lv_nukeCounter <= autoEAD9CAC1_ae) || (autoEAD9CAC1_ai < 0 && lv_nukeCounter >= autoEAD9CAC1_ae) ) ; lv_nukeCounter += autoEAD9CAC1_ai ) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NuclearAnnihilationMengskSmallNukeDropDelayCP", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_smallNukeMaxPlacementRadius)));
        Wait(lv_nukeDelay, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_NuclearAnnihilationSmallNukes_Init () {
    libCOMM_gt_CM_Mengsk_NuclearAnnihilationSmallNukes = TriggerCreate("libCOMM_gt_CM_Mengsk_NuclearAnnihilationSmallNukes_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_NuclearAnnihilationSmallNukes, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_NuclearAnnihilationSmallNukes, c_playerAny, "NuclearAnnihilationMengskBigNukeDropDelayCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryBombardmentCargoChange
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_ArtilleryBombardmentCargoChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_artillery;
    int lv_cargoCount;
    string lv_cargoCountBehavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_artillery = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_cargoCount = UnitGroupCount(UnitCargoGroup(lv_artillery), c_unitCountAlive);
    lv_cargoCountBehavior = "ArtilleryMengskCargo";

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetUnitAttributePoints(lv_cargoCountBehavior, lv_artillery, lv_cargoCount);
    if ((lv_cargoCount == 0)) {
        UnitBehaviorRemove(lv_artillery, "ArtilleryMengskCargoGlobal", 1);
    }
    else {
        UnitBehaviorAdd(lv_artillery, "ArtilleryMengskCargoGlobal", lv_artillery, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_ArtilleryBombardmentCargoChange_Init () {
    libCOMM_gt_CM_Mengsk_ArtilleryBombardmentCargoChange = TriggerCreate("libCOMM_gt_CM_Mengsk_ArtilleryBombardmentCargoChange_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_ArtilleryBombardmentCargoChange, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_ArtilleryBombardmentCargoChange, c_playerAny, "ArtilleryMengskCargoTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_RegisterVeteranUnit
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_RegisterVeteranUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_Mengsk_XPHungryUnits, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitGroupAdd(libCOMM_gv_cM_Mengsk_VeteranUnits, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libCOMM_gv_cM_MengskEliteBuilt = true;
    libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_RegisterVeteranUnit_Init () {
    libCOMM_gt_CM_Mengsk_RegisterVeteranUnit = TriggerCreate("libCOMM_gt_CM_Mengsk_RegisterVeteranUnit_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_RegisterVeteranUnit, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_RegisterVeteranUnit, c_playerAny, "MengskVeteranTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_RemoveVeteranUnit
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_RemoveVeteranUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levellingunit;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levellingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_statusframe = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_levellingunit);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_levellingunit, null)));
    UnitGroupRemove(libCOMM_gv_cM_Mengsk_XPHungryUnits, lv_levellingunit);
    libCOMM_gf_CM_Mengsk_CheckRoyalGuardSupply();
    libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_RemoveVeteranUnit_Init () {
    libCOMM_gt_CM_Mengsk_RemoveVeteranUnit = TriggerCreate("libCOMM_gt_CM_Mengsk_RemoveVeteranUnit_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_RemoveVeteranUnit, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_RemoveVeteranUnit, c_playerAny, "MengskVeteranMaxedTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_VeteranDies
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_VeteranDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventUnit())) == "Mengsk"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCOMM_gv_cM_Mengsk_VeteranUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_VeteranDies_Init () {
    libCOMM_gt_CM_Mengsk_VeteranDies = TriggerCreate("libCOMM_gt_CM_Mengsk_VeteranDies_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_VeteranDies, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Mengsk_VeteranDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_VeteranDing
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_VeteranDing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levellingunit;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levellingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_statusframe = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_levellingunit);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_levellingunit, null)));
    libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_VeteranDing_Init () {
    libCOMM_gt_CM_Mengsk_VeteranDing = TriggerCreate("libCOMM_gt_CM_Mengsk_VeteranDing_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_VeteranDing, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_VeteranDing, c_playerAny, "MengskVeteranLevelUpDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_RegisterPropagandaUnit
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_RegisterPropagandaUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventUnit())) == "Mengsk"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "SCVMengsk") || (UnitGetType(EventUnit()) == "TrooperMengsk") || (UnitGetType(EventUnit()) == "TrooperMengskAA") || (UnitGetType(EventUnit()) == "TrooperMengskFlamethrower") || (UnitGetType(EventUnit()) == "TrooperMengskImproved")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_Mengsk_PropagandaUnits, EventUnit());
    libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_RegisterPropagandaUnit_Init () {
    libCOMM_gt_CM_Mengsk_RegisterPropagandaUnit = TriggerCreate("libCOMM_gt_CM_Mengsk_RegisterPropagandaUnit_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_RegisterPropagandaUnit, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Mengsk_RegisterPropagandaUnit, null, "PropagandaBlastMengsk", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Mengsk_RegisterPropagandaUnit, null, "PropagandaBlastMengskPermanent", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_RemovePropagandaUnit
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_RemovePropagandaUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventUnit())) == "Mengsk"))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "PropagandaBlastMengsk") < 1))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "PropagandaBlastMengskPermanent") < 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libCOMM_gv_cM_Mengsk_PropagandaUnits, EventUnit());
    libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_RemovePropagandaUnit_Init () {
    libCOMM_gt_CM_Mengsk_RemovePropagandaUnit = TriggerCreate("libCOMM_gt_CM_Mengsk_RemovePropagandaUnit_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_RemovePropagandaUnit, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Mengsk_RemovePropagandaUnit, null, "PropagandaBlastMengsk", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Mengsk_RemovePropagandaUnit, null, "PropagandaBlastMengskPermanent", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_PropagandaUpgraded
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_PropagandaUpgraded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventPlayer()) == "Mengsk"))) {
            return false;
        }

        if (!((EventUpgradeName() == "BlimpMengskTopbarRegen"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_PropagandaUpgraded_Init () {
    libCOMM_gt_CM_Mengsk_PropagandaUpgraded = TriggerCreate("libCOMM_gt_CM_Mengsk_PropagandaUpgraded_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_PropagandaUpgraded, false);
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_Mengsk_PropagandaUpgraded, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_VeterancyEarned
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_VeterancyEarned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dyingunit;
    fixed lv_xp;
    unitgroup lv_veteranunits;
    int lv_veterancount;
    fixed lv_xppersupplyratio;
    fixed lv_heroicxpoverride;
    fixed lv_minimumearnedxp;
    fixed lv_xpradius;

    // Automatic Variable Declarations
    unitgroup auto568A66D3_g;
    int auto568A66D3_u;
    unit auto568A66D3_var;

    // Variable Initialization
    lv_dyingunit = EventUnit();
    lv_veteranunits = UnitGroupEmpty();
    lv_xppersupplyratio = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskRoyalGuardExperienceGainDummy", "Amount", libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Mengsk", libCOMI_gf_GetAlliedCommandersPlayersCopy()));
    lv_heroicxpoverride = 800.0;
    lv_minimumearnedxp = 1.0;
    lv_xpradius = 15.0;

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(lv_dyingunit, libCOMI_gf_GetAlliedPlayer(1), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_dyingunit, "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_CT_UnitSpawnedByMutator(lv_dyingunit) == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_veteranunits = UnitGroupFilterRegion(libCOMM_gv_cM_Mengsk_XPHungryUnits, RegionCircle(UnitGetPosition(lv_dyingunit), lv_xpradius), 0);
    lv_veterancount = UnitGroupCount(lv_veteranunits, c_unitCountAlive);
    lv_xp = (UnitTypeGetProperty(UnitGetType(lv_dyingunit), c_unitPropSuppliesUsed) * lv_xppersupplyratio);
    if ((lv_xp <= 0.0) && (UnitFilterMatch(lv_dyingunit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)) {
        lv_xp = lv_heroicxpoverride;
    }
    else if ((lv_xp <= 0.0)) {
        return true;
    }
    if ((lv_veterancount == 0)) {
        lv_veteranunits = UnitGroupCopy(libCOMM_gv_cM_Mengsk_XPHungryUnits);
        lv_veterancount = UnitGroupCount(lv_veteranunits, c_unitCountAlive);
        if ((lv_veterancount == 0)) {
            return true;
        }

    }

    lv_xp = MaxF(Round((lv_xp / lv_veterancount)), lv_minimumearnedxp);
    auto568A66D3_g = lv_veteranunits;
    auto568A66D3_u = UnitGroupCount(auto568A66D3_g, c_unitCountAll);
    for (;; auto568A66D3_u -= 1) {
        auto568A66D3_var = UnitGroupUnitFromEnd(auto568A66D3_g, auto568A66D3_u);
        if (auto568A66D3_var == null) { break; }
        UnitXPAddXP(auto568A66D3_var, null, lv_xp);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_VeterancyEarned_Init () {
    libCOMM_gt_CM_Mengsk_VeterancyEarned = TriggerCreate("libCOMM_gt_CM_Mengsk_VeterancyEarned_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_VeterancyEarned, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Mengsk_VeterancyEarned, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_MedivacAirlift
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_MedivacAirlift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_siegetank;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_medivac = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_siegetank = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_statusframe = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "MedivacMengskSiegeTankAirliftLoadTrigger")) {
        UnitBehaviorAdd(lv_medivac, "MedivacMengskSiegeTankAirlift", lv_medivac, 1);
        libCOMI_gf_SetUnitAttributePoints("MedivacMengskSiegeTankAirliftLevel", lv_medivac, (UnitXPGetCurrentLevel(lv_siegetank, null) - 1));
        DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_medivac);
        lv_statusframe = DialogControlLastCreated();
        DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_siegetank, null)));
    }
    else {
        UnitBehaviorRemove(lv_medivac, "MedivacMengskSiegeTankAirlift", 1);
        UnitBehaviorRemove(lv_medivac, "MedivacMengskSiegeTankAirliftLevel", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_MedivacAirlift_Init () {
    libCOMM_gt_CM_Mengsk_MedivacAirlift = TriggerCreate("libCOMM_gt_CM_Mengsk_MedivacAirlift_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_MedivacAirlift, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_MedivacAirlift, c_playerAny, "MedivacMengskSiegeTankAirliftLoadTrigger");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_MedivacAirlift, c_playerAny, "MedivacMengskSiegeTankAirliftUnloadTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_MedivacAirliftDing
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_MedivacAirliftDing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_siegetank;
    unit lv_medivac;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_siegetank = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_medivac = UnitTransport(lv_siegetank);
    lv_statusframe = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_siegetank) == "SiegeTankMengskSieged"))) {
            return false;
        }

        if (!((lv_medivac != null))) {
            return false;
        }

        if (!((UnitGetType(lv_medivac) == "MedivacMengsk"))) {
            return false;
        }

        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetUnitAttributePoints("MedivacMengskSiegeTankAirliftLevel", lv_medivac, (UnitXPGetCurrentLevel(lv_siegetank, null) - 1));
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_medivac);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_siegetank, null)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_MedivacAirliftDing_Init () {
    libCOMM_gt_CM_Mengsk_MedivacAirliftDing = TriggerCreate("libCOMM_gt_CM_Mengsk_MedivacAirliftDing_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_MedivacAirliftDing, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_MedivacAirliftDing, c_playerAny, "MengskVeteranLevelUpDummy");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_MedivacAirliftDing, c_playerAny, "MengskVeteranMaxedTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_EnlistStart
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_EnlistStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "TrooperMengskEnlistingAB", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_EnlistStart_Init () {
    libCOMM_gt_CM_Mengsk_EnlistStart = TriggerCreate("libCOMM_gt_CM_Mengsk_EnlistStart_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_EnlistStart, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Mengsk_EnlistStart, null, AbilityCommand("TrooperMengskEnlist",0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Mengsk_EnlistStart, null, AbilityCommand("SCVMengskEnlist",0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_EnlistStop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_EnlistStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "TrooperMengskEnlistingRB", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_EnlistStop_Init () {
    libCOMM_gt_CM_Mengsk_EnlistStop = TriggerCreate("libCOMM_gt_CM_Mengsk_EnlistStop_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_EnlistStop, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Mengsk_EnlistStop, null, AbilityCommand("TrooperMengskEnlist",0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Mengsk_EnlistStop, null, AbilityCommand("SCVMengskEnlist",0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Mengsk_EnlistStop, null, AbilityCommand("TrooperMengskEnlist",0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Mengsk_EnlistStop, null, AbilityCommand("SCVMengskEnlist",0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Mengsk_EnlistStop, null, AbilityCommand("TrooperMengskEnlist",0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Mengsk_EnlistStop, null, AbilityCommand("SCVMengskEnlist",0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ReturnToWork
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_ReturnToWork_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_worker;
    unit lv_nearbytownhall;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitOrderCount(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_Mengsk_ReturningWorkers, EventUnit());
    if ((TriggerActiveCount(TriggerGetCurrent()) > 1)) {
        return true;
    }

    while ((UnitGroupCount(libCOMM_gv_cM_Mengsk_ReturningWorkers, c_unitCountAlive) > 0)) {
        lv_worker = UnitGroupUnit(libCOMM_gv_cM_Mengsk_ReturningWorkers, 1);
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(lv_worker) == true)) {
            UnitGroupRemove(libCOMM_gv_cM_Mengsk_ReturningWorkers, lv_worker);
            lv_nearbytownhall = UnitGroupClosestToPoint(UnitGroup("CommandCenterMengsk", UnitGetOwner(lv_worker), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_worker));
            if ((UnitIsAlive(lv_nearbytownhall) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_worker), UnitGetPosition(lv_nearbytownhall)) < 8.0)) {
                libCOMI_gf_CM_Resources_FindWork(lv_worker, lv_nearbytownhall, 12.0);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_ReturnToWork_Init () {
    libCOMM_gt_CM_Mengsk_ReturnToWork = TriggerCreate("libCOMM_gt_CM_Mengsk_ReturnToWork_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_ReturnToWork, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Mengsk_ReturnToWork, null, AbilityCommand("TrooperMengskEnlist",0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_WeaponPickupRegister
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_WeaponPickupRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_registrant;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_registrant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(lv_registrant)) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_Mengsk_WeaponPickups, lv_registrant);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_WeaponPickupRegister_Init () {
    libCOMM_gt_CM_Mengsk_WeaponPickupRegister = TriggerCreate("libCOMM_gt_CM_Mengsk_WeaponPickupRegister_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_WeaponPickupRegister, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_WeaponPickupRegister, c_playerAny, "TrooperMengskWeaponPickupRegister");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_WeaponPickerUpperRegister
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_WeaponPickerUpperRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_registrant;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_registrant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_Mengsk_WeaponPickerUppers, lv_registrant);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_WeaponPickerUpperRegister_Init () {
    libCOMM_gt_CM_Mengsk_WeaponPickerUpperRegister = TriggerCreate("libCOMM_gt_CM_Mengsk_WeaponPickerUpperRegister_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_WeaponPickerUpperRegister, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_WeaponPickerUpperRegister, c_playerAny, "TrooperMengskWeaponPickerUpperRegister");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_WeaponPickerUpperUnregister
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_WeaponPickerUpperUnregister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_registrant;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_registrant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libCOMM_gv_cM_Mengsk_WeaponPickerUppers, lv_registrant);
    libCOMM_gv_cM_MengskTrooperEquipped = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_WeaponPickerUpperUnregister_Init () {
    libCOMM_gt_CM_Mengsk_WeaponPickerUpperUnregister = TriggerCreate("libCOMM_gt_CM_Mengsk_WeaponPickerUpperUnregister_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_WeaponPickerUpperUnregister, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_WeaponPickerUpperUnregister, c_playerAny, "TrooperMengskWeaponPickerupperUnregister");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_WeaponPickup
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_WeaponPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickup;
    unit lv_pickerupper;

    // Automatic Variable Declarations
    unitgroup auto264BCE0D_g;
    int auto264BCE0D_u;
    string autoEFCD1401_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerActiveCount(TriggerGetCurrent()) > 1)) {
        return true;
    }

    while (true) {
        Wait(0.5, c_timeGame);
        if ((UnitGroupCount(libCOMM_gv_cM_Mengsk_WeaponPickups, c_unitCountAlive) > 0) && (UnitGroupCount(libCOMM_gv_cM_Mengsk_WeaponPickerUppers, c_unitCountAlive) > 0)) {
            auto264BCE0D_g = libCOMM_gv_cM_Mengsk_WeaponPickups;
            auto264BCE0D_u = UnitGroupCount(auto264BCE0D_g, c_unitCountAll);
            for (;; auto264BCE0D_u -= 1) {
                lv_pickup = UnitGroupUnitFromEnd(auto264BCE0D_g, auto264BCE0D_u);
                if (lv_pickup == null) { break; }
                lv_pickerupper = UnitGroupClosestToPoint(libCOMM_gv_cM_Mengsk_WeaponPickerUppers, UnitGetPosition(lv_pickup));
                if ((UnitIsAlive(lv_pickerupper) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_pickup), UnitGetPosition(lv_pickerupper)) <= 2.0)) {
                    autoEFCD1401_val = UnitGetType(lv_pickup);
                    if (autoEFCD1401_val == "TrooperMengskWeaponAAPickup") {
                        libCOMM_gf_CM_Mengsk_ForceMorphTrooper(lv_pickerupper, lv_pickup, "TrooperMengskMorphAA", "TrooperMengskWeaponAA", "SetWeaponAA");
                    }
                    else if (autoEFCD1401_val == "TrooperMengskWeaponFlamethrowerPickup") {
                        libCOMM_gf_CM_Mengsk_ForceMorphTrooper(lv_pickerupper, lv_pickup, "TrooperMengskMorphFlamethrower", "TrooperMengskWeaponFlamethrower", "SetWeaponFlamethrower");
                    }
                    else if (autoEFCD1401_val == "TrooperMengskWeaponImprovedPickup") {
                        libCOMM_gf_CM_Mengsk_ForceMorphTrooper(lv_pickerupper, lv_pickup, "TrooperMengskMorphImproved", "TrooperMengskWeaponImproved", "SetWeaponImproved");
                    }
                    else {
                        UnitGroupRemove(libCOMM_gv_cM_Mengsk_WeaponPickups, lv_pickup);
                    }
                }

                lv_pickerupper = null;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_WeaponPickup_Init () {
    libCOMM_gt_CM_Mengsk_WeaponPickup = TriggerCreate("libCOMM_gt_CM_Mengsk_WeaponPickup_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_WeaponPickup, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ZergSeekDestroy
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_ZergSeekDestroy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_FindandAttackNearestEnemy(EventPlayerEffectUsedUnit(c_effectUnitCaster), 30.0, 6.0, 2.0, UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_ZergSeekDestroy_Init () {
    libCOMM_gt_CM_Mengsk_ZergSeekDestroy = TriggerCreate("libCOMM_gt_CM_Mengsk_ZergSeekDestroy_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_ZergSeekDestroy, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_ZergSeekDestroy, c_playerAny, "MengskSeekDestroyTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ZerglingMengskSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_ZerglingMengskSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "ZerglingMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_ZerglingMengskSpawn_Init () {
    libCOMM_gt_CM_Mengsk_ZerglingMengskSpawn = TriggerCreate("libCOMM_gt_CM_Mengsk_ZerglingMengskSpawn_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_ZerglingMengskSpawn, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_ZerglingMengskSpawn, c_playerAny, "ZerglingMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_HydraliskMengskSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_HydraliskMengskSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "HydraliskMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_HydraliskMengskSpawn_Init () {
    libCOMM_gt_CM_Mengsk_HydraliskMengskSpawn = TriggerCreate("libCOMM_gt_CM_Mengsk_HydraliskMengskSpawn_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_HydraliskMengskSpawn, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_HydraliskMengskSpawn, c_playerAny, "HydraliskMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_MutaliskMengskSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_MutaliskMengskSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "MutaliskMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_MutaliskMengskSpawn_Init () {
    libCOMM_gt_CM_Mengsk_MutaliskMengskSpawn = TriggerCreate("libCOMM_gt_CM_Mengsk_MutaliskMengskSpawn_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_MutaliskMengskSpawn, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_MutaliskMengskSpawn, c_playerAny, "MutaliskMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_UltraliskMengskSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_UltraliskMengskSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "UltraliskMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_UltraliskMengskSpawn_Init () {
    libCOMM_gt_CM_Mengsk_UltraliskMengskSpawn = TriggerCreate("libCOMM_gt_CM_Mengsk_UltraliskMengskSpawn_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_UltraliskMengskSpawn, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Mengsk_UltraliskMengskSpawn, c_playerAny, "UltraliskMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_BunkerDepotDropFillCargo
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_BunkerDepotDropFillCargo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunkerdepot;
    int lv_troopercargosize;
    int lv_bunkerdepotcargocapacity;
    int lv_bunkerdepotcargomaxcount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bunkerdepot = EventUnit();
    lv_troopercargosize = CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TrooperMengsk", "CargoSize", EventPlayer());
    lv_bunkerdepotcargocapacity = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BunkerMengskTransport", "TotalCargoSpace", EventPlayer());
    lv_bunkerdepotcargomaxcount = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BunkerMengskTransport", "MaxCargoCount", EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_troopercargosize != 0) && (lv_bunkerdepotcargocapacity != 0) && (lv_bunkerdepotcargomaxcount != 0)) {
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengsk", MinI((lv_bunkerdepotcargocapacity / lv_troopercargosize), lv_bunkerdepotcargomaxcount));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_BunkerDepotDropFillCargo_Init () {
    libCOMM_gt_CM_Mengsk_BunkerDepotDropFillCargo = TriggerCreate("libCOMM_gt_CM_Mengsk_BunkerDepotDropFillCargo_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_BunkerDepotDropFillCargo, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Mengsk_BunkerDepotDropFillCargo, null, AbilityCommand("BunkerDepotMengskDropMorph",0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_DirtyBombSweetener
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Mengsk_DirtyBombSweetener_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("ArtilleryMengsk", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32))), 0), c_unitCountAlive) > 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("UI_Mengsk_TopBar_Stinger_Up", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_Mengsk_TopBar_Stinger_Down", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
    Wait(16.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Mengsk_DirtyBombSweetener_Init () {
    libCOMM_gt_CM_Mengsk_DirtyBombSweetener = TriggerCreate("libCOMM_gt_CM_Mengsk_DirtyBombSweetener_Func");
    TriggerEnable(libCOMM_gt_CM_Mengsk_DirtyBombSweetener, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Mengsk_DirtyBombSweetener, null, AbilityCommand("ArtilleryMengskGlobalExperimentalStrike",0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderNova
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderNova_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto3B0256EA_g;
    int auto3B0256EA_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Nova");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreNovaDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreNovaHeal, true);
    TriggerEnable(libCOMM_gt_CC_ScoreNovaAbsorb, true);
    TriggerExecute(libCOMM_gt_NovaUnitNames_GenerateNameList, false, false);
    TriggerEnable(libCOMM_gt_NovaUnitNames_Assign, true);
    TriggerEnable(libCOMM_gt_NovaUnitNames_KillCountUpdate, true);
    TriggerEnable(libCOMM_gt_NovaUnitNames_KillCountUpdateLaserTurret, true);
    TriggerEnable(libCOMM_gt_CM_NovaGriffinTransportActived, true);
    TriggerEnable(libCOMM_gt_CM_NovaGriffinTransportStop, true);
    TriggerEnable(libCOMM_gt_CM_NovaGriffinTransportTimeOut, true);
    TriggerEnable(libCOMM_gt_CM_NovaGriffinTransportAirBehaviorApplied, true);
    TriggerEnable(libCOMM_gt_CM_NovaGriffinTransportGroundBehaviorApplied, true);
    TriggerEnable(libCOMM_gt_CM_NovaGriffinTransportTeleportUnload, true);
    TriggerEnable(libCOMM_gt_CM_NovaGriffinBombingRunActivated, true);
    TriggerEnable(libCOMM_gt_CM_NovaGriffinBombingRunFinish, true);
    TriggerEnable(libCOMM_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply, true);
    TriggerEnable(libCOMM_gt_CM_NovaPsiStrike, true);
    TriggerEnable(libCOMM_gt_CM_Nova_BuildingCompletedTrigger, true);
    auto3B0256EA_g = lv_players;
    auto3B0256EA_var = -1;
    while (true) {
        auto3B0256EA_var = PlayerGroupNextPlayer(auto3B0256EA_g, auto3B0256EA_var);
        if (auto3B0256EA_var < 0) { break; }
        libCOMI_gf_CM_CommanderVOAbilityWatchUnit(auto3B0256EA_var, SoundLink("NovaCommander_GriffinAirstrikeReady", -1), "Abil/NovaGriffinBombingRunActivate", libCOMI_gv_yY_GPCasterUnit[auto3B0256EA_var], "NovaGriffinBombingRunActivate");
        libCOMI_gf_CM_CommanderVOAbilityWatchUnit(auto3B0256EA_var, SoundLink("NovaCommander_GriffinAirliftReady", -1), "Abil/NovaGriffinTransportLoadUnits", libCOMI_gv_yY_GPCasterUnit[auto3B0256EA_var], "NovaGriffinTransportLoadUnits");
        libCOMM_gf_CM_AbilityTransmissionNovaNukeReadyActionVer(auto3B0256EA_var);
        TriggerEnable(libCOMM_gt_CM_AbilityTransmissionNovaTransport, true);
        TriggerEnable(libCOMM_gt_CM_AbilityTransmissionNovaBombingRun, true);
        TriggerEnable(libCOMM_gt_CM_AbilityTransmissionNovaDMatrix, true);
        libCOMM_gf_CM_Nova_IterateExistingBuildings(auto3B0256EA_var);
        libCOMI_gf_CreateACCaster(auto3B0256EA_var, "CoopCasterNova");
        libCOMI_gf_CU_GPInitCommonCaster(auto3B0256EA_var, "CoopCasterNova", "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate", 4, "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", "Nova");
        if ((TechTreeUnitIsAllowed(auto3B0256EA_var, "GhostAcademyNova") == true)) {
            libCOMI_gf_CreateACStructure(auto3B0256EA_var, "GhostAcademyNova");
            UnitBehaviorAdd(UnitLastCreated(), "NovaCoopGhostAcademyLandingIntro", UnitLastCreated(), 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderNova_Init () {
    libCOMM_gt_DUT_CommanderNova = TriggerCreate("libCOMM_gt_DUT_CommanderNova_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderNova, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaRespawnBuyBackCostAdjustment
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_NovaRespawnBuyBackCostAdjustment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_reviveTimer;
    int lv_reviveCostPerSecond;
    fixed lv_totalBuybackCost;
    int lv_itPlayer;
    int lv_heroPlayer;
    string lv_heroUnit;
    int lv_heroUnitIndex;

    // Automatic Variable Declarations
    playergroup auto11163F41_g;

    // Variable Initialization
    lv_reviveCostPerSecond = 5;
    lv_heroPlayer = EventPlayer();
    lv_heroUnit = "NovaCoop";
    lv_heroUnitIndex = c_unitAbilAutoCastChangeAll;

    // Actions
    if (!runActions) {
        return true;
    }

    auto11163F41_g = libCOMI_gf_CC_PlayersOfCommander("Nova");
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto11163F41_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_heroUnitIndex = libCOMI_gf_GetHeroUnitIndex(UnitGroupUnit(UnitGroup(lv_heroUnit, lv_itPlayer, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1), 1));
        libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTimer = UnitBehaviorDuration(libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviverUnit, "NovaReviveTimer");
        lv_totalBuybackCost = (Round(libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTimer) * lv_reviveCostPerSecond);
        CatalogFieldValueSet(c_gameCatalogAbil, "NovaReviveInstantBuyback", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", lv_itPlayer, FixedToString(lv_totalBuybackCost, 0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_NovaRespawnBuyBackCostAdjustment_Init () {
    libCOMM_gt_CM_NovaRespawnBuyBackCostAdjustment = TriggerCreate("libCOMM_gt_CM_NovaRespawnBuyBackCostAdjustment_Func");
    TriggerEnable(libCOMM_gt_CM_NovaRespawnBuyBackCostAdjustment, false);
    TriggerAddEventTimePeriodic(libCOMM_gt_CM_NovaRespawnBuyBackCostAdjustment, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaRespawnBuyBack
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_NovaRespawnBuyBack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroPlayer;
    string lv_heroUnitType;
    unit lv_heroUnit;
    int lv_heroUnitIndex;
    string lv_heroUnitUserDataInstance;
    string lv_heroReviveAbilityLink;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroPlayer = EventPlayer();
    lv_heroUnitType = "NovaCoop";
    lv_heroUnit = UnitGroupUnit(UnitGroup(lv_heroUnitType, lv_heroPlayer, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1), 1);
    lv_heroUnitIndex = libCOMI_gf_GetHeroUnitIndex(lv_heroUnit);
    lv_heroUnitUserDataInstance = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_userData;
    lv_heroReviveAbilityLink = UserDataGetString("Heroes", lv_heroUnitUserDataInstance, "ReviveLink", 1);

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTargetLocation = EventUnitTargetPoint();
    libNtve_gf_PlayerRemoveCooldown(EventPlayer(), lv_heroReviveAbilityLink);
    TriggerEnable(libCOMM_gt_CM_NovaRespawnBuyBackCostAdjustment, false);
    CatalogFieldValueSet(c_gameCatalogAbil, "NovaReviveInstantBuyback", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", EventPlayer(), "450");
    UnitBehaviorAdd(lv_heroUnit, "TargetedRevive", lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_NovaRespawnBuyBack_Init () {
    libCOMM_gt_CM_NovaRespawnBuyBack = TriggerCreate("libCOMM_gt_CM_NovaRespawnBuyBack_Func");
    TriggerAddEventUnitAbility(libCOMM_gt_CM_NovaRespawnBuyBack, null, AbilityCommand("NovaReviveInstantBuyback", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionNovaBombingRun
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionNovaBombingRun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("NovaCommander_GriffinAirstrike", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionNovaBombingRun_Init () {
    libCOMM_gt_CM_AbilityTransmissionNovaBombingRun = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionNovaBombingRun_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionNovaBombingRun, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionNovaBombingRun, null, AbilityCommand("NovaGriffinBombingRunExecute", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionNovaTransport
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionNovaTransport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("NovaCommander_GriffinAirlift", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionNovaTransport_Init () {
    libCOMM_gt_CM_AbilityTransmissionNovaTransport = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionNovaTransport_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionNovaTransport, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionNovaTransport, null, AbilityCommand("NovaGriffinTransportLoadUnits", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionNovaDMatrix
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionNovaDMatrix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("NovaCommander_DefensiveMatrix", -1), PlayerGroupAll());
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionNovaDMatrix_Init () {
    libCOMM_gt_CM_AbilityTransmissionNovaDMatrix = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionNovaDMatrix_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionNovaDMatrix, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionNovaDMatrix, null, AbilityCommand("NovaDefensiveMatrixDrone", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreNovaDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreNovaDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "NovaCoop") || (UnitGetType(EventUnitDamageSourceUnit()) == "NovaCoopDecoy") || (UnitGetType(EventUnitDamageSourceUnit()) == "NovaBoombotBurrowed")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreNovaDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "NovaDamage", FixedToInt(libCOMM_gv_cC_ScoreNovaDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreNovaDmg_Init () {
    libCOMM_gt_CC_ScoreNovaDmg = TriggerCreate("libCOMM_gt_CC_ScoreNovaDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreNovaDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreNovaDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreNovaHeal
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreNovaHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "Nova"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreNovaHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "NovaHealandAbsorb", FixedToInt(libCOMM_gv_cC_ScoreNovaHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreNovaHeal_Init () {
    libCOMM_gt_CC_ScoreNovaHeal = TriggerCreate("libCOMM_gt_CC_ScoreNovaHeal_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreNovaHeal, false);
    TriggerAddEventUnitHealed(libCOMM_gt_CC_ScoreNovaHeal, null, c_unitVitalAny, "HealingDroneHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreNovaAbsorb
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreNovaAbsorb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreNovaHeal[UnitGetOwner(EventUnit())] += EventUnitDamageAbsorbed();
    PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "NovaHealandAbsorb", FixedToInt(libCOMM_gv_cC_ScoreNovaHeal[UnitGetOwner(EventUnit())]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreNovaAbsorb_Init () {
    libCOMM_gt_CC_ScoreNovaAbsorb = TriggerCreate("libCOMM_gt_CC_ScoreNovaAbsorb_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreNovaAbsorb, false);
    TriggerAddEventUnitDamageAbsorbed(libCOMM_gt_CC_ScoreNovaAbsorb, null, "NovaCoopCasterDefensiveMatrix");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaUnitNames_GenerateNameList
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_NovaUnitNames_GenerateNameList_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoCC8E4740_ae = libCOMM_gv_cMC_NovaUnitName_CountMax;
    const int autoCC8E4740_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoCC8E4740_ai >= 0 && lv_i <= autoCC8E4740_ae) || (autoCC8E4740_ai < 0 && lv_i >= autoCC8E4740_ae) ) ; lv_i += autoCC8E4740_ai ) {
        TextExpressionSetToken("Param/Expression/lib_COMM_7ECD7935", "Name", libCOMM_gf_CC_StoryArmyUnitUnitType(lv_i));
        libCOMM_gv_cM_NovaUnitName_Text[lv_i] = TextExpressionAssemble("Param/Expression/lib_COMM_7ECD7935");
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_NovaUnitNames_GenerateNameList_Init () {
    libCOMM_gt_NovaUnitNames_GenerateNameList = TriggerCreate("libCOMM_gt_NovaUnitNames_GenerateNameList_Func");
    TriggerEnable(libCOMM_gt_NovaUnitNames_GenerateNameList, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaUnitNames_Assign
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_NovaUnitNames_Assign_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_novaUnitName_Player;
    unit lv_novaUnitName_Unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_novaUnitName_Player = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_novaUnitName_Unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lv_novaUnitName_Player) == true))) {
            return false;
        }

        if (!(((libCOMI_gf_ActiveCommanderForPlayer(lv_novaUnitName_Player) == "Nova") || (libCOMI_gf_ActiveCommanderForPlayer(lv_novaUnitName_Player) == "Horner")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 61, IntToFixed(libCOMM_gv_cM_NovaUnitName_CountCurrentPosition));
    libCOMM_gf_NovaUnitNames_KillUpdateText(lv_novaUnitName_Unit, libCOMM_gv_cM_NovaUnitName_CountCurrentPosition);
    libCOMM_gv_cM_NovaUnitName_CountCurrentPosition += libCOMM_gv_cM_NovaUnitName_CountStep;
    if ((libCOMM_gv_cM_NovaUnitName_CountCurrentPosition > libCOMM_gv_cMC_NovaUnitName_CountMax)) {
        libCOMM_gv_cM_NovaUnitName_CountCurrentPosition -= libCOMM_gv_cMC_NovaUnitName_CountMax;
    }

    if ((libCOMM_gv_cM_NovaUnitName_CountCurrentPosition < 1)) {
        libCOMM_gv_cM_NovaUnitName_CountCurrentPosition += libCOMM_gv_cMC_NovaUnitName_CountMax;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_NovaUnitNames_Assign_Init () {
    libCOMM_gt_NovaUnitNames_Assign = TriggerCreate("libCOMM_gt_NovaUnitNames_Assign_Func");
    TriggerEnable(libCOMM_gt_NovaUnitNames_Assign, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_NovaUnitNames_Assign, c_playerAny, "BarracksOrbitalStrikeAssignRally");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_NovaUnitNames_Assign, c_playerAny, "MercAirDropApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaUnitNames_KillCountUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_NovaUnitNames_KillCountUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_customValue61;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_customValue61 = FixedToInt(UnitGetCustomValue(libNtve_gf_KillingUnit(), 61));

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!(((libCOMI_gf_GetPlayerCommanderGameLink(libNtve_gf_KillingPlayer()) == "Nova") || (libCOMI_gf_GetPlayerCommanderGameLink(libNtve_gf_KillingPlayer()) == "Horner")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_customValue61 != 0)) {
        libCOMM_gf_NovaUnitNames_KillUpdateText(libNtve_gf_KillingUnit(), lv_customValue61);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_NovaUnitNames_KillCountUpdate_Init () {
    libCOMM_gt_NovaUnitNames_KillCountUpdate = TriggerCreate("libCOMM_gt_NovaUnitNames_KillCountUpdate_Func");
    TriggerEnable(libCOMM_gt_NovaUnitNames_KillCountUpdate, false);
    TriggerAddEventUnitDied(libCOMM_gt_NovaUnitNames_KillCountUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaUnitNames_KillCountUpdateLaserTurret
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_NovaUnitNames_KillCountUpdateLaserTurret_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_customValue61;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((libCOMI_gf_GetPlayerCommanderGameLink(libNtve_gf_KillingPlayer()) == "Nova"))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "NovaACLaserTurret"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_customValue61 = FixedToInt(UnitGetCustomValue(UnitBehaviorEffectUnit(libNtve_gf_KillingUnit(), "AutoTurret_BlackOpsTimedLife", c_effectUnitCaster, 0), 61));
    libCOMM_gf_NovaUnitNames_KillUpdateText(UnitBehaviorEffectUnit(libNtve_gf_KillingUnit(), "AutoTurret_BlackOpsTimedLife", c_effectUnitCaster, 0), lv_customValue61);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_NovaUnitNames_KillCountUpdateLaserTurret_Init () {
    libCOMM_gt_NovaUnitNames_KillCountUpdateLaserTurret = TriggerCreate("libCOMM_gt_NovaUnitNames_KillCountUpdateLaserTurret_Func");
    TriggerEnable(libCOMM_gt_NovaUnitNames_KillCountUpdateLaserTurret, false);
    TriggerAddEventUnitDied(libCOMM_gt_NovaUnitNames_KillCountUpdateLaserTurret, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportActived
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_NovaGriffinTransportActived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);
    lv_pg = PlayerGroupSingle(lv_p);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libCOMM_gv_cM_NovaGriffinTransportUnit[lv_p] = EventUnit();
    libCOMM_gv_cM_NovaGriffinTransportUnitGroup[lv_p] = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    libCOMM_gv_cM_NovaGriffinTranportLoadPoint[lv_p] = UnitGetPosition(libCOMM_gv_cM_NovaGriffinTransportUnit[lv_p]);
    UnitSetState(libCOMI_gv_yY_GPCasterUnit[lv_p], c_unitStateSilenced, true);
    UISetCursorVisible(lv_pg, false);
    Wait(0.5, c_timeGame);
    UISetCursorVisible(lv_pg, true);
    UISetTargetingOrder(lv_pg, libCOMM_gv_cM_NovaGriffinTransportUnitGroup[lv_p], OrderTargetingPoint(AbilityCommand("NovaGriffinTransportUnloadUnits", 0), UnitGetPosition(libCOMM_gv_cM_NovaGriffinTransportUnit[lv_p])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_NovaGriffinTransportActived_Init () {
    libCOMM_gt_CM_NovaGriffinTransportActived = TriggerCreate("libCOMM_gt_CM_NovaGriffinTransportActived_Func");
    TriggerEnable(libCOMM_gt_CM_NovaGriffinTransportActived, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_NovaGriffinTransportActived, null, "NovaGriffinTransportActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportStop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_NovaGriffinTransportStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(libCOMI_gv_yY_GPCasterUnit[lv_p], c_unitStateSilenced, false);
    Wait(0.0625, c_timeGame);
    if ((UnitHasBehavior2(libCOMM_gv_cM_NovaGriffinTransportUnit[lv_p], "NovaGriffinTransportUnloadUnitsDespawnDelay") == false)) {
        UnitCreateEffectUnit(libCOMM_gv_cM_NovaGriffinTransportUnit[lv_p], "NovaGriffinTransportCancelUnloadSet", libCOMM_gv_cM_NovaGriffinTransportUnit[lv_p]);
    }

    UnitCreateEffectUnit(libCOMI_gv_yY_GPCasterUnit[lv_p], "NovaGriffinGCD", libCOMI_gv_yY_GPCasterUnit[lv_p]);
    UnitGroupClear(libCOMM_gv_cM_NovaGriffinGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCOMM_gv_cM_NovaGriffinGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_NovaGriffinTransportStop_Init () {
    libCOMM_gt_CM_NovaGriffinTransportStop = TriggerCreate("libCOMM_gt_CM_NovaGriffinTransportStop_Func");
    TriggerEnable(libCOMM_gt_CM_NovaGriffinTransportStop, false);
    TriggerAddEventTargetModeUpdate(libCOMM_gt_CM_NovaGriffinTransportStop, c_playerAny, AbilityCommand("NovaGriffinTransportUnloadUnits", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportTimeOut
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_NovaGriffinTransportTimeOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libCOMI_gv_yY_GPCasterUnit[lv_p], "NovaGriffinGCD", libCOMI_gv_yY_GPCasterUnit[lv_p]);
    UnitSetState(libCOMI_gv_yY_GPCasterUnit[lv_p], c_unitStateSilenced, false);
    UnitGroupClear(libCOMM_gv_cM_NovaGriffinGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCOMM_gv_cM_NovaGriffinGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_NovaGriffinTransportTimeOut_Init () {
    libCOMM_gt_CM_NovaGriffinTransportTimeOut = TriggerCreate("libCOMM_gt_CM_NovaGriffinTransportTimeOut_Func");
    TriggerEnable(libCOMM_gt_CM_NovaGriffinTransportTimeOut, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_NovaGriffinTransportTimeOut, c_playerAny, "NovaGriffinTransportUnloadUnitsDespawnDelayTimeOut");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportAirBehaviorApplied
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_NovaGriffinTransportAirBehaviorApplied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_NovaGriffinGroundUnitsTransportGroupAir[lv_p], EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_NovaGriffinTransportAirBehaviorApplied_Init () {
    libCOMM_gt_CM_NovaGriffinTransportAirBehaviorApplied = TriggerCreate("libCOMM_gt_CM_NovaGriffinTransportAirBehaviorApplied_Func");
    TriggerEnable(libCOMM_gt_CM_NovaGriffinTransportAirBehaviorApplied, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_NovaGriffinTransportAirBehaviorApplied, null, "NovaGriffinTransportAirUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportGroundBehaviorApplied
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_NovaGriffinTransportGroundBehaviorApplied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_NovaGriffinGroundUnitsTransportGroupGround[lv_p], EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_NovaGriffinTransportGroundBehaviorApplied_Init () {
    libCOMM_gt_CM_NovaGriffinTransportGroundBehaviorApplied = TriggerCreate("libCOMM_gt_CM_NovaGriffinTransportGroundBehaviorApplied_Func");
    TriggerEnable(libCOMM_gt_CM_NovaGriffinTransportGroundBehaviorApplied, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_NovaGriffinTransportGroundBehaviorApplied, null, "NovaGriffinTransportGroundUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportTeleportUnload
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_NovaGriffinTransportTeleportUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unloadPoint;
    fixed lv_angle;
    fixed lv_distance;
    int lv_p;
    point lv_placementtestpoint;

    // Automatic Variable Declarations
    unitgroup autoF0C1E0ED_g;
    int autoF0C1E0ED_u;
    unit autoF0C1E0ED_var;
    unitgroup autoCDA254BD_g;
    int autoCDA254BD_u;
    unit autoCDA254BD_var;

    // Variable Initialization
    lv_unloadPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(libCOMM_gv_cM_NovaGriffinTranportLoadPoint[lv_p], lv_unloadPoint);
    lv_distance = DistanceBetweenPoints(libCOMM_gv_cM_NovaGriffinTranportLoadPoint[lv_p], lv_unloadPoint);
    autoF0C1E0ED_g = libCOMM_gv_cM_NovaGriffinGroundUnitsTransportGroupAir[lv_p];
    autoF0C1E0ED_u = UnitGroupCount(autoF0C1E0ED_g, c_unitCountAll);
    for (;; autoF0C1E0ED_u -= 1) {
        autoF0C1E0ED_var = UnitGroupUnitFromEnd(autoF0C1E0ED_g, autoF0C1E0ED_u);
        if (autoF0C1E0ED_var == null) { break; }
        UnitSetPosition(autoF0C1E0ED_var, PointWithOffsetPolar(UnitGetPosition(autoF0C1E0ED_var), lv_distance, lv_angle), false);
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NovaGriffinTransportAirUnitsRB", autoF0C1E0ED_var);
    }
    autoCDA254BD_g = libCOMM_gv_cM_NovaGriffinGroundUnitsTransportGroupGround[lv_p];
    autoCDA254BD_u = UnitGroupCount(autoCDA254BD_g, c_unitCountAll);
    for (;; autoCDA254BD_u -= 1) {
        autoCDA254BD_var = UnitGroupUnitFromEnd(autoCDA254BD_g, autoCDA254BD_u);
        if (autoCDA254BD_var == null) { break; }
        if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(autoCDA254BD_var), lv_distance, lv_angle)) == true)) {
            UnitSetPosition(autoCDA254BD_var, PointWithOffsetPolar(UnitGetPosition(autoCDA254BD_var), lv_distance, lv_angle), false);
        }
        else {
            lv_placementtestpoint = UnitTypePlacementFromPoint(UnitGetType(autoCDA254BD_var), UnitGetOwner(autoCDA254BD_var), lv_unloadPoint, 5.0);
            if ((lv_placementtestpoint != null)) {
                UnitSetPosition(autoCDA254BD_var, lv_placementtestpoint, false);
            }

        }
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NovaGriffinTransportUnhideUnitsSet", autoCDA254BD_var);
    }
    UnitGroupClear(libCOMM_gv_cM_NovaGriffinGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCOMM_gv_cM_NovaGriffinGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_NovaGriffinTransportTeleportUnload_Init () {
    libCOMM_gt_CM_NovaGriffinTransportTeleportUnload = TriggerCreate("libCOMM_gt_CM_NovaGriffinTransportTeleportUnload_Func");
    TriggerEnable(libCOMM_gt_CM_NovaGriffinTransportTeleportUnload, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_NovaGriffinTransportTeleportUnload, c_playerAny, "NovaGriffinTransportUnloadUnitsCompletionSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinBombingRunActivated
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_NovaGriffinBombingRunActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMM_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "NovaGriffinBombingRunActivate";
    libCOMM_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("NovaGriffinBombingRunExecute", 0);
    libCOMM_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/NovaGriffinBombingRunActivate";
    libCOMM_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "NovaGriffinBombingRunActivate";
    libCOMM_gv_cM_SoATargetingModel[lv_casterPlayer] = "NovaGriffinBombingRunTargetingModel";
    libCOMM_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("NovaGriffinBombingRunTargetingDummy", 0), UnitGetPosition(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer]));
    libCOMM_gv_cM_SoATargetingUnitType[lv_casterPlayer] = "NovaGriffinBombingRunTargeter";
    libCOMM_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 1;
    libCOMM_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMM_892ADD20");
    libCOMM_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMM_2BAF48CC");
    libCOMM_gv_cM_NovaGriffinBombingRunCost[lv_casterPlayer] = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, "NovaGriffinBombingRunActivate", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", lv_casterPlayer));
    libCOMM_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_NovaGriffinBombingRunActivated_Init () {
    libCOMM_gt_CM_NovaGriffinBombingRunActivated = TriggerCreate("libCOMM_gt_CM_NovaGriffinBombingRunActivated_Func");
    TriggerEnable(libCOMM_gt_CM_NovaGriffinBombingRunActivated, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_NovaGriffinBombingRunActivated, null, "NovaGriffinBombingRunActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinBombingRunFinish
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_NovaGriffinBombingRunFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetCooldown(libCOMI_gv_yY_GPCasterUnit[lv_p], "NovaGriffinBombingRunActivate", "Abil/NovaGriffinBombingRunActivate") > 1.0)) {
        UnitCreateEffectUnit(libCOMI_gv_yY_GPCasterUnit[lv_p], "NovaGriffinGCD", libCOMI_gv_yY_GPCasterUnit[lv_p]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_NovaGriffinBombingRunFinish_Init () {
    libCOMM_gt_CM_NovaGriffinBombingRunFinish = TriggerCreate("libCOMM_gt_CM_NovaGriffinBombingRunFinish_Func");
    TriggerEnable(libCOMM_gt_CM_NovaGriffinBombingRunFinish, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_NovaGriffinBombingRunFinish, null, "NovaGriffinBombingRunActivate", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Nova Siege Mode Progressive Range Increase Apply
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_siegeTankUnitGroup;

    // Automatic Variable Declarations
    unitgroup auto6383647D_g;
    int auto6383647D_u;
    unit auto6383647D_var;

    // Variable Initialization
    lv_siegeTankUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_siegeTankUnitGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SiegeTankSieged_BlackOps", "", "", UnitGetOwner(EventUnit()), -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6383647D_g = lv_siegeTankUnitGroup;
    auto6383647D_u = UnitGroupCount(auto6383647D_g, c_unitCountAll);
    for (;; auto6383647D_u -= 1) {
        auto6383647D_var = UnitGroupUnitFromEnd(auto6383647D_g, auto6383647D_u);
        if (auto6383647D_var == null) { break; }
        UnitBehaviorAdd(auto6383647D_var, "SiegeTankSiegeModeProgressiveRangeIncease", EventUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply_Init () {
    libCOMM_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply = TriggerCreate("libCOMM_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply_Func");
    TriggerEnable(libCOMM_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply, null, AbilityCommand("FactoryTechLabResearch", 18), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Nova Psi Strike
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_NovaPsiStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    const int auto3AC2F65C_ae = 14;
    const int auto3AC2F65C_ai = 1;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 8.0;
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 8.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto3AC2F65C_ai >= 0 && lv_i <= auto3AC2F65C_ae) || (auto3AC2F65C_ai < 0 && lv_i >= auto3AC2F65C_ae) ) ; lv_i += auto3AC2F65C_ai ) {
        libCOMM_gv_NovaPsiStrikeFacing[lv_player] = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((libCOMM_gv_NovaPsiStrikeFacing[lv_player] < (lv_facing - 90.0)) && (libCOMM_gv_NovaPsiStrikeFacing[lv_player] > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((libCOMM_gv_NovaPsiStrikeFacing[lv_player] > (lv_facing + 90.0)) && (libCOMM_gv_NovaPsiStrikeFacing[lv_player] < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                    break;
                }

            }
            else {
                if (((libCOMM_gv_NovaPsiStrikeFacing[lv_player] > (lv_facing + 90.0)) || (libCOMM_gv_NovaPsiStrikeFacing[lv_player] < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_NovaPsiStrike_Init () {
    libCOMM_gt_CM_NovaPsiStrike = TriggerCreate("libCOMM_gt_CM_NovaPsiStrike_Func");
    TriggerEnable(libCOMM_gt_CM_NovaPsiStrike, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_NovaPsiStrike, null, AbilityCommand("NovaPsiStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Nova_Building Completed Trigger
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Nova_BuildingCompletedTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(lv_player, "NovaCommander", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Barracks") && (libCOMM_gv_novaBarrackBuilt[lv_player] == 0))) {
        libCOMM_gf_CM_PrestigeNova_SpecializeUnitCharges(UnitGetType(EventUnitProgressUnit()), lv_player);
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(0) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(0) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "BarracksTrainNovaMarine", UnitGetOwner(EventUnitProgressUnit()));
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(1) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(1) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "BarracksTrainMarauderNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(2) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(2) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "BarracksTrainGhostNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMM_gv_novaBarrackBuilt[lv_player] = 1;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Factory") && (libCOMM_gv_novaFactoryBuilt[lv_player] == 0))) {
        libCOMM_gf_CM_PrestigeNova_SpecializeUnitCharges(UnitGetType(EventUnitProgressUnit()), lv_player);
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(0) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(0) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "FactoryTrainGoliathNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(1) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(1) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "FactoryTrainSiegeTankNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(2) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(2) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "FactoryTrainHellbatNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMM_gv_novaFactoryBuilt[lv_player] = 1;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Starport") && (libCOMM_gv_novaStarportBuilt[lv_player] == 0))) {
        libCOMM_gf_CM_PrestigeNova_SpecializeUnitCharges(UnitGetType(EventUnitProgressUnit()), lv_player);
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(0) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(0) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "StarportTrainBansheeNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(1) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(1) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "StarportTrainRavenNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMM_gf_CM_ModifyCooldown(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(2) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(2) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "StarportTrainLiberatorNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMM_gv_novaStarportBuilt[lv_player] = 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Nova_BuildingCompletedTrigger_Init () {
    libCOMM_gt_CM_Nova_BuildingCompletedTrigger = TriggerCreate("libCOMM_gt_CM_Nova_BuildingCompletedTrigger_Func");
    TriggerEnable(libCOMM_gt_CM_Nova_BuildingCompletedTrigger, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_Nova_BuildingCompletedTrigger, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderRaynor
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderRaynor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoCA33FCF0_g;
    int autoCA33FCF0_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Raynor");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreRaynorMedicHeal, true);
    TriggerEnable(libCOMM_gt_CC_ScoreRaynorHyperionDmg, true);
    TriggerEnable(libCOMM_gt_CM_HyperionMinimapIconDynamicFacingDisplay, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionRaynorHyperion, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionRaynorBansheesUsed, true);
    autoCA33FCF0_g = lv_players;
    autoCA33FCF0_var = -1;
    while (true) {
        autoCA33FCF0_var = PlayerGroupNextPlayer(autoCA33FCF0_g, autoCA33FCF0_var);
        if (autoCA33FCF0_var < 0) { break; }
        libCOMI_gf_CM_CommanderVOAbilityWatch(autoCA33FCF0_var, SoundLink("AdjutantAlert_RaynorAirStrikeReady", -1), "Abil/BansheeAirstrike", null, null);
        libCOMI_gf_CM_CommanderVOAbilityWatch(autoCA33FCF0_var, SoundLink("AdjutantAlert_RaynorHyperionReady", -1), "Abil/VoidCoopSummonHyperion", null, null);
        libCOMI_gf_CreateACCaster(autoCA33FCF0_var, "CoopCasterRaynor");
        libCOMI_gf_CU_GPInitCommonCaster(autoCA33FCF0_var, "CoopCasterRaynor", "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/RaynorGlobalCommandPanelTemplate", 2, "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", "TwoButtons");
        if ((TechTreeUpgradeCount(autoCA33FCF0_var, "MasteryRaynorResearchCost", c_techCountCompleteOnly) >= 1)) {
            libCOMM_gf_CM_RaynorUpgradeResearchCost(autoCA33FCF0_var, TechTreeUpgradeCount(autoCA33FCF0_var, "MasteryRaynorResearchCost", c_techCountCompleteOnly));
        }

        if (((libCOMI_gf_DifficultyLevelForPlayerCoop(autoCA33FCF0_var) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(autoCA33FCF0_var) == 4) || (libCOMI_gf_CC_CommanderLevel(autoCA33FCF0_var, libCOMI_gf_ActiveCommanderForPlayer(autoCA33FCF0_var)) <= 2))) {
            libCOMI_gv_cM_GPRemindersOn[autoCA33FCF0_var] = true;
            TriggerEnable(libCOMM_gt_CM_GPReminderAbilityUsed, true);
            libCOMM_gf_CM_GPReminderRaynor(autoCA33FCF0_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderRaynor_Init () {
    libCOMM_gt_DUT_CommanderRaynor = TriggerCreate("libCOMM_gt_DUT_CommanderRaynor_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderRaynor, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionRaynorHyperion
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionRaynorHyperion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("RaynorCommander_Hyperion", -1), PlayerGroupAll());
    if ((libCOMM_gv_cM_MengskSnarkExecuted == false) && (libCOMI_gf_CC_CommanderInGame("Mengsk") == true)) {
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        libCOMM_gv_cM_MengskSnarkExecuted = true;
        Wait(0.5, c_timeReal);
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("MengskCommander_RaynorHyperion", -1), PlayerGroupAll());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionRaynorHyperion_Init () {
    libCOMM_gt_CM_AbilityTransmissionRaynorHyperion = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionRaynorHyperion_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionRaynorHyperion, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionRaynorHyperion, null, AbilityCommand("VoidCoopSummonHyperion", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionRaynorBansheesUsed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionRaynorBansheesUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("RaynorCommander_Banshee", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    if (true) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionRaynorBansheesUsed_Init () {
    libCOMM_gt_CM_AbilityTransmissionRaynorBansheesUsed = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionRaynorBansheesUsed_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionRaynorBansheesUsed, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionRaynorBansheesUsed, null, AbilityCommand("BansheeAirstrike", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreRaynorMedicHeal
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreRaynorMedicHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "Raiders"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreRaynorHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "RaynorMedicHealing", FixedToInt(libCOMM_gv_cC_ScoreRaynorHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreRaynorMedicHeal_Init () {
    libCOMM_gt_CC_ScoreRaynorMedicHeal = TriggerCreate("libCOMM_gt_CC_ScoreRaynorMedicHeal_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreRaynorMedicHeal, false);
    TriggerAddEventUnitHealed(libCOMM_gt_CC_ScoreRaynorMedicHeal, null, c_unitVitalLife, "heal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreRaynorHyperionDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreRaynorHyperionDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "HyperionVoidCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreRaynorHyperionDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "RaynorHyperionDamage", FixedToInt(libCOMM_gv_cC_ScoreRaynorHyperionDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreRaynorHyperionDmg_Init () {
    libCOMM_gt_CC_ScoreRaynorHyperionDmg = TriggerCreate("libCOMM_gt_CC_ScoreRaynorHyperionDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreRaynorHyperionDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreRaynorHyperionDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryRaynorResearchCostReduction
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_MasteryRaynorResearchCostReduction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "MasteryRaynorResearchCost"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_MasteryResearchCostReduction(EventPlayer(), "MasteryRaynorResearchCost", 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_MasteryRaynorResearchCostReduction_Init () {
    libCOMM_gt_CM_MasteryRaynorResearchCostReduction = TriggerCreate("libCOMM_gt_CM_MasteryRaynorResearchCostReduction_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_MasteryRaynorResearchCostReduction, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementRaynorBansheesUsed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AchievementRaynorBansheesUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderRaynorTheThunderCombine", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AchievementRaynorBansheesUsed_Init () {
    libCOMM_gt_CM_AchievementRaynorBansheesUsed = TriggerCreate("libCOMM_gt_CM_AchievementRaynorBansheesUsed_Func");
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AchievementRaynorBansheesUsed, null, AbilityCommand("BansheeAirstrike", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_PrestigeRaynor_AirSupplyChanged
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_PrestigeRaynor_AirSupplyChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_ActiveCommanderForPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Raiders"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "CommanderPrestigeRaynorAirTriggerAdd")) {
        UnitGroupAdd(libCOMM_gv_cM_PrestigeRaynor_AirUnits, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    }
    else {
        UnitGroupRemove(libCOMM_gv_cM_PrestigeRaynor_AirUnits, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    }
    libCOMM_gf_CM_PrestigeRaynor_AirSupplySetBonus(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_PrestigeRaynor_AirSupplyChanged_Init () {
    libCOMM_gt_CM_PrestigeRaynor_AirSupplyChanged = TriggerCreate("libCOMM_gt_CM_PrestigeRaynor_AirSupplyChanged_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_PrestigeRaynor_AirSupplyChanged, c_playerAny, "CommanderPrestigeRaynorAirTriggerAdd");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_PrestigeRaynor_AirSupplyChanged, c_playerAny, "CommanderPrestigeRaynorAirTriggerRemove");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HyperionMinimapIconDynamicFacingDisplay
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_HyperionMinimapIconDynamicFacingDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawnedHyperion;
    int lv_hyperionPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hyperionPing = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnedHyperion = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingHyperion_AC", UnitGetPosition(lv_spawnedHyperion), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_spawnedHyperion);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_COMM_BC0FBAE1"));
    lv_hyperionPing = PingLastCreated();
    while ((UnitIsAlive(lv_spawnedHyperion) == true)) {
        PingSetRotation(lv_hyperionPing, UnitGetFacing(lv_spawnedHyperion));
        Wait(0.125, c_timeGame);
    }
    PingDestroy(lv_hyperionPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_HyperionMinimapIconDynamicFacingDisplay_Init () {
    libCOMM_gt_CM_HyperionMinimapIconDynamicFacingDisplay = TriggerCreate("libCOMM_gt_CM_HyperionMinimapIconDynamicFacingDisplay_Func");
    TriggerEnable(libCOMM_gt_CM_HyperionMinimapIconDynamicFacingDisplay, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_HyperionMinimapIconDynamicFacingDisplay, c_playerAny, "HyperionVoidCoopSpawnAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderStetmann
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderStetmann_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    int lv_upgradeCount;

    // Automatic Variable Declarations
    playergroup auto64346A24_g;
    int auto64346A24_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Stetmann");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreStetmannGaryDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreStetmannOverload, true);
    TriggerEnable(libCOMM_gt_CM_Stetmann_EventHook_LairHiveCreated, true);
    TriggerEnable(libCOMM_gt_CM_Stetmann_EventHook_LairHiveMorphed, true);
    TriggerEnable(libCOMM_gt_CM_Stetmann_PowerFieldToggle, true);
    TriggerEnable(libCOMM_gt_CM_Stetmann_BanelingEnergyDamageBoost, true);
    TriggerEnable(libCOMM_gt_CM_Stetmann_BroodLordArmBroodling, true);
    TriggerEnable(libCOMM_gt_CM_Stetmann_PowerTowerTechLevel, true);
    TriggerEnable(libCOMM_gt_CM_Stetmann_GaryTransformAchievement, true);
    TriggerEnable(libCOMM_gt_CM_Stetmann_StetelliteOverchargeAllyAchievement, true);
    TriggerEnable(libCOMM_gt_CM_Stetmann_GaryUpgrade, true);
    TriggerEnable(libCOMM_gt_CM_Stetmann_Set, true);
    TriggerEnable(libCOMM_gt_CM_Stetmann_StetelliteChainCast, true);
    auto64346A24_g = lv_players;
    auto64346A24_var = -1;
    while (true) {
        auto64346A24_var = PlayerGroupNextPlayer(auto64346A24_g, auto64346A24_var);
        if (auto64346A24_var < 0) { break; }
        lv_upgradeCount = TechTreeUpgradeCount(auto64346A24_var, "MasteryStetmannStetzoneBonuses", c_techCountCompleteOnly);
        libCOMM_gf_CM_MasteryStetmannUpgradeCost(auto64346A24_var);
        if ((TechTreeUnitIsAllowed(auto64346A24_var, "CoopCasterStetmann") == true)) {
            libCOMM_gf_CM_AbilityTransmission_StetelliteReminder(auto64346A24_var);
            libCOMM_gf_CM_AbilityTransmission_StetzoneReminder(auto64346A24_var);
            libCOMI_gf_CreateACCaster(auto64346A24_var, "CoopCasterStetmann");
            libCOMM_gf_CU_GPInitStetmann(auto64346A24_var);
            if ((libCOMI_gf_CC_CommanderLevel(auto64346A24_var, "Stetmann") >= 2)) {
                DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[auto64346A24_var], PlayerGroupSingle(auto64346A24_var), "EgonergyLockedState", "Unlocked");
            }
            else {
                DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[auto64346A24_var], PlayerGroupSingle(auto64346A24_var), "EgonergyLockedState", "Locked");
            }
            DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[auto64346A24_var], PlayerGroupSingle(auto64346A24_var), "ReminderStetzones", "NoReminder");
            DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[auto64346A24_var], PlayerGroupSingle(auto64346A24_var), "ReminderStetellites", "NoReminder");
            libNtve_gf_SetUpgradeLevelForPlayer(auto64346A24_var, "MasteryStetmannStetzoneBonusesMovementSpeed", lv_upgradeCount);
        }

        if ((TechTreeUnitIsAllowed(auto64346A24_var, "GarysDen") == true)) {
            TriggerEnable(libCOMM_gt_CM_GaryDeath, true);
            TriggerEnable(libCOMM_gt_CM_GaryUpgradeReminder, true);
            libCOMI_gf_CreateACStructure(auto64346A24_var, "GarysDen");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderStetmann_Init () {
    libCOMM_gt_DUT_CommanderStetmann = TriggerCreate("libCOMM_gt_DUT_CommanderStetmann_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderStetmann, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_GaryDeath
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_GaryDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOMI_gv_heroUnits, EventUnit()) == true))) {
            return false;
        }

        if (!((libCOMI_gv_heroUnitsData[libCOMI_gf_GetHeroUnitIndex(EventUnit())].lv_deathCount > 0))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "GaryStetmann") || (UnitGetType(EventUnit()) == "SuperGaryStetmann")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("GaryStetmann_Death", -1), libCOMI_gf_CC_PlayersOfCommander("Stetmann"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_GaryDeath_Init () {
    libCOMM_gt_CM_GaryDeath = TriggerCreate("libCOMM_gt_CM_GaryDeath_Func");
    TriggerEnable(libCOMM_gt_CM_GaryDeath, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_GaryDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_GaryUpgradeReminder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_GaryUpgradeReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMM_gf_EventStetmannPowerTowerTechLevel("StetmannPowerTowerTechLevelNew") == 2))) {
            return false;
        }

        if (!((libCOMI_gf_CC_CommanderLevel(libCOMM_gf_EventStetmannPowerTowerPlayer(), "Stetmann") >= 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMM_gf_CM_AbilityTransmission_GaryUpgradeReminder(libCOMM_gf_EventStetmannPowerTowerPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_GaryUpgradeReminder_Init () {
    libCOMM_gt_CM_GaryUpgradeReminder = TriggerCreate("libCOMM_gt_CM_GaryUpgradeReminder_Func");
    TriggerEnable(libCOMM_gt_CM_GaryUpgradeReminder, false);
    libCOMM_gf_StetmannPowerTowerEvent(libCOMM_gt_CM_GaryUpgradeReminder, "Event_PowerTowerLevelUp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreStetmannGaryDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreStetmannGaryDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "GaryStetmann") || (UnitGetType(EventUnitDamageSourceUnit()) == "SuperGaryStetmann")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreStetmannGaryDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "StetmannGaryDamage", FixedToInt(libCOMM_gv_cC_ScoreStetmannGaryDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreStetmannGaryDmg_Init () {
    libCOMM_gt_CC_ScoreStetmannGaryDmg = TriggerCreate("libCOMM_gt_CC_ScoreStetmannGaryDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreStetmannGaryDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreStetmannGaryDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreStetmannOverload
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreStetmannOverload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreStetmannOverload[EventPlayer()] += 1;
    PlayerScoreValueSetFromInt(EventPlayer(), "StetmannUnitsOverloaded", libCOMM_gv_cC_ScoreStetmannOverload[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreStetmannOverload_Init () {
    libCOMM_gt_CC_ScoreStetmannOverload = TriggerCreate("libCOMM_gt_CC_ScoreStetmannOverload_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreStetmannOverload, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CC_ScoreStetmannOverload, c_playerAny, "FASTOverloadStetmannAB");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CC_ScoreStetmannOverload, c_playerAny, "HUGSOverloadStetmannAB");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CC_ScoreStetmannOverload, c_playerAny, "JUICEOverloadStetmannAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryStetmannUpgradeCost
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_MasteryStetmannUpgradeCost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "MasteryStetmannUpgradeResearchCost"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_MasteryStetmannUpgradeCost(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_MasteryStetmannUpgradeCost_Init () {
    libCOMM_gt_CM_MasteryStetmannUpgradeCost = TriggerCreate("libCOMM_gt_CM_MasteryStetmannUpgradeCost_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_MasteryStetmannUpgradeCost, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stetmann_EventHook_LairHiveCreated
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stetmann_EventHook_LairHiveCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stetmann;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stetmann = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_PlayerIsCommander(lv_stetmann) == true))) {
            return false;
        }

        if (!((libCOMI_gf_CC_CommanderLevel(EventPlayer(), "Stetmann") >= 7))) {
            return false;
        }

        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "HiveStetmann") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "LairStetmann")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_Stetmann_ThrowPowerTowerEvent(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stetmann_EventHook_LairHiveCreated_Init () {
    libCOMM_gt_CM_Stetmann_EventHook_LairHiveCreated = TriggerCreate("libCOMM_gt_CM_Stetmann_EventHook_LairHiveCreated_Func");
    TriggerEnable(libCOMM_gt_CM_Stetmann_EventHook_LairHiveCreated, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stetmann_EventHook_LairHiveCreated, c_playerAny, "LairHiveStetmannTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stetmann_EventHook_LairHiveMorphed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stetmann_EventHook_LairHiveMorphed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stetmann;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stetmann = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_PlayerIsCommander(lv_stetmann) == true))) {
            return false;
        }

        if (!((libCOMI_gf_CC_CommanderLevel(EventPlayer(), "Stetmann") >= 7))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "HiveStetmann") || (UnitGetType(EventUnit()) == "LairStetmann")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_Stetmann_ThrowPowerTowerEvent(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stetmann_EventHook_LairHiveMorphed_Init () {
    libCOMM_gt_CM_Stetmann_EventHook_LairHiveMorphed = TriggerCreate("libCOMM_gt_CM_Stetmann_EventHook_LairHiveMorphed_Func");
    TriggerEnable(libCOMM_gt_CM_Stetmann_EventHook_LairHiveMorphed, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Stetmann_EventHook_LairHiveMorphed, null, AbilityCommand("UpgradeToLairStetmann",0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Stetmann_EventHook_LairHiveMorphed, null, AbilityCommand("UpgradeToHiveStetmann",0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stetmann_GaryTransformAchievement
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stetmann_GaryTransformAchievement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gary;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gary = EventUnit();
    lv_owner = UnitGetOwner(lv_gary);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(lv_owner) == "Stetmann"))) {
            return false;
        }

        if (!((GameGetMissionTime() < 300.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementAward(lv_owner, "CommanderStetmannTransformation");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stetmann_GaryTransformAchievement_Init () {
    libCOMM_gt_CM_Stetmann_GaryTransformAchievement = TriggerCreate("libCOMM_gt_CM_Stetmann_GaryTransformAchievement_Func");
    TriggerEnable(libCOMM_gt_CM_Stetmann_GaryTransformAchievement, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Stetmann_GaryTransformAchievement, null, AbilityCommand("MorphToSuperGaryStetmann",0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stetmann_StetelliteOverchargeAllyAchievement
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stetmann_StetelliteOverchargeAllyAchievement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_ownercaster;
    int lv_ownertarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_ownercaster = UnitGetOwner(lv_caster);
    lv_ownertarget = UnitGetOwner(lv_target);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(lv_ownercaster) == "Stetmann"))) {
            return false;
        }

        if (!((lv_ownercaster != lv_ownertarget))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantityAdd(lv_ownercaster, "CommanderStetmannStetzone", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stetmann_StetelliteOverchargeAllyAchievement_Init () {
    libCOMM_gt_CM_Stetmann_StetelliteOverchargeAllyAchievement = TriggerCreate("libCOMM_gt_CM_Stetmann_StetelliteOverchargeAllyAchievement_Func");
    TriggerEnable(libCOMM_gt_CM_Stetmann_StetelliteOverchargeAllyAchievement, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stetmann_StetelliteOverchargeAllyAchievement, c_playerAny, "FASTOverloadStetmannAB");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stetmann_StetelliteOverchargeAllyAchievement, c_playerAny, "HUGSOverloadStetmannAB");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stetmann_StetelliteOverchargeAllyAchievement, c_playerAny, "JUICEOverloadStetmannAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_StetelliteMaxChargesChanged
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_StetelliteMaxChargesChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stetmann;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stetmann = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "DeployPowerTowerTechLevel"))) {
            return false;
        }

        if (!((libCOMI_gf_ActiveCommanderForPlayer(lv_stetmann) == "Stetmann"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CU_SetStetelliteChargeMax(lv_stetmann);
    libCOMM_gf_CU_DrawStetelliteChargePips(lv_stetmann, (libCOMM_gv_cU_StetmannMaxStetelliteCharges - RoundI(PlayerGetChargeUsed(lv_stetmann, "Abil/DeployPowerTowerStetmann"))), libCOMM_gv_cU_StetmannMaxStetelliteCharges);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_StetelliteMaxChargesChanged_Init () {
    libCOMM_gt_CU_StetelliteMaxChargesChanged = TriggerCreate("libCOMM_gt_CU_StetelliteMaxChargesChanged_Func");
    TriggerEnable(libCOMM_gt_CU_StetelliteMaxChargesChanged, false);
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CU_StetelliteMaxChargesChanged, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_StetelliteChargesChanged
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_StetelliteChargesChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stetmann;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stetmann = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_PlayerIsCommander(lv_stetmann) == true))) {
            return false;
        }

        if (!((EventUnitBehavior() == "StetmannStetelliteChargesUsed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CU_DrawStetelliteChargePips(lv_stetmann, (libCOMM_gv_cU_StetmannMaxStetelliteCharges - RoundI(PlayerGetChargeUsed(lv_stetmann, "Abil/DeployPowerTowerStetmann"))), libCOMM_gv_cU_StetmannMaxStetelliteCharges);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_StetelliteChargesChanged_Init () {
    libCOMM_gt_CU_StetelliteChargesChanged = TriggerCreate("libCOMM_gt_CU_StetelliteChargesChanged_Func");
    TriggerEnable(libCOMM_gt_CU_StetelliteChargesChanged, false);
    TriggerAddEventUnitAttributeChange(libCOMM_gt_CU_StetelliteChargesChanged, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stetmann_PowerFieldToggle
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stetmann_PowerFieldToggle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_upgradeCount;

    // Automatic Variable Declarations
    string auto909F97B6_val;
    playergroup autoEE6A03DA_g;
    playergroup auto30A36929_g;
    playergroup auto3408E958_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventPlayer()) == "Stetmann"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_Stetmann_StetzoneChanged = true;
    DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[EventPlayer()], PlayerGroupSingle(EventPlayer()), "ReminderStetzones", "NoReminder");
    lv_upgradeCount = TechTreeUpgradeCount(EventPlayer(), "MasteryStetmannStetzoneBonuses", c_techCountCompleteOnly);
    auto909F97B6_val = EventPlayerEffectUsed();
    if (auto909F97B6_val == "PowerFieldEnergyRegenerationOn") {
        autoEE6A03DA_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoEE6A03DA_g, lv_player);
            if (lv_player < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldEnergyRegeneration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldHPRegeneration", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldMovementSpeed", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesMovementSpeed", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesHPRegeneration", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesEnergyRegeneration", lv_upgradeCount);
            DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[EventPlayer()], PlayerGroupSingle(EventPlayer()), "ActiveZone", "Energy");
        }
    }
    else if (auto909F97B6_val == "PowerFieldHPRegenerationOn") {
        auto30A36929_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto30A36929_g, lv_player);
            if (lv_player < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldEnergyRegeneration", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldHPRegeneration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldMovementSpeed", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesMovementSpeed", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesHPRegeneration", lv_upgradeCount);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesEnergyRegeneration", 0);
            DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[EventPlayer()], PlayerGroupSingle(EventPlayer()), "ActiveZone", "Health");
        }
    }
    else if (auto909F97B6_val == "PowerFieldMovementSpeedOn") {
        auto3408E958_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto3408E958_g, lv_player);
            if (lv_player < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldEnergyRegeneration", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldHPRegeneration", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldMovementSpeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesMovementSpeed", lv_upgradeCount);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesHPRegeneration", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesEnergyRegeneration", 0);
            DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[EventPlayer()], PlayerGroupSingle(EventPlayer()), "ActiveZone", "Speed");
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stetmann_PowerFieldToggle_Init () {
    libCOMM_gt_CM_Stetmann_PowerFieldToggle = TriggerCreate("libCOMM_gt_CM_Stetmann_PowerFieldToggle_Func");
    TriggerEnable(libCOMM_gt_CM_Stetmann_PowerFieldToggle, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stetmann_PowerFieldToggle, c_playerAny, "PowerFieldEnergyRegenerationOn");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stetmann_PowerFieldToggle, c_playerAny, "PowerFieldHPRegenerationOn");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stetmann_PowerFieldToggle, c_playerAny, "PowerFieldMovementSpeedOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stetmann_BanelingEnergyDamageBoost
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stetmann_BanelingEnergyDamageBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_baneling;
    fixed lv_energy;
    unit lv_target;

    // Automatic Variable Declarations
    string autoE6D843E5_val;

    // Variable Initialization
    lv_baneling = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_energy = UnitGetPropertyFixed(lv_baneling, c_unitPropEnergy, c_unitPropCurrent);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_target) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetUnitAttributePoints("BanelingStetmannBonusDamage", lv_baneling, RoundI(lv_energy));
    autoE6D843E5_val = EventPlayerEffectUsed();
    if (autoE6D843E5_val == "BanelingStetmannExplodeAbilityBonusDamageTrigger") {
        UnitCreateEffectUnit(lv_baneling, "BanelingDeathExplodeLargeSetStetmann", lv_target);
    }
    else if (autoE6D843E5_val == "BanelingStetmannExplodeDelayBonusDamageTrigger") {
        UnitCreateEffectUnit(lv_baneling, "BanelingStetmannExplodeDelaySet", lv_target);
    }
    else if (autoE6D843E5_val == "BanelingStetmannExplodeWeaponBonusDamageTrigger") {
        UnitCreateEffectUnit(lv_baneling, "BanelingExplodeLargeSetStetmann", lv_target);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stetmann_BanelingEnergyDamageBoost_Init () {
    libCOMM_gt_CM_Stetmann_BanelingEnergyDamageBoost = TriggerCreate("libCOMM_gt_CM_Stetmann_BanelingEnergyDamageBoost_Func");
    TriggerEnable(libCOMM_gt_CM_Stetmann_BanelingEnergyDamageBoost, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stetmann_BanelingEnergyDamageBoost, c_playerAny, "BanelingStetmannExplodeAbilityBonusDamageTrigger");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stetmann_BanelingEnergyDamageBoost, c_playerAny, "BanelingStetmannExplodeDelayBonusDamageTrigger");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stetmann_BanelingEnergyDamageBoost, c_playerAny, "BanelingStetmannExplodeWeaponBonusDamageTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stetmann_BroodLordArmBroodling
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stetmann_BroodLordArmBroodling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_broodlord;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_broodlord = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitMagazineArm(lv_broodlord, AbilityCommand("BroodLordHangarStetmann", 0), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stetmann_BroodLordArmBroodling_Init () {
    libCOMM_gt_CM_Stetmann_BroodLordArmBroodling = TriggerCreate("libCOMM_gt_CM_Stetmann_BroodLordArmBroodling_Func");
    TriggerEnable(libCOMM_gt_CM_Stetmann_BroodLordArmBroodling, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stetmann_BroodLordArmBroodling, c_playerAny, "BroodLordStetmannBroodlingEscortArm");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stetmann_PowerTowerTechLevel
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stetmann_PowerTowerTechLevel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_powertowerabilstring;
    string lv_abillink;
    int lv_oldmaxcharges;
    int lv_newmaxcharges;
    int lv_deltamaxcharges;
    int lv_oldchargesused;
    int lv_newchargesused;
    fixed lv_oldrechargetime;
    fixed lv_newrechargetime;
    fixed lv_deltarechargetime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_powertowerabilstring = "Abil/DeployPowerTowerStetmann";
    lv_abillink = "DeployPowerTowerStetmann";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_oldmaxcharges = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_abillink, "InfoArray[" + IntToString(0) + "].Charge.CountMax", libCOMM_gf_EventStetmannPowerTowerPlayer());
    lv_oldrechargetime = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_abillink, "InfoArray[" + IntToString(0) + "].Charge.TimeUse", libCOMM_gf_EventStetmannPowerTowerPlayer());
    lv_oldchargesused = RoundI(PlayerGetChargeUsed(libCOMM_gf_EventStetmannPowerTowerPlayer(), lv_powertowerabilstring));
    libNtve_gf_SetUpgradeLevelForPlayer(libCOMM_gf_EventStetmannPowerTowerPlayer(), "DeployPowerTowerTechLevel", libCOMM_gf_EventStetmannPowerTowerTechLevel("StetmannPowerTowerTechLevelNew"));
    lv_newmaxcharges = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_abillink, "InfoArray[" + IntToString(0) + "].Charge.CountMax", libCOMM_gf_EventStetmannPowerTowerPlayer());
    lv_deltamaxcharges = (lv_newmaxcharges - lv_oldmaxcharges);
    lv_newchargesused = (lv_oldchargesused + lv_deltamaxcharges);
    lv_newrechargetime = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_abillink, "InfoArray[" + IntToString(0) + "].Charge.TimeUse", libCOMM_gf_EventStetmannPowerTowerPlayer());
    lv_deltarechargetime = (lv_newrechargetime - lv_oldrechargetime);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stetmann_PowerTowerTechLevel_Init () {
    libCOMM_gt_CM_Stetmann_PowerTowerTechLevel = TriggerCreate("libCOMM_gt_CM_Stetmann_PowerTowerTechLevel_Func");
    TriggerEnable(libCOMM_gt_CM_Stetmann_PowerTowerTechLevel, false);
    libCOMM_gf_StetmannPowerTowerEvent(libCOMM_gt_CM_Stetmann_PowerTowerTechLevel, "Event_PowerTowerLevelChanged");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stetmann_GaryUpgrade
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stetmann_GaryUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gary;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gary = EventUnit();
    lv_owner = UnitGetOwner(lv_gary);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(lv_owner) == "Stetmann"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetHeroPanelUnit(1, lv_gary, lv_owner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stetmann_GaryUpgrade_Init () {
    libCOMM_gt_CM_Stetmann_GaryUpgrade = TriggerCreate("libCOMM_gt_CM_Stetmann_GaryUpgrade_Func");
    TriggerEnable(libCOMM_gt_CM_Stetmann_GaryUpgrade, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Stetmann_GaryUpgrade, null, AbilityCommand("MorphToSuperGaryStetmann",0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stetmann_Prestige Combat Buff Upgrade
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stetmann_Set_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_upgrade;
    fixed lv_costMutiplayer;
    string lv_itUnit;
    int lv_player;

    // Automatic Variable Declarations
    int auto7C656BC7_catalog;
    string auto7C656BC7_entry;
    string auto7C656BC7_fieldPath;
    int auto7C656BC7_player;
    int auto7C656BC7_i;

    // Variable Initialization
    lv_upgrade = EventUpgradeName();
    lv_costMutiplayer = 1.4;
    lv_itUnit = "";
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lv_upgrade == "CommanderPrestigeStetmannCombatBuff"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7C656BC7_catalog = c_gameCatalogUpgrade;
    auto7C656BC7_entry = lv_upgrade;
    auto7C656BC7_fieldPath = "AffectedUnitArray";
    auto7C656BC7_player = lv_player;
    auto7C656BC7_i = 0;
    for ( ; auto7C656BC7_i <= CatalogFieldValueCount(c_gameCatalogUpgrade,auto7C656BC7_entry,auto7C656BC7_fieldPath,auto7C656BC7_player)-1 ; auto7C656BC7_i += 1 ) {
        lv_itUnit = CatalogFieldValueGet(c_gameCatalogUpgrade,auto7C656BC7_entry,auto7C656BC7_fieldPath+"["+IntToString(auto7C656BC7_i)+"]",auto7C656BC7_player);
        CatalogFieldValueSet(c_gameCatalogUnit, lv_itUnit, "CostResource[" + IntToString(0) + "]", lv_player, IntToString(CeilingI((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_itUnit, "CostResource[" + IntToString(0) + "]", c_playerAny)*lv_costMutiplayer))));
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stetmann_Set_Init () {
    libCOMM_gt_CM_Stetmann_Set = TriggerCreate("libCOMM_gt_CM_Stetmann_Set_Func");
    TriggerEnable(libCOMM_gt_CM_Stetmann_Set, false);
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_Stetmann_Set, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stetmann_StetelliteChainCast
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stetmann_StetelliteChainCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "StetmannCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    if ((UnitAbilityChargeInfo(EventUnit(), AbilityCommand("DeployPowerTowerStetmann", 0), c_unitAbilChargeCountLeft) > 0.0)) {
        UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer]), OrderTargetingPoint(AbilityCommand("DeployPowerTowerStetmann", 0), UnitGetPosition(libCOMI_gv_yY_GPCasterUnit[lv_casterPlayer])), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stetmann_StetelliteChainCast_Init () {
    libCOMM_gt_CM_Stetmann_StetelliteChainCast = TriggerCreate("libCOMM_gt_CM_Stetmann_StetelliteChainCast_Func");
    TriggerEnable(libCOMM_gt_CM_Stetmann_StetelliteChainCast, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Stetmann_StetelliteChainCast, null, AbilityCommand("DeployPowerTowerStetmann", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderStukov
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderStukov_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto462818DC_g;
    int auto462818DC_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Stukov");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreStukovInfestedDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreStukovMonstrosityDmg, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedBunkerAutoLoad, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedBunkerUnloadRally, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedBunkerRegister, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedBunkerInitialSpawn, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_UnitCostRefund, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_FullSupplyCheat, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_AutoCreepTumor, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedStructureInitialSpawn, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedStructureRebuilt, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_HordeWaveSpawner, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_HordeWaveCreated, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_HordeWaveExploderCreated, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_HordeWaveInteruptionReissueOrder, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_RallyPlaced, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_RallyToUnitDies, true);
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedSiegeTankDeath, true);
    auto462818DC_g = lv_players;
    auto462818DC_var = -1;
    while (true) {
        auto462818DC_var = PlayerGroupNextPlayer(auto462818DC_g, auto462818DC_var);
        if (auto462818DC_var < 0) { break; }
        libCOMI_gf_CM_CommanderVOAbilityWatch(auto462818DC_var, SoundLink("StukovCommander_AleksanderReady", -1), "Abil/StukovSummonAleksander", null, null);
        libCOMI_gf_CM_CommanderVOAbilityWatch(auto462818DC_var, SoundLink("StukovCommander_ApocaliskReady", -1), "Abil/StukovSummonApocalisk", null, null);
        TriggerEnable(libCOMM_gt_CM_AbilityTransmissionStukovInfestStructure, true);
        TriggerEnable(libCOMM_gt_CM_AbilityTransmissionStukovApocalisk, true);
        TriggerEnable(libCOMM_gt_CM_AbilityTransmissionStukovAleksander, true);
        libCOMI_gf_CreateACCaster(auto462818DC_var, "CoopCasterStukov");
        libCOMI_gf_CU_GPInitCommonCaster(auto462818DC_var, "CoopCasterStukov", "Coop_GlobalCastingTemplates/ZergCasterPanelTemplate", "Coop_GlobalCastingTemplates/StukovGlobalCommandPanelTemplate", 4, "Cutscenes\\UI_StukovCastingPanel.SC2Cutscene", "");
        if ((TechTreeUnitIsAllowed(auto462818DC_var, "SICivilianStructure") == true)) {
            libCOMI_gf_CreateACStructure(auto462818DC_var, "SICivilianStructure");
            libCOMM_gf_CM_Stukov_InfestStructureInitialCooldown(auto462818DC_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderStukov_Init () {
    libCOMM_gt_DUT_CommanderStukov = TriggerCreate("libCOMM_gt_DUT_CommanderStukov_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderStukov, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionStukovAleksander
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionStukovAleksander_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_Aleksander", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionStukovAleksander_Init () {
    libCOMM_gt_CM_AbilityTransmissionStukovAleksander = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionStukovAleksander_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionStukovAleksander, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionStukovAleksander, null, AbilityCommand("StukovSummonAleksander", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionStukovApocalisk
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionStukovApocalisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_Apocalisk", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionStukovApocalisk_Init () {
    libCOMM_gt_CM_AbilityTransmissionStukovApocalisk = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionStukovApocalisk_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionStukovApocalisk, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionStukovApocalisk, null, AbilityCommand("StukovSummonApocalisk", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionStukovInfestStructure
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionStukovInfestStructure_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitTargetUnit() != null) && (UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitTargetUnit()))) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_InfestStructure", -1), PlayerGroupAll());
    }
    else {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_InfestStructureSelf", -1), PlayerGroupAll());
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionStukovInfestStructure_Init () {
    libCOMM_gt_CM_AbilityTransmissionStukovInfestStructure = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionStukovInfestStructure_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionStukovInfestStructure, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionStukovInfestStructure, null, AbilityCommand("SIStukovInfestStructure", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionStukovInfestStructure, null, AbilityCommand("SIStukovInfestStructureUpgraded", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreStukovInfestedDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreStukovInfestedDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "SIInfestedCivilian") || (UnitGetType(EventUnitDamageSourceUnit()) == "SIInfestedMarine") || (UnitGetType(EventUnitDamageSourceUnit()) == "SIInfestedTrooper") || (UnitGetType(EventUnitDamageSourceUnit()) == "SIVolatileInfested") || (UnitGetType(EventUnitDamageSourceUnit()) == "SIVolatileInfestedBurrowed")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreStukovInfestedDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "StukovInfestedDamage", FixedToInt(libCOMM_gv_cC_ScoreStukovInfestedDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreStukovInfestedDmg_Init () {
    libCOMM_gt_CC_ScoreStukovInfestedDmg = TriggerCreate("libCOMM_gt_CC_ScoreStukovInfestedDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreStukovInfestedDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreStukovInfestedDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreStukovMonstrosityDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreStukovMonstrosityDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "StukovAleksander") || (UnitGetType(EventUnitDamageSourceUnit()) == "StukovAleksanderCrashed") || (UnitGetType(EventUnitDamageSourceUnit()) == "StukovApocalisk")))) {
            return false;
        }

        if (!(((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true) || (UnitHasBehavior2(EventUnit(), "StukovAleksanderAirMindControl") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreStukovMonstrosityDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "StukovMonstrosityDamage", FixedToInt(libCOMM_gv_cC_ScoreStukovMonstrosityDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreStukovMonstrosityDmg_Init () {
    libCOMM_gt_CC_ScoreStukovMonstrosityDmg = TriggerCreate("libCOMM_gt_CC_ScoreStukovMonstrosityDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreStukovMonstrosityDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreStukovMonstrosityDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov - Snare Behavior Off
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_StukovSnareBehaviorOn2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    fixed lv_defaultHeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_defaultHeight = UnitTypeGetProperty(UnitGetType(lv_unit), c_unitPropHeight);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(lv_unit, lv_defaultHeight, libCOMM_gv_StukovInfestedWraithSnareBehavior3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_StukovSnareBehaviorOn2_Init () {
    libCOMM_gt_StukovSnareBehaviorOn2 = TriggerCreate("libCOMM_gt_StukovSnareBehaviorOn2_Func");
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_StukovSnareBehaviorOn2, null, libCOMM_gv_StukovInfestedWraithSnareBehavior, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_FullSupplyCheat
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_FullSupplyCheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_aleksander;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aleksander = EventUnit();
    lv_p = UnitGetOwner(lv_aleksander);

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitIsAlive(lv_aleksander) == true)) {
            PlayerSetState(EventPlayer(), c_playerStateFoodIgnored, true);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 0)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 1)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 2)), c_orderQueueAddToEnd);
            PlayerSetState(EventPlayer(), c_playerStateFoodIgnored, false);
        }
        else {
            return true;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_FullSupplyCheat_Init () {
    libCOMM_gt_CM_Stukov_FullSupplyCheat = TriggerCreate("libCOMM_gt_CM_Stukov_FullSupplyCheat_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_FullSupplyCheat, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Stukov_FullSupplyCheat, null, "StukovSummonAleksanderCrashedTimedLife", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_AutoCreepTumor
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_AutoCreepTumor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_i;
    fixed lv_angle;
    unitgroup lv_creepTumorGroup;
    fixed lv_placementX;
    fixed lv_placementY;
    region lv_mapSize;
    fixed lv_waitTime;
    int lv_count;
    fixed lv_angleIncrement;

    // Automatic Variable Declarations
    int auto699353C0_ae;
    const int auto699353C0_ai = 1;
    unitgroup autoDC927C7A_g;
    int autoDC927C7A_u;
    unit autoDC927C7A_var;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_angle = libNtve_gf_RandomAngle();
    lv_creepTumorGroup = UnitGroupEmpty();
    lv_mapSize = RegionEntireMap();
    lv_waitTime = 1.0;
    lv_count = 72;
    lv_angleIncrement = 10.0;

    // Actions
    if (!runActions) {
        return true;
    }

    auto699353C0_ae = lv_count;
    lv_i = 1;
    for ( ; ( (auto699353C0_ai >= 0 && lv_i <= auto699353C0_ae) || (auto699353C0_ai < 0 && lv_i >= auto699353C0_ae) ) ; lv_i += auto699353C0_ai ) {
        lv_placementX = PointGetX(PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 13.0, lv_angle));
        lv_placementY = PointGetY(PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 13.0, lv_angle));
        if (((lv_placementX > 1) && (lv_placementY > 1) && (lv_placementX < libNtve_gf_WidthOfRegion(lv_mapSize)) && (lv_placementY < libNtve_gf_HeightOfRegion(lv_mapSize)))) {
            if ((CreepIsPresent(Point(lv_placementX, lv_placementY)) == true)) {
                lv_creepTumorGroup = UnitGroupEmpty();
                autoDC927C7A_g = UnitGroup("CreepTumorStukov", c_playerAny, RegionCircle(Point(lv_placementX, lv_placementY), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoDC927C7A_u = UnitGroupCount(autoDC927C7A_g, c_unitCountAll);
                for (;; autoDC927C7A_u -= 1) {
                    autoDC927C7A_var = UnitGroupUnitFromEnd(autoDC927C7A_g, autoDC927C7A_u);
                    if (autoDC927C7A_var == null) { break; }
                    UnitGroupAdd(lv_creepTumorGroup, autoDC927C7A_var);
                }
                if ((UnitGroupCount(lv_creepTumorGroup, c_unitCountAlive) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorStukov", c_unitCreateIgnorePlacement, 0, Point(lv_placementX, lv_placementY));
                }

            }

        }

        lv_angle += lv_angleIncrement;
        Wait(lv_waitTime, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_AutoCreepTumor_Init () {
    libCOMM_gt_CM_Stukov_AutoCreepTumor = TriggerCreate("libCOMM_gt_CM_Stukov_AutoCreepTumor_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_AutoCreepTumor, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stukov_AutoCreepTumor, c_playerAny, "CreepTumorStukovSpread");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stukov_AutoCreepTumor, c_playerAny, "CreepTumorStukovSpreadCC");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedStructureInitialSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_InfestedStructureInitialSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_Stukov_InfestedStructure[lv_player] = EventUnit();
    UnitModifyCooldown(libCOMM_gv_cM_Stukov_InfestedStructure[lv_player], "Abil/SICivilianStructureSpawnCivilian", 180.0, c_cooldownOperationSet);
    UnitBehaviorAdd(EventUnit(), "SICivilianStructureSpawnCivilianGlobalTimerInitial", EventUnit(), 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_InfestedStructureInitialSpawn_Init () {
    libCOMM_gt_CM_Stukov_InfestedStructureInitialSpawn = TriggerCreate("libCOMM_gt_CM_Stukov_InfestedStructureInitialSpawn_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedStructureInitialSpawn, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Stukov_InfestedStructureInitialSpawn, null, "SICivilianStructureSpawnCivilian", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedStructureRebuilt
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_InfestedStructureRebuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SISCV") && (libNtve_gf_TriggeringProgressUnitType() == "SICivilianStructure")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_Stukov_InfestedStructure[lv_player] = EventUnitProgressUnit();
    UnitBehaviorAdd(EventUnitProgressUnit(), "SICivilianStructureSpawnCivilianGlobalTimerRebuild", EventUnitProgressUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_InfestedStructureRebuilt_Init () {
    libCOMM_gt_CM_Stukov_InfestedStructureRebuilt = TriggerCreate("libCOMM_gt_CM_Stukov_InfestedStructureRebuilt_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedStructureRebuilt, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_Stukov_InfestedStructureRebuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveSpawner
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_HordeWaveSpawner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libCOMM_gv_cM_Stukov_HordeCurrentWave[lv_player]);
    UnitCreateEffectUnit(libCOMM_gv_cM_Stukov_InfestedStructure[lv_player], "SIBarracksTrainInfestedSpawnSet", libCOMM_gv_cM_Stukov_InfestedStructure[lv_player]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_HordeWaveSpawner_Init () {
    libCOMM_gt_CM_Stukov_HordeWaveSpawner = TriggerCreate("libCOMM_gt_CM_Stukov_HordeWaveSpawner_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_HordeWaveSpawner, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stukov_HordeWaveSpawner, c_playerAny, "SICivilianStructureSpawnCivilianGlobalTimerDummyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveCreated
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_HordeWaveCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_Stukov_HordeGroup[lv_player], EventUnitCreatedUnit());
    UnitGroupAdd(libCOMM_gv_cM_Stukov_HordeCurrentWave[lv_player], EventUnitCreatedUnit());
    libCOMM_gv_cM_Stukov_HordeCount[lv_player] = UnitGroupCount(libCOMM_gv_cM_Stukov_HordeGroup[lv_player], c_unitCountAlive);
    libCOMM_gf_CM_Stukov_SingleUnitGoToRally(EventUnitCreatedUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_HordeWaveCreated_Init () {
    libCOMM_gt_CM_Stukov_HordeWaveCreated = TriggerCreate("libCOMM_gt_CM_Stukov_HordeWaveCreated_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_HordeWaveCreated, false);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Stukov_HordeWaveCreated, null, "SIMorphtoInfestedCivilian", null);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Stukov_HordeWaveCreated, null, "SIMorphtoInfestedMarine", null);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Stukov_HordeWaveCreated, null, "SIMorphtoInfestedAberration", null);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Stukov_HordeWaveCreated, null, "StukovAleksanderCrashedTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveExploderCreated
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_HordeWaveExploderCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_Stukov_HordeGroup[lv_player], lv_unit);
    UnitGroupAdd(libCOMM_gv_cM_Stukov_HordeCurrentWave[lv_player], lv_unit);
    libCOMM_gv_cM_Stukov_HordeCount[lv_player] = UnitGroupCount(libCOMM_gv_cM_Stukov_HordeGroup[lv_player], c_unitCountAlive);
    libCOMM_gf_CM_Stukov_SingleUnitGoToRally(lv_unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_HordeWaveExploderCreated_Init () {
    libCOMM_gt_CM_Stukov_HordeWaveExploderCreated = TriggerCreate("libCOMM_gt_CM_Stukov_HordeWaveExploderCreated_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_HordeWaveExploderCreated, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stukov_HordeWaveExploderCreated, c_playerAny, "SIBarracksTrainTimedLifeABInfestedExploder");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveInteruptionReissueOrder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SIInfestedCivilian") || (UnitGetType(EventUnit()) == "SIInfestedMarine") || (UnitGetType(EventUnit()) == "SIInfestedTrooper") || (UnitGetType(EventUnit()) == "SIVolatileInfested")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libCOMM_gf_CM_Stukov_SingleUnitGoToRally(lv_unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Init () {
    libCOMM_gt_CM_Stukov_HordeWaveInteruptionReissueOrder = TriggerCreate("libCOMM_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_HordeWaveInteruptionReissueOrder, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Stukov_HordeWaveInteruptionReissueOrder, null, "MutatorDeathPullModifySpeed", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_RallyPlaced
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_RallyPlaced_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoE6C85CF9_g;
    int autoE6C85CF9_u;
    unit autoE6C85CF9_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_Stukov_RallyTarget[lv_player] = null;
    libCOMM_gv_cM_Stukov_RallyPoint[lv_player] = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    autoE6C85CF9_g = UnitGroup(null, c_playerAny, RegionCircle(libCOMM_gv_cM_Stukov_RallyPoint[lv_player], 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE6C85CF9_u = UnitGroupCount(autoE6C85CF9_g, c_unitCountAll);
    for (;; autoE6C85CF9_u -= 1) {
        autoE6C85CF9_var = UnitGroupUnitFromEnd(autoE6C85CF9_g, autoE6C85CF9_u);
        if (autoE6C85CF9_var == null) { break; }
        if ((UnitHasBehavior2(autoE6C85CF9_var, "ExpansionRocks") == true)) {
            libCOMM_gv_cM_Stukov_RallyTarget[lv_player] = autoE6C85CF9_var;
        }

    }
    if ((libCOMM_gv_cM_Stukov_RallyBeaconUnit[lv_player] != null)) {
        UnitRemove(libCOMM_gv_cM_Stukov_RallyBeaconUnit[lv_player]);
    }

    if ((libCOMM_gv_cM_Stukov_RallyTarget[lv_player] != null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIStukovRallyBeaconPsiEmitterPoint", c_unitCreateIgnorePlacement, 0, libCOMM_gv_cM_Stukov_RallyPoint[lv_player]);
        libCOMM_gv_cM_Stukov_RallyBeaconUnit[lv_player] = UnitLastCreated();
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIStukovRallyBeaconPsiEmitterPoint", c_unitCreateIgnorePlacement, 0, libCOMM_gv_cM_Stukov_RallyPoint[lv_player]);
        libCOMM_gv_cM_Stukov_RallyBeaconUnit[lv_player] = UnitLastCreated();
    }
    UnitGroupIssueOrder(libCOMM_gv_cM_Stukov_BunkerGroup[lv_player], OrderTargetingPoint(AbilityCommand("SIInfestedBunkerRally", 0), libCOMM_gv_cM_Stukov_RallyPoint[lv_player]), c_orderQueueReplace);
    libCOMM_gf_CM_Stukov_HordeGoToRally(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_RallyPlaced_Init () {
    libCOMM_gt_CM_Stukov_RallyPlaced = TriggerCreate("libCOMM_gt_CM_Stukov_RallyPlaced_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_RallyPlaced, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stukov_RallyPlaced, c_playerAny, "SIStukovPlaceHordeRallyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_RallyToUnitDies
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_RallyToUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libCOMM_gv_cM_Stukov_RallyTarget[lv_player] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_Stukov_RallyTarget[lv_player] = null;
    libCOMM_gv_cM_Stukov_RallyPoint[lv_player] = UnitGetPosition(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_RallyToUnitDies_Init () {
    libCOMM_gt_CM_Stukov_RallyToUnitDies = TriggerCreate("libCOMM_gt_CM_Stukov_RallyToUnitDies_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_RallyToUnitDies, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Stukov_RallyToUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerAutoLoad
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_InfestedBunkerAutoLoad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;
    int lv_p;
    unit lv_newUnit;
    point lv_point;
    int lv_bunkersize;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bunker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_p = EventPlayer();
    lv_point = UnitGetPosition(lv_bunker);
    lv_bunkersize = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SIInfestedBunkerTransport", "TotalCargoSpace", UnitGetOwner(lv_bunker));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_bunkersize > 0) && (UnitCargoValue(lv_bunker, c_unitCargoSpaceFree) > 0)) {
        UnitCargoCreate(lv_bunker, "SIInfestedTrooper", 1);
        lv_newUnit = UnitCargoLastCreated();
    }
    else {
        if ((libCOMM_gv_cM_Stukov_RallyPoint[lv_p] != null)) {
            lv_point = libNtve_gf_PointOffsetTowardsPoint(lv_point, 1.0, libCOMM_gv_cM_Stukov_RallyPoint[lv_p]);
        }

        UnitCreate(1, "SIInfestedTrooper", 0, lv_p, lv_point, 270.0);
        lv_newUnit = UnitLastCreated();
        SoundPlayOnUnitForPlayer(SoundLink("Medivac_Unload", -1), EventPlayer(), PlayerGroupAll(), lv_newUnit, 0.0, 100.0, 0.0);
    }
    UnitSetState(lv_newUnit, c_unitStateUsingSupply, false);
    libCOMM_gf_CM_Stukov_NewBunkerUnitProcess(lv_newUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_InfestedBunkerAutoLoad_Init () {
    libCOMM_gt_CM_Stukov_InfestedBunkerAutoLoad = TriggerCreate("libCOMM_gt_CM_Stukov_InfestedBunkerAutoLoad_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedBunkerAutoLoad, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stukov_InfestedBunkerAutoLoad, c_playerAny, "SIInfestedBunkerAutoSpawnerDummyMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedTimedLifeFoodHackBurrow
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateUsingSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Init () {
    libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow = TriggerCreate("libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedTrooperUp", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedTrooperDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedCivilianUp", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedCivilianDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIVolatileInfestedDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIVolatileInfestedUp", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedTimedLifeFoodHackTrain
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnitCreatedUnit(), c_unitStateUsingSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Init () {
    libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain = TriggerCreate("libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain, false);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain, null, "SIMorphtoInfestedCivilian", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerUnloadRally
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_InfestedBunkerUnloadRally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_newUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_Stukov_NewBunkerUnitProcess(lv_newUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_InfestedBunkerUnloadRally_Init () {
    libCOMM_gt_CM_Stukov_InfestedBunkerUnloadRally = TriggerCreate("libCOMM_gt_CM_Stukov_InfestedBunkerUnloadRally_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedBunkerUnloadRally, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stukov_InfestedBunkerUnloadRally, c_playerAny, "SIInfestedBunkerBunkerUnloadSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerRegister
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_InfestedBunkerRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_Stukov_BunkerGroup[lv_player], lv_u);
    if ((libCOMM_gv_cM_Stukov_RallyPoint[lv_player] != null)) {
        UnitGroupIssueOrder(libCOMM_gv_cM_Stukov_BunkerGroup[lv_player], OrderTargetingPoint(AbilityCommand("SIInfestedBunkerRally", 0), libCOMM_gv_cM_Stukov_RallyPoint[lv_player]), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_InfestedBunkerRegister_Init () {
    libCOMM_gt_CM_Stukov_InfestedBunkerRegister = TriggerCreate("libCOMM_gt_CM_Stukov_InfestedBunkerRegister_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedBunkerRegister, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stukov_InfestedBunkerRegister, c_playerAny, "SIInfestedBunkerCreation");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerInitialSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_InfestedBunkerInitialSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_bunkersize;

    // Automatic Variable Declarations
    unitgroup auto95978A8C_g;
    int auto95978A8C_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SISCV") && (libNtve_gf_TriggeringProgressUnitType() == "SIInfestedBunker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bunkersize = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SIInfestedBunkerTransport", "TotalCargoSpace", UnitGetOwner(EventUnitProgressUnit()));
    if ((lv_bunkersize > 0)) {
        UnitCargoCreate(EventUnitProgressUnit(), "SIInfestedTrooper", lv_bunkersize);
        auto95978A8C_g = UnitCargoLastCreatedGroup();
        auto95978A8C_u = UnitGroupCount(auto95978A8C_g, c_unitCountAll);
        for (;; auto95978A8C_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(auto95978A8C_g, auto95978A8C_u);
            if (lv_u == null) { break; }
            UnitSetState(lv_u, c_unitStateUsingSupply, false);
            libCOMM_gf_CM_Stukov_NewBunkerUnitProcess(lv_u);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_InfestedBunkerInitialSpawn_Init () {
    libCOMM_gt_CM_Stukov_InfestedBunkerInitialSpawn = TriggerCreate("libCOMM_gt_CM_Stukov_InfestedBunkerInitialSpawn_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedBunkerInitialSpawn, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_Stukov_InfestedBunkerInitialSpawn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_UnitCostRefund
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_UnitCostRefund_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropVespene, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(1) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_UnitCostRefund_Init () {
    libCOMM_gt_CM_Stukov_UnitCostRefund = TriggerCreate("libCOMM_gt_CM_Stukov_UnitCostRefund_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_UnitCostRefund, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Stukov_UnitCostRefund, c_playerAny, "CocoonCreateLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedSiegeTankDeath
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Stukov_InfestedSiegeTankDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount;
    int lv_player;

    // Automatic Variable Declarations
    int auto423629A2_ae;
    const int auto423629A2_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "StukovInfestedSiegeTankAmmo") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stackCount = UnitBehaviorCount(EventUnit(), "StukovInfestedSiegeTankAmmo");
    auto423629A2_ae = lv_stackCount;
    lv_stackCount = 1;
    for ( ; ( (auto423629A2_ai >= 0 && lv_stackCount <= auto423629A2_ae) || (auto423629A2_ai < 0 && lv_stackCount >= auto423629A2_ae) ) ; lv_stackCount += auto423629A2_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIVolatileInfested", 0, EventPlayer(), UnitGetPosition(EventUnit()));
        UnitBehaviorAddPlayer(UnitLastCreated(), "SIBarracksTrainTimedLife", EventPlayer(), 1);
        UnitGroupAdd(libCOMM_gv_cM_Stukov_HordeGroup[lv_player], UnitLastCreated());
        UnitGroupAdd(libCOMM_gv_cM_Stukov_HordeCurrentWave[lv_player], UnitLastCreated());
        libCOMM_gv_cM_Stukov_HordeCount[lv_player] = UnitGroupCount(libCOMM_gv_cM_Stukov_HordeGroup[lv_player], c_unitCountAlive);
        libCOMM_gf_CM_Stukov_SingleUnitGoToRally(UnitLastCreated(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Stukov_InfestedSiegeTankDeath_Init () {
    libCOMM_gt_CM_Stukov_InfestedSiegeTankDeath = TriggerCreate("libCOMM_gt_CM_Stukov_InfestedSiegeTankDeath_Func");
    TriggerEnable(libCOMM_gt_CM_Stukov_InfestedSiegeTankDeath, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Stukov_InfestedSiegeTankDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderSwann
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderSwann_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto0DC09362_g;
    int auto0DC09362_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Swann");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreSwannSVHeal, true);
    TriggerEnable(libCOMM_gt_CC_ScoreSwannDrillDmg, true);
    TriggerEnable(libCOMM_gt_AdvancedConstructionAutoUser, true);
    TriggerEnable(libCOMM_gt_AdvancedConstructionAutoAutoCast, true);
    TriggerEnable(libCOMM_gt_SwannVespeneDroneTrigger, true);
    TriggerEnable(libCOMM_gt_SwannSiegeTankRebuildController, true);
    TriggerEnable(libCOMM_gt_SwannThorRebuildController, true);
    TriggerEnable(libCOMM_gt_SwannLaserDrillCallForHelp, true);
    TriggerEnable(libCOMM_gt_CM_LaserDrillBFGActivate, true);
    TriggerEnable(libCOMM_gt_CM_LaserDrillNukeActivate, true);
    TriggerEnable(libCOMM_gt_CM_LaserDrillBFG, true);
    TriggerEnable(libCOMM_gt_LaserDrillBeamSoundRegionClear, true);
    TriggerEnable(libCOMM_gt_LaserDrillBeamSoundFiring, true);
    TriggerEnable(libCOMM_gt_LaserDrillBFGBeamSoundFiring, true);
    TriggerEnable(libCOMM_gt_LaserDrillNukeBeamSoundFiring, true);
    TriggerEnable(libCOMM_gt_LaserDrillNukeBeamSoundRegionClear, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionSwannDrone, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionSwannCombatDropUsed, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionSwannLaserDrill, true);
    auto0DC09362_g = lv_players;
    auto0DC09362_var = -1;
    while (true) {
        auto0DC09362_var = PlayerGroupNextPlayer(auto0DC09362_g, auto0DC09362_var);
        if (auto0DC09362_var < 0) { break; }
        libCOMI_gf_CM_CommanderVOAbilityWatch(auto0DC09362_var, SoundLink("AdjutantAlert_SwannCombatDropReady", -1), "Abil/SpecialDelivery", null, null);
        libCOMI_gf_CM_CommanderVOAbilityWatch(auto0DC09362_var, SoundLink("AdjutantAlert_SwannPulseCannonReady", -1), "Abil/DrakkenLaserDrillNuke", null, null);
        libCOMI_gf_CM_CommanderVOAbilityWatch(auto0DC09362_var, SoundLink("AdjutantAlert_SwannConcentratedBeamReady", -1), "Abil/DrakkenLaserDrillBFG", null, null);
        libCOMI_gf_CreateACCaster(auto0DC09362_var, "CoopCasterSwann");
        libCOMI_gf_CU_GPInitCommonCaster(auto0DC09362_var, "CoopCasterSwann", "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate", 4, "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", "FourButtons");
        if ((TechTreeUnitIsAllowed(auto0DC09362_var, "UnfinishedDrakkenLaserDrillCoop") == true)) {
            libCOMI_gf_CreateACStructure(auto0DC09362_var, "UnfinishedDrakkenLaserDrillCoop");
            libCOMM_gv_cM_LaserDrillUnit[auto0DC09362_var] = UnitLastCreated();
            libCOMM_gv_cM_LaserDrillUnitGroup[auto0DC09362_var] = libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderSwann_Init () {
    libCOMM_gt_DUT_CommanderSwann = TriggerCreate("libCOMM_gt_DUT_CommanderSwann_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderSwann, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionSwannDrone
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionSwannDrone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("SwannCommander_Drone", -1), PlayerGroupAll());
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(libCOMI_gf_CC_PlayerAlly(EventPlayer())), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionSwannDrone_Init () {
    libCOMM_gt_CM_AbilityTransmissionSwannDrone = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionSwannDrone_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionSwannDrone, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionSwannDrone, null, AbilityCommand("VespeneDroneCast", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionSwannLaserDrill
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionSwannLaserDrill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("SwannCommander_LaserDrill", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionSwannLaserDrill_Init () {
    libCOMM_gt_CM_AbilityTransmissionSwannLaserDrill = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionSwannLaserDrill_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionSwannLaserDrill, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionSwannLaserDrill, null, AbilityCommand("ConstructDrakkenLaserDrillCoop", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionSwannCombatDropUsed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionSwannCombatDropUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("SwannCommander_Delivery", -1), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionSwannCombatDropUsed_Init () {
    libCOMM_gt_CM_AbilityTransmissionSwannCombatDropUsed = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionSwannCombatDropUsed_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionSwannCombatDropUsed, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionSwannCombatDropUsed, null, AbilityCommand("SpecialDelivery", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreSwannSVHeal
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreSwannSVHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "Swann"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitHealLaunchUnit()) == "ScienceVessel"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreSwannHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "SwannMechHealing", FixedToInt(libCOMM_gv_cC_ScoreSwannHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreSwannSVHeal_Init () {
    libCOMM_gt_CC_ScoreSwannSVHeal = TriggerCreate("libCOMM_gt_CC_ScoreSwannSVHeal_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreSwannSVHeal, false);
    TriggerAddEventUnitHealed(libCOMM_gt_CC_ScoreSwannSVHeal, null, c_unitVitalLife, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreSwannDrillDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreSwannDrillDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "DrakkenLaserDrillCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreSwannDrillDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "SwannDrillDamage", FixedToInt(libCOMM_gv_cC_ScoreSwannDrillDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreSwannDrillDmg_Init () {
    libCOMM_gt_CC_ScoreSwannDrillDmg = TriggerCreate("libCOMM_gt_CC_ScoreSwannDrillDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreSwannDrillDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreSwannDrillDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasterySwannSiegeTankImmortalityProtocolCostReduction
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "MasterySwannImmortalityProtocol"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction_Init () {
    libCOMM_gt_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction = TriggerCreate("libCOMM_gt_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_LaserDrillBFGActivate
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_LaserDrillBFGActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_laserDrillUnit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCOMM_gv_cM_LaserDrillUnit[lv_player])), libCOMM_gv_cM_LaserDrillUnitGroup[lv_player], OrderTargetingPoint(AbilityCommand("DrakkenLaserDrillBFG", 0), UnitGetPosition(libCOMM_gv_cM_LaserDrillUnit[lv_player])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_LaserDrillBFGActivate_Init () {
    libCOMM_gt_CM_LaserDrillBFGActivate = TriggerCreate("libCOMM_gt_CM_LaserDrillBFGActivate_Func");
    TriggerEnable(libCOMM_gt_CM_LaserDrillBFGActivate, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_LaserDrillBFGActivate, null, AbilityCommand("DrakkenLaserDrillConcentratedBeamIssueOrder", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_LaserDrillNukeActivate
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_LaserDrillNukeActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCOMM_gv_cM_LaserDrillUnit[lv_player])), libCOMM_gv_cM_LaserDrillUnitGroup[lv_player], OrderTargetingPoint(AbilityCommand("DrakkenLaserDrillNuke", 0), UnitGetPosition(libCOMM_gv_cM_LaserDrillUnit[lv_player])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_LaserDrillNukeActivate_Init () {
    libCOMM_gt_CM_LaserDrillNukeActivate = TriggerCreate("libCOMM_gt_CM_LaserDrillNukeActivate_Func");
    TriggerEnable(libCOMM_gt_CM_LaserDrillNukeActivate, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_LaserDrillNukeActivate, null, AbilityCommand("DrakkenLaserDrillPulseCannonIssueOrder", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_LaserDrillBFG
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_LaserDrillBFG_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_casterPoint;
    point lv_targetPoint;
    point lv_abilityTargetPoint;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abilityTargetPoint = libCOMM_gf_CM_LaserDrillTargetPoint(lv_targetPoint, lv_casterPoint, RegionPlayableMap(), lv_player);
    if ((lv_abilityTargetPoint != null)) {
        CatalogFieldValueModify(c_gameCatalogEffect, "DrakkenLaserDrillBFGDummyCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCOMM_gv_cM_LaserDrillDistance[lv_player] / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "DrakkenLaserDrillBFGCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCOMM_gv_cM_LaserDrillDistance[lv_player] / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "DrakkenLaserDrillBFGSearch", "AreaArray[" + IntToString(0) + "].RectangleHeight", EventPlayer(), IntToString(libCOMM_gv_cM_LaserDrillDistance[lv_player]), c_upgradeOperationSet);
        UnitCreateEffectPoint(EventUnit(), "DrakkenLaserDrillBFGSet", lv_abilityTargetPoint);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_LaserDrillBFG_Init () {
    libCOMM_gt_CM_LaserDrillBFG = TriggerCreate("libCOMM_gt_CM_LaserDrillBFG_Func");
    TriggerEnable(libCOMM_gt_CM_LaserDrillBFG, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_LaserDrillBFG, null, AbilityCommand("DrakkenLaserDrillBFG", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Drill Beam Sound Region Clear
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_LaserDrillBeamSoundRegionClear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_laserDrillSoundRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMM_gv_laserDrillSoundRegionActor[lv_player]), "Signal StopSound");
        libCOMM_gv_laserDrillSoundRegion[lv_player] = RegionEmpty();
        libCOMM_gv_laserDrillSoundRegionCreated[lv_player] = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_LaserDrillBeamSoundRegionClear_Init () {
    libCOMM_gt_LaserDrillBeamSoundRegionClear = TriggerCreate("libCOMM_gt_LaserDrillBeamSoundRegionClear_Func");
    TriggerEnable(libCOMM_gt_LaserDrillBeamSoundRegionClear, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_LaserDrillBeamSoundRegionClear, c_playerAny, "LaserDrillTripodCoopFinalPersistentEnd");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Drill Beam Sound Firing
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_LaserDrillBeamSoundFiring_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;
    int lv_player;

    // Automatic Variable Declarations
    int auto941C528E_ae;
    const int auto941C528E_ai = 1;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_laserDrillSoundRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMM_gv_laserDrillSoundRegionActor[lv_player]), "Signal StopSound");
        libCOMM_gv_laserDrillSoundRegion[lv_player] = RegionEmpty();
        libCOMM_gv_laserDrillSoundRegionCreated[lv_player] = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCOMM_gv_laserDrillSoundRegion[lv_player] = RegionCircle(Point(lv_x, lv_y), 1.0);
    auto941C528E_ae = lv_di;
    lv_i = 1;
    for ( ; ( (auto941C528E_ai >= 0 && lv_i <= auto941C528E_ae) || (auto941C528E_ai < 0 && lv_i >= auto941C528E_ae) ) ; lv_i += auto941C528E_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCOMM_gv_laserDrillSoundRegion[lv_player], true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "LaserDrillCoopBeamRegion", libCOMM_gv_laserDrillSoundRegion[lv_player]);
    libCOMM_gv_laserDrillSoundRegionActor[lv_player] = libNtve_gf_ActorLastCreated();
    libCOMM_gv_laserDrillSoundRegionCreated[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_LaserDrillBeamSoundFiring_Init () {
    libCOMM_gt_LaserDrillBeamSoundFiring = TriggerCreate("libCOMM_gt_LaserDrillBeamSoundFiring_Func");
    TriggerEnable(libCOMM_gt_LaserDrillBeamSoundFiring, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_LaserDrillBeamSoundFiring, c_playerAny, "LaserDrillTripodCoopFinalPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LaserDrillBFG Beam Sound Firing
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_LaserDrillBFGBeamSoundFiring_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;
    int lv_player;

    // Automatic Variable Declarations
    int auto76DEC820_ae;
    const int auto76DEC820_ai = 1;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_laserDrillBFGSoundRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMM_gv_laserDrillBFGSoundRegionActor[lv_player]), "Signal StopSound");
        libCOMM_gv_laserDrillBFGSoundRegion[lv_player] = RegionEmpty();
        libCOMM_gv_laserDrillBFGSoundRegionCreated[lv_player] = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCOMM_gv_laserDrillBFGSoundRegion[lv_player] = RegionCircle(Point(lv_x, lv_y), 1.0);
    auto76DEC820_ae = lv_di;
    lv_i = 1;
    for ( ; ( (auto76DEC820_ai >= 0 && lv_i <= auto76DEC820_ae) || (auto76DEC820_ai < 0 && lv_i >= auto76DEC820_ae) ) ; lv_i += auto76DEC820_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCOMM_gv_laserDrillBFGSoundRegion[lv_player], true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "LaserDrillCoopConcentratedBeamRegion", libCOMM_gv_laserDrillBFGSoundRegion[lv_player]);
    libCOMM_gv_laserDrillBFGSoundRegionActor[lv_player] = libNtve_gf_ActorLastCreated();
    libCOMM_gv_laserDrillBFGSoundRegionCreated[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_LaserDrillBFGBeamSoundFiring_Init () {
    libCOMM_gt_LaserDrillBFGBeamSoundFiring = TriggerCreate("libCOMM_gt_LaserDrillBFGBeamSoundFiring_Func");
    TriggerEnable(libCOMM_gt_LaserDrillBFGBeamSoundFiring, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_LaserDrillBFGBeamSoundFiring, c_playerAny, "DrakkenLaserDrillBFGCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LaserDrillNuke Beam Sound Firing
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_LaserDrillNukeBeamSoundFiring_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;
    int lv_player;

    // Automatic Variable Declarations
    int autoFD2F6010_ae;
    const int autoFD2F6010_ai = 1;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_laserDrillNukeSoundRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMM_gv_laserDrillNukeSoundRegionActor[lv_player]), "Signal StopSound");
        libCOMM_gv_laserDrillNukeSoundRegion[lv_player] = RegionEmpty();
        libCOMM_gv_laserDrillNukeSoundRegionCreated[lv_player] = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCOMM_gv_laserDrillNukeSoundRegion[lv_player] = RegionCircle(Point(lv_x, lv_y), 1.0);
    autoFD2F6010_ae = lv_di;
    lv_i = 1;
    for ( ; ( (autoFD2F6010_ai >= 0 && lv_i <= autoFD2F6010_ae) || (autoFD2F6010_ai < 0 && lv_i >= autoFD2F6010_ae) ) ; lv_i += autoFD2F6010_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCOMM_gv_laserDrillNukeSoundRegion[lv_player], true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "PulseCannonBeamRegion", libCOMM_gv_laserDrillNukeSoundRegion[lv_player]);
    libCOMM_gv_laserDrillNukeSoundRegionActor[lv_player] = libNtve_gf_ActorLastCreated();
    libCOMM_gv_laserDrillNukeSoundRegionCreated[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_LaserDrillNukeBeamSoundFiring_Init () {
    libCOMM_gt_LaserDrillNukeBeamSoundFiring = TriggerCreate("libCOMM_gt_LaserDrillNukeBeamSoundFiring_Func");
    TriggerEnable(libCOMM_gt_LaserDrillNukeBeamSoundFiring, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_LaserDrillNukeBeamSoundFiring, c_playerAny, "DrakkenLaserDrillNukeDelayCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser DrillNuke Beam Sound Region Clear
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_LaserDrillNukeBeamSoundRegionClear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_laserDrillNukeSoundRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMM_gv_laserDrillNukeSoundRegionActor[lv_player]), "Signal StopSound");
        libCOMM_gv_laserDrillNukeSoundRegion[lv_player] = RegionEmpty();
        libCOMM_gv_laserDrillNukeSoundRegionCreated[lv_player] = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_LaserDrillNukeBeamSoundRegionClear_Init () {
    libCOMM_gt_LaserDrillNukeBeamSoundRegionClear = TriggerCreate("libCOMM_gt_LaserDrillNukeBeamSoundRegionClear_Func");
    TriggerEnable(libCOMM_gt_LaserDrillNukeBeamSoundRegionClear, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_LaserDrillNukeBeamSoundRegionClear, c_playerAny, "DrakkenLaserDrillNukeSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_LaserDrillTopbarOrder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_LaserDrillTopbarOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    bool lv_queue;
    unit lv_laserDrill;
    order lv_orderAttack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_queue = OrderGetFlag(lv_order, c_cmdQueued);
    lv_laserDrill = libCOMM_gv_cM_LaserDrillUnit[OrderGetPlayer(lv_order)];
    lv_orderAttack = OrderTargetingUnit(AbilityCommand("attack", 0), OrderGetTargetUnit(lv_order));

    // Actions
    if (!runActions) {
        return true;
    }

    OrderSetFlag(lv_orderAttack, c_cmdQueued, lv_queue);
    UnitIssueOrder(lv_laserDrill, lv_orderAttack, c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_LaserDrillTopbarOrder_Init () {
    libCOMM_gt_CM_LaserDrillTopbarOrder = TriggerCreate("libCOMM_gt_CM_LaserDrillTopbarOrder_Func");
    TriggerAddEventUnitOrder(libCOMM_gt_CM_LaserDrillTopbarOrder, null, AbilityCommand("DrakkenLaserDrillAttackIssueOrder", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Advanced Construction Auto - User
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_AdvancedConstructionAutoUser_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_orderDummy;
    unit lv_sCV;
    unit lv_target;
    bool lv_isUserOrder;
    bool lv_isSetAutoCastStateOrder;
    bool lv_isQueuedOrder;
    string lv_ut;
    abilcmd lv_cmd;
    order lv_order;
    int lv_c;
    int lv_i;

    // Automatic Variable Declarations
    int auto4E18D9A0_ae;
    const int auto4E18D9A0_ai = 1;

    // Variable Initialization
    lv_orderDummy = EventUnitOrder();
    lv_sCV = EventUnit();
    lv_target = OrderGetTargetUnit(lv_orderDummy);
    lv_isUserOrder = OrderGetFlag(lv_orderDummy, c_cmdUser);
    lv_isSetAutoCastStateOrder = OrderGetFlag(lv_orderDummy, c_cmdSetAutoCast);
    lv_isQueuedOrder = OrderGetFlag(lv_orderDummy, c_cmdQueued);
    lv_ut = UnitGetType(lv_target);
    lv_c = TechTreeUnitProducedAbilCmdCount(lv_ut);

    // Conditions
    if (testConds) {
        if (!((lv_isUserOrder == true))) {
            return false;
        }

        if (!((lv_isSetAutoCastStateOrder == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_sCV, "CancelOrderAdvancedConstructionAuto", lv_sCV);
    auto4E18D9A0_ae = (lv_c - 1);
    lv_i = 0;
    for ( ; ( (auto4E18D9A0_ai >= 0 && lv_i <= auto4E18D9A0_ae) || (auto4E18D9A0_ai < 0 && lv_i >= auto4E18D9A0_ae) ) ; lv_i += auto4E18D9A0_ai ) {
        lv_cmd = TechTreeUnitProducedAbilCmd(lv_ut, lv_i);
        lv_order = Order(lv_cmd);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == false)) {
            break;
        }

        lv_order = OrderTargetingUnit(lv_cmd, lv_target);
        OrderSetFlag(lv_order, c_cmdSmartClick, true);
        OrderSetFlag(lv_order, c_cmdQueued, lv_isQueuedOrder);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == true)) {
            UnitIssueOrder(lv_sCV, lv_order, c_orderQueueReplace);
            return true;
        }

    }
    libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Error/CannotAdvancedConstruction"), SoundLink("UI_GenericError", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_AdvancedConstructionAutoUser_Init () {
    libCOMM_gt_AdvancedConstructionAutoUser = TriggerCreate("libCOMM_gt_AdvancedConstructionAutoUser_Func");
    TriggerEnable(libCOMM_gt_AdvancedConstructionAutoUser, false);
    TriggerAddEventUnitOrder(libCOMM_gt_AdvancedConstructionAutoUser, null, AbilityCommand("AdvancedConstructionAuto", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Advanced Construction Auto - Auto Cast
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_AdvancedConstructionAutoAutoCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_orderDummy;
    unit lv_sCV;
    unit lv_target;
    bool lv_isUserOrder;
    bool lv_isQueuedOrder;
    string lv_ut;
    abilcmd lv_cmd;
    order lv_order;
    int lv_c;
    int lv_i;

    // Automatic Variable Declarations
    int auto08D07E3A_ae;
    const int auto08D07E3A_ai = 1;

    // Variable Initialization
    lv_orderDummy = UnitOrder(EventUnit(), 0);
    lv_sCV = EventUnit();
    lv_target = OrderGetTargetUnit(lv_orderDummy);
    lv_isUserOrder = OrderGetFlag(lv_orderDummy, c_cmdUser);
    lv_isQueuedOrder = OrderGetFlag(lv_orderDummy, c_cmdQueued);
    lv_ut = UnitGetType(lv_target);
    lv_c = TechTreeUnitProducedAbilCmdCount(lv_ut);

    // Conditions
    if (testConds) {
        if (!((lv_isUserOrder == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_sCV, "CancelOrderAdvancedConstructionAuto", lv_sCV);
    auto08D07E3A_ae = (lv_c - 1);
    lv_i = 0;
    for ( ; ( (auto08D07E3A_ai >= 0 && lv_i <= auto08D07E3A_ae) || (auto08D07E3A_ai < 0 && lv_i >= auto08D07E3A_ae) ) ; lv_i += auto08D07E3A_ai ) {
        lv_cmd = TechTreeUnitProducedAbilCmd(lv_ut, lv_i);
        lv_order = Order(lv_cmd);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == false)) {
            return true;
        }

        lv_order = OrderTargetingUnit(lv_cmd, lv_target);
        OrderSetFlag(lv_order, c_cmdSmartClick, true);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == true)) {
            UnitIssueOrder(lv_sCV, lv_order, c_orderQueueAddToFront);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_AdvancedConstructionAutoAutoCast_Init () {
    libCOMM_gt_AdvancedConstructionAutoAutoCast = TriggerCreate("libCOMM_gt_AdvancedConstructionAutoAutoCast_Func");
    TriggerEnable(libCOMM_gt_AdvancedConstructionAutoAutoCast, false);
    TriggerAddEventUnitAbility(libCOMM_gt_AdvancedConstructionAutoAutoCast, null, AbilityCommand("AdvancedConstructionAuto", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementSwannCombatDropUsed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AchievementSwannCombatDropUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderSwannCombatReady", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AchievementSwannCombatDropUsed_Init () {
    libCOMM_gt_CM_AchievementSwannCombatDropUsed = TriggerCreate("libCOMM_gt_CM_AchievementSwannCombatDropUsed_Func");
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AchievementSwannCombatDropUsed, null, AbilityCommand("SpecialDelivery", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Vespene Drone Trigger
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_SwannVespeneDroneTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoE82B7BF1_g;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE82B7BF1_g = libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_player);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoE82B7BF1_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        PlayerCreateEffectPoint(lv_itPlayer, "VespeneDroneGrantResourcesTrigger", PlayerStartLocation(lv_itPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_SwannVespeneDroneTrigger_Init () {
    libCOMM_gt_SwannVespeneDroneTrigger = TriggerCreate("libCOMM_gt_SwannVespeneDroneTrigger_Func");
    TriggerEnable(libCOMM_gt_SwannVespeneDroneTrigger, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_SwannVespeneDroneTrigger, c_playerAny, "VespeneDroneImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Siege Tank Rebuild Controller
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_SwannSiegeTankRebuildController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_morphTime;
    fixed lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_morphTime = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,Start");
    lv_upgradeCount = IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasterySwannImmortalityProtocol", c_techCountCompleteOnly));
    lv_morphTime = ((lv_morphTime-(lv_morphTime*(lv_upgradeCount/50)))-3);
    Wait(1.0, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), (("AnimPlay Morph Morph 0 -1.000000 -1.000000 " + FixedToString(lv_morphTime, 2) + " AsDuration ")));
    Wait(lv_morphTime, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_SwannSiegeTankRebuildController_Init () {
    libCOMM_gt_SwannSiegeTankRebuildController = TriggerCreate("libCOMM_gt_SwannSiegeTankRebuildController_Func");
    TriggerEnable(libCOMM_gt_SwannSiegeTankRebuildController, false);
    TriggerAddEventUnitAbility(libCOMM_gt_SwannSiegeTankRebuildController, null, AbilityCommand("SiegeTankReborn", 0), c_abilMorphStageActorStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Thor Rebuild Controller
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_SwannThorRebuildController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_morphTime;
    fixed lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_morphTime = 12.0;

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,Start");
    lv_upgradeCount = IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasterySwannImmortalityProtocol", c_techCountCompleteOnly));
    lv_morphTime = ((lv_morphTime-(lv_morphTime*(lv_upgradeCount/50)))-3);
    Wait(1.0, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), (("AnimPlay Morph Morph 0 -1.000000 -1.000000 " + FixedToString(lv_morphTime, 2) + " AsDuration ")));
    Wait(lv_morphTime, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_SwannThorRebuildController_Init () {
    libCOMM_gt_SwannThorRebuildController = TriggerCreate("libCOMM_gt_SwannThorRebuildController_Func");
    TriggerEnable(libCOMM_gt_SwannThorRebuildController, false);
    TriggerAddEventUnitAbility(libCOMM_gt_SwannThorRebuildController, null, AbilityCommand("ThorRebornSwann", 0), c_abilMorphStageActorStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Laser Drill Call For Help
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_SwannLaserDrillCallForHelp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_laserdrillowner;
    unit lv_laserdrilltarget;
    region lv_laserdrilltargetvicinity;
    unitgroup lv_laserdrillspotters;
    unit lv_laserdrillspotter;

    // Automatic Variable Declarations
    unitgroup auto5EB739DC_g;
    int auto5EB739DC_u;

    // Variable Initialization
    lv_laserdrillowner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_laserdrilltarget = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_laserdrilltargetvicinity = RegionCircle(UnitGetPosition(lv_laserdrilltarget), 12.0);
    lv_laserdrillspotters = UnitGroupAlliance(lv_laserdrillowner, c_unitAllianceAlly, lv_laserdrilltargetvicinity, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    auto5EB739DC_g = lv_laserdrillspotters;
    auto5EB739DC_u = UnitGroupCount(auto5EB739DC_g, c_unitCountAll);
    for (;; auto5EB739DC_u -= 1) {
        lv_laserdrillspotter = UnitGroupUnitFromEnd(auto5EB739DC_g, auto5EB739DC_u);
        if (lv_laserdrillspotter == null) { break; }
        UnitCreateEffectUnit(lv_laserdrillspotter, "DrakkenLaserDrillSpotterCallForHelp", lv_laserdrilltarget);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_SwannLaserDrillCallForHelp_Init () {
    libCOMM_gt_SwannLaserDrillCallForHelp = TriggerCreate("libCOMM_gt_SwannLaserDrillCallForHelp_Func");
    TriggerEnable(libCOMM_gt_SwannLaserDrillCallForHelp, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_SwannLaserDrillCallForHelp, c_playerAny, "LaserDrillTripodDamageCoop");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderTychus
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderTychus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto29EFAEBF_g;
    int auto29EFAEBF_var;
    const int auto219B5702_ae = 10;
    const int auto219B5702_ai = 1;
    unitgroup autoA4F7BB39_g;
    int autoA4F7BB39_u;
    unit autoA4F7BB39_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Tychus");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreTychusFirebatOilDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreTychusGhostDominatedDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreTychusGrenadeDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreTychusHERCImpactDuration, true);
    TriggerEnable(libCOMM_gt_CC_ScoreTychusMarauderHeal, true);
    TriggerEnable(libCOMM_gt_CC_ScoreTychusMedicAbsorb, true);
    TriggerEnable(libCOMM_gt_CC_ScoreTychusMedicHeal, true);
    TriggerEnable(libCOMM_gt_CC_ScoreTychusMedicHealAoE, true);
    TriggerEnable(libCOMM_gt_CC_ScoreTychusOdinDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreTychusReaperBombDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreTychusSpectrePulseDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreTychusWarhoundTurretDmg, true);
    TriggerEnable(libCOMM_gt__CM_TychusEventHook, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_CalldownOdinDeselect, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_HeroQueue, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_HeroCancel, true);
    TriggerEnable(libCOMM_gt_CM_TychusSpecialistTrainingAuraOn, true);
    TriggerEnable(libCOMM_gt_CM_TychusSpecialistTrainingAuraOff, true);
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportActived, true);
    TriggerEnable(libCOMM_gt_CM_TychusMedicTopBarButton, true);
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportTargetOn, true);
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportTargetOff, true);
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportStop, true);
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportTimeOut, true);
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportAirBehaviorApplied, true);
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportGroundBehaviorApplied, true);
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportTeleportUnload, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_WarhoundFearApply, true);
    TriggerEnable(libCOMM_gt_CM_TychusWarhound_Revive, true);
    TriggerEnable(libCOMM_gt_CM_TychusReaper_Revive, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_TrainMaxChargesRemove, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_CalldownOdinTychusSelect, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_CalldownOdinUpdateTarget, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_OdinSummon_Used, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_OdinSummon_CameraShake, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_Odin_Timeout, true);
    TriggerEnable(libCOMM_gt__CM_TychusEventHook, true);
    TriggerEnable(libCOMM_gt__CM_TychusStructureEventHook, true);
    TriggerEnable(libCOMM_gt_CM_TychusHERC_CriticalText, true);
    TriggerEnable(libCOMM_gt_CM_TychusHERC_ShieldCooldown, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_OilBombFireDamageResponse, true);
    TriggerEnable(libCOMM_gt_CM_TychusHeroPurchaseDummy, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_Hero_Charge_Timing, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_HeroReviveUsed, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_HeroReviveFailSafe, true);
    TriggerEnable(libCOMM_gt_CM_TychusReplaceResearchCenter, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_TriUnitSpeed_Upgrade, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_TriUnitHealth_Upgrade, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_UltimateAchievement, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_HealAchievement, true);
    TriggerEnable(libCOMM_gt_CM_Tychus_SnareFailSafe, true);
    TimerStart(libCOMM_gv_cM_TychusVOTransportReminderTimer, libCOMM_gv_cMC_TychusVOTransportReminderDelay, false, c_timeGame);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateReaper, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateFirebat, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreatePhantom, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateMedic, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusTransportReminder, true);
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusTransportBuild, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusTransportUse, true);
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawFirstDeath, true);
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawDeath, true);
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawRevived, true);
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawReviveReminder, true);
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable, true);
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruited, true);
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitReminder, true);
    auto29EFAEBF_g = lv_players;
    auto29EFAEBF_var = -1;
    while (true) {
        auto29EFAEBF_var = PlayerGroupNextPlayer(auto29EFAEBF_g, auto29EFAEBF_var);
        if (auto29EFAEBF_var < 0) { break; }
        libCOMI_gf_CM_CommanderVOAbilityWatch(auto29EFAEBF_var, SoundLink("TychusCommander_OdinReady", -1), "Abil/TychusCalldownOdinTargeted", null, null);
        if ((TechTreeAbilityIsAllowed(auto29EFAEBF_var, AbilityCommand("TychusBarracksTrain", 4)) == true)) {
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateMarauder, true);
        }

        if ((TechTreeAbilityIsAllowed(auto29EFAEBF_var, AbilityCommand("TychusFactoryTrain", 3)) == true)) {
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateWarhound, true);
        }

        if ((TechTreeAbilityIsAllowed(auto29EFAEBF_var, AbilityCommand("TychusFactoryTrain", 1)) == true)) {
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateHERC, true);
        }

        if ((TechTreeAbilityIsAllowed(auto29EFAEBF_var, AbilityCommand("TychusBarracksTrain", 2)) == true)) {
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateGhost, true);
        }

        libCOMM_gv_cM_TychusVOTychusPlayer = auto29EFAEBF_var;
        lv_i = 0;
        for ( ; ( (auto219B5702_ai >= 0 && lv_i <= auto219B5702_ae) || (auto219B5702_ai < 0 && lv_i >= auto219B5702_ae) ) ; lv_i += auto219B5702_ai ) {
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusBarracksTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", auto29EFAEBF_var, 4.0);
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusFactoryTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", auto29EFAEBF_var, 4.0);
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", auto29EFAEBF_var, 4.0);
        }
        libCOMM_gf_CM_Tychus_InitHeroTechLimit(auto29EFAEBF_var);
        libCOMM_gf_CM_Tychus_UpdateHeroTechTree(auto29EFAEBF_var);
        libCOMM_gf_CM_Tychus_SetHeroCostMultiply(auto29EFAEBF_var, 1.0, 1.0);
        if ((TechTreeUnitIsAllowed(auto29EFAEBF_var, "CoopCasterTychus") == true)) {
            libCOMI_gf_CreateACCaster(auto29EFAEBF_var, "CoopCasterTychus");
            libCOMM_gf_CU_GPInitTychus(auto29EFAEBF_var);
            autoA4F7BB39_g = UnitGroup("TychusMedivacPlatform", auto29EFAEBF_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoA4F7BB39_u = UnitGroupCount(autoA4F7BB39_g, c_unitCountAll);
            for (;; autoA4F7BB39_u -= 1) {
                autoA4F7BB39_var = UnitGroupUnitFromEnd(autoA4F7BB39_g, autoA4F7BB39_u);
                if (autoA4F7BB39_var == null) { break; }
                UnitGroupAdd(libCOMI_gv_yY_GPCasterGroup[auto29EFAEBF_var], autoA4F7BB39_var);
                UnitGroupAdd(libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_yY_GPCasterUnit[auto29EFAEBF_var]), autoA4F7BB39_var);
                libCOMM_gf_ModifyTychusMedivacCharges(1);
            }
            libNtve_gf_SetDialogItemUnitGroup(libCOMI_gv_cU_GPCmdPanel[auto29EFAEBF_var], libCOMI_gv_yY_GPCasterGroup[auto29EFAEBF_var], PlayerGroupSingle(auto29EFAEBF_var));
        }

        if ((TechTreeUnitIsAllowed(auto29EFAEBF_var, "TychusResearchCenter") == true)) {
            libCOMI_gf_CreateACStructure(auto29EFAEBF_var, "TychusResearchCenter");
            libCOMM_gf_CU_TychusSetBarUnit(UnitLastCreated());
        }

        if (((libCOMI_gf_DifficultyLevelForPlayerCoop(auto29EFAEBF_var) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(auto29EFAEBF_var) == 4) || (libCOMI_gf_CC_CommanderLevel(auto29EFAEBF_var, libCOMI_gf_ActiveCommanderForPlayer(auto29EFAEBF_var)) <= 2))) {
            libCOMI_gv_cM_GPRemindersOn[auto29EFAEBF_var] = true;
            TriggerEnable(libCOMM_gt_CM_GPReminderAbilityUsed, true);
            libCOMM_gf_CM_GPReminderTychus(auto29EFAEBF_var);
        }

    }
    TriggerExecute(libCOMM_gt_CM_Tychus_Hero_Charge_Timing, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderTychus_Init () {
    libCOMM_gt_DUT_CommanderTychus = TriggerCreate("libCOMM_gt_DUT_CommanderTychus_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderTychus, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateReaper
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionTychusCreateReaper_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_ReaperReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionTychusCreateReaper_Init () {
    libCOMM_gt_CM_AbilityTransmissionTychusCreateReaper = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionTychusCreateReaper_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateReaper, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionTychusCreateReaper, null, AbilityCommand("TychusBarracksTrain", 3), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateWarhound
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionTychusCreateWarhound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_WarhoundReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionTychusCreateWarhound_Init () {
    libCOMM_gt_CM_AbilityTransmissionTychusCreateWarhound = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionTychusCreateWarhound_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateWarhound, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionTychusCreateWarhound, null, AbilityCommand("TychusFactoryTrain", 3), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateFirebat
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionTychusCreateFirebat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_FirebatReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionTychusCreateFirebat_Init () {
    libCOMM_gt_CM_AbilityTransmissionTychusCreateFirebat = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionTychusCreateFirebat_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateFirebat, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionTychusCreateFirebat, null, AbilityCommand("TychusBarracksTrain", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateMarauder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionTychusCreateMarauder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_MarauderReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionTychusCreateMarauder_Init () {
    libCOMM_gt_CM_AbilityTransmissionTychusCreateMarauder = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionTychusCreateMarauder_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateMarauder, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionTychusCreateMarauder, null, AbilityCommand("TychusBarracksTrain", 4), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateHERC
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionTychusCreateHERC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_HERCReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionTychusCreateHERC_Init () {
    libCOMM_gt_CM_AbilityTransmissionTychusCreateHERC = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionTychusCreateHERC_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateHERC, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionTychusCreateHERC, null, AbilityCommand("TychusFactoryTrain", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateGhost
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionTychusCreateGhost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_GhostReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionTychusCreateGhost_Init () {
    libCOMM_gt_CM_AbilityTransmissionTychusCreateGhost = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionTychusCreateGhost_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateGhost, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionTychusCreateGhost, null, AbilityCommand("TychusBarracksTrain", 2), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreatePhantom
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionTychusCreatePhantom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_SpectreReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionTychusCreatePhantom_Init () {
    libCOMM_gt_CM_AbilityTransmissionTychusCreatePhantom = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionTychusCreatePhantom_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreatePhantom, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionTychusCreatePhantom, null, AbilityCommand("TychusBarracksTrain", 5), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateMedic
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionTychusCreateMedic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_MedicReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionTychusCreateMedic_Init () {
    libCOMM_gt_CM_AbilityTransmissionTychusCreateMedic = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionTychusCreateMedic_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusCreateMedic, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionTychusCreateMedic, null, AbilityCommand("TychusBarracksTrain", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusOdinUse
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionTychusOdinUse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("TychusCommander_OdinUsed", -1), PlayerGroupAll());
    if ((libCOMM_gv_cM_MengskSnarkExecuted == false) && (libCOMI_gf_CC_CommanderInGame("Mengsk") == true)) {
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        libCOMM_gv_cM_MengskSnarkExecuted = true;
        Wait(0.5, c_timeReal);
        libCOMI_gf_CM_CommanderVOSend(EventPlayer(), SoundLink("MengskCommander_TychusSpawn", -1), PlayerGroupAll());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionTychusOdinUse_Init () {
    libCOMM_gt_CM_AbilityTransmissionTychusOdinUse = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionTychusOdinUse_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusOdinUse, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionTychusOdinUse, null, AbilityCommand("TychusCalldownOdinTargeted", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusTransportUse
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionTychusTransportUse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("TychusCommander_MedivacUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionTychusTransportUse_Init () {
    libCOMM_gt_CM_AbilityTransmissionTychusTransportUse = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionTychusTransportUse_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusTransportUse, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionTychusTransportUse, null, AbilityCommand("TychusMedicTransportLoadUnits", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusTransportReminder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionTychusTransportReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(libCOMM_gv_cM_TychusVOTransportFlairCooldownTimer) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMM_gv_cM_TychusVOTychusPlayer, SoundLink("TychusCommander_MedivacPlatformReminder", -1), PlayerGroupSingle(libCOMM_gv_cM_TychusVOTychusPlayer));
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusTransportBuild, false);
    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(libCOMM_gv_cM_TychusVOTransportFlairCooldownTimer, libCOMM_gv_cMC_TychusVOTransportFlairCooldown, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionTychusTransportReminder_Init () {
    libCOMM_gt_CM_AbilityTransmissionTychusTransportReminder = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionTychusTransportReminder_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusTransportReminder, false);
    TriggerAddEventTimer(libCOMM_gt_CM_AbilityTransmissionTychusTransportReminder, libCOMM_gv_cM_TychusVOTransportReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusTransportBuild
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_UnitTransmissionTychusTransportBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "TychusMedivacPlatform"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionTychusTransportReminder, false);
    libNtve_gf_StopTimer(libCOMM_gv_cM_TychusVOTransportReminderTimer);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_UnitTransmissionTychusTransportBuild_Init () {
    libCOMM_gt_CM_UnitTransmissionTychusTransportBuild = TriggerCreate("libCOMM_gt_CM_UnitTransmissionTychusTransportBuild_Func");
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusTransportBuild, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_UnitTransmissionTychusTransportBuild, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawFirstDeath
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_UnitTransmissionTychusOutlawFirstDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCOMM_gf_EventTychusHero()) != UserDataGetUnit("XAC_TechTychusSquad", "Tychus", "Unit Type", 1))) {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(libCOMM_gf_EventTychusHero()), SoundLink("TychusCommander_OutlawDeath", -1), PlayerGroupSingle(UnitGetOwner(libCOMM_gf_EventTychusHero())));
    }
    else {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(libCOMM_gf_EventTychusHero()), SoundLink("TychusHeroVO_Death", -1), PlayerGroupSingle(UnitGetOwner(libCOMM_gf_EventTychusHero())));
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_UnitTransmissionTychusOutlawFirstDeath_Init () {
    libCOMM_gt_CM_UnitTransmissionTychusOutlawFirstDeath = TriggerCreate("libCOMM_gt_CM_UnitTransmissionTychusOutlawFirstDeath_Func");
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawFirstDeath, false);
    libCOMM_gf_TychusHeroEvent(libCOMM_gt_CM_UnitTransmissionTychusOutlawFirstDeath, "Event_TychusHeroDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawDeath
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_UnitTransmissionTychusOutlawDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(libCOMM_gf_EventTychusHero()) != UserDataGetUnit("XAC_TechTychusSquad", "Tychus", "Unit Type", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOMM_gt_CM_UnitTransmissionTychusOutlawReviveReminder) == true) && (TimerGetRemaining(libCOMM_gv_cM_TychusVOOutlawReviveReminderTimer) <= 0.0)) {
        TimerStart(libCOMM_gv_cM_TychusVOOutlawReviveReminderTimer, libCOMM_gv_cMC_TychusVOOutlawReviveReminderDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_UnitTransmissionTychusOutlawDeath_Init () {
    libCOMM_gt_CM_UnitTransmissionTychusOutlawDeath = TriggerCreate("libCOMM_gt_CM_UnitTransmissionTychusOutlawDeath_Func");
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawDeath, false);
    libCOMM_gf_TychusHeroEvent(libCOMM_gt_CM_UnitTransmissionTychusOutlawDeath, "Event_TychusHeroDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawRevived
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_UnitTransmissionTychusOutlawRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(libCOMM_gf_EventTychusHero()) != UserDataGetUnit("XAC_TechTychusSquad", "Tychus", "Unit Type", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(libCOMM_gv_cM_TychusVOOutlawReviveReminderTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_UnitTransmissionTychusOutlawRevived_Init () {
    libCOMM_gt_CM_UnitTransmissionTychusOutlawRevived = TriggerCreate("libCOMM_gt_CM_UnitTransmissionTychusOutlawRevived_Func");
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawRevived, false);
    libCOMM_gf_TychusHeroEvent(libCOMM_gt_CM_UnitTransmissionTychusOutlawRevived, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawReviveReminder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_UnitTransmissionTychusOutlawReviveReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMM_gv_cM_TychusVOTychusPlayer, SoundLink("TychusCommander_ReviveOutlaw", -1), PlayerGroupSingle(libCOMM_gv_cM_TychusVOTychusPlayer));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_UnitTransmissionTychusOutlawReviveReminder_Init () {
    libCOMM_gt_CM_UnitTransmissionTychusOutlawReviveReminder = TriggerCreate("libCOMM_gt_CM_UnitTransmissionTychusOutlawReviveReminder_Func");
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawReviveReminder, false);
    TriggerAddEventTimer(libCOMM_gt_CM_UnitTransmissionTychusOutlawReviveReminder, libCOMM_gv_cM_TychusVOOutlawReviveReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawRecruitAvailable
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCOMM_gv_cM_TychusVOOutlawRecruitReminderTimer, libCOMM_gv_cMC_TychusVOOutlawRecruitReminderDelay, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable_Init () {
    libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable = TriggerCreate("libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable_Func");
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable, false);
    TriggerAddEventGeneric(libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable, "TychusHeroAvailable");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawRecruited
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruited_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(libCOMM_gf_EventTychusHero()) != UserDataGetUnit("XAC_TechTychusSquad", "Tychus", "Unit Type", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(libCOMM_gv_cM_TychusVOOutlawRecruitReminderTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruited_Init () {
    libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruited = TriggerCreate("libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruited_Func");
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruited, false);
    libCOMM_gf_TychusHeroEvent(libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruited, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawRecruitReminder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMM_gv_cM_TychusVOTychusPlayer, SoundLink("TychusCommander_RecruitOutlaw", -1), PlayerGroupSingle(libCOMM_gv_cM_TychusVOTychusPlayer));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitReminder_Init () {
    libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitReminder = TriggerCreate("libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitReminder_Func");
    TriggerEnable(libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitReminder, false);
    TriggerAddEventTimer(libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitReminder, libCOMM_gv_cM_TychusVOOutlawRecruitReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusGrenadeDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreTychusGrenadeDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreTychusGrenadeDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusGrenadeDamage", FixedToInt(libCOMM_gv_cC_ScoreTychusGrenadeDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreTychusGrenadeDmg_Init () {
    libCOMM_gt_CC_ScoreTychusGrenadeDmg = TriggerCreate("libCOMM_gt_CC_ScoreTychusGrenadeDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreTychusGrenadeDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreTychusGrenadeDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusShredderGrenadeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusReaperBombDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreTychusReaperBombDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreTychusReaperBombDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusReaperBombDamage", FixedToInt(libCOMM_gv_cC_ScoreTychusReaperBombDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreTychusReaperBombDmg_Init () {
    libCOMM_gt_CC_ScoreTychusReaperBombDmg = TriggerCreate("libCOMM_gt_CC_ScoreTychusReaperBombDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreTychusReaperBombDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreTychusReaperBombDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusReaperBombU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusWarhoundTurretDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreTychusWarhoundTurretDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "TychusWarhoundAutoTurret"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreTychusWarhoundTurretDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusWarhoundTurretDamage", FixedToInt(libCOMM_gv_cC_ScoreTychusWarhoundTurretDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreTychusWarhoundTurretDmg_Init () {
    libCOMM_gt_CC_ScoreTychusWarhoundTurretDmg = TriggerCreate("libCOMM_gt_CC_ScoreTychusWarhoundTurretDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreTychusWarhoundTurretDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreTychusWarhoundTurretDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusFirebatOilDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreTychusFirebatOilDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreTychusFirebatOilDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusFirebatOilDamage", FixedToInt(libCOMM_gv_cC_ScoreTychusFirebatOilDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreTychusFirebatOilDmg_Init () {
    libCOMM_gt_CC_ScoreTychusFirebatOilDmg = TriggerCreate("libCOMM_gt_CC_ScoreTychusFirebatOilDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreTychusFirebatOilDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreTychusFirebatOilDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusFireBatOilFireDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusHERCImpactDuration
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreTychusHERCImpactDuration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreTychusHERCImpactDuration[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] += libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "TychusHercGrappleImpactStun", "Duration", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    PlayerScoreValueSetFromInt(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "TychusHERCImpactDuration", FixedToInt(libCOMM_gv_cC_ScoreTychusHERCImpactDuration[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreTychusHERCImpactDuration_Init () {
    libCOMM_gt_CC_ScoreTychusHERCImpactDuration = TriggerCreate("libCOMM_gt_CC_ScoreTychusHERCImpactDuration_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreTychusHERCImpactDuration, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CC_ScoreTychusHERCImpactDuration, c_playerAny, "TychusHercGrappleLaunchCasterStunAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusMarauderHeal
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreTychusMarauderHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreTychusMarauderHeal[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] += (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifeMax, c_unitPropCurrent) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, EventPlayerEffectUsed(), "VitalArray[" + IntToString(0) + "].ChangeFraction", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    PlayerScoreValueSetFromInt(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "TychusMarauderHeal", FixedToInt(libCOMM_gv_cC_ScoreTychusMarauderHeal[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreTychusMarauderHeal_Init () {
    libCOMM_gt_CC_ScoreTychusMarauderHeal = TriggerCreate("libCOMM_gt_CC_ScoreTychusMarauderHeal_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreTychusMarauderHeal, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CC_ScoreTychusMarauderHeal, c_playerAny, "TychusMarauderHealingWardMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusGhostDominatedDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreTychusGhostDominatedDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitHasBehavior2(EventUnitDamageSourceUnit(), "TychusGhostDominate") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "TychusGhostDominateUpgraded") == true)))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreTychusGhostDominatedDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusGhostDominatedDamage", FixedToInt(libCOMM_gv_cC_ScoreTychusGhostDominatedDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreTychusGhostDominatedDmg_Init () {
    libCOMM_gt_CC_ScoreTychusGhostDominatedDmg = TriggerCreate("libCOMM_gt_CC_ScoreTychusGhostDominatedDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreTychusGhostDominatedDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreTychusGhostDominatedDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusSpectrePulseDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreTychusSpectrePulseDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreTychusSpectrePulseDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusSpectrePulseDamage", FixedToInt(libCOMM_gv_cC_ScoreTychusSpectrePulseDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreTychusSpectrePulseDmg_Init () {
    libCOMM_gt_CC_ScoreTychusSpectrePulseDmg = TriggerCreate("libCOMM_gt_CC_ScoreTychusSpectrePulseDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreTychusSpectrePulseDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreTychusSpectrePulseDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusSpectreUltrasonicDamageLv1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusMedicHeal
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreTychusMedicHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreTychusMedicHeal[EventUnitHealLaunchPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventUnitHealLaunchPlayer(), "TychusMedicHeal", FixedToInt(libCOMM_gv_cC_ScoreTychusMedicHeal[EventUnitHealLaunchPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreTychusMedicHeal_Init () {
    libCOMM_gt_CC_ScoreTychusMedicHeal = TriggerCreate("libCOMM_gt_CC_ScoreTychusMedicHeal_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreTychusMedicHeal, false);
    TriggerAddEventUnitHealed(libCOMM_gt_CC_ScoreTychusMedicHeal, null, c_unitVitalAny, "TychusMedicHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusMedicHealAoE
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreTychusMedicHealAoE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreTychusMedicHeal[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] += libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, EventPlayerEffectUsed(), "VitalArray[" + IntToString(0) + "].Change", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    PlayerScoreValueSetFromInt(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "TychusMedicHeal", FixedToInt(libCOMM_gv_cC_ScoreTychusMedicHeal[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreTychusMedicHealAoE_Init () {
    libCOMM_gt_CC_ScoreTychusMedicHealAoE = TriggerCreate("libCOMM_gt_CC_ScoreTychusMedicHealAoE_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreTychusMedicHealAoE, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CC_ScoreTychusMedicHealAoE, c_playerAny, "TychusMedicAoEHoTHeal");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CC_ScoreTychusMedicHealAoE, c_playerAny, "TychusMedicAoESearchAlliance");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CC_ScoreTychusMedicHealAoE, c_playerAny, "TychusMedivacHealModifyTargetLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusMedicAbsorb
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreTychusMedicAbsorb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreTychusMedicHeal[UnitGetOwner(EventUnit())] += EventUnitDamageAbsorbed();
    PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "TychusMedicHeal", FixedToInt(libCOMM_gv_cC_ScoreTychusMedicHeal[UnitGetOwner(EventUnit())]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreTychusMedicAbsorb_Init () {
    libCOMM_gt_CC_ScoreTychusMedicAbsorb = TriggerCreate("libCOMM_gt_CC_ScoreTychusMedicAbsorb_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreTychusMedicAbsorb, false);
    TriggerAddEventUnitDamageAbsorbed(libCOMM_gt_CC_ScoreTychusMedicAbsorb, null, "TychusMedicDefensiveMatrix");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusOdinDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreTychusOdinDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "TychusOdin"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreTychusOdinDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusOdinDamage", FixedToInt(libCOMM_gv_cC_ScoreTychusOdinDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreTychusOdinDmg_Init () {
    libCOMM_gt_CC_ScoreTychusOdinDmg = TriggerCreate("libCOMM_gt_CC_ScoreTychusOdinDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreTychusOdinDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreTychusOdinDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TychusSquadSpawnCheat
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusSquadSpawnCheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_barposition;
    string lv_barunittype;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventPlayer()) == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libCOMM_gt_CM_Tychus_Hero_Charge_Timing, false);
    libCOMM_gv_cU_TychusSquadSpawnSkip = true;
    CatalogFieldValueSet(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(0) + "].Time", EventPlayer(), "0");
    if ((UnitIsAlive(libCOMM_gv_cU_TychusSquadBar) == true)) {
        lv_barposition = UnitGetPosition(libCOMM_gv_cU_TychusSquadBar);
        lv_barunittype = UnitGetType(libCOMM_gv_cU_TychusSquadBar);
        UnitRemove(libCOMM_gv_cU_TychusSquadBar);
        Wait(0.0625, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_barunittype, c_unitCreateIgnorePlacement, EventPlayer(), lv_barposition);
        libCOMM_gf_CU_TychusSetBarUnit(UnitLastCreated());
    }

    libCOMM_gf_ApplyTychusMaxChargesPerk(EventPlayer());
    libNtve_gf_PlayerRemoveChargeUsed(EventPlayer(), "Abil/TychusTrain");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusSquadSpawnCheat_Init () {
    libCOMM_gt_CU_TychusSquadSpawnCheat = TriggerCreate("libCOMM_gt_CU_TychusSquadSpawnCheat_Func");
    TriggerEnable(libCOMM_gt_CU_TychusSquadSpawnCheat, false);
    TriggerAddEventChatMessage(libCOMM_gt_CU_TychusSquadSpawnCheat, c_playerAny, "itsabouttime", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TychusSquadMemberTrained
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusSquadMemberTrained_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadinstance;
    int lv_squadindex;
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_squadinstance = libCOMM_gf_EventTychusHeroInstance();
    lv_hero = libCOMM_gf_EventTychusHero();

    // Conditions
    if (testConds) {
        if (!((libCOMM_gv_cU_TychusSquadNextIndex < libCOMM_gv_cUC_TYCHUS_MAX_SQUAD_SIZE))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UserDataGetInt("XAC_TechTychusSquad", lv_squadinstance, "Squad Slot", 1) == -1)) {
        lv_squadindex = libCOMM_gf_GetNextTychusSquadIndex();
        libCOMM_gv_cU_TychusSquadHeroes[lv_squadindex] = lv_hero;
        libCOMM_gf_SetTychusSquadMember(lv_hero, lv_squadindex, lv_squadinstance);
        UnitBehaviorAdd(lv_hero, "TychusHeroSubGroup", lv_hero, lv_squadindex);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusSquadMemberTrained_Init () {
    libCOMM_gt_CU_TychusSquadMemberTrained = TriggerCreate("libCOMM_gt_CU_TychusSquadMemberTrained_Func");
    TriggerEnable(libCOMM_gt_CU_TychusSquadMemberTrained, false);
    libCOMM_gf_TychusHeroEvent(libCOMM_gt_CU_TychusSquadMemberTrained, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TychusSquadMemberReviveQueued
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusSquadMemberReviveQueued_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadinstance;
    int lv_squadindex;

    // Automatic Variable Declarations
    string autoFB4C8769_userType;
    int autoFB4C8769_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(EventPlayer()) == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFB4C8769_userType = "XAC_TechTychusSquad";
    autoFB4C8769_i = 1;
    for ( ; autoFB4C8769_i <= UserDataInstanceCount(autoFB4C8769_userType) ; autoFB4C8769_i += 1 ) {
        lv_squadinstance = UserDataInstance(autoFB4C8769_userType, autoFB4C8769_i);
        lv_squadindex = UserDataGetInt("XAC_TechTychusSquad", lv_squadinstance, "Squad Slot", 1);
        if ((libNtve_gf_TriggeringProgressUnitType() == UserDataGetUnit("XAC_TechTychusSquad", lv_squadinstance, "Unit Type", 1)) && (lv_squadindex >= 0)) {
            libNtve_gf_SetDialogItemCurrentValue(libCOMM_gv_cU_TychusSquadTrainingProgressBar, 100.0, PlayerGroupAll());
            DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lv_squadindex], PlayerGroupAll(), "TrainingState", "Training");
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusSquadMemberReviveQueued_Init () {
    libCOMM_gt_CU_TychusSquadMemberReviveQueued = TriggerCreate("libCOMM_gt_CU_TychusSquadMemberReviveQueued_Func");
    TriggerEnable(libCOMM_gt_CU_TychusSquadMemberReviveQueued, false);
    TriggerAddEventUnitReviveProgress(libCOMM_gt_CU_TychusSquadMemberReviveQueued, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TychusSquadMemberReviveCancelled
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusSquadMemberReviveCancelled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadinstance;
    int lv_squadindex;

    // Automatic Variable Declarations
    string auto4249DE12_userType;
    int auto4249DE12_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(EventPlayer()) == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4249DE12_userType = "XAC_TechTychusSquad";
    auto4249DE12_i = 1;
    for ( ; auto4249DE12_i <= UserDataInstanceCount(auto4249DE12_userType) ; auto4249DE12_i += 1 ) {
        lv_squadinstance = UserDataInstance(auto4249DE12_userType, auto4249DE12_i);
        lv_squadindex = UserDataGetInt("XAC_TechTychusSquad", lv_squadinstance, "Squad Slot", 1);
        if ((libNtve_gf_TriggeringProgressUnitType() == UserDataGetUnit("XAC_TechTychusSquad", lv_squadinstance, "Unit Type", 1)) && (lv_squadindex >= 0)) {
            DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lv_squadindex], PlayerGroupAll(), "TrainingState", "NotTraining");
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusSquadMemberReviveCancelled_Init () {
    libCOMM_gt_CU_TychusSquadMemberReviveCancelled = TriggerCreate("libCOMM_gt_CU_TychusSquadMemberReviveCancelled_Func");
    TriggerEnable(libCOMM_gt_CU_TychusSquadMemberReviveCancelled, false);
    TriggerAddEventUnitReviveProgress(libCOMM_gt_CU_TychusSquadMemberReviveCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TychusSquadMemberRevived
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusSquadMemberRevived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadInstance;
    int lv_squadIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_squadInstance = libCOMM_gf_EventTychusHeroInstance();
    lv_squadIndex = UserDataGetInt("XAC_TechTychusSquad", lv_squadInstance, "Squad Slot", 1);

    // Conditions
    if (testConds) {
        if (!((lv_squadIndex > -1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lv_squadIndex], PlayerGroupAll(), "DeathState", "NotDead");
    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lv_squadIndex], PlayerGroupAll(), "TrainingState", "NotTraining");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusSquadMemberRevived_Init () {
    libCOMM_gt_CU_TychusSquadMemberRevived = TriggerCreate("libCOMM_gt_CU_TychusSquadMemberRevived_Func");
    TriggerEnable(libCOMM_gt_CU_TychusSquadMemberRevived, false);
    libCOMM_gf_TychusHeroEvent(libCOMM_gt_CU_TychusSquadMemberRevived, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TychusSquadMemberDeath
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusSquadMemberDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadInstance;
    int lv_squadIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_squadInstance = libCOMM_gf_EventTychusHeroInstance();
    lv_squadIndex = UserDataGetInt("XAC_TechTychusSquad", lv_squadInstance, "Squad Slot", 1);

    // Conditions
    if (testConds) {
        if (!((lv_squadIndex > -1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[lv_squadIndex], PlayerGroupAll(), "DeathState", "Dead");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusSquadMemberDeath_Init () {
    libCOMM_gt_CU_TychusSquadMemberDeath = TriggerCreate("libCOMM_gt_CU_TychusSquadMemberDeath_Func");
    TriggerEnable(libCOMM_gt_CU_TychusSquadMemberDeath, false);
    libCOMM_gf_TychusHeroEvent(libCOMM_gt_CU_TychusSquadMemberDeath, "Event_TychusHeroDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TychusSquadStructureBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusSquadStructureBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadinstance;
    int lv_squadindex;

    // Automatic Variable Declarations
    string autoCD4D913B_userType;
    int autoCD4D913B_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoCD4D913B_userType = "XAC_TechTychusSquad";
    autoCD4D913B_i = 1;
    for ( ; autoCD4D913B_i <= UserDataInstanceCount(autoCD4D913B_userType) ; autoCD4D913B_i += 1 ) {
        lv_squadinstance = UserDataInstance(autoCD4D913B_userType, autoCD4D913B_i);
        lv_squadindex = UserDataGetInt("XAC_TechTychusSquad", lv_squadinstance, "Squad Slot", 1);
        if ((lv_squadindex != -1) && (UnitGetType(libCOMM_gf_EventTychusStructure()) == UserDataGetUnit("XAC_TechTychusSquad", lv_squadinstance, "EquipmentStructure", 1))) {
            libNtve_gf_SetDialogItemUnit(libCOMM_gv_cU_TychusSquadEquipmentStructureTargets[lv_squadindex], libCOMM_gf_EventTychusStructure(), PlayerGroupAll());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusSquadStructureBuilt_Init () {
    libCOMM_gt_CU_TychusSquadStructureBuilt = TriggerCreate("libCOMM_gt_CU_TychusSquadStructureBuilt_Func");
    TriggerEnable(libCOMM_gt_CU_TychusSquadStructureBuilt, false);
    libCOMM_gf_TychusStructureEvent(libCOMM_gt_CU_TychusSquadStructureBuilt, "Event_TychusHeroStructureCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TychusSquadBarBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusSquadBarBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_squadindex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(EventUnitProgressUnit())) == "Tychus"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "TychusResearchCenter") || (UnitGetType(EventUnitProgressUnit()) == "TychusResearchCenterUnlocked")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CU_TychusSetBarUnit(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusSquadBarBuilt_Init () {
    libCOMM_gt_CU_TychusSquadBarBuilt = TriggerCreate("libCOMM_gt_CU_TychusSquadBarBuilt_Func");
    TriggerEnable(libCOMM_gt_CU_TychusSquadBarBuilt, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CU_TychusSquadBarBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TychusSquadBarDies
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusSquadBarDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMM_gv_cU_TychusSquadBar == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CU_TychusSquadBarUpdateProgress, false);
    TriggerEnable(libCOMM_gt_CU_TychusSquadBarBuilt, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusSquadBarDies_Init () {
    libCOMM_gt_CU_TychusSquadBarDies = TriggerCreate("libCOMM_gt_CU_TychusSquadBarDies_Func");
    TriggerEnable(libCOMM_gt_CU_TychusSquadBarDies, false);
    TriggerAddEventUnitDied(libCOMM_gt_CU_TychusSquadBarDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TychusSquadBarUpdateProgress
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusSquadBarUpdateProgress_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemCurrentValue(libCOMM_gv_cU_TychusSquadTrainingProgressBar, (100.0 - UnitGetProgressComplete(libCOMM_gv_cU_TychusSquadBar, 1)), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusSquadBarUpdateProgress_Init () {
    libCOMM_gt_CU_TychusSquadBarUpdateProgress = TriggerCreate("libCOMM_gt_CU_TychusSquadBarUpdateProgress_Func");
    TriggerEnable(libCOMM_gt_CU_TychusSquadBarUpdateProgress, false);
    TriggerAddEventTimePeriodic(libCOMM_gt_CU_TychusSquadBarUpdateProgress, 0.125, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TycusMedivacPlatformBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusMedivacPlatformBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unitgroup lv_globalCasterUnitGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());
    lv_globalCasterUnitGroup = libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_yY_GPCasterUnit[lv_player]);

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(lv_player) == "Tychus"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "TychusMedivacPlatform"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_globalCasterUnitGroup, EventUnitCreatedUnit());
    libNtve_gf_SetDialogItemUnitGroup(libCOMI_gv_cU_GPCmdPanel[lv_player], lv_globalCasterUnitGroup, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusMedivacPlatformBuilt_Init () {
    libCOMM_gt_CU_TychusMedivacPlatformBuilt = TriggerCreate("libCOMM_gt_CU_TychusMedivacPlatformBuilt_Func");
    TriggerEnable(libCOMM_gt_CU_TychusMedivacPlatformBuilt, false);
    TriggerAddEventUnitCreated(libCOMM_gt_CU_TychusMedivacPlatformBuilt, null, "TychusTerranBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TychusMedivacAbilityReady
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusMedivacAbilityReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderUserData(UnitGetOwner(EventUnit())) == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_ModifyTychusMedivacCharges(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusMedivacAbilityReady_Init () {
    libCOMM_gt_CU_TychusMedivacAbilityReady = TriggerCreate("libCOMM_gt_CU_TychusMedivacAbilityReady_Func");
    TriggerEnable(libCOMM_gt_CU_TychusMedivacAbilityReady, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CU_TychusMedivacAbilityReady, null, "TychusMedivacCooldownTracker", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TychusMedivacAbilityUnready
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusMedivacAbilityUnready_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderUserData(UnitGetOwner(EventUnit())) == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_ModifyTychusMedivacCharges(-1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusMedivacAbilityUnready_Init () {
    libCOMM_gt_CU_TychusMedivacAbilityUnready = TriggerCreate("libCOMM_gt_CU_TychusMedivacAbilityUnready_Func");
    TriggerEnable(libCOMM_gt_CU_TychusMedivacAbilityUnready, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CU_TychusMedivacAbilityUnready, null, "TychusMedivacCooldownTracker", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TychusEquipmentUpgraded
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_TychusEquipmentUpgraded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadinstance;
    string lv_equipment;
    int lv_counter;
    unit lv_squadhero;

    // Automatic Variable Declarations
    string autoADDC1243_userType;
    int autoADDC1243_i;
    string auto63DAA5EF_userType;
    string auto63DAA5EF_instance;
    string auto63DAA5EF_field;
    int auto63DAA5EF_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderUserData(EventPlayer()) == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoADDC1243_userType = "XAC_TechTychusSquad";
    autoADDC1243_i = 1;
    for ( ; autoADDC1243_i <= UserDataInstanceCount(autoADDC1243_userType) ; autoADDC1243_i += 1 ) {
        lv_squadinstance = UserDataInstance(autoADDC1243_userType, autoADDC1243_i);
        auto63DAA5EF_userType = "XAC_TechTychusSquad";
        auto63DAA5EF_instance = lv_squadinstance;
        auto63DAA5EF_field = "Equipment";
        auto63DAA5EF_i = 1;
        for ( ; auto63DAA5EF_i <= UserDataFieldValueCount(auto63DAA5EF_userType,auto63DAA5EF_field) ; auto63DAA5EF_i += 1 ) {
            lv_equipment = UserDataGetUpgrade(auto63DAA5EF_userType,auto63DAA5EF_instance,auto63DAA5EF_field, auto63DAA5EF_i);
            if ((lv_equipment == libNtve_gf_TriggeringProgressUpgrade())) {
                UserDataSetInt("XAC_TechTychusSquad", lv_squadinstance, "EquipCount", 1, (UserDataGetInt("XAC_TechTychusSquad", lv_squadinstance, "EquipCount", 1) + 1));
                DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[UserDataGetInt("XAC_TechTychusSquad", lv_squadinstance, "Squad Slot", 1)], PlayerGroupAll(), "EquipmentState", IntToString(UserDataGetInt("XAC_TechTychusSquad", lv_squadinstance, "EquipCount", 1)));
                libCOMM_gf_PlayTychusPurchaseUpgradeSound(EventPlayer());
                lv_squadhero = libCOMM_gv_cU_TychusSquadHeroes[UserDataGetInt("XAC_TechTychusSquad", lv_squadinstance, "Squad Slot", 1)];
                ActorCreate(ActorScopeFromUnit(EventUnit()), "Heavens_COOP_GearDeliveryBeam_Source", null, null, null);
                ActorSend(libNtve_gf_ActorLastCreated(), (("Signal " + (lv_squadinstance))));
                if ((UnitIsAlive(lv_squadhero) == true)) {
                    ActorCreate(ActorScopeFromUnit(lv_squadhero), "Heavens_COOP_GearDeliveryBeam_Target", null, null, null);
                    ActorSend(libNtve_gf_ActorLastCreated(), (("Signal " + (lv_squadinstance))));
                }

                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_TychusEquipmentUpgraded_Init () {
    libCOMM_gt_CU_TychusEquipmentUpgraded = TriggerCreate("libCOMM_gt_CU_TychusEquipmentUpgraded_Func");
    TriggerEnable(libCOMM_gt_CU_TychusEquipmentUpgraded, false);
    TriggerAddEventUnitResearchProgress(libCOMM_gt_CU_TychusEquipmentUpgraded, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CM_TychusEventHook
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt__CM_TychusEventHook_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    string lv_heroType;
    string lv_heroReviveType;
    string lv_heroInstance;
    string lv_itUnitType;
    string lv_event;

    // Automatic Variable Declarations
    string autoDD526E48_userType;
    int autoDD526E48_i;

    // Variable Initialization
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_heroType = EventPlayerEffectUsedUnitType(c_effectUnitCaster);
    lv_heroReviveType = (CatalogFieldValueGet(c_gameCatalogUnit, lv_heroType, "ReviveType", c_playerAny));
    lv_event = (EventPlayerEffectUsed());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_hero, "TychusHeroCount") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDD526E48_userType = libCOMM_gv_cM_Tychus_UserTypeHeroList;
    autoDD526E48_i = 1;
    for ( ; autoDD526E48_i <= UserDataInstanceCount(autoDD526E48_userType) ; autoDD526E48_i += 1 ) {
        lv_heroInstance = UserDataInstance(autoDD526E48_userType, autoDD526E48_i);
        lv_itUnitType = UserDataGetUnit(libCOMM_gv_cM_Tychus_UserTypeHeroList, lv_heroInstance, "Unit Type", 1);
        if ((lv_itUnitType == lv_heroType)) {
            DataTableSetUnit(false, TriggerEventParamName(lv_event, "EventHero"), lv_hero);
            DataTableSetString(false, TriggerEventParamName(lv_event, "EventHeroInstance"), (lv_heroInstance));
            TriggerSendEvent(lv_event);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt__CM_TychusEventHook_Init () {
    libCOMM_gt__CM_TychusEventHook = TriggerCreate("libCOMM_gt__CM_TychusEventHook_Func");
    TriggerEnable(libCOMM_gt__CM_TychusEventHook, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt__CM_TychusEventHook, c_playerAny, "Event_TychusHeroCreate");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt__CM_TychusEventHook, c_playerAny, "Event_TychusHeroDeath");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt__CM_TychusEventHook, c_playerAny, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CM_TychusStructureEventHook
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt__CM_TychusStructureEventHook_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structure;
    string lv_event;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_structure = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_event = (EventPlayerEffectUsed());

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetUnit(false, TriggerEventParamName(lv_event, "EventStructure"), lv_structure);
    TriggerSendEvent(lv_event);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt__CM_TychusStructureEventHook_Init () {
    libCOMM_gt__CM_TychusStructureEventHook = TriggerCreate("libCOMM_gt__CM_TychusStructureEventHook_Func");
    TriggerEnable(libCOMM_gt__CM_TychusStructureEventHook, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt__CM_TychusStructureEventHook, c_playerAny, "Event_TychusHeroStructureCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusHERC_ShieldCooldown
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusHERC_ShieldCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();
    lv_cooldown = UnitBehaviorDurationTotal(lv_unit, lv_behavior);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitModifyCooldown(lv_unit, "ShieldCooldown", lv_cooldown, c_cooldownOperationSet);
    UnitModifyCooldown(lv_unit, "ShieldCooldown", lv_cooldown, c_cooldownOperationSet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusHERC_ShieldCooldown_Init () {
    libCOMM_gt_CM_TychusHERC_ShieldCooldown = TriggerCreate("libCOMM_gt_CM_TychusHERC_ShieldCooldown_Func");
    TriggerEnable(libCOMM_gt_CM_TychusHERC_ShieldCooldown, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_TychusHERC_ShieldCooldown, null, "TychusHERCShieldWeakness", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusHERC_CriticalText
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusHERC_CriticalText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_crittexttag;
    int lv_critmultiplier;
    int lv_ragestacks;
    int lv_ragedamage;
    int lv_weapondamage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_crittexttag = c_textTagNone;
    lv_critmultiplier = CatalogReferenceGetAsInt("Behavior,TychusHercCritPassive,DamageResponse.ModifyFraction", EventPlayer());
    lv_ragestacks = UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff");
    lv_ragedamage = CatalogReferenceGetAsInt("Behavior,TychusHercRageDamageBuff,Modification.DamageDealtUnscaled[Melee]", EventPlayer());
    lv_weapondamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "TychusHERCWeaponDamage", "Amount", EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") == 0)) {
        TextExpressionSetToken("Param/Expression/lib_COMM_20334C15", "A", FixedToText(((lv_critmultiplier * (lv_weapondamage + (lv_ragestacks * lv_ragedamage))) - (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") * (lv_critmultiplier * lv_ragedamage))), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_COMM_20334C15", "B", StringExternal("Param/Value/lib_COMM_0C8B8E08"));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMM_20334C15"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupAll());
    }
    else if ((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") > 0) && (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") < CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "TychusHercRageDamageBuff", "MaxStackCount", EventPlayer()))) {
        TextExpressionSetToken("Param/Expression/lib_COMM_4EF60250", "A", FixedToText(((lv_critmultiplier * (lv_weapondamage + (lv_ragestacks * lv_ragedamage))) - (lv_critmultiplier * lv_ragedamage)), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_COMM_4EF60250", "B", StringExternal("Param/Value/lib_COMM_C463A0E7"));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMM_4EF60250"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupAll());
    }
    else if ((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") == CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "TychusHercRageDamageBuff", "MaxStackCount", EventPlayer()))) {
        TextExpressionSetToken("Param/Expression/lib_COMM_CC85A2A3", "A", FixedToText((lv_critmultiplier * (lv_weapondamage + (lv_ragestacks * lv_ragedamage))), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_COMM_CC85A2A3", "B", StringExternal("Param/Value/lib_COMM_D7DFDFC6"));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMM_CC85A2A3"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupAll());
    }
    lv_crittexttag = TextTagLastCreated();
    TextTagSetColor(lv_crittexttag, c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetVelocity(lv_crittexttag, 0.5, 90.0);
    Wait(2.0, c_timeGame);
    TextTagDestroy(lv_crittexttag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusHERC_CriticalText_Init () {
    libCOMM_gt_CM_TychusHERC_CriticalText = TriggerCreate("libCOMM_gt_CM_TychusHERC_CriticalText_Func");
    TriggerEnable(libCOMM_gt_CM_TychusHERC_CriticalText, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_TychusHERC_CriticalText, c_playerAny, "TychusHERCWeaponDamageCritDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_OdinSummon_Used
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_OdinSummon_Used_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerRemoveCooldown(lv_p, libCOMM_gv_tychusReviveCommand);
    UnitRevive(libCOMM_gv_tychus_Unit[lv_p]);
    UnitSetPropertyFixed(libCOMM_gv_tychus_Unit[lv_p], c_unitPropLifePercent, 100.0);
    UnitCreateEffectPoint(libCOMM_gv_tychus_Unit[lv_p], libCOMM_gv_cM_Tychus_OdinSummonEffect_Called, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    Wait(1.0, c_timeGame);
    UnitSetPosition(libCOMM_gv_tychus_Unit[lv_p], RegionGetBoundsMin(RegionEntireMap()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_OdinSummon_Used_Init () {
    libCOMM_gt_CM_Tychus_OdinSummon_Used = TriggerCreate("libCOMM_gt_CM_Tychus_OdinSummon_Used_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_OdinSummon_Used, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Tychus_OdinSummon_Used, c_playerAny, libCOMM_gv_cM_Tychus_OdinSummonEffect_Caller);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_OdinSummon_CameraShake
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_OdinSummon_CameraShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    fixed lv_distance;
    fixed[4] lv_cameraPosition;
    fixed[4] lv_effectPosition;
    int lv_player;
    point lv_effectTargetPoint;
    point lv_cameraTargetPoint;
    unit lv_odin;

    // Automatic Variable Declarations
    playergroup auto4CDAC510_g;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_effectTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_odin = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.8, c_timeGame);
    if ((UnitIsAlive(lv_odin) == false)) {
        return true;
    }

    lv_effectPosition[0] = PointGetX(lv_effectTargetPoint);
    lv_effectPosition[1] = PointGetY(lv_effectTargetPoint);
    lv_effectPosition[2] = WorldHeight(c_heightMapGround, lv_effectTargetPoint);
    auto4CDAC510_g = PlayerGroupActive();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto4CDAC510_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_cameraTargetPoint = CameraGetTarget(lv_player);
        lv_cameraPosition[0] = PointGetX(lv_cameraTargetPoint);
        lv_cameraPosition[1] = (PointGetY(lv_cameraTargetPoint)-(Cos(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
        lv_cameraPosition[2] = (WorldHeight(c_heightMapGround, lv_cameraTargetPoint)+(Sin(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
        lv_distance = SquareRoot((Pow((lv_cameraPosition[0]-lv_effectPosition[0]), 2.0) + Pow((lv_cameraPosition[1]-lv_effectPosition[1]), 2.0) + Pow((lv_cameraPosition[2]-lv_effectPosition[2]), 2.0)));
        CameraShakeStart(lv_player, c_cameraPositionTarget, c_cameraDirectionZ, MaxF((1-(lv_distance/50)), 0.0), 5.0, 100.0, 0.5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_OdinSummon_CameraShake_Init () {
    libCOMM_gt_CM_Tychus_OdinSummon_CameraShake = TriggerCreate("libCOMM_gt_CM_Tychus_OdinSummon_CameraShake_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_OdinSummon_CameraShake, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Tychus_OdinSummon_CameraShake, c_playerAny, libCOMM_gv_cM_Tychus_OdinSummonEffect_Created);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_Odin_Timeout
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_Odin_Timeout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_odin;
    fixed lv_facing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_odin = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_facing = (UnitGetFacing(lv_odin)-90);

    // Actions
    if (!runActions) {
        return true;
    }

    ActorCreate(ActorScopeFromUnit(lv_odin), "TychusOdinDeathTimeOut", null, null, null);
    libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), lv_facing);
    UnitCreateEffectUnit(lv_odin, "TimedLifeFate", lv_odin);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_Odin_Timeout_Init () {
    libCOMM_gt_CM_Tychus_Odin_Timeout = TriggerCreate("libCOMM_gt_CM_Tychus_Odin_Timeout_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_Odin_Timeout, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Tychus_Odin_Timeout, c_playerAny, "TychusOdinTimedLifeFateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_WarhoundFearApply
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_WarhoundFearApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scaredUnit;
    point lv_attackLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaredUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackLocation = PointWithOffsetPolar(UnitGetPosition(lv_scaredUnit), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_scaredUnit), -5.0, lv_attackLocation)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_scaredUnit, "TychusWarhoundFear") == true) && (UnitIsAlive(lv_scaredUnit) == true)) {
        UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_scaredUnit), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_scaredUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_WarhoundFearApply_Init () {
    libCOMM_gt_CM_Tychus_WarhoundFearApply = TriggerCreate("libCOMM_gt_CM_Tychus_WarhoundFearApply_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_WarhoundFearApply, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Tychus_WarhoundFearApply, null, "TychusWarhoundFear", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Tychus_WarhoundFearApply, null, "TychusWarhoundFear", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus Specialist Training Aura On
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusSpecialistTrainingAuraOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    string lv_uT;
    string lv_itInstance;
    string lv_itActive;
    string lv_itUnitType;
    fixed lv_oldValue;
    fixed lv_changedValue;
    int lv_p;
    string lv_pathCooldown;
    string lv_pathCharge;

    // Automatic Variable Declarations
    string autoD7248C3C_userType;
    int autoD7248C3C_i;

    // Variable Initialization
    lv_u = EventUnit();
    lv_uT = UnitGetType(lv_u);
    lv_p = UnitGetOwner(lv_u);
    lv_pathCooldown = "Cost[0].Cooldown.TimeUse";
    lv_pathCharge = "Cost[0].Charge.TimeUse";

    // Actions
    if (!runActions) {
        return true;
    }

    autoD7248C3C_userType = "XAC_TechTychusSquad";
    autoD7248C3C_i = 1;
    for ( ; autoD7248C3C_i <= UserDataInstanceCount(autoD7248C3C_userType) ; autoD7248C3C_i += 1 ) {
        lv_itInstance = UserDataInstance(autoD7248C3C_userType, autoD7248C3C_i);
        lv_itUnitType = UserDataGetUnit("XAC_TechTychusSquad", lv_itInstance, "Unit Type", 1);
        if ((lv_uT == lv_itUnitType)) {
            lv_itActive = UserDataGetGameLink("XAC_TechTychusSquad", lv_itInstance, "Active Abil", 1);
            if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_itActive) == true)) {
                if ((CatalogEntryScope(c_gameCatalogAbil, lv_itActive) == "CAbilBuild")) {
                    lv_pathCooldown = "InfoArray[0].Cooldown.TimeUse";
                    lv_pathCharge = "InfoArray[0].Charge.TimeUse";
                }
                else {
                    lv_pathCooldown = "Cost[0].Cooldown.TimeUse";
                    lv_pathCharge = "Cost[0].Charge.TimeUse";
                }
                lv_oldValue = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_itActive, lv_pathCooldown, lv_p);
                lv_changedValue = (lv_oldValue*libCOMM_gv_c_TychusSpecialistTrainingAuraCooldownFactor/100);
                CatalogFieldValueModify(c_gameCatalogAbil, lv_itActive, lv_pathCooldown, lv_p, FixedToString(lv_changedValue, c_fixedPrecisionAny), c_upgradeOperationSubtract);
                DataTableSetFixed(true, ("TychusSpecialistTrainingAura_" + IntToString(UnitGetTag(lv_u)) + "_CooldownTimeChange"), lv_changedValue);
                lv_oldValue = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_itActive, lv_pathCharge, lv_p);
                lv_changedValue = (lv_oldValue*libCOMM_gv_c_TychusSpecialistTrainingAuraCooldownFactor/100);
                CatalogFieldValueModify(c_gameCatalogAbil, lv_itActive, lv_pathCharge, lv_p, FixedToString(lv_changedValue, c_fixedPrecisionAny), c_upgradeOperationSubtract);
                DataTableSetFixed(true, ("TychusSpecialistTrainingAura_" + IntToString(UnitGetTag(lv_u)) + "_ChargeTimeChange"), lv_changedValue);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusSpecialistTrainingAuraOn_Init () {
    libCOMM_gt_CM_TychusSpecialistTrainingAuraOn = TriggerCreate("libCOMM_gt_CM_TychusSpecialistTrainingAuraOn_Func");
    TriggerEnable(libCOMM_gt_CM_TychusSpecialistTrainingAuraOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_TychusSpecialistTrainingAuraOn, null, "TychusSpectreBrillianceAuraBuffLv1", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus Specialist Training Aura Off
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusSpecialistTrainingAuraOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    string lv_uT;
    string lv_itInstance;
    string lv_itActive;
    string lv_itUnitType;
    fixed lv_changedValueCooldown;
    fixed lv_changedValueCharge;
    int lv_p;
    string lv_pathCooldown;
    string lv_pathCharge;

    // Automatic Variable Declarations
    string autoF96F458D_userType;
    int autoF96F458D_i;

    // Variable Initialization
    lv_u = EventUnit();
    lv_uT = UnitGetType(lv_u);
    lv_changedValueCooldown = DataTableGetFixed(true, ("TychusSpecialistTrainingAura_" + IntToString(UnitGetTag(lv_u)) + "_CooldownTimeChange"));
    lv_changedValueCharge = DataTableGetFixed(true, ("TychusSpecialistTrainingAura_" + IntToString(UnitGetTag(lv_u)) + "_ChargeTimeChange"));
    lv_p = UnitGetOwner(lv_u);
    lv_pathCooldown = "Cost[0].Cooldown.TimeUse";
    lv_pathCharge = "Cost[0].Charge.TimeUse";

    // Actions
    if (!runActions) {
        return true;
    }

    autoF96F458D_userType = "XAC_TechTychusSquad";
    autoF96F458D_i = 1;
    for ( ; autoF96F458D_i <= UserDataInstanceCount(autoF96F458D_userType) ; autoF96F458D_i += 1 ) {
        lv_itInstance = UserDataInstance(autoF96F458D_userType, autoF96F458D_i);
        lv_itUnitType = UserDataGetUnit("XAC_TechTychusSquad", lv_itInstance, "Unit Type", 1);
        if ((lv_uT == lv_itUnitType)) {
            lv_itActive = UserDataGetGameLink("XAC_TechTychusSquad", lv_itInstance, "Active Abil", 1);
            if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_itActive) == true)) {
                if ((CatalogEntryScope(c_gameCatalogAbil, lv_itActive) == "CAbilBuild")) {
                    lv_pathCooldown = "InfoArray[0].Cooldown.TimeUse";
                    lv_pathCharge = "InfoArray[0].Charge.TimeUse";
                }
                else {
                    lv_pathCooldown = "Cost[0].Cooldown.TimeUse";
                    lv_pathCharge = "Cost[0].Charge.TimeUse";
                }
                CatalogFieldValueModify(c_gameCatalogAbil, lv_itActive, lv_pathCooldown, lv_p, FixedToString(lv_changedValueCooldown, c_fixedPrecisionAny), c_upgradeOperationAdd);
                CatalogFieldValueModify(c_gameCatalogAbil, lv_itActive, lv_pathCharge, lv_p, FixedToString(lv_changedValueCharge, c_fixedPrecisionAny), c_upgradeOperationAdd);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusSpecialistTrainingAuraOff_Init () {
    libCOMM_gt_CM_TychusSpecialistTrainingAuraOff = TriggerCreate("libCOMM_gt_CM_TychusSpecialistTrainingAuraOff_Func");
    TriggerEnable(libCOMM_gt_CM_TychusSpecialistTrainingAuraOff, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_TychusSpecialistTrainingAuraOff, null, "TychusSpectreBrillianceAuraBuffLv1", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportActived
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusMedicTransportActived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);
    lv_pg = PlayerGroupSingle(lv_p);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libCOMM_gv_cM_TychusMedicTransportUnit[lv_p] = EventUnit();
    libCOMM_gv_cM_TychusMedicTransportUnitGroup[lv_p] = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    libCOMM_gv_cM_TychusMedicTranportLoadPoint[lv_p] = UnitGetPosition(libCOMM_gv_cM_TychusMedicTransportUnit[lv_p]);
    UISetCursorVisible(lv_pg, false);
    Wait(0.5, c_timeGame);
    UISetCursorVisible(lv_pg, true);
    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCOMM_gv_cM_TychusMedicTransportUnit[lv_p])), libCOMM_gv_cM_TychusMedicTransportUnitGroup[lv_p], OrderTargetingPoint(AbilityCommand("TychusMedicTransportUnloadUnits", 0), UnitGetPosition(libCOMM_gv_cM_TychusMedicTransportUnit[lv_p])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusMedicTransportActived_Init () {
    libCOMM_gt_CM_TychusMedicTransportActived = TriggerCreate("libCOMM_gt_CM_TychusMedicTransportActived_Func");
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportActived, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_TychusMedicTransportActived, null, "TychusMedicTransportActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTopBarButton
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusMedicTopBarButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_TychusMedicTranportSendViaTopBar[lv_p] = true;
    Wait(0.125, c_timeGame);
    libCOMM_gv_cM_TychusMedicTranportSendViaTopBar[lv_p] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusMedicTopBarButton_Init () {
    libCOMM_gt_CM_TychusMedicTopBarButton = TriggerCreate("libCOMM_gt_CM_TychusMedicTopBarButton_Func");
    TriggerEnable(libCOMM_gt_CM_TychusMedicTopBarButton, false);
    TriggerAddEventButtonPressed(libCOMM_gt_CM_TychusMedicTopBarButton, c_playerAny, "TychusMedicTransportUnitsTopBar");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportTargetOn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusMedicTransportTargetOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    actor lv_a;
    int lv_p;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    unitgroup autoD8954E73_g;
    int autoD8954E73_u;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_ug = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_cM_TychusMedicTranportSendViaTopBar[lv_p] == false)) {
        lv_ug = UnitSubgroupSelected(lv_p);
    }
    else {
        lv_ug = UnitGroup("TychusMedivacPlatform", lv_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    autoD8954E73_g = lv_ug;
    autoD8954E73_u = UnitGroupCount(autoD8954E73_g, c_unitCountAll);
    for (;; autoD8954E73_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoD8954E73_g, autoD8954E73_u);
        if (lv_u == null) { break; }
        ActorScopeSend(ActorScopeFromUnit(lv_u), "Signal PickUpTarget");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusMedicTransportTargetOn_Init () {
    libCOMM_gt_CM_TychusMedicTransportTargetOn = TriggerCreate("libCOMM_gt_CM_TychusMedicTransportTargetOn_Func");
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportTargetOn, false);
    TriggerAddEventTargetModeUpdate(libCOMM_gt_CM_TychusMedicTransportTargetOn, c_playerAny, AbilityCommand("TychusMedicTransportLoadUnits", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportTargetOff
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusMedicTransportTargetOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    actor lv_a;
    int lv_p;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    unitgroup auto9817FA84_g;
    int auto9817FA84_u;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_ug = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ug = UnitGroup("TychusMedivacPlatform", lv_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9817FA84_g = lv_ug;
    auto9817FA84_u = UnitGroupCount(auto9817FA84_g, c_unitCountAll);
    for (;; auto9817FA84_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto9817FA84_g, auto9817FA84_u);
        if (lv_u == null) { break; }
        ActorScopeSend(ActorScopeFromUnit(lv_u), "Signal PickUpCancel");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusMedicTransportTargetOff_Init () {
    libCOMM_gt_CM_TychusMedicTransportTargetOff = TriggerCreate("libCOMM_gt_CM_TychusMedicTransportTargetOff_Func");
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportTargetOff, false);
    TriggerAddEventTargetModeUpdate(libCOMM_gt_CM_TychusMedicTransportTargetOff, c_playerAny, AbilityCommand("TychusMedicTransportLoadUnits", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportStop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusMedicTransportStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    if ((UnitHasBehavior2(libCOMM_gv_cM_TychusMedicTransportUnit[lv_p], "TychusMedicTransportUnloadUnitsDespawnDelay") == false)) {
        UnitCreateEffectUnit(libCOMM_gv_cM_TychusMedicTransportUnit[lv_p], "TychusMedicTransportCancelUnloadSet", libCOMM_gv_cM_TychusMedicTransportUnit[lv_p]);
    }

    UnitGroupClear(libCOMM_gv_cM_TychusMedicGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCOMM_gv_cM_TychusMedicGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusMedicTransportStop_Init () {
    libCOMM_gt_CM_TychusMedicTransportStop = TriggerCreate("libCOMM_gt_CM_TychusMedicTransportStop_Func");
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportStop, false);
    TriggerAddEventTargetModeUpdate(libCOMM_gt_CM_TychusMedicTransportStop, c_playerAny, AbilityCommand("TychusMedicTransportUnloadUnits", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportTimeOut
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusMedicTransportTimeOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libCOMI_gv_yY_GPCasterUnit[lv_p], "TychusMedicGCD", libCOMI_gv_yY_GPCasterUnit[lv_p]);
    UnitGroupClear(libCOMM_gv_cM_TychusMedicGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCOMM_gv_cM_TychusMedicGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusMedicTransportTimeOut_Init () {
    libCOMM_gt_CM_TychusMedicTransportTimeOut = TriggerCreate("libCOMM_gt_CM_TychusMedicTransportTimeOut_Func");
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportTimeOut, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_TychusMedicTransportTimeOut, c_playerAny, "TychusMedicTransportUnloadUnitsDespawnDelayTimeOut");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportAirBehaviorApplied
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusMedicTransportAirBehaviorApplied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_TychusMedicGroundUnitsTransportGroupAir[lv_p], EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusMedicTransportAirBehaviorApplied_Init () {
    libCOMM_gt_CM_TychusMedicTransportAirBehaviorApplied = TriggerCreate("libCOMM_gt_CM_TychusMedicTransportAirBehaviorApplied_Func");
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportAirBehaviorApplied, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_TychusMedicTransportAirBehaviorApplied, null, "TychusMedicTransportAirUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportGroundBehaviorApplied
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusMedicTransportGroundBehaviorApplied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitBehaviorEffectPlayer(lv_u, EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMM_gv_cM_TychusMedicGroundUnitsTransportGroupGround[lv_p], EventUnit());
    if ((UnitGetType(lv_u) == "TychusOdin") && (TechTreeUpgradeCount(UnitGetOwner(lv_u), "CommanderPrestigeTychusOdin", c_techCountCompleteOnly) == 0)) {
        UnitSetPosition(libCOMI_gv_cU_HeroUnit[0][lv_p], UnitGetPosition(lv_u), false);
        UnitBehaviorAdd(libCOMI_gv_cU_HeroUnit[0][lv_p], "TychusMedicTransportGroundUnits", libCOMI_gv_cU_HeroUnit[0][lv_p], 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusMedicTransportGroundBehaviorApplied_Init () {
    libCOMM_gt_CM_TychusMedicTransportGroundBehaviorApplied = TriggerCreate("libCOMM_gt_CM_TychusMedicTransportGroundBehaviorApplied_Func");
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportGroundBehaviorApplied, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_TychusMedicTransportGroundBehaviorApplied, null, "TychusMedicTransportGroundUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportTeleportUnload
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusMedicTransportTeleportUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unloadPoint;
    fixed lv_angle;
    fixed lv_distance;
    int lv_p;
    point lv_placementtestpoint;

    // Automatic Variable Declarations
    unitgroup autoFFB62BC1_g;
    int autoFFB62BC1_u;
    unit autoFFB62BC1_var;
    unitgroup auto7A7F5FF1_g;
    int auto7A7F5FF1_u;
    unit auto7A7F5FF1_var;

    // Variable Initialization
    lv_unloadPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(libCOMM_gv_cM_TychusMedicTranportLoadPoint[lv_p], lv_unloadPoint);
    lv_distance = DistanceBetweenPoints(libCOMM_gv_cM_TychusMedicTranportLoadPoint[lv_p], lv_unloadPoint);
    autoFFB62BC1_g = libCOMM_gv_cM_TychusMedicGroundUnitsTransportGroupAir[lv_p];
    autoFFB62BC1_u = UnitGroupCount(autoFFB62BC1_g, c_unitCountAll);
    for (;; autoFFB62BC1_u -= 1) {
        autoFFB62BC1_var = UnitGroupUnitFromEnd(autoFFB62BC1_g, autoFFB62BC1_u);
        if (autoFFB62BC1_var == null) { break; }
        UnitSetPosition(autoFFB62BC1_var, PointWithOffsetPolar(UnitGetPosition(autoFFB62BC1_var), lv_distance, lv_angle), false);
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusMedicTransportAirUnitsRB", autoFFB62BC1_var);
    }
    auto7A7F5FF1_g = libCOMM_gv_cM_TychusMedicGroundUnitsTransportGroupGround[lv_p];
    auto7A7F5FF1_u = UnitGroupCount(auto7A7F5FF1_g, c_unitCountAll);
    for (;; auto7A7F5FF1_u -= 1) {
        auto7A7F5FF1_var = UnitGroupUnitFromEnd(auto7A7F5FF1_g, auto7A7F5FF1_u);
        if (auto7A7F5FF1_var == null) { break; }
        if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(auto7A7F5FF1_var), lv_distance, lv_angle)) == true)) {
            UnitSetPosition(auto7A7F5FF1_var, PointWithOffsetPolar(UnitGetPosition(auto7A7F5FF1_var), lv_distance, lv_angle), false);
        }
        else {
            lv_placementtestpoint = UnitTypePlacementFromPoint(UnitGetType(auto7A7F5FF1_var), UnitGetOwner(auto7A7F5FF1_var), lv_unloadPoint, 5.0);
            if ((lv_placementtestpoint != null)) {
                UnitSetPosition(auto7A7F5FF1_var, lv_placementtestpoint, false);
            }

        }
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusMedicTransportUnhideUnitsSet", auto7A7F5FF1_var);
    }
    UnitGroupClear(libCOMM_gv_cM_TychusMedicGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCOMM_gv_cM_TychusMedicGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusMedicTransportTeleportUnload_Init () {
    libCOMM_gt_CM_TychusMedicTransportTeleportUnload = TriggerCreate("libCOMM_gt_CM_TychusMedicTransportTeleportUnload_Func");
    TriggerEnable(libCOMM_gt_CM_TychusMedicTransportTeleportUnload, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_TychusMedicTransportTeleportUnload, c_playerAny, "TychusMedicTransportUnloadUnitsCompletionSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_HeroQueue
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_HeroQueue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    string lv_uT;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_uT = libCOMI_gf_TraingingUnitTypeInAbilCommand(EventUnitAbility(), lv_p, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_Tychus_UpdateHeroTechTree(lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_HeroQueue_Init () {
    libCOMM_gt_CM_Tychus_HeroQueue = TriggerCreate("libCOMM_gt_CM_Tychus_HeroQueue_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_HeroQueue, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Tychus_HeroQueue, null, AbilityCommand("TychusBarracksTrain", 255), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Tychus_HeroQueue, null, AbilityCommand("TychusBarracksTrain", 255), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Tychus_HeroQueue, null, AbilityCommand("TychusFactoryTrain", 255), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Tychus_HeroQueue, null, AbilityCommand("TychusFactoryTrain", 255), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Tychus_HeroQueue, null, AbilityCommand("TychusStarportTrain", 255), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Tychus_HeroQueue, null, AbilityCommand("TychusStarportTrain", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_HeroCancel
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_HeroCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    string lv_uT;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_uT = libCOMI_gf_TraingingUnitTypeInAbilCommand(EventUnitAbility(), lv_p, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_Tychus_UpdateHeroTechTree(lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_HeroCancel_Init () {
    libCOMM_gt_CM_Tychus_HeroCancel = TriggerCreate("libCOMM_gt_CM_Tychus_HeroCancel_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_HeroCancel, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Tychus_HeroCancel, null, AbilityCommand("TychusBarracksTrain", 255), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Tychus_HeroCancel, null, AbilityCommand("TychusFactoryTrain", 255), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Tychus_HeroCancel, null, AbilityCommand("TychusStarportTrain", 255), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_TrainMaxChargesRemove
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_TrainMaxChargesRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(UnitGetOwner(libCOMM_gf_EventTychusHero()), "TychusHeroCount", 1);
    if ((libCOMM_gf_EventTychusHeroInstance() != "Tychus")) {
        libCOMM_gv_tychusHeroMaxCharges -= 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_TrainMaxChargesRemove_Init () {
    libCOMM_gt_CM_Tychus_TrainMaxChargesRemove = TriggerCreate("libCOMM_gt_CM_Tychus_TrainMaxChargesRemove_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_TrainMaxChargesRemove, false);
    libCOMM_gf_TychusHeroEvent(libCOMM_gt_CM_Tychus_TrainMaxChargesRemove, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_HeroReviveUsed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_HeroReviveUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bar;
    abilcmd lv_abilcmd;
    int lv_index;
    int lv_p;
    string lv_unitType;
    unit lv_reviveTarget;
    order lv_orderReal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bar = EventUnit();
    lv_abilcmd = OrderGetAbilityCommand(EventUnitOrder());
    lv_index = AbilityCommandGetCommand(lv_abilcmd);
    lv_p = UnitGetOwner(lv_bar);
    lv_unitType = (CatalogFieldValueGet(c_gameCatalogAbil, "TychusFakeReviveTrain", "InfoArray[" + IntToString(lv_index) + "].Unit[" + IntToString(0) + "]", lv_p));
    lv_reviveTarget = UnitGroupUnit(UnitGroup(lv_unitType, lv_p, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0), 1), 1);
    lv_orderReal = libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("TychusReviveHeroes", 0), lv_reviveTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    while ((TechTreeUnitCount(lv_p, lv_unitType, c_techCountQueuedOrBetter) > 0)) {
        UnitIssueOrder(lv_bar, Order(AbilityCommand("que5", 0)), c_orderQueueAddToEnd);
    }
    while ((UnitIsValid(lv_reviveTarget) == false)) {
        return true;
    }
    if ((UnitOrderIsValid(lv_bar, lv_orderReal) == true)) {
        UnitIssueOrder(lv_bar, lv_orderReal, c_orderQueueAddToEnd);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lv_p), StringExternal("Param/Value/lib_COMM_C7DA78D2"), SoundLink("UI_GenericError", -1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_HeroReviveUsed_Init () {
    libCOMM_gt_CM_Tychus_HeroReviveUsed = TriggerCreate("libCOMM_gt_CM_Tychus_HeroReviveUsed_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_HeroReviveUsed, false);
    TriggerAddEventUnitOrder(libCOMM_gt_CM_Tychus_HeroReviveUsed, null, AbilityCommand("TychusFakeReviveTrain", 255));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_HeroReviveFailSafe
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_HeroReviveFailSafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fakeUnit;
    int lv_p;
    string lv_unitType;
    unitgroup lv_unitTypeGroup;
    unit lv_reviveTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fakeUnit = EventUnitCreatedUnit();
    lv_p = UnitGetOwner(lv_fakeUnit);
    lv_unitType = UnitGetType(EventUnitCreatedUnit());
    lv_unitTypeGroup = UnitGroup(lv_unitType, lv_p, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMM_3F44AA9A"), true);
    }

    UnitGroupRemove(lv_unitTypeGroup, lv_fakeUnit);
    lv_reviveTarget = UnitGroupUnit(lv_unitTypeGroup, 1);
    if ((UnitIsValid(lv_reviveTarget) == true)) {
        UnitSetPosition(lv_reviveTarget, UnitGetPosition(lv_fakeUnit), false);
        UnitRevive(lv_reviveTarget);
        UnitSetPropertyFixed(lv_reviveTarget, c_unitPropLifePercent, 100.0);
    }

    UnitRemove(lv_fakeUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_HeroReviveFailSafe_Init () {
    libCOMM_gt_CM_Tychus_HeroReviveFailSafe = TriggerCreate("libCOMM_gt_CM_Tychus_HeroReviveFailSafe_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_HeroReviveFailSafe, false);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Tychus_HeroReviveFailSafe, null, "TychusFakeReviveTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_OilBombFireDamageResponse
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_OilBombFireDamageResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_oilcaster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_oilcaster = libCOMM_gv_cM_Tychus_FirebatOilCaster;

    // Conditions
    if (testConds) {
        if (!((CatalogFieldValueGet(c_gameCatalogEffect, EventUnitDamageEffect(), "Death", EventUnitDamageSourcePlayer()) == "Fire"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_oilcaster == null)) {
        libCOMM_gv_cM_Tychus_FirebatOilCaster = UnitGroupUnit(UnitGroup("TychusFirebat", EventUnitDamageSourcePlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), 0), 0), 1);
        lv_oilcaster = libCOMM_gv_cM_Tychus_FirebatOilCaster;
    }

    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitBehaviorAdd(EventUnit(), "TychusFirebatOilFire", lv_oilcaster, 1);
    }
    else if ((TechTreeUpgradeCount(UnitGetOwner(lv_oilcaster), "TychusFirebatIncendiaryPetroleum", c_techCountCompleteOnly) > 0)) {
        UnitCreateEffectPoint(lv_oilcaster, "TychusFirebatOilFireSearchTrigger", UnitGetPosition(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_OilBombFireDamageResponse_Init () {
    libCOMM_gt_CM_Tychus_OilBombFireDamageResponse = TriggerCreate("libCOMM_gt_CM_Tychus_OilBombFireDamageResponse_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_OilBombFireDamageResponse, false);
    TriggerAddEventUnitDamageAbsorbed(libCOMM_gt_CM_Tychus_OilBombFireDamageResponse, null, "TychusFirebatOilBombed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_UltimateAchievement
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_UltimateAchievement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "TychusACBandofBrothers") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusReaperBombCharges") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusWarhoundTurretUpgrade") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusFirebatShield") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusHercCrit") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusMarauderAttackSplash") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusGhostConcentrationHelmet") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusSpectreBrillianceAura") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusMedicDefensiveMatrix")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_Tychus_UltimatesPurchased += 1;
    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusACBandofBrothers")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateTychus", 1);
        libCOMM_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusReaperBombCharges")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateReaper", 1);
        libCOMM_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusWarhoundTurretUpgrade")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateWarhound", 1);
        libCOMM_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusFirebatShield")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateFirebat", 1);
        libCOMM_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusHercCrit")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateHerc", 1);
        libCOMM_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusMarauderAttackSplash")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateMarauder", 1);
        libCOMM_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusGhostConcentrationHelmet")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateGhost", 1);
        libCOMM_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusSpectreBrillianceAura")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateSpectre", 1);
        libCOMM_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusMedicDefensiveMatrix")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateMedic", 1);
        libCOMM_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_UltimateAchievement_Init () {
    libCOMM_gt_CM_Tychus_UltimateAchievement = TriggerCreate("libCOMM_gt_CM_Tychus_UltimateAchievement_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_UltimateAchievement, false);
    TriggerAddEventUnitResearchProgress(libCOMM_gt_CM_Tychus_UltimateAchievement, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_HealAchievement
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_HealAchievement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_healingPlayer;
    int lv_healedPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_healingPlayer = EventUnitHealLaunchPlayer();
    lv_healedPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventUnitHealLaunchPlayer()) == "Tychus"))) {
            return false;
        }

        if (!((EventUnitHealVital() == c_unitVitalLife))) {
            return false;
        }

        if (!((libCOMI_gf_CC_PlayerAllyNew(lv_healingPlayer) == lv_healedPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantityAdd(lv_healingPlayer, "CommanderTychusHeal", CeilingI(EventUnitHealAmount()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_HealAchievement_Init () {
    libCOMM_gt_CM_Tychus_HealAchievement = TriggerCreate("libCOMM_gt_CM_Tychus_HealAchievement_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_HealAchievement, false);
    TriggerAddEventUnitHealed(libCOMM_gt_CM_Tychus_HealAchievement, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_SnareFailSafe
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_SnareFailSafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeGame);
    UnitSetHeight(lv_u, UnitGetPropertyFixed(lv_u, c_unitPropHeight, c_unitPropNormal), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_SnareFailSafe_Init () {
    libCOMM_gt_CM_Tychus_SnareFailSafe = TriggerCreate("libCOMM_gt_CM_Tychus_SnareFailSafe_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_SnareFailSafe, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Tychus_SnareFailSafe, null, "TychusGhostPsychicSnare", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_TriUnitSpeed_Upgrade
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_TriUnitSpeed_Upgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_masteryCount;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventPlayer()) == "Tychus"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "TychusSquadAttackSpeed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_masteryCount = TechTreeUpgradeCount(EventPlayer(), "MasteryTychusUpgradesIncrease", c_techCountCompleteOnly);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TychusSquadAttackSpeedWithMastery", lv_masteryCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_TriUnitSpeed_Upgrade_Init () {
    libCOMM_gt_CM_Tychus_TriUnitSpeed_Upgrade = TriggerCreate("libCOMM_gt_CM_Tychus_TriUnitSpeed_Upgrade_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_TriUnitSpeed_Upgrade, false);
    TriggerAddEventUnitResearchProgress(libCOMM_gt_CM_Tychus_TriUnitSpeed_Upgrade, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_TriUnitHealth_Upgrade
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_TriUnitHealth_Upgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventUnit())) == "Tychus"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "TychusSquadHealth"))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "MasteryTychusUpgradesIncrease", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "TychusSquadHealthMastery", TechTreeUpgradeCount(EventPlayer(), "MasteryTychusUpgradesIncrease", c_techCountCompleteOnly));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_TriUnitHealth_Upgrade_Init () {
    libCOMM_gt_CM_Tychus_TriUnitHealth_Upgrade = TriggerCreate("libCOMM_gt_CM_Tychus_TriUnitHealth_Upgrade_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_TriUnitHealth_Upgrade, false);
    TriggerAddEventUnitResearchProgress(libCOMM_gt_CM_Tychus_TriUnitHealth_Upgrade, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusReplaceResearchCenter
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusReplaceResearchCenter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_p;

    // Automatic Variable Declarations
    unitgroup auto500C78AC_g;
    int auto500C78AC_u;
    unit auto500C78AC_var;

    // Variable Initialization
    lv_unit = libCOMM_gf_EventTychusHero();
    lv_p = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libCOMM_gf_EventTychusHero()) == "TychusCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CatalogLinkReplace(UnitGetOwner(libCOMM_gf_EventTychusHero()), c_gameCatalogUnit, "TychusResearchCenter", "TychusResearchCenterUnlocked");
    libCOMM_gv_tychus_Unit[lv_p] = libCOMM_gf_EventTychusHero();
    libCOMI_gv_cU_HeroUnit[0][lv_p] = lv_unit;
    auto500C78AC_g = UnitGroup("TychusResearchCenter", UnitGetOwner(libCOMM_gf_EventTychusHero()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto500C78AC_u = UnitGroupCount(auto500C78AC_g, c_unitCountAll);
    for (;; auto500C78AC_u -= 1) {
        auto500C78AC_var = UnitGroupUnitFromEnd(auto500C78AC_g, auto500C78AC_u);
        if (auto500C78AC_var == null) { break; }
        libNtve_gf_ReplaceUnit(auto500C78AC_var, "TychusResearchCenterUnlocked", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_CopyUnitControlGroups(auto500C78AC_var, libNtve_gf_LastReplacedUnit());
        UnitCreateEffectUnit(auto500C78AC_var, "TychusResearchCenterCopyRally", libNtve_gf_LastReplacedUnit());
        libCOMM_gv_cU_TychusSquadBar = libNtve_gf_LastReplacedUnit();
        if ((UnitIsSelected(auto500C78AC_var, UnitGetOwner(libCOMM_gf_EventTychusHero())) == true)) {
            UnitSelect(libNtve_gf_LastReplacedUnit(), UnitGetOwner(libCOMM_gf_EventTychusHero()), true);
        }

        libCOMM_gf_CU_TychusSetBarUnit(libNtve_gf_LastReplacedUnit());
    }
    DialogControlSetAnimationState(libCOMM_gv_cU_TychusSquadUnitFrames[0], PlayerGroupAll(), "TrainingState", "NotTraining");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusReplaceResearchCenter_Init () {
    libCOMM_gt_CM_TychusReplaceResearchCenter = TriggerCreate("libCOMM_gt_CM_TychusReplaceResearchCenter_Func");
    TriggerEnable(libCOMM_gt_CM_TychusReplaceResearchCenter, false);
    libCOMM_gf_TychusHeroEvent(libCOMM_gt_CM_TychusReplaceResearchCenter, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_Hero_Charge_Timing
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_Hero_Charge_Timing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_player;
    fixed lv_heroCooldown;

    // Automatic Variable Declarations
    playergroup auto291C9C4B_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= libCOMM_gv_cM_Tychus_InitialTrainTime))) {
        Wait(0.25, c_timeGame);
    }
    auto291C9C4B_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto291C9C4B_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libCOMI_gf_GetPlayerCommanderGameLink(lv_player) == "Tychus")) {
            lv_heroCooldown = libCOMM_gf_CalculateTychusRecruitmentChargeCooldown(lv_player);
            libCOMM_gf_ApplyTychusMaxChargesPerk(lv_player);
        }

    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_Hero_Charge_Timing_Init () {
    libCOMM_gt_CM_Tychus_Hero_Charge_Timing = TriggerCreate("libCOMM_gt_CM_Tychus_Hero_Charge_Timing_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_Hero_Charge_Timing, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_CalldownOdinDeselect
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_CalldownOdinDeselect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(EventUnit(), UnitGetOwner(EventUnit()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_CalldownOdinDeselect_Init () {
    libCOMM_gt_CM_Tychus_CalldownOdinDeselect = TriggerCreate("libCOMM_gt_CM_Tychus_CalldownOdinDeselect_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_CalldownOdinDeselect, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Tychus_CalldownOdinDeselect, null, "TychusCalldownOdinInsideOdinStun", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_CalldownOdinUpdateTarget
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_CalldownOdinUpdateTarget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_UpdateTychusSquadTargetFrame("Tychus", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_CalldownOdinUpdateTarget_Init () {
    libCOMM_gt_CM_Tychus_CalldownOdinUpdateTarget = TriggerCreate("libCOMM_gt_CM_Tychus_CalldownOdinUpdateTarget_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_CalldownOdinUpdateTarget, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Tychus_CalldownOdinUpdateTarget, c_playerAny, "TychusCalldownOdinUISwap");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_CalldownOdinTychusSelect
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Tychus_CalldownOdinTychusSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tychus;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tychus = libCOMM_gv_tychus_Unit[EventPlayer()];

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TychusOdin"))) {
            return false;
        }

        if (!((UnitIsAlive(lv_tychus) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsSelected(EventUnit(), UnitGetOwner(EventUnit())) == true)) {
        UnitSelect(lv_tychus, UnitGetOwner(EventUnit()), true);
    }

    libCOMM_gf_UpdateTychusSquadTargetFrame("Tychus", lv_tychus);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Tychus_CalldownOdinTychusSelect_Init () {
    libCOMM_gt_CM_Tychus_CalldownOdinTychusSelect = TriggerCreate("libCOMM_gt_CM_Tychus_CalldownOdinTychusSelect_Func");
    TriggerEnable(libCOMM_gt_CM_Tychus_CalldownOdinTychusSelect, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Tychus_CalldownOdinTychusSelect, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusWarhound_Revive
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusWarhound_Revive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libCOMM_gf_EventTychusHero();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_hero) == "TychusWarhound"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_hero, "TychusWarhoundTurretChargeAdd", lv_hero);
    UnitCreateEffectUnit(lv_hero, "TychusWarhoundTurretChargeRemove", lv_hero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusWarhound_Revive_Init () {
    libCOMM_gt_CM_TychusWarhound_Revive = TriggerCreate("libCOMM_gt_CM_TychusWarhound_Revive_Func");
    TriggerEnable(libCOMM_gt_CM_TychusWarhound_Revive, false);
    libCOMM_gf_TychusHeroEvent(libCOMM_gt_CM_TychusWarhound_Revive, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusHeroPurchaseDummy
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusHeroPurchaseDummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_tychusplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libCOMM_gf_EventTychusHero();
    lv_tychusplayer = UnitGetOwner(libCOMM_gf_EventTychusHero());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_hero) == "TychusFirebat")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusFirebatOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusGhost")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusGhostOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusMarauder")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusMarauderOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusHERC")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusHERCOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusWarhound")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusWarhoundOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusMedic")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusMedicOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusReaper")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusReaperOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusSpectre")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusSpectreOwned", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusHeroPurchaseDummy_Init () {
    libCOMM_gt_CM_TychusHeroPurchaseDummy = TriggerCreate("libCOMM_gt_CM_TychusHeroPurchaseDummy_Func");
    TriggerEnable(libCOMM_gt_CM_TychusHeroPurchaseDummy, false);
    libCOMM_gf_TychusHeroEvent(libCOMM_gt_CM_TychusHeroPurchaseDummy, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusReaper_Revive
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_TychusReaper_Revive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libCOMM_gf_EventTychusHero();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_hero) == "TychusReaper"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_hero, "TychusReaperBombChargeAdd", lv_hero);
    UnitCreateEffectUnit(lv_hero, "TychusReaperBombChargeRemove", lv_hero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_TychusReaper_Revive_Init () {
    libCOMM_gt_CM_TychusReaper_Revive = TriggerCreate("libCOMM_gt_CM_TychusReaper_Revive_Func");
    TriggerEnable(libCOMM_gt_CM_TychusReaper_Revive, false);
    libCOMM_gf_TychusHeroEvent(libCOMM_gt_CM_TychusReaper_Revive, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_PrestigeTychus_LoneWolfChanged
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_PrestigeTychus_LoneWolfChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_loneWolfUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_loneWolfUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_ActiveCommanderForPlayer(UnitGetOwner(EventUnit())) == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitBackgroundImage", lv_loneWolfUnit);
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "PrestigeLoneWolf", "On");
    }
    else {
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "PrestigeLoneWolf", "Off");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_PrestigeTychus_LoneWolfChanged_Init () {
    libCOMM_gt_CM_PrestigeTychus_LoneWolfChanged = TriggerCreate("libCOMM_gt_CM_PrestigeTychus_LoneWolfChanged_Func");
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_PrestigeTychus_LoneWolfChanged, null, "CommanderPrestigeTychusLoneWolf", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_PrestigeTychus_LoneWolfChanged, null, "CommanderPrestigeTychusLoneWolf", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderVorazun
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderVorazun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto2A053A60_g;
    int auto2A053A60_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Vorazun");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreVorazunBHDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreVorazunBHManageGroup, true);
    TriggerEnable(libCOMM_gt_CC_ScoreVorazunCloakDmg, true);
    auto2A053A60_g = lv_players;
    auto2A053A60_var = -1;
    while (true) {
        auto2A053A60_var = PlayerGroupNextPlayer(auto2A053A60_g, auto2A053A60_var);
        if (auto2A053A60_var < 0) { break; }
        if ((TechTreeUnitIsAllowed(auto2A053A60_var, "SoACasterVorazun") == true)) {
            TriggerEnable(libCOMM_gt_CM_AbilityTransmissionVorazunTimeStop, true);
            libCOMI_gf_CM_CommanderVOAbilityWatchUnit(auto2A053A60_var, SoundLink("ExecutorAlert_VorazunShadowGuardReady", -1), "Abil/SOAShadowGuardCalldown", libCOMI_gv_yY_GPCasterUnit[auto2A053A60_var], "SOAShadowGuardCalldown");
            libCOMI_gf_CM_CommanderVOAbilityWatchUnit(auto2A053A60_var, SoundLink("ExecutorAlert_VorazunTimeStopReady", -1), "Abil/SOATimeFreeze", libCOMI_gv_yY_GPCasterUnit[auto2A053A60_var], "SOATimeFreeze");
            libCOMI_gf_CreateACCaster(auto2A053A60_var, "SoACasterVorazun");
            libCOMI_gf_CU_GPInitEnergyCaster(auto2A053A60_var, "SoACasterVorazun");
            libCOMI_gf_CU_GPSoAUpdateVitals(auto2A053A60_var);
            if ((TechTreeUpgradeCount(auto2A053A60_var, "MasteryVorazunStartingAndMaxSoAEnergy", c_techCountCompleteOnly) > 0)) {
                TextExpressionSetToken("Param/Expression/lib_COMM_2B5865FA", "STDTOOLTIP", StringExternal("UI/SoAMissionEnergyTooltip"));
                TextExpressionSetToken("Param/Expression/lib_COMM_2B5865FA", "ENERGY", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryVorazunStartingAndMaxSoAEnergyDisplayDummy", "Amount", auto2A053A60_var)));
                libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_GPEnergyTooltip[auto2A053A60_var], TextExpressionAssemble("Param/Expression/lib_COMM_2B5865FA"), PlayerGroupSingle(auto2A053A60_var));
            }

            if (((libCOMI_gf_DifficultyLevelForPlayerCoop(auto2A053A60_var) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(auto2A053A60_var) == 4) || (libCOMI_gf_CC_CommanderLevel(auto2A053A60_var, libCOMI_gf_ActiveCommanderForPlayer(auto2A053A60_var)) <= 2))) {
                libCOMI_gv_cM_GPRemindersOn[auto2A053A60_var] = true;
                TriggerEnable(libCOMM_gt_CM_GPReminderAbilityUsed, true);
                libCOMM_gf_CM_GPReminderVorazun(auto2A053A60_var);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderVorazun_Init () {
    libCOMM_gt_DUT_CommanderVorazun = TriggerCreate("libCOMM_gt_DUT_CommanderVorazun_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderVorazun, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_AchievementVorazunTimeStop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_AchievementVorazunTimeStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_killer = libNtve_gf_KillingPlayer();

    // Conditions
    if (testConds) {
        if (!((lv_killer <= 15))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lv_killer) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_killer, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((libCOMI_gf_ActiveCommanderForPlayer(lv_killer) != "Vorazun"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantityAdd(libCOMI_gf_CC_PlayerAlly(lv_killer), "CommanderVorazunYourTurn", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_AchievementVorazunTimeStop_Init () {
    libCOMM_gt_CC_AchievementVorazunTimeStop = TriggerCreate("libCOMM_gt_CC_AchievementVorazunTimeStop_Func");
    TriggerEnable(libCOMM_gt_CC_AchievementVorazunTimeStop, false);
    TriggerAddEventUnitDied(libCOMM_gt_CC_AchievementVorazunTimeStop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATimeFreezeOn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoATimeFreezeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_SoATimeFreezeApply(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoATimeFreezeOn_Init () {
    libCOMM_gt_CM_SoATimeFreezeOn = TriggerCreate("libCOMM_gt_CM_SoATimeFreezeOn_Func");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_SoATimeFreezeOn, c_playerAny, "SOATimeFreeze");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATimeFreezeCleanup
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_SoATimeFreezeCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CC_TimeAITemporaryRestore();
    libCOMM_gf_CC_AchievementToggleTimeStop(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_SoATimeFreezeCleanup_Init () {
    libCOMM_gt_CM_SoATimeFreezeCleanup = TriggerCreate("libCOMM_gt_CM_SoATimeFreezeCleanup_Func");
    TriggerEnable(libCOMM_gt_CM_SoATimeFreezeCleanup, false);
    TriggerAddEventTimer(libCOMM_gt_CM_SoATimeFreezeCleanup, libCOMM_gv_cM_SoATimeFreezeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionVorazunTimeStop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionVorazunTimeStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(EventPlayer());
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("VorazunCommander_TimeStop", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionVorazunTimeStop_Init () {
    libCOMM_gt_CM_AbilityTransmissionVorazunTimeStop = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionVorazunTimeStop_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionVorazunTimeStop, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionVorazunTimeStop, null, AbilityCommand("SOATimeFreeze", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreVorazunBHManageGroup
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreVorazunBHManageGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UnitGroupAdd(libCOMM_gv_cC_ScoreVorazunBHGroup, EventUnit());
    }
    else if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDestroy)) {
        UnitGroupRemove(libCOMM_gv_cC_ScoreVorazunBHGroup, EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreVorazunBHManageGroup_Init () {
    libCOMM_gt_CC_ScoreVorazunBHManageGroup = TriggerCreate("libCOMM_gt_CC_ScoreVorazunBHManageGroup_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreVorazunBHManageGroup, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CC_ScoreVorazunBHManageGroup, null, "VoidSentryBlackHole", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreVorazunBHDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreVorazunBHDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCOMM_gv_cC_ScoreVorazunBHGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreVorazunBHDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "VorazunBlackHoleDamage", FixedToInt(libCOMM_gv_cC_ScoreVorazunBHDmg[EventUnitDamageSourcePlayer()]));
    if (((libCOMI_gf_DifficultyLevelForPlayerCoop(EventUnitDamageSourcePlayer()) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(EventUnitDamageSourcePlayer()) == 4)) && (UnitIsAlive(EventUnit()) == false) && (libCOMI_gf_ActiveCommanderForPlayer(EventUnitDamageSourcePlayer()) == "Vorazun")) {
        AchievementTermQuantityAdd(EventUnitDamageSourcePlayer(), "CommanderVorazun1Shot15Kills", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreVorazunBHDmg_Init () {
    libCOMM_gt_CC_ScoreVorazunBHDmg = TriggerCreate("libCOMM_gt_CC_ScoreVorazunBHDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreVorazunBHDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreVorazunBHDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreVorazunCloakDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreVorazunCloakDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnitDamageSourceUnit()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitDamageSourceUnit(), 1, UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreVorazunCloakDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "VorazunCloakedDamage", FixedToInt(libCOMM_gv_cC_ScoreVorazunCloakDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreVorazunCloakDmg_Init () {
    libCOMM_gt_CC_ScoreVorazunCloakDmg = TriggerCreate("libCOMM_gt_CC_ScoreVorazunCloakDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreVorazunCloakDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreVorazunCloakDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MindControlSupplyOn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_MindControlSupplyOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supply = 6.0;
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_u, "HybridUnitDummy") == true)) {
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed, c_playerPropOperAdd, lv_supply);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_MindControlSupplyOn_Init () {
    libCOMM_gt_MindControlSupplyOn = TriggerCreate("libCOMM_gt_MindControlSupplyOn_Func");
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_MindControlSupplyOn, null, "DarkArchonMindControl", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MindControlSupplyOff
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_MindControlSupplyOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supply = 6.0;
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_u, "HybridUnitDummy") == true)) {
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed, c_playerPropOperSubtract, lv_supply);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_MindControlSupplyOff_Init () {
    libCOMM_gt_MindControlSupplyOff = TriggerCreate("libCOMM_gt_MindControlSupplyOff_Func");
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_MindControlSupplyOff, null, "DarkArchonMindControl", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementVorazunBlackHoleUsed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AchievementVorazunBlackHoleUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderVorazun1Shot15Kills", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AchievementVorazunBlackHoleUsed_Init () {
    libCOMM_gt_CM_AchievementVorazunBlackHoleUsed = TriggerCreate("libCOMM_gt_CM_AchievementVorazunBlackHoleUsed_Func");
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AchievementVorazunBlackHoleUsed, null, AbilityCommand("VoidSentryBlackHole", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryVorazunDarkPylonRadius
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_MasteryVorazunDarkPylonRadius_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    int lv_level;
    fixed lv_scale;
    unit lv_u;
    string lv_link;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_level = TechTreeUpgradeCount(lv_p, libCOMM_gv_cM_MasteryVorazunDarkPylonRadiusUpgradeLink, c_techCountCompleteOnly);
    lv_scale = ((lv_level * 0.02) + 1.0);
    lv_u = EventUnit();
    lv_link = (libCOMM_gv_cM_MasteryVorazunDarkPylonRadiusPowerSourceBaseString + IntToString(lv_level));

    // Conditions
    if (testConds) {
        if (!((lv_level > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSendTo(libNtve_gf_MainActorofUnit(lv_u), libCOMM_gv_cM_MasteryVorazunDarkPylonRadiusActorLink, ("SetScale 0.45"));
    ActorSendTo(libNtve_gf_MainActorofUnit(lv_u), libCOMM_gv_cM_MasteryVorazunDarkPylonRadiusActorLink, (("SetScale " + FixedToString(lv_scale, 2) + " 1")));
    UnitBehaviorRemove(lv_u, libCOMM_gv_cM_MasteryVorazunDarkPylonRadiusPowerSourceNoMasteryLink, c_unitBehaviorCountAll);
    UnitBehaviorAdd(lv_u, (lv_link), lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_MasteryVorazunDarkPylonRadius_Init () {
    libCOMM_gt_CM_MasteryVorazunDarkPylonRadius = TriggerCreate("libCOMM_gt_CM_MasteryVorazunDarkPylonRadius_Func");
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_MasteryVorazunDarkPylonRadius, null, "DarkPylonCloakAura", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderZagara
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderZagara_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    playergroup autoBC34D6AC_g;
    int autoBC34D6AC_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Zagara");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreZagaraFrenzyDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreZagaraSuicideDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreZagaraBanelingBarrage, true);
    TriggerEnable(libCOMM_gt_RoachDropScale, true);
    TriggerEnable(libCOMM_gt_CM_Zagara_WeaponSwap, true);
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionZagaraRoachDrop, true);
    autoBC34D6AC_g = lv_players;
    autoBC34D6AC_var = -1;
    while (true) {
        autoBC34D6AC_var = PlayerGroupNextPlayer(autoBC34D6AC_g, autoBC34D6AC_var);
        if (autoBC34D6AC_var < 0) { break; }
        lv_heroUnit = libCOMI_gf_GetHeroUnit(autoBC34D6AC_var, "Zagara");
        libCOMI_gf_CM_CommanderVOAbilityWatch(autoBC34D6AC_var, SoundLink("IzshaAlert_ZagaraInfestedDrop", -1), "ZagaraVoidCoopInfestedPods", lv_heroUnit, null);
        libCOMI_gf_CM_CommanderVOAbilityWatch(autoBC34D6AC_var, SoundLink("IzshaAlert_ZagaraMassFrenzy", -1), "ZagaraVoidCoopMassFrenzy", lv_heroUnit, null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderZagara_Init () {
    libCOMM_gt_DUT_CommanderZagara = TriggerCreate("libCOMM_gt_DUT_CommanderZagara_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderZagara, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionZagaraRoachDrop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_AbilityTransmissionZagaraRoachDrop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), SoundLink("ZagaraCommander_Roach", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_AbilityTransmissionZagaraRoachDrop_Init () {
    libCOMM_gt_CM_AbilityTransmissionZagaraRoachDrop = TriggerCreate("libCOMM_gt_CM_AbilityTransmissionZagaraRoachDrop_Func");
    TriggerEnable(libCOMM_gt_CM_AbilityTransmissionZagaraRoachDrop, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_AbilityTransmissionZagaraRoachDrop, null, AbilityCommand("ZagaraVoidCoopMassRoachDrop", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZagaraFrenzyDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreZagaraFrenzyDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitDamageSourceUnit(), "ZagaraVoidCoopMassFrenzyTarget") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ZagaraFrenzyDamage", FixedToInt(libCOMM_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()]));
    if ((libCOMI_gf_ActiveCommanderForPlayer(EventUnitDamageSourcePlayer()) != "Zagara")) {
        if (((FixedToInt(libCOMM_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()]) - FixedToInt(libCOMM_gv_cC_ScoreZagaraFrenzyDmgLast[EventUnitDamageSourcePlayer()])) > 5)) {
            AchievementTermQuantityAdd(libCOMI_gf_CC_PlayerAlly(EventUnitDamageSourcePlayer()), "CommanderZagaraFrenzy4Everyone", (FixedToInt(libCOMM_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()]) - FixedToInt(libCOMM_gv_cC_ScoreZagaraFrenzyDmgLast[EventUnitDamageSourcePlayer()])));
            libCOMM_gv_cC_ScoreZagaraFrenzyDmgLast[EventUnitDamageSourcePlayer()] = libCOMM_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()];
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreZagaraFrenzyDmg_Init () {
    libCOMM_gt_CC_ScoreZagaraFrenzyDmg = TriggerCreate("libCOMM_gt_CC_ScoreZagaraFrenzyDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreZagaraFrenzyDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreZagaraFrenzyDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZagaraSuicideDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreZagaraSuicideDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "Baneling") || (UnitGetType(EventUnitDamageSourceUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSHunterBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSHunter") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSSplitterlingBigBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSSplitterlingBig") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSSplitterlingMediumBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSSplitterlingMedium") || (UnitGetType(EventUnitDamageSourceUnit()) == "Scourge") || (UnitGetType(EventUnitDamageSourceUnit()) == "BanelingStetmann") || (UnitGetType(EventUnitDamageSourceUnit()) == "BanelingStetmannBurrowed")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreZagaraSuicideDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ZagaraSuicideDamage", FixedToInt(libCOMM_gv_cC_ScoreZagaraSuicideDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreZagaraSuicideDmg_Init () {
    libCOMM_gt_CC_ScoreZagaraSuicideDmg = TriggerCreate("libCOMM_gt_CC_ScoreZagaraSuicideDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreZagaraSuicideDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreZagaraSuicideDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZagaraBanelingBarrage
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreZagaraBanelingBarrage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreZagaraSuicideDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ZagaraSuicideDamage", FixedToInt(libCOMM_gv_cC_ScoreZagaraSuicideDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreZagaraBanelingBarrage_Init () {
    libCOMM_gt_CC_ScoreZagaraBanelingBarrage = TriggerCreate("libCOMM_gt_CC_ScoreZagaraBanelingBarrage_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreZagaraBanelingBarrage, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreZagaraBanelingBarrage, null, c_unitDamageTypeAny, c_unitDamageEither, "ZagaraVoidCoopBanelingBarrageExplodeSearchUnit");
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreZagaraBanelingBarrage, null, c_unitDamageTypeAny, c_unitDamageEither, "ZagaraVoidCoopBanelingBarrageExplodeSearchStructure");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryZagraRoachLifeIncrease
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_MasteryZagraRoachLifeIncrease_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "MasteryZagaraRoachDropDamageAndHealth"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_MasteryZagraRoachLifeIncrease(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_MasteryZagraRoachLifeIncrease_Init () {
    libCOMM_gt_CM_MasteryZagraRoachLifeIncrease = TriggerCreate("libCOMM_gt_CM_MasteryZagraRoachLifeIncrease_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_MasteryZagraRoachLifeIncrease, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roach Drop Scale
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_RoachDropScale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scaleModifier;
    fixed lv_upgradeCount;
    fixed lv_newScale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaleModifier = 0.02;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_upgradeCount = TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasteryZagaraRoachDropDamageAndHealth", c_techCountCompleteOnly);
    lv_newScale = (1+(lv_upgradeCount*lv_scaleModifier));
    TextExpressionSetToken("Param/Expression/lib_COMM_8B6C6D2D", "A", FixedToText(lv_newScale, c_fixedPrecisionAny));
    ActorSendAsText(libNtve_gf_MainActorofUnit(EventUnit()), TextExpressionAssemble("Param/Expression/lib_COMM_8B6C6D2D"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_RoachDropScale_Init () {
    libCOMM_gt_RoachDropScale = TriggerCreate("libCOMM_gt_RoachDropScale_Func");
    TriggerEnable(libCOMM_gt_RoachDropScale, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_RoachDropScale, null, "ZagaraVoidCoopInfestedPodsTimedLife", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zagara_WeaponSwap
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zagara_WeaponSwap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "HunterKiller")) {
        UnitWeaponRemove(EventUnit(), "HunterKillerMelee");
        UnitWeaponRemove(EventUnit(), "HunterKiller");
        UnitWeaponAdd(EventUnit(), "ZagaraHunterKillerMelee", null);
        UnitWeaponAdd(EventUnit(), "ZagaraHunterKiller", null);
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Roach")) {
        UnitWeaponRemove(EventUnit(), "AcidSaliva");
        UnitWeaponRemove(EventUnit(), "RoachMelee");
        UnitWeaponAdd(EventUnit(), "ZagaraAcidSaliva", null);
        UnitWeaponAdd(EventUnit(), "ZagaraRoachMelee", null);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zagara_WeaponSwap_Init () {
    libCOMM_gt_CM_Zagara_WeaponSwap = TriggerCreate("libCOMM_gt_CM_Zagara_WeaponSwap_Func");
    TriggerEnable(libCOMM_gt_CM_Zagara_WeaponSwap, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Zagara_WeaponSwap, null, "ZagaraOwned", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_CommanderZeratul
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_DUT_CommanderZeratul_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto43600A41_g;
    int auto43600A41_var;
    playergroup autoAD19D16E_g;
    int autoAD19D16E_var;

    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Zeratul");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_CC_ScoreZeratulDmg, true);
    TriggerEnable(libCOMM_gt_CC_ScoreZeratulShieldRestore, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulProphecyEventArtifactMissed, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulProphecyEventArtifactPickedUp, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulProphecyEventArtifactRevealed, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulProphecyEventArtifactUsed, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulProphecyEventProphecyCast, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulProphecyEventVision, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_ProphecyMiss, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_ProphecyCastStop, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_ProphecyArtifactPickedUp, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_ProphecyArtifactRevealed, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_ProphecyArtifactPathingSafety, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulTopBarWarpTrainStart, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulTopBarWarpTrainFinish, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulTopBarRallySet, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulTopBarRallyRedirect, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulTopBarRallyCancel, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_Trade, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_Trade_FullEnergyOn, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_Trade_FullEnergyOff, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_ReflectionShield, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_DarkTemplarRetreat, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_WarpPrismAutoUnload, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_WarpPrismAutoUnloadOff, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_WarpPrismSelectRift, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_WarpPrismMorphUnloadState, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_Projection_UnitLink, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_Projection_TimedLifeFate, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_Projection_Cancel, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_PurificationNova_Finale, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_PurificationNova_Create, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_PurificationNova_MainImpact, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_Entropic_Spawner, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulArtifactUpgrades, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_TransportDropOff, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_StasisDuration, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulStasisBeamIssueOrder, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulStasisBeam, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_Devolve, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_DevolveKills, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_ArtifactRush, true);
    TriggerEnable(libCOMM_gt_CM_ZeratulAvatarMinimapIcon, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_RallySetToZeratul, true);
    TriggerEnable(libCOMM_gt_CM_Zeratul_TransportResetRally, true);
    TriggerEnable(libCOMM_gt_CM_ArtifactTransmission_Hint, true);
    TriggerEnable(libCOMM_gt_CM_ArtifactTransmission_PickedUp, true);
    TriggerEnable(libCOMM_gt_CM_ArtifactTransmission_Upgraded, true);
    TriggerEnable(libCOMM_gt_CM_ArtifactTransmission_ProphecyCast, true);
    TriggerEnable(libCOMM_gt_CM_ArtifactTransmission_SelectAbilityReminder, true);
    auto43600A41_g = lv_players;
    auto43600A41_var = -1;
    while (true) {
        auto43600A41_var = PlayerGroupNextPlayer(auto43600A41_g, auto43600A41_var);
        if (auto43600A41_var < 0) { break; }
        libCOMM_gv_cM_ZeratulPlayer = auto43600A41_var;
        libCOMM_gf_CM_Zeratul_PlaceArtifact(libCOMM_gv_cM_ZeratulPlayer);
        if ((TechTreeUnitIsAllowed(auto43600A41_var, "CoopCasterZeratul") == true)) {
            libCOMI_gf_CreateACCaster(auto43600A41_var, "CoopCasterZeratul");
            libCOMM_gf_CU_GPInitZeratul(auto43600A41_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CoopCasterZeratulSpecialization", c_unitCreateIgnorePlacement, auto43600A41_var, Point(0.0, 0.0));
            libCOMM_gv_yY_GPCasterUnitSecondary[auto43600A41_var] = UnitLastCreated();
            libNtve_gf_SetDialogItemUnitGroup(libCOMM_gv_cU_ZeratulSelectionCmdPanel, libNtve_gf_ConvertUnitToUnitGroup(libCOMM_gv_yY_GPCasterUnitSecondary[auto43600A41_var]), PlayerGroupSingle(auto43600A41_var));
        }

        if ((TechTreeUnitIsAllowed(auto43600A41_var, "ZeratulACArtifact") == true)) {
            libCOMI_gf_CreateACStructure(auto43600A41_var, "ZeratulACArtifact");
            libCOMM_gv_cM_Zeratul_HeroStructure[auto43600A41_var] = UnitLastCreated();
            libCOMM_gv_cM_Zeratul_HeroStructureUnitGroup[auto43600A41_var] = libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated());
        }

    }
    Wait(0.625, c_timeGame);
    autoAD19D16E_g = lv_players;
    autoAD19D16E_var = -1;
    while (true) {
        autoAD19D16E_var = PlayerGroupNextPlayer(autoAD19D16E_g, autoAD19D16E_var);
        if (autoAD19D16E_var < 0) { break; }
        VisFillArea(autoAD19D16E_var, RegionEntireMap(), c_fillTypeMasked, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_DUT_CommanderZeratul_Init () {
    libCOMM_gt_DUT_CommanderZeratul = TriggerCreate("libCOMM_gt_DUT_CommanderZeratul_Func");
    TriggerAddEventGeneric(libCOMM_gt_DUT_CommanderZeratul, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_Hint
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ArtifactTransmission_Hint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMM_gf_CM_Zeratul_ProphecyHintLevel(libCOMM_gf_CM_ZeratulProphecyEventGetArtifactNumber()) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CM_CommanderVOSend(libCOMM_gf_CM_ZeratulProphecyEventGetPlayer(), SoundLink("ZeratulCommander_FindArtifact", -1), libCOMI_gf_CC_PlayersOfCommander("Zeratul"));
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ArtifactTransmission_Hint_Init () {
    libCOMM_gt_CM_ArtifactTransmission_Hint = TriggerCreate("libCOMM_gt_CM_ArtifactTransmission_Hint_Func");
    TriggerEnable(libCOMM_gt_CM_ArtifactTransmission_Hint, false);
    libCOMM_gf_CM_ZeratulProphecyEvent(libCOMM_gt_CM_ArtifactTransmission_Hint, "ZeratulEvent_ArtifactMissed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_PickedUp
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ArtifactTransmission_PickedUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8C5A36AD_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMM_gf_CM_ZeratulProphecyEventGetArtifactNumber() <= 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCOMM_gv_cM_ArtifactTransmission_SelectAbilityReminder, 45.0, false, c_timeGame);
    auto8C5A36AD_val = libCOMM_gf_CM_ZeratulProphecyEventGetArtifactNumber();
    if (auto8C5A36AD_val == 3) {
        libCOMI_gf_CM_CommanderVOSend(libCOMM_gf_CM_ZeratulProphecyEventGetPlayer(), SoundLink("ZeratulCommander_CompleteArtifact", -1), libCOMI_gf_CC_PlayersOfCommander("Zeratul"));
    }
    else {
        libCOMI_gf_CM_CommanderVOSend(libCOMM_gf_CM_ZeratulProphecyEventGetPlayer(), SoundLink("ZeratulCommander_ObtainArtifact", -1), libCOMI_gf_CC_PlayersOfCommander("Zeratul"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ArtifactTransmission_PickedUp_Init () {
    libCOMM_gt_CM_ArtifactTransmission_PickedUp = TriggerCreate("libCOMM_gt_CM_ArtifactTransmission_PickedUp_Func");
    TriggerEnable(libCOMM_gt_CM_ArtifactTransmission_PickedUp, false);
    libCOMM_gf_CM_ZeratulProphecyEvent(libCOMM_gt_CM_ArtifactTransmission_PickedUp, "ZeratulEvent_ArtifactPickedUp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_ProphecyCast
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ArtifactTransmission_ProphecyCast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_UnitInRegion(libCOMM_gv_cM_ZeratulProphecyArtifact, RegionCircle(UnitGetPosition(DataTableGetUnit(false, TriggerEventParamName(("ZeratulEvent_ProphecyCastStart"), "ZeratulEventUnit"))), 14.0)) == false)) {
        libCOMI_gf_CM_CommanderVOSend(libCOMM_gf_CM_ZeratulProphecyEventGetPlayer(), SoundLink("ZeratulCommander_FindArtifact", -1), libCOMI_gf_CC_PlayersOfCommander("Zeratul"));
        Wait(libCOMM_gv_cMC_ZeratulVOTransmissionProphacyCastDelay, c_timeGame);
    }

    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ArtifactTransmission_ProphecyCast_Init () {
    libCOMM_gt_CM_ArtifactTransmission_ProphecyCast = TriggerCreate("libCOMM_gt_CM_ArtifactTransmission_ProphecyCast_Func");
    TriggerEnable(libCOMM_gt_CM_ArtifactTransmission_ProphecyCast, false);
    libCOMM_gf_CM_ZeratulProphecyEvent(libCOMM_gt_CM_ArtifactTransmission_ProphecyCast, "ZeratulEvent_ProphecyCastStart");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_Upgraded
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ArtifactTransmission_Upgraded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventPlayer()) == "Zeratul"))) {
            return false;
        }

        if (!(((EventUpgradeName() == "ZeratulArtifactUpgradeTier0A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier0B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier0C") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1C") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2C") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3B")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(libCOMM_gv_cM_ArtifactTransmission_SelectAbilityReminder, true);
    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), SoundLink("ZeratulCommander_AbilitySelected", -1), libCOMI_gf_CC_PlayersOfCommander("Zeratul"));
    if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier3A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3B"))) {
        libCOMI_gf_CM_CommanderVOAbilityWatch(EventPlayer(), SoundLink("ZeratulCommander_AbilityReady", -1), "Abil/ZeratulTopBarUltimateWarpTrain", null, null);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ArtifactTransmission_Upgraded_Init () {
    libCOMM_gt_CM_ArtifactTransmission_Upgraded = TriggerCreate("libCOMM_gt_CM_ArtifactTransmission_Upgraded_Func");
    TriggerEnable(libCOMM_gt_CM_ArtifactTransmission_Upgraded, false);
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_ArtifactTransmission_Upgraded, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_SelectAbilityReminder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ArtifactTransmission_SelectAbilityReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Zeratul", libCOMI_gf_GetAlliedCommandersPlayersCopy()), SoundLink("ZeratulCommander_SelectAbility", -1), libCOMI_gf_CC_PlayersOfCommander("Zeratul"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ArtifactTransmission_SelectAbilityReminder_Init () {
    libCOMM_gt_CM_ArtifactTransmission_SelectAbilityReminder = TriggerCreate("libCOMM_gt_CM_ArtifactTransmission_SelectAbilityReminder_Func");
    TriggerEnable(libCOMM_gt_CM_ArtifactTransmission_SelectAbilityReminder, false);
    TriggerAddEventTimer(libCOMM_gt_CM_ArtifactTransmission_SelectAbilityReminder, libCOMM_gv_cM_ArtifactTransmission_SelectAbilityReminder);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZeratulDmg
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreZeratulDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "ZeratulCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreZeratulDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ZeratulDamage", FixedToInt(libCOMM_gv_cC_ScoreZeratulDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreZeratulDmg_Init () {
    libCOMM_gt_CC_ScoreZeratulDmg = TriggerCreate("libCOMM_gt_CC_ScoreZeratulDmg_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreZeratulDmg, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_CC_ScoreZeratulDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZeratulShieldRestore
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CC_ScoreZeratulShieldRestore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cC_ScoreZeratulShieldRestore[EventUnitHealLaunchPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventUnitHealLaunchPlayer(), "ZeratulShieldRestore", FixedToInt(libCOMM_gv_cC_ScoreZeratulShieldRestore[EventUnitHealLaunchPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CC_ScoreZeratulShieldRestore_Init () {
    libCOMM_gt_CC_ScoreZeratulShieldRestore = TriggerCreate("libCOMM_gt_CC_ScoreZeratulShieldRestore_Func");
    TriggerEnable(libCOMM_gt_CC_ScoreZeratulShieldRestore, false);
    TriggerAddEventUnitHealed(libCOMM_gt_CC_ScoreZeratulShieldRestore, null, c_unitVitalAny, "VoidSentryShieldRepair");
    TriggerAddEventUnitHealed(libCOMM_gt_CC_ScoreZeratulShieldRestore, null, c_unitVitalAny, "ShieldBatteryRechargeChanneled");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ZeratulProphecyReady
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_ZeratulProphecyReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[libCOMM_gf_CM_ZeratulProphecyEventGetPlayer()], PlayerGroupAll(), "ProphecyState", "Ready");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_ZeratulProphecyReady_Init () {
    libCOMM_gt_CU_ZeratulProphecyReady = TriggerCreate("libCOMM_gt_CU_ZeratulProphecyReady_Func");
    TriggerEnable(libCOMM_gt_CU_ZeratulProphecyReady, false);
    libCOMM_gf_CM_ZeratulProphecyEvent(libCOMM_gt_CU_ZeratulProphecyReady, "ZeratulEvent_VisionReady");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ZeratulProphecyNotReady
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_ZeratulProphecyNotReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_ZeratulProphecyNotReady_Init () {
    libCOMM_gt_CU_ZeratulProphecyNotReady = TriggerCreate("libCOMM_gt_CU_ZeratulProphecyNotReady_Func");
    TriggerEnable(libCOMM_gt_CU_ZeratulProphecyNotReady, false);
    libCOMM_gf_CM_ZeratulProphecyEvent(libCOMM_gt_CU_ZeratulProphecyNotReady, "ZeratulEvent_VisionNotReady");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ZeratulArtifactCollected
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_ZeratulArtifactCollected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[libCOMM_gf_CM_ZeratulProphecyEventGetPlayer()], PlayerGroupAll(), "ProphecyState", "NotReady");
    DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[libCOMM_gf_CM_ZeratulProphecyEventGetPlayer()], PlayerGroupAll(), "CurrentArtifact", IntToString((libCOMM_gv_cM_ZeratulProphecyArtifactNumber + 1)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_ZeratulArtifactCollected_Init () {
    libCOMM_gt_CU_ZeratulArtifactCollected = TriggerCreate("libCOMM_gt_CU_ZeratulArtifactCollected_Func");
    TriggerEnable(libCOMM_gt_CU_ZeratulArtifactCollected, false);
    libCOMM_gf_CM_ZeratulProphecyEvent(libCOMM_gt_CU_ZeratulArtifactCollected, "ZeratulEvent_ArtifactPickedUp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ZeratulArtifactUpgraded
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_ZeratulArtifactUpgraded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto9AC24932_val;

    // Conditions
    if (testConds) {
        if (!((libCOMM_gv_cM_ZeratulPlayer == EventPlayer()))) {
            return false;
        }

        if (!(((EventUpgradeName() == "ZeratulArtifactTier1") || (EventUpgradeName() == "ZeratulArtifactTier2") || (EventUpgradeName() == "ZeratulArtifactTier3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9AC24932_val = EventUpgradeName();
    if (auto9AC24932_val == "ZeratulArtifactTier1") {
        DialogControlSetAnimationState(libCOMM_gv_cU_ZeratulSelectionButtonContainers[1], PlayerGroupAll(), "ArtifactState", "Collected");
    }
    else if (auto9AC24932_val == "ZeratulArtifactTier2") {
        DialogControlSetAnimationState(libCOMM_gv_cU_ZeratulSelectionButtonContainers[2], PlayerGroupAll(), "ArtifactState", "Collected");
    }
    else if (auto9AC24932_val == "ZeratulArtifactTier3") {
        if ((libCOMI_gf_CC_CommanderLevel(EventPlayer(), libCOMI_gf_ActiveCommanderForPlayer(EventPlayer())) >= 2)) {
            DialogControlSetAnimationState(libCOMM_gv_cU_ZeratulSelectionButtonContainers[3], PlayerGroupAll(), "ArtifactState", "Collected");
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_ZeratulArtifactUpgraded_Init () {
    libCOMM_gt_CU_ZeratulArtifactUpgraded = TriggerCreate("libCOMM_gt_CU_ZeratulArtifactUpgraded_Func");
    TriggerEnable(libCOMM_gt_CU_ZeratulArtifactUpgraded, false);
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CU_ZeratulArtifactUpgraded, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ZeratulArtifactUsed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CU_ZeratulArtifactUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetAnimationState(libCOMM_gv_cU_ZeratulSelectionButtonContainers[libCOMM_gf_CM_ZeratulProphecyEventGetArtifactNumber()], PlayerGroupAll(), "ArtifactState", "Used");
    if ((libCOMM_gf_CM_ZeratulProphecyEventGetArtifactNumber() == 3) && (TechTreeUpgradeCount(libCOMM_gf_CM_ZeratulProphecyEventGetPlayer(), "ZeratulArtifactUpgradeTier3A", c_techCountCompleteOnly) > 0)) {
        DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[libCOMM_gf_CM_ZeratulProphecyEventGetPlayer()], PlayerGroupAll(), "AvatarState", "Form");
    }
    else if ((libCOMM_gf_CM_ZeratulProphecyEventGetArtifactNumber() == 3) && (TechTreeUpgradeCount(libCOMM_gf_CM_ZeratulProphecyEventGetPlayer(), "ZeratulArtifactUpgradeTier3B", c_techCountCompleteOnly) > 0)) {
        DialogControlSetAnimationState(libCOMI_gv_cU_GPPanel[libCOMM_gf_CM_ZeratulProphecyEventGetPlayer()], PlayerGroupAll(), "AvatarState", "Essence");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CU_ZeratulArtifactUsed_Init () {
    libCOMM_gt_CU_ZeratulArtifactUsed = TriggerCreate("libCOMM_gt_CU_ZeratulArtifactUsed_Func");
    TriggerEnable(libCOMM_gt_CU_ZeratulArtifactUsed, false);
    libCOMM_gf_CM_ZeratulProphecyEvent(libCOMM_gt_CU_ZeratulArtifactUsed, "ZeratulEvent_ArtifactUsed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Entropic_Spawner
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_Entropic_Spawner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    fixed lv_facing;
    fixed lv_angelA;
    fixed lv_angelA2;
    fixed lv_angelB;
    fixed lv_angelB2;
    fixed lv_range;
    int lv_p;
    point lv_center;

    // Automatic Variable Declarations
    const int auto5A48B774_n = 5;
    int auto5A48B774_i;

    // Variable Initialization
    lv_spawner = EventUnitCreatedUnit();
    lv_facing = UnitGetFacing(EventUnit());
    lv_range = 3.0;
    lv_p = UnitGetOwner(lv_spawner);
    lv_center = UnitGetPosition(lv_spawner);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_spawner) == "ZeratulEntropicBlastCyanWeaponSpawner"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angelA = (lv_facing - 90.0);
    lv_angelB = (lv_facing + 90.0);
    for (auto5A48B774_i = 1; auto5A48B774_i <= auto5A48B774_n; auto5A48B774_i += 1) {
        UnitCreate(1, "ZeratulXelNagaChargedCrystalCyan", 0, lv_p, PointWithOffsetPolar(lv_center, lv_range, lv_angelA), lv_angelA);
        UnitCreateEffectUnit(lv_spawner, "ZeratulEntropicBlastCyanImpactSpawnSet", UnitLastCreated());
        UnitCreate(1, "ZeratulXelNagaChargedCrystalCyan", 0, lv_p, PointWithOffsetPolar(lv_center, lv_range, lv_angelB), lv_angelB);
        UnitCreateEffectUnit(lv_spawner, "ZeratulEntropicBlastCyanImpactSpawnSet", UnitLastCreated());
        lv_angelA += 36.0;
        lv_angelB += 36.0;
        Wait(0.1875, c_timeGame);
    }
    Wait(0.75, c_timeGame);
    UnitKill(lv_spawner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_Entropic_Spawner_Init () {
    libCOMM_gt_CM_Zeratul_Entropic_Spawner = TriggerCreate("libCOMM_gt_CM_Zeratul_Entropic_Spawner_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_Entropic_Spawner, false);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Zeratul_Entropic_Spawner, null, "ZeratulEntropicBlastCyan", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Devolve
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_Devolve_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_Zeratul_ApplyDevolve(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_Devolve_Init () {
    libCOMM_gt_CM_Zeratul_Devolve = TriggerCreate("libCOMM_gt_CM_Zeratul_Devolve_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_Devolve, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Zeratul_Devolve, c_playerAny, "ZeratulXelNagaConstructDevolveModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulProphecyEventVision
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulProphecyEventVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_VisionReady";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        lv_event = "ZeratulEvent_VisionReady";
    }
    else {
        lv_event = "ZeratulEvent_VisionNotReady";
    }
    DataTableSetUnit(false, TriggerEventParamName((lv_event), "ZeratulEventUnit"), EventUnit());
    DataTableSetInt(false, TriggerEventParamName((lv_event), "ZeratulEventPlayer"), UnitGetOwner(EventUnit()));
    TriggerSendEvent((lv_event));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulProphecyEventVision_Init () {
    libCOMM_gt_CM_ZeratulProphecyEventVision = TriggerCreate("libCOMM_gt_CM_ZeratulProphecyEventVision_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulProphecyEventVision, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_ZeratulProphecyEventVision, null, "ZeratulProphecyCooldownTracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_ZeratulProphecyEventVision, null, "ZeratulProphecyCooldownTracker", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulProphecyEventArtifactMissed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulProphecyEventArtifactMissed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroUnit;
    string lv_event;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroUnit = libCOMI_gf_GetHeroUnit(EventPlayer(), "Zeratul");
    lv_event = "ZeratulEvent_ArtifactMissed";

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(EventPlayer()) == "Zeratul"))) {
            return false;
        }

        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == lv_heroUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_SendZeratulProphecyEventArtifact(lv_event, EventPlayer(), libCOMM_gv_cM_ZeratulProphecyArtifact, libCOMM_gv_cM_ZeratulProphecyArtifactNumber);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulProphecyEventArtifactMissed_Init () {
    libCOMM_gt_CM_ZeratulProphecyEventArtifactMissed = TriggerCreate("libCOMM_gt_CM_ZeratulProphecyEventArtifactMissed_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulProphecyEventArtifactMissed, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_ZeratulProphecyEventArtifactMissed, c_playerAny, "Event_ZeratulProphecyPrepMiss");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulProphecyEventArtifactPickedUp
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulProphecyEventArtifactPickedUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_zeratulplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactPickedUp";
    lv_zeratulplayer = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Zeratul", libCOMI_gf_GetAlliedCommandersPlayersCopy());

    // Conditions
    if (testConds) {
        if (!((EventUnit() == libCOMM_gv_cM_ZeratulProphecyArtifact))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_SendZeratulProphecyEventArtifact(lv_event, lv_zeratulplayer, EventUnit(), libCOMM_gv_cM_ZeratulProphecyArtifactNumber);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulProphecyEventArtifactPickedUp_Init () {
    libCOMM_gt_CM_ZeratulProphecyEventArtifactPickedUp = TriggerCreate("libCOMM_gt_CM_ZeratulProphecyEventArtifactPickedUp_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulProphecyEventArtifactPickedUp, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_ZeratulProphecyEventArtifactPickedUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulProphecyEventArtifactRevealed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulProphecyEventArtifactRevealed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_zeratulplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactFound";
    lv_zeratulplayer = libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Zeratul", libCOMI_gf_GetAlliedCommandersPlayersCopy());

    // Conditions
    if (testConds) {
        if (!((EventUnit() == libCOMM_gv_cM_ZeratulProphecyArtifact))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gf_CM_SendZeratulProphecyEventArtifact(lv_event, lv_zeratulplayer, EventUnit(), libCOMM_gv_cM_ZeratulProphecyArtifactNumber);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulProphecyEventArtifactRevealed_Init () {
    libCOMM_gt_CM_ZeratulProphecyEventArtifactRevealed = TriggerCreate("libCOMM_gt_CM_ZeratulProphecyEventArtifactRevealed_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulProphecyEventArtifactRevealed, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_ZeratulProphecyEventArtifactRevealed, UnitRefFromVariable("libCOMM_gv_cM_ZeratulProphecyArtifact"), "ProphecyArtifactHide", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulProphecyEventArtifactUsed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulProphecyEventArtifactUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactUsed";

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventPlayer()) == "Zeratul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier0A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier0B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier0C"))) {
        libCOMM_gf_CM_SendZeratulProphecyEventArtifact(lv_event, EventPlayer(), null, 0);
    }
    else if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier1A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1C"))) {
        libCOMM_gf_CM_SendZeratulProphecyEventArtifact(lv_event, EventPlayer(), null, 1);
    }
    else if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier2A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2C"))) {
        libCOMM_gf_CM_SendZeratulProphecyEventArtifact(lv_event, EventPlayer(), null, 2);
    }
    else if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier3A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3C"))) {
        libCOMM_gf_CM_SendZeratulProphecyEventArtifact(lv_event, EventPlayer(), null, 3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulProphecyEventArtifactUsed_Init () {
    libCOMM_gt_CM_ZeratulProphecyEventArtifactUsed = TriggerCreate("libCOMM_gt_CM_ZeratulProphecyEventArtifactUsed_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulProphecyEventArtifactUsed, false);
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_ZeratulProphecyEventArtifactUsed, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulProphecyEventProphecyCast
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulProphecyEventProphecyCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    int auto653BA609_val;

    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactMissed";
    lv_heroUnit = libCOMI_gf_GetHeroUnit(UnitGetOwner(EventUnit()), "Zeratul");

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(EventUnit())) == "Zeratul"))) {
            return false;
        }

        if (!((EventUnit() == lv_heroUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto653BA609_val = EventUnitAbilityStage();
    if (auto653BA609_val == c_abilEffectStageCast) {
        lv_event = "ZeratulEvent_ProphecyCastStart";
    }
    else if (auto653BA609_val == c_unitAbilStageCancel) {
        lv_event = "ZeratulEvent_ProphecyCastStop";
    }
    else {
    }
    DataTableSetUnit(false, TriggerEventParamName((lv_event), "ZeratulEventUnit"), EventUnit());
    DataTableSetInt(false, TriggerEventParamName((lv_event), "ZeratulEventPlayer"), UnitGetOwner(EventUnit()));
    TriggerSendEvent((lv_event));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulProphecyEventProphecyCast_Init () {
    libCOMM_gt_CM_ZeratulProphecyEventProphecyCast = TriggerCreate("libCOMM_gt_CM_ZeratulProphecyEventProphecyCast_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulProphecyEventProphecyCast, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_ZeratulProphecyEventProphecyCast, null, AbilityCommand("ProphecyVision", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_ZeratulProphecyEventProphecyCast, null, AbilityCommand("ProphecyVision", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_TransportDropOff
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_TransportDropOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidseeker;
    point lv_unloadpoint;
    fixed lv_facingangle;
    fixed lv_interpolationperiod;
    fixed lv_interpolationdistance;
    point lv_nextinterpolatedpoint;
    unitgroup lv_cargounits;
    point lv_fallbackexitpoint;

    // Automatic Variable Declarations
    unitgroup auto65803C34_g;
    int auto65803C34_u;
    unit auto65803C34_var;

    // Variable Initialization
    lv_voidseeker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_unloadpoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_facingangle = UnitGetFacing(lv_voidseeker);
    lv_interpolationperiod = 0.125;
    lv_interpolationdistance = 1.0;
    lv_cargounits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_voidseeker) == "ZeratulTransportVoidSeeker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_voidseeker, OrderTargetingPoint(AbilityCommand("VoidSeekerTransport", 2), lv_unloadpoint), c_orderQueueReplace);
    lv_interpolationdistance = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "ZeratulTransportVoidSeeker", "Speed", UnitGetOwner(lv_voidseeker)) * lv_interpolationperiod);
    lv_nextinterpolatedpoint = PointWithOffsetPolar(UnitGetPosition(lv_voidseeker), lv_interpolationdistance, lv_facingangle);
    while ((RegionContainsPoint(RegionPlayableMap(), lv_nextinterpolatedpoint) == true)) {
        lv_nextinterpolatedpoint = PointWithOffsetPolar(lv_nextinterpolatedpoint, lv_interpolationdistance, lv_facingangle);
    }
    UnitIssueOrder(lv_voidseeker, OrderTargetingPoint(AbilityCommand("move", 0), lv_nextinterpolatedpoint), c_orderQueueAddToEnd);
    Wait(0.25, c_timeGame);
    UnitWaitUntilIdle(lv_voidseeker, true);
    lv_cargounits = UnitCargoGroup(lv_voidseeker);
    auto65803C34_g = lv_cargounits;
    auto65803C34_u = UnitGroupCount(auto65803C34_g, c_unitCountAll);
    for (;; auto65803C34_u -= 1) {
        auto65803C34_var = UnitGroupUnitFromEnd(auto65803C34_g, auto65803C34_u);
        if (auto65803C34_var == null) { break; }
        lv_fallbackexitpoint = UnitTypePlacementFromUnit(UnitGetType(auto65803C34_var), UnitGetOwner(auto65803C34_var), lv_voidseeker, 10.0);
        if ((lv_fallbackexitpoint == null)) {
            lv_fallbackexitpoint = UnitTypePlacementFromPoint(UnitGetType(auto65803C34_var), UnitGetOwner(auto65803C34_var), PlayerStartLocation(UnitGetOwner(lv_voidseeker)), 10.0);
        }

        UnitSetPosition(auto65803C34_var, lv_fallbackexitpoint, false);
    }
    UnitKill(lv_voidseeker);
    libCOMM_gv_cM_ZeratulVoidSeeker = lv_voidseeker;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_TransportDropOff_Init () {
    libCOMM_gt_CM_Zeratul_TransportDropOff = TriggerCreate("libCOMM_gt_CM_Zeratul_TransportDropOff_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_TransportDropOff, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Zeratul_TransportDropOff, c_playerAny, "ZeratulVoidSeekerTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_TransportResetRally
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_TransportResetRally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroUnit = libCOMI_gf_GetHeroUnitBad(EventPlayer(), "ZeratulCoop");

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(libCOMM_gv_cM_Zeratul_RalliedGroup, OrderTargetingUnit(AbilityCommand("Rally", 0), lv_heroUnit), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_TransportResetRally_Init () {
    libCOMM_gt_CM_Zeratul_TransportResetRally = TriggerCreate("libCOMM_gt_CM_Zeratul_TransportResetRally_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_TransportResetRally, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Zeratul_TransportResetRally, c_playerAny, "VoidSeekerTransportUnloadDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_PurificationNova_Finale
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_PurificationNova_Finale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    point lv_targetPoint;
    point lv_spawnPoint;
    point lv_goal;
    fixed lv_mainAngel;
    unit lv_purifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_purifier = UnitBehaviorEffectUnit(lv_u, "ZeratulPurificationNovaCasterFinder", c_effectUnitCaster, 0);
    if ((UnitIsValid(lv_purifier) == true) && (TechTreeUpgradeCount(lv_p, "ZeratulArtifactTier3_RoboticsBay", c_techCountCompleteOnly) >= 1)) {
        lv_spawnPoint = UnitGetPosition(lv_u);
        lv_goal = UnitGetGoalPosition(lv_u);
        if ((lv_spawnPoint != lv_goal)) {
            lv_mainAngel = AngleBetweenPoints(lv_spawnPoint, lv_goal);
        }
        else {
            lv_mainAngel = AngleBetweenPoints(UnitGetPosition(lv_purifier), lv_spawnPoint);
        }
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, lv_mainAngel);
        libCOMM_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb(lv_purifier, lv_spawnPoint, lv_targetPoint);
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, (lv_mainAngel + 45.0));
        libCOMM_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb(lv_purifier, lv_spawnPoint, lv_targetPoint);
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, (lv_mainAngel - 45.0));
        libCOMM_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb(lv_purifier, lv_spawnPoint, lv_targetPoint);
    }

    UnitKill(lv_u);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_PurificationNova_Finale_Init () {
    libCOMM_gt_CM_Zeratul_PurificationNova_Finale = TriggerCreate("libCOMM_gt_CM_Zeratul_PurificationNova_Finale_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_PurificationNova_Finale, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Zeratul_PurificationNova_Finale, null, "ZeratulPurificationNovaTargettedTarget", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_PurificationNova_Create
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_PurificationNova_Create_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    unit lv_purifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_purifier = UnitBehaviorEffectUnit(lv_u, "ZeratulPurificationNovaTargettedTarget", c_effectUnitCaster, 0);
    UnitBehaviorAdd(lv_u, "ZeratulPurificationNovaCasterFinder", lv_purifier, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_PurificationNova_Create_Init () {
    libCOMM_gt_CM_Zeratul_PurificationNova_Create = TriggerCreate("libCOMM_gt_CM_Zeratul_PurificationNova_Create_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_PurificationNova_Create, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Zeratul_PurificationNova_Create, null, "ZeratulPurificationNovaTargettedTarget", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_PurificationNova_MainImpact
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_PurificationNova_MainImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_target;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((lv_u != lv_target))) {
            return false;
        }

        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_target) == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(lv_p, "ZeratulArtifactTier3_RoboticsBay", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_target, "ZeratulPurificationNovaTargetedMainTargetImmunity", lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_PurificationNova_MainImpact_Init () {
    libCOMM_gt_CM_Zeratul_PurificationNova_MainImpact = TriggerCreate("libCOMM_gt_CM_Zeratul_PurificationNova_MainImpact_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_PurificationNova_MainImpact, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Zeratul_PurificationNova_MainImpact, c_playerAny, "ZeratulPurificationNovaTargettedSearchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulStasisBeamIssueOrder
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulStasisBeamIssueOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerRemoveCooldown(lv_player, CatalogFieldValueGet(c_gameCatalogAbil, "ZeratulMapWideStasisIssueOrder", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_player));
    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCOMM_gv_cM_Zeratul_HeroStructure[lv_player])), libCOMM_gv_cM_Zeratul_HeroStructureUnitGroup[lv_player], OrderTargetingPoint(AbilityCommand("ZeratulMapWideStasis", 0), UnitGetPosition(libCOMM_gv_cM_Zeratul_HeroStructure[lv_player])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulStasisBeamIssueOrder_Init () {
    libCOMM_gt_CM_ZeratulStasisBeamIssueOrder = TriggerCreate("libCOMM_gt_CM_ZeratulStasisBeamIssueOrder_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulStasisBeamIssueOrder, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_ZeratulStasisBeamIssueOrder, null, AbilityCommand("ZeratulMapWideStasisIssueOrder", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulStasisBeam
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulStasisBeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_casterPoint;
    point lv_targetPoint;
    point lv_abilityTargetPoint;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abilityTargetPoint = libCOMM_gf_CM_LaserDrillTargetPoint(lv_targetPoint, lv_casterPoint, RegionPlayableMap(), lv_player);
    if ((lv_abilityTargetPoint != null)) {
        CatalogFieldValueModify(c_gameCatalogEffect, "ZeratulMapWideStasisDummyCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCOMM_gv_cM_LaserDrillDistance[lv_player] / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "ZeratulMapWideStasisCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCOMM_gv_cM_LaserDrillDistance[lv_player] / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "ZeratulMapWideStasisSearch", "AreaArray[" + IntToString(0) + "].RectangleHeight", EventPlayer(), IntToString(libCOMM_gv_cM_LaserDrillDistance[lv_player]), c_upgradeOperationSet);
        UnitCreateEffectPoint(EventUnit(), "ZeratulMapWideStasisSet", lv_abilityTargetPoint);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulStasisBeam_Init () {
    libCOMM_gt_CM_ZeratulStasisBeam = TriggerCreate("libCOMM_gt_CM_ZeratulStasisBeam_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulStasisBeam, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_ZeratulStasisBeam, null, AbilityCommand("ZeratulMapWideStasis", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ProphecyMiss
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_ProphecyMiss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(libCOMM_gf_CM_ZeratulProphecyEventGetUnit(libCOMM_ge_CM_ZeratulProphecyEventUnits_ZeratulUnit), 90.0, 0.0);
    if ((libCOMM_gf_CM_ZeratulProphecyEventGetArtifactNumber() <= libCOMM_gf_CM_Zeratul_GetArtifactLimit(libCOMM_gf_CM_ZeratulProphecyEventGetPlayer())) && (UnitIsValid(libCOMM_gv_cM_ZeratulProphecyArtifact) == false)) {
        libCOMM_gf_CM_Zeratul_PlaceArtifact(libCOMM_gf_CM_ZeratulProphecyEventGetPlayer());
    }

    libCOMM_gf_CM_Zeratul_GiveProphecyHint(libCOMM_gf_CM_Zeratul_ProphecyHintLevel(libCOMM_gf_CM_ZeratulProphecyEventGetArtifactNumber()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_ProphecyMiss_Init () {
    libCOMM_gt_CM_Zeratul_ProphecyMiss = TriggerCreate("libCOMM_gt_CM_Zeratul_ProphecyMiss_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_ProphecyMiss, false);
    libCOMM_gf_CM_ZeratulProphecyEvent(libCOMM_gt_CM_Zeratul_ProphecyMiss, "ZeratulEvent_ArtifactMissed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ProphecyCastStop
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_ProphecyCastStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_cM_ZeratulProphecyHintUnit != null)) {
        libNtve_gf_SendActorMessageToUnit(libCOMM_gv_cM_ZeratulProphecyHintUnit, "Signal Clear");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_ProphecyCastStop_Init () {
    libCOMM_gt_CM_Zeratul_ProphecyCastStop = TriggerCreate("libCOMM_gt_CM_Zeratul_ProphecyCastStop_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_ProphecyCastStop, false);
    libCOMM_gf_CM_ZeratulProphecyEvent(libCOMM_gt_CM_Zeratul_ProphecyCastStop, "ZeratulEvent_ProphecyCastStop");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ProphecyIntro Q
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_ProphecyIntroQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroUnit = libCOMI_gf_GetHeroUnit(libCOMM_gv_cM_ZeratulPlayer, "Zeratul");

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_CM_SendTransmissionCampaignInternal(true, lv_heroUnit, null, SoundLink("PlaceholderSoundFile", -1), StringExternal("Param/Value/lib_COMM_C055FD5B"), StringExternal("Param/Value/lib_COMM_FBA29BB0"), c_transmissionDurationAdd, 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior, "");
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_ProphecyIntroQ_Init () {
    libCOMM_gt_CM_Zeratul_ProphecyIntroQ = TriggerCreate("libCOMM_gt_CM_Zeratul_ProphecyIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ProphecyArtifactPickedUp
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_ProphecyArtifactPickedUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_artfactNumber;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_artfactNumber = libCOMM_gf_CM_ZeratulProphecyEventGetArtifactNumber();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_artfactNumber >= libCOMM_gf_CM_Zeratul_GetArtifactLimit(libCOMM_gf_CM_ZeratulProphecyEventGetPlayer()))) {
        libNtve_gf_SetUpgradeLevelForPlayer(libCOMM_gf_CM_ZeratulProphecyEventGetPlayer(), "ProphecyArtifactsDiscovered", 1);
    }

    libCOMM_gv_cM_ZeratulProphecyArtifactNumber += 1;
    libCOMM_gf_CM_Zeratul_SetProphecyCooldown();
    if ((libCOMM_gv_cM_ZeratulProphecyHintUnit != null)) {
        UnitRemove(libCOMM_gv_cM_ZeratulProphecyHintUnit);
        libCOMM_gv_cM_ZeratulProphecyHintUnit = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_ProphecyArtifactPickedUp_Init () {
    libCOMM_gt_CM_Zeratul_ProphecyArtifactPickedUp = TriggerCreate("libCOMM_gt_CM_Zeratul_ProphecyArtifactPickedUp_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_ProphecyArtifactPickedUp, false);
    libCOMM_gf_CM_ZeratulProphecyEvent(libCOMM_gt_CM_Zeratul_ProphecyArtifactPickedUp, "ZeratulEvent_ArtifactPickedUp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ProphecyArtifactRevealed
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_ProphecyArtifactRevealed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSpawnCount;
    revealer lv_artifactRevealer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CreateRevealerCoop(libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Zeratul", libCOMI_gf_GetAlliedCommandersPlayersCopy()), RegionCircle(UnitGetPosition(libCOMM_gf_CM_ZeratulProphecyEventGetUnit(libCOMM_ge_CM_ZeratulProphecyEventUnits_ArtifactUnit)), 3.0));
    lv_artifactRevealer = VisRevealerLastCreated();
    Wait(5.0, c_timeGame);
    libCOMI_gf_DestroyRevealerCoop(lv_artifactRevealer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_ProphecyArtifactRevealed_Init () {
    libCOMM_gt_CM_Zeratul_ProphecyArtifactRevealed = TriggerCreate("libCOMM_gt_CM_Zeratul_ProphecyArtifactRevealed_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_ProphecyArtifactRevealed, false);
    libCOMM_gf_CM_ZeratulProphecyEvent(libCOMM_gt_CM_Zeratul_ProphecyArtifactRevealed, "ZeratulEvent_ArtifactFound");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ProphecyArtifactPathingSafety
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_ProphecyArtifactPathingSafety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMM_gv_cM_ZeratulProphecyArtifactNumber > 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    if ((UnitIsAlive(libCOMM_gv_cM_ZeratulProphecyArtifact) == true) && (PathingType(UnitGetPosition(libCOMM_gv_cM_ZeratulProphecyArtifact)) != c_pathingGround)) {
        UnitSetPosition(libCOMM_gv_cM_ZeratulProphecyArtifact, UnitTypePlacementFromUnit("ZeratulCoop", UnitGetOwner(libCOMM_gv_cM_ZeratulProphecyArtifact), libCOMM_gv_cM_ZeratulProphecyArtifact, 10.0), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_ProphecyArtifactPathingSafety_Init () {
    libCOMM_gt_CM_Zeratul_ProphecyArtifactPathingSafety = TriggerCreate("libCOMM_gt_CM_Zeratul_ProphecyArtifactPathingSafety_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_ProphecyArtifactPathingSafety, false);
    TriggerAddEventTimePeriodic(libCOMM_gt_CM_Zeratul_ProphecyArtifactPathingSafety, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ProphecyArtifactDebug
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_ProphecyArtifactDebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((EventPlayer() == libCOMM_gv_cM_ZeratulPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMM_gv_cM_ZeratulProphecyArtifactDebug = true;
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMM_0F1A7EA3"), true);
    lv_point = libCOMM_gf_CM_Zeratul_FindArtifactPlacementPointDebug(1, Color(100.00, 100.00, 100.00), Color(62.35, 0.00, 95.69));
    lv_point = libCOMM_gf_CM_Zeratul_FindArtifactPlacementPointDebug(2, Color(7.06, 75.29, 98.04), Color(0.00, 0.00, 100.00));
    lv_point = libCOMM_gf_CM_Zeratul_FindArtifactPlacementPointDebug(3, Color(100.00, 100.00, 0.00), Color(95.69, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_ProphecyArtifactDebug_Init () {
    libCOMM_gt_CM_Zeratul_ProphecyArtifactDebug = TriggerCreate("libCOMM_gt_CM_Zeratul_ProphecyArtifactDebug_Func");
    TriggerAddEventChatMessage(libCOMM_gt_CM_Zeratul_ProphecyArtifactDebug, c_playerAny, "zeratuldebug", true);
    TriggerAddEventChatMessage(libCOMM_gt_CM_Zeratul_ProphecyArtifactDebug, c_playerAny, "zbug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulTopBarWarpTrainStart
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulTopBarWarpTrainStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_builder;
    string lv_topbarBuilderType;
    unit lv_summoned;
    order lv_order;
    unitgroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_builder = EventUnit();
    lv_topbarBuilderType = "CoopCasterZeratul";
    lv_summoned = EventUnitProgressUnit();
    lv_group = libCOMM_gv_cM_ZeratulTopBarRallyUnits[EventPlayer()];

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_builder) == lv_topbarBuilderType))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonKarass") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonZealot") || (libNtve_gf_TriggeringProgressUnitType() == "Mohandar") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonVoidRay") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulHeroDarkArchon") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulDarkArchon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_summoned, "ZeratulTopBarWarpingIn", lv_builder, 1);
    if ((UnitGroupCount(lv_group, c_unitCountAlive) == 0)) {
        lv_order = OrderTargetingPoint(AbilityCommand("RallyZeratulTopBar", 0), Point(0.0, 0.0));
        UnitGroupAdd(lv_group, lv_summoned);
        UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), lv_group, Order(AbilityCommand("RallyZeratulTopBar", 0)), false);
    }
    else {
        UnitIssueOrder(lv_summoned, Order(AbilityCommand("WarpableZeratul", 0)), c_orderQueueAddToFront);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulTopBarWarpTrainStart_Init () {
    libCOMM_gt_CM_ZeratulTopBarWarpTrainStart = TriggerCreate("libCOMM_gt_CM_ZeratulTopBarWarpTrainStart_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulTopBarWarpTrainStart, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_ZeratulTopBarWarpTrainStart, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulTopBarWarpTrainFinish
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulTopBarWarpTrainFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_builder;
    string lv_topbarBuilderType;
    unit lv_summoned;
    string lv_summonedType;
    point lv_point;
    unitgroup lv_ug;
    point lv_rally;
    unit lv_itUnit;
    string lv_instance;
    string lv_minionUnitType;
    int lv_minionUnitAmount;
    string lv_minionUnitUpgrade;
    int lv_p;

    // Automatic Variable Declarations
    string auto72BC2F1D_userType;
    int auto72BC2F1D_i;
    unitgroup auto54B8AC61_g;
    int auto54B8AC61_u;

    // Variable Initialization
    lv_builder = EventUnit();
    lv_topbarBuilderType = "CoopCasterZeratul";
    lv_summoned = EventUnitProgressUnit();
    lv_summonedType = libNtve_gf_TriggeringProgressUnitType();
    lv_point = UnitGetPosition(lv_summoned);
    lv_ug = UnitGroupEmpty();
    lv_rally = UnitRallyPointTargetPoint(lv_summoned, 1, 1);
    lv_p = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_builder) == lv_topbarBuilderType))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonKarass") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonZealot") || (libNtve_gf_TriggeringProgressUnitType() == "Mohandar") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonVoidRay") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulHeroDarkArchon") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulDarkArchon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "VoidRayChargeBeamRangePhase2", "Requirements", libCOMI_gv_vU_PLAYER_HOSTILE, "HaveLegendaryLegionAbilities");
    UnitBehaviorRemove(lv_summoned, "ZeratulTopBarWarpingIn", 1);
    lv_rally = libCOMM_gv_cM_ZeratulTopBarRallyPoint[lv_p];
    lv_point = libNtve_gf_PointOffsetTowardsPoint(lv_point, -2.0, lv_rally);
    auto72BC2F1D_userType = "XAC_ZeratulTopBarCallDown";
    auto72BC2F1D_i = 1;
    for ( ; auto72BC2F1D_i <= UserDataInstanceCount(auto72BC2F1D_userType) ; auto72BC2F1D_i += 1 ) {
        lv_instance = UserDataInstance(auto72BC2F1D_userType, auto72BC2F1D_i);
        if ((UserDataGetGameLink("XAC_ZeratulTopBarCallDown", lv_instance, "MainUnitType", 1) == lv_summonedType)) {
            lv_minionUnitType = UserDataGetGameLink("XAC_ZeratulTopBarCallDown", lv_instance, "UnitToCall", 1);
            lv_minionUnitUpgrade = UserDataGetGameLink("XAC_ZeratulTopBarCallDown", lv_instance, "Upgrade", 1);
            lv_minionUnitAmount = UserDataGetInt("XAC_ZeratulTopBarCallDown", lv_instance, "Amount", TechTreeUpgradeCount(lv_p, lv_minionUnitUpgrade, c_techCountCompleteOnly));
            libNtve_gf_UnitCreateFacingPoint(lv_minionUnitAmount, lv_minionUnitType, 0, lv_p, lv_point, lv_rally);
            UnitGroupAddUnitGroup(lv_ug, UnitLastCreatedGroup());
        }

    }
    UnitGroupAdd(lv_ug, lv_summoned);
    auto54B8AC61_g = lv_ug;
    auto54B8AC61_u = UnitGroupCount(auto54B8AC61_g, c_unitCountAll);
    for (;; auto54B8AC61_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto54B8AC61_g, auto54B8AC61_u);
        if (lv_itUnit == null) { break; }
        libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2(lv_itUnit);
        UnitAbilityEnable(lv_itUnit, "move", true);
        UnitBehaviorAdd(lv_itUnit, "ZeratulTopBarTimedLife", lv_itUnit, 1);
        UnitSetPropertyFixed(lv_itUnit, c_unitPropEnergyPercent, 100.0);
        libNtve_gf_MakeUnitFacePoint(lv_itUnit, lv_rally, 0.0);
    }
    UnitGroupIssueOrder(lv_ug, OrderTargetingPoint(AbilityCommand("attack", 0), lv_rally), c_orderQueueReplace);
    UnitGroupAddUnitGroup(libCOMM_gv_cM_ZeratulTopBarRallyRedirectUnits[lv_p], lv_ug);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulTopBarWarpTrainFinish_Init () {
    libCOMM_gt_CM_ZeratulTopBarWarpTrainFinish = TriggerCreate("libCOMM_gt_CM_ZeratulTopBarWarpTrainFinish_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulTopBarWarpTrainFinish, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_ZeratulTopBarWarpTrainFinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulTopBarRallySet
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulTopBarRallySet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_summoned;
    unitgroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_summoned = EventUnit();
    lv_group = libCOMM_gv_cM_ZeratulTopBarRallyUnits[EventPlayer()];

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_summoned, "ZeratulTopBarWarpingIn", 1);
    UnitGroupClear(lv_group);
    libCOMM_gv_cM_ZeratulTopBarRallyPoint[EventPlayer()] = OrderGetTargetPosition(EventUnitOrder());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulTopBarRallySet_Init () {
    libCOMM_gt_CM_ZeratulTopBarRallySet = TriggerCreate("libCOMM_gt_CM_ZeratulTopBarRallySet_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulTopBarRallySet, false);
    TriggerAddEventUnitOrder(libCOMM_gt_CM_ZeratulTopBarRallySet, null, AbilityCommand("RallyZeratulTopBar", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulTopBarRallyRedirect
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulTopBarRallyRedirect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = libCOMM_gv_cM_ZeratulTopBarRallyRedirectUnits[EventPlayer()];
    lv_point = OrderGetTargetPosition(EventUnitOrder());

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_ZeratulTopBarRallyPoint[EventPlayer()] = lv_point;
    UnitGroupIssueOrder(lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulTopBarRallyRedirect_Init () {
    libCOMM_gt_CM_ZeratulTopBarRallyRedirect = TriggerCreate("libCOMM_gt_CM_ZeratulTopBarRallyRedirect_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulTopBarRallyRedirect, false);
    TriggerAddEventUnitOrder(libCOMM_gt_CM_ZeratulTopBarRallyRedirect, null, AbilityCommand("RallyZeratulTopBarRedirect", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulTopBarRallyCancel
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulTopBarRallyCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(libCOMM_gv_cM_ZeratulTopBarRallyUnits[EventPlayer()], Order(AbilityCommand("WarpableZeratul", 0)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulTopBarRallyCancel_Init () {
    libCOMM_gt_CM_ZeratulTopBarRallyCancel = TriggerCreate("libCOMM_gt_CM_ZeratulTopBarRallyCancel_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulTopBarRallyCancel, false);
    TriggerAddEventTargetModeUpdate(libCOMM_gt_CM_ZeratulTopBarRallyCancel, c_playerAny, AbilityCommand("RallyZeratulTopBar", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Trade
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_Trade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libCOMI_gv_yY_GPCasterUnit[lv_p], "ZeratulTradeTarget", libCOMI_gv_yY_GPCasterUnit[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_Trade_Init () {
    libCOMM_gt_CM_Zeratul_Trade = TriggerCreate("libCOMM_gt_CM_Zeratul_Trade_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_Trade, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Zeratul_Trade, c_playerAny, "ZeratulTrade");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Trade_FullEnergyOn
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_Trade_FullEnergyOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeBehaviorAllow(lv_p, "CannotTrade", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_Trade_FullEnergyOn_Init () {
    libCOMM_gt_CM_Zeratul_Trade_FullEnergyOn = TriggerCreate("libCOMM_gt_CM_Zeratul_Trade_FullEnergyOn_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_Trade_FullEnergyOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Zeratul_Trade_FullEnergyOn, null, "ZeratulTopBarFullEnergy", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Trade_FullEnergyOff
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_Trade_FullEnergyOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeBehaviorAllow(lv_p, "CannotTrade", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_Trade_FullEnergyOff_Init () {
    libCOMM_gt_CM_Zeratul_Trade_FullEnergyOff = TriggerCreate("libCOMM_gt_CM_Zeratul_Trade_FullEnergyOff_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_Trade_FullEnergyOff, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Zeratul_Trade_FullEnergyOff, null, "ZeratulTopBarFullEnergy", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_AutomatedAssimilatorAutoBuild
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_nexus;
    unit lv_itGeyser;

    // Automatic Variable Declarations
    unitgroup auto960A0F35_g;
    int auto960A0F35_u;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_nexus = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventPlayer()) == "Zeratul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto960A0F35_g = UnitGroupSearch(null, 0, UnitGetPosition(lv_nexus), 10.0, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto960A0F35_u = UnitGroupCount(auto960A0F35_g, c_unitCountAll);
    for (;; auto960A0F35_u -= 1) {
        lv_itGeyser = UnitGroupUnitFromEnd(auto960A0F35_g, auto960A0F35_u);
        if (lv_itGeyser == null) { break; }
        if ((UnitHasBehavior2(lv_itGeyser, "GeyserBlockedByRocks") == false)) {
            UnitIssueOrder(lv_nexus, OrderTargetingUnit(AbilityCommand("NexusBuild", 0), lv_itGeyser), c_orderQueueAddToEnd);
            Wait(0.125, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild_Init () {
    libCOMM_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild = TriggerCreate("libCOMM_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild, c_playerAny, "NexusCreateSet");
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild, c_playerAny, "NexusBirthSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ReflectionShield
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_ReflectionShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_missile;
    string lv_effect;
    unit lv_missileCaster;
    unit lv_reflectTarget;
    unit lv_sentry;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_effect = UnitGetOriginalEffect(lv_missile);
    lv_missileCaster = UnitGetOriginalCaster(lv_missile);
    lv_reflectTarget = lv_missileCaster;
    lv_sentry = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_sentry) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(lv_missile, lv_p, true);
    if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_missile, lv_effect, lv_reflectTarget) == true)) {
        UnitCreateEffectUnit(lv_missile, lv_effect, lv_reflectTarget);
    }

    UnitRemove(lv_missile);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_ReflectionShield_Init () {
    libCOMM_gt_CM_Zeratul_ReflectionShield = TriggerCreate("libCOMM_gt_CM_Zeratul_ReflectionShield_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_ReflectionShield, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Zeratul_ReflectionShield, c_playerAny, "ZeratulReflectionShieldMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_DarkTemplarRetreat
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_DarkTemplarRetreat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_darkTemplar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_darkTemplar = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(lv_darkTemplar, "ZeratulDarkTemplarRetreatBlinkTrigger", libNtve_gf_PointOffsetTowardsPoint(EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), -8.0, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)));
    UnitBehaviorAdd(lv_darkTemplar, "ZeratulDarkTemplarRetreatCooldown", lv_darkTemplar, 1);
    UnitBehaviorAdd(lv_darkTemplar, "ZeratulDarkTemplarRetreatRegen", lv_darkTemplar, 1);
    UnitBehaviorAddCooldown(lv_darkTemplar, "ZeratulDarkTemplarRetreatCooldownDisplay", "Behavior/ZeratulDarkTemplarRetreatCooldownDisplay", UnitBehaviorDurationTotal(lv_darkTemplar, "ZeratulDarkTemplarRetreatCooldown"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_DarkTemplarRetreat_Init () {
    libCOMM_gt_CM_Zeratul_DarkTemplarRetreat = TriggerCreate("libCOMM_gt_CM_Zeratul_DarkTemplarRetreat_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_DarkTemplarRetreat, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Zeratul_DarkTemplarRetreat, c_playerAny, "ZeratulDarkTemplarRetreatSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_WarpPrismAutoUnload
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_WarpPrismAutoUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unitgroup lv_offGroup;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_offGroup = UnitGroupEmpty();
    lv_p = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_offGroup = UnitGroup(null, lv_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    libCOMM_gv_cM_Zeratul_VoidRift[lv_p] = lv_unit;
    UnitGroupRemove(lv_offGroup, lv_unit);
    UnitGroupIssueOrder(lv_offGroup, Order(AbilityCommand("ZeratulWarpPrismAutoUnload", 1)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_WarpPrismAutoUnload_Init () {
    libCOMM_gt_CM_Zeratul_WarpPrismAutoUnload = TriggerCreate("libCOMM_gt_CM_Zeratul_WarpPrismAutoUnload_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_WarpPrismAutoUnload, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Zeratul_WarpPrismAutoUnload, null, "ZeratulWarpPrismAutoUnload", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_WarpPrismAutoUnloadOff
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_WarpPrismAutoUnloadOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    order lv_order;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_order = EventUnitOrder();
    lv_p = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMM_gv_cM_Zeratul_VoidRift[lv_p] = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_WarpPrismAutoUnloadOff_Init () {
    libCOMM_gt_CM_Zeratul_WarpPrismAutoUnloadOff = TriggerCreate("libCOMM_gt_CM_Zeratul_WarpPrismAutoUnloadOff_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_WarpPrismAutoUnloadOff, false);
    TriggerAddEventUnitOrder(libCOMM_gt_CM_Zeratul_WarpPrismAutoUnloadOff, null, AbilityCommand("ZeratulWarpPrismAutoUnload", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_WarpPrismSelectRift
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_WarpPrismSelectRift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_p = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(lv_p);
    UnitSelect(libCOMM_gv_cM_Zeratul_VoidRift[lv_p], lv_p, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_WarpPrismSelectRift_Init () {
    libCOMM_gt_CM_Zeratul_WarpPrismSelectRift = TriggerCreate("libCOMM_gt_CM_Zeratul_WarpPrismSelectRift_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_WarpPrismSelectRift, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Zeratul_WarpPrismSelectRift, null, AbilityCommand("ZeratulWarpPrismSelectVoidRift", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_WarpPrismMorphUnloadState
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_WarpPrismMorphUnloadState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((lv_u == libCOMM_gv_cM_Zeratul_VoidRift[UnitGetOwner(lv_u)]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_u, Order(AbilityCommand("ZeratulWarpPrismAutoUnload", 0)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_WarpPrismMorphUnloadState_Init () {
    libCOMM_gt_CM_Zeratul_WarpPrismMorphUnloadState = TriggerCreate("libCOMM_gt_CM_Zeratul_WarpPrismMorphUnloadState_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_WarpPrismMorphUnloadState, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Zeratul_WarpPrismMorphUnloadState, null, AbilityCommand("ZeratulPhasingMode", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Projection_UnitLink
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_Projection_UnitLink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_projection;
    unit lv_source;
    fixed lv_shields;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_projection = EventUnitCreatedUnit();
    lv_source = EventUnit();
    lv_shields = UnitGetPropertyFixed(lv_source, c_unitPropShields, c_unitPropCurrent);
    lv_cooldown = UnitAbilityGetCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_projection, "ZeratulPhaseProjectionChanneling", lv_source, 1);
    UnitBehaviorAdd(lv_projection, "ZeratulPhotonCannonProjection", lv_source, 1);
    UnitBehaviorAdd(lv_source, "ZeratulPhotonCannonProjectionCaster", lv_projection, 1);
    UnitSetPropertyFixed(lv_projection, c_unitPropShields, lv_shields);
    UnitSetPropertyFixed(lv_source, c_unitPropShields, 0.0);
    libNtve_gf_UnitAbilityRemoveCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");
    UnitAbilityAddCooldown(lv_projection, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier", lv_cooldown);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_Projection_UnitLink_Init () {
    libCOMM_gt_CM_Zeratul_Projection_UnitLink = TriggerCreate("libCOMM_gt_CM_Zeratul_Projection_UnitLink_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_Projection_UnitLink, false);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Zeratul_Projection_UnitLink, null, "PhaseCannonProjection", null);
    TriggerAddEventUnitCreated(libCOMM_gt_CM_Zeratul_Projection_UnitLink, null, "ZeratulKhaydarinMonolithProjection", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Projection_TimedLifeFate
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_Projection_TimedLifeFate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_projection;
    unit lv_source;
    fixed lv_shields;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_projection = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_shields = UnitGetPropertyFixed(lv_projection, c_unitPropShields, c_unitPropCurrent);
    lv_cooldown = UnitAbilityGetCooldown(lv_projection, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_source, "ZeratulPhotonCannonProjectionCaster", 1);
    UnitSetPropertyFixed(lv_source, c_unitPropShields, lv_shields);
    UnitCreateEffectUnit(lv_projection, "TimedLifeFate", lv_projection);
    libNtve_gf_UnitAbilityRemoveCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");
    UnitAbilityAddCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier", lv_cooldown);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_Projection_TimedLifeFate_Init () {
    libCOMM_gt_CM_Zeratul_Projection_TimedLifeFate = TriggerCreate("libCOMM_gt_CM_Zeratul_Projection_TimedLifeFate_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_Projection_TimedLifeFate, false);
    TriggerAddEventPlayerEffectUsed(libCOMM_gt_CM_Zeratul_Projection_TimedLifeFate, c_playerAny, "ZeratulPhotonCannonProjectionTimedLifeFateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Projection_Cancel
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_Projection_Cancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_projection;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "ZeratulPhotonCannonProjectionCaster") == true)) {
        lv_projection = UnitBehaviorEffectUnit(EventUnit(), "ZeratulPhotonCannonProjectionCaster", c_effectUnitCaster, 0);
    }
    else {
        lv_projection = EventUnit();
    }
    UnitBehaviorRemove(lv_projection, "ZeratulPhotonCannonProjection", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_Projection_Cancel_Init () {
    libCOMM_gt_CM_Zeratul_Projection_Cancel = TriggerCreate("libCOMM_gt_CM_Zeratul_Projection_Cancel_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_Projection_Cancel, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Zeratul_Projection_Cancel, null, AbilityCommand("ZeratulPhaseCannonProjectionCancel", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_DevolveKills
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_DevolveKills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_killingplayer = UnitGetOwner(libNtve_gf_KillingUnit());

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(libNtve_gf_KillingUnit()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GetPlayerCommanderGameLink(UnitGetOwner(libNtve_gf_KillingUnit())) == "Zeratul"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCOMM_gv_cM_Zeratul_DevolvedUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantityAdd(lv_killingplayer, "CommanderZeratulDevolveKills", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_DevolveKills_Init () {
    libCOMM_gt_CM_Zeratul_DevolveKills = TriggerCreate("libCOMM_gt_CM_Zeratul_DevolveKills_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_DevolveKills, false);
    TriggerAddEventUnitDied(libCOMM_gt_CM_Zeratul_DevolveKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ArtifactRush
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_ArtifactRush_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventPlayer()) == "Zeratul"))) {
            return false;
        }

        if (!((EventUpgradeName() == "ZeratulArtifactTier3"))) {
            return false;
        }

        if (!(((PlayerDifficulty(EventPlayer()) >= 3) == true))) {
            return false;
        }

        if (!((GameGetMissionTime() < 721.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementAward(EventPlayer(), "CommanderZeratulArtifactRush");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_ArtifactRush_Init () {
    libCOMM_gt_CM_Zeratul_ArtifactRush = TriggerCreate("libCOMM_gt_CM_Zeratul_ArtifactRush_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_ArtifactRush, false);
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_Zeratul_ArtifactRush, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulArtifactUpgrades
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulArtifactUpgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUpgradeName() == "ZeratulArtifactTier1") || (EventUpgradeName() == "ZeratulArtifactTier2") || (EventUpgradeName() == "ZeratulArtifactTier3") || (EventUpgradeName() == "CommanderPrestigeZeratulArtifactFragmentsUnlimitedUpgrade")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_CC_CommanderLevel(EventPlayer(), "Zeratul") >= 15)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArtifactTier1ZeratulTalentUpgrade", 1);
    }

    if ((EventUpgradeName() == "ZeratulArtifactTier1")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarZealotSquad", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarVoidRaySquad", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulShieldsLevel1", 1);
    }
    else if ((EventUpgradeName() == "ZeratulArtifactTier2")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarZealotSquad", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarVoidRaySquad", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulShieldsLevel2", 1);
    }
    else if ((EventUpgradeName() == "ZeratulArtifactTier3")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarZealotSquad", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarVoidRaySquad", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulShieldsLevel3", 1);
        if ((libCOMI_gf_CC_CommanderLevel(EventPlayer(), "Zeratul") >= 8)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "VoidRayPrismaticRange", 1);
        }

    }
    else if ((EventUpgradeName() == "CommanderPrestigeZeratulArtifactFragmentsUnlimitedUpgrade")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulWeaponsLevel4", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArmorsLevel4", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulShieldsLevel4", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulArtifactUpgrades_Init () {
    libCOMM_gt_CM_ZeratulArtifactUpgrades = TriggerCreate("libCOMM_gt_CM_ZeratulArtifactUpgrades_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulArtifactUpgrades, false);
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_CM_ZeratulArtifactUpgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulArtifactTriggerUpgrades
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itInstance;
    int lv_p;
    string lv_behavior;
    string lv_itBehavior;
    string lv_itUpgrade;
    int lv_stack;

    // Automatic Variable Declarations
    string autoC3DDD83D_userType;
    int autoC3DDD83D_i;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_behavior = EventUnitBehavior();
    lv_stack = UnitBehaviorCount(EventUnit(), lv_behavior);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetPlayerCommanderGameLink(EventPlayer()) == "Zeratul"))) {
            return false;
        }

        if (!(((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate) || (EventUnitBehaviorChange() == c_unitBehaviorChangeDeactivate)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC3DDD83D_userType = "XAC_TechBehaviorZeratul";
    autoC3DDD83D_i = 1;
    for ( ; autoC3DDD83D_i <= UserDataInstanceCount(autoC3DDD83D_userType) ; autoC3DDD83D_i += 1 ) {
        lv_itInstance = UserDataInstance(autoC3DDD83D_userType, autoC3DDD83D_i);
        lv_itBehavior = UserDataGetGameLink("XAC_TechBehaviorZeratul", lv_itInstance, "Behavior", 1);
        lv_itUpgrade = UserDataGetGameLink("XAC_TechBehaviorZeratul", lv_itInstance, "Upgrade", 1);
        if ((lv_itBehavior == lv_behavior)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_p, lv_itUpgrade, lv_stack);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades_Init () {
    libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades = TriggerCreate("libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier1AndCyberCore", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier1AndDarkShine", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier1AndRoboticsBay", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier2AndCyberCore", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier2AndDarkShine", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier2AndRoboticsBay", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier3AndCyberCore", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier3AndDarkShine", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier3AndRoboticsBay", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_StasisDuration
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_StasisDuration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDuration(EventUnit(), EventUnitBehavior(), RandomInt(1, 10));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_StasisDuration_Init () {
    libCOMM_gt_CM_Zeratul_StasisDuration = TriggerCreate("libCOMM_gt_CM_Zeratul_StasisDuration_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_StasisDuration, false);
    TriggerAddEventUnitBehaviorChange(libCOMM_gt_CM_Zeratul_StasisDuration, null, "ZeratulStasisField", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulAvatarMinimapIcon
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_ZeratulAvatarMinimapIcon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawnedAvatar;
    string lv_spawnedAvatarType;
    int lv_avatarPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnedAvatar = EventUnitProgressUnit();
    lv_spawnedAvatarType = UnitGetType(lv_spawnedAvatar);
    lv_avatarPing = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!(((lv_spawnedAvatarType == "ZeratulXelNagaConstruct") || (lv_spawnedAvatarType == "ZeratulXelNagaConstructCyan")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_spawnedAvatarType == "ZeratulXelNagaConstruct")) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAvatarEssence", UnitGetPosition(lv_spawnedAvatar), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    }
    else {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAvatarForm", UnitGetPosition(lv_spawnedAvatar), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    }
    PingSetUnit(PingLastCreated(), lv_spawnedAvatar);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetTooltip(PingLastCreated(), UnitTypeGetName(lv_spawnedAvatarType));
    lv_avatarPing = PingLastCreated();
    while ((UnitIsAlive(lv_spawnedAvatar) == true)) {
        PingSetRotation(lv_avatarPing, UnitGetFacing(lv_spawnedAvatar));
        Wait(0.125, c_timeGame);
    }
    PingDestroy(lv_avatarPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_ZeratulAvatarMinimapIcon_Init () {
    libCOMM_gt_CM_ZeratulAvatarMinimapIcon = TriggerCreate("libCOMM_gt_CM_ZeratulAvatarMinimapIcon_Func");
    TriggerEnable(libCOMM_gt_CM_ZeratulAvatarMinimapIcon, false);
    TriggerAddEventUnitConstructProgress(libCOMM_gt_CM_ZeratulAvatarMinimapIcon, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_RallySetToZeratul
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_CM_Zeratul_RallySetToZeratul_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroUnit = libCOMI_gf_GetHeroUnit(libCOMI_gf_CC_PlayerOfCommanderInGroupFirst("Zeratul", libCOMI_gf_GetAlliedCommandersPlayersCopy()), "Zeratul");

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventUnitTargetUnit()) == true) && (EventUnitTargetUnit() == lv_heroUnit)) {
        UnitGroupAdd(libCOMM_gv_cM_Zeratul_RalliedGroup, EventUnit());
    }
    else {
        UnitGroupRemove(libCOMM_gv_cM_Zeratul_RalliedGroup, EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_CM_Zeratul_RallySetToZeratul_Init () {
    libCOMM_gt_CM_Zeratul_RallySetToZeratul = TriggerCreate("libCOMM_gt_CM_Zeratul_RallySetToZeratul_Func");
    TriggerEnable(libCOMM_gt_CM_Zeratul_RallySetToZeratul, false);
    TriggerAddEventUnitAbility(libCOMM_gt_CM_Zeratul_RallySetToZeratul, null, AbilityCommand("Rally", 0), c_abilRallyStagePlace, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize UED
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_InitializeUED_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Artanis");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libUEDC_gt_InitializeUEDRace, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_InitializeUED_Init () {
    libCOMM_gt_InitializeUED = TriggerCreate("libCOMM_gt_InitializeUED_Func");
    TriggerAddEventGeneric(libCOMM_gt_InitializeUED, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Dragons
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_InitializeDragons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Artanis");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libDRAG_gt_InitializeDragonsRace, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_InitializeDragons_Init () {
    libCOMM_gt_InitializeDragons = TriggerCreate("libCOMM_gt_InitializeDragons_Func");
    TriggerAddEventGeneric(libCOMM_gt_InitializeDragons, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Hybrids
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_InitializeHybrids_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_players = libCOMI_gf_GetPlayersWithSpecifiedCommanderCC_PlayerOfCommander("Artanis");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNHBR_gt_InitializeNetworkHybridRace, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_InitializeHybrids_Init () {
    libCOMM_gt_InitializeHybrids = TriggerCreate("libCOMM_gt_InitializeHybrids_Func");
    TriggerAddEventGeneric(libCOMM_gt_InitializeHybrids, libCOMI_gv_iNIT_COOP_MISSION);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Keiron
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_InitializeKeiron_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMM_gt_KeironUpgrades, true);
    TriggerEnable(libCOMM_gt_KeironAutoAperture, true);
    TriggerEnable(libCOMM_gt_AegisDied, true);
    TriggerEnable(libCOMM_gt_AegisCreated, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_InitializeKeiron_Init () {
    libCOMM_gt_InitializeKeiron = TriggerCreate("libCOMM_gt_InitializeKeiron_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KeironUpgrades
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_KeironUpgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto306E8244_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto306E8244_val = EventUpgradeName();
    if (auto306E8244_val == "UpgradeKeironLevel01") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel02") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel03") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel04") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel05") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel06") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel07") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel08") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel09") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel10") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel11") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel12") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel13") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel14") {
    }
    else if (auto306E8244_val == "UpgradeKeironLevel15") {
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_KeironUpgrades_Init () {
    libCOMM_gt_KeironUpgrades = TriggerCreate("libCOMM_gt_KeironUpgrades_Func");
    TriggerEnable(libCOMM_gt_KeironUpgrades, false);
    TriggerAddEventUpgradeLevelChanged(libCOMM_gt_KeironUpgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KeironAutoAperture
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_KeironAutoAperture_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_apertureUnit;
    unitgroup lv_apertures;
    int lv_neededEnergy;
    unit lv_bestAperture;
    fixed lv_bestDistance;
    fixed lv_newDistance;
    string lv_weapon;
    string lv_effect;
    fixed lv_damage;

    // Automatic Variable Declarations
    unitgroup autoBB48316C_g;
    int autoBB48316C_u;

    // Variable Initialization
    lv_apertures = UnitGroup("Aperture", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 500.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_neededEnergy = (CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "CargoSize", c_playerAny) * 10);
    lv_bestDistance = 999.0;
    lv_effect = EventUnitDamageEffect();
    lv_damage = EventUnitDamageAmount();

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(lv_apertures, c_unitCountAlive) > 0))) {
            return false;
        }

        if (!(((UnitGetPropertyInt(EventUnit(), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyInt(EventUnit(), c_unitPropShields, c_unitPropCurrent)) < FixedToInt(lv_damage)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBB48316C_g = lv_apertures;
    autoBB48316C_u = UnitGroupCount(autoBB48316C_g, c_unitCountAll);
    for (;; autoBB48316C_u -= 1) {
        lv_apertureUnit = UnitGroupUnitFromEnd(autoBB48316C_g, autoBB48316C_u);
        if (lv_apertureUnit == null) { break; }
        if ((lv_apertureUnit != EventUnit()) && (UnitCheckAbilCmdState(lv_apertureUnit, AbilityCommand("AutoKeyhole", 0), c_cmdStateIsAutoCast) == true) && (UnitGetPropertyFixed(lv_apertureUnit, c_unitPropEnergy, c_unitPropCurrent) >= lv_neededEnergy)) {
            lv_newDistance = DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(lv_apertureUnit));
            if ((lv_newDistance < lv_bestDistance)) {
                lv_bestDistance = lv_newDistance;
                lv_bestAperture = lv_apertureUnit;
            }

        }

    }
    if ((lv_bestAperture != null)) {
        UnitIssueOrder(lv_bestAperture, OrderTargetingUnit(AbilityCommand("AutoKeyhole", 0), EventUnit()), c_orderQueueAddToFront);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_KeironAutoAperture_Init () {
    libCOMM_gt_KeironAutoAperture = TriggerCreate("libCOMM_gt_KeironAutoAperture_Func");
    TriggerEnable(libCOMM_gt_KeironAutoAperture, false);
    TriggerAddEventUnitDamaged(libCOMM_gt_KeironAutoAperture, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AegisDied
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_AegisDied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AegisShielded"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "KeironCitadelAegisTrainHero", "InfoArray[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), 300.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_AegisDied_Init () {
    libCOMM_gt_AegisDied = TriggerCreate("libCOMM_gt_AegisDied_Func");
    TriggerEnable(libCOMM_gt_AegisDied, false);
    TriggerAddEventUnitDied(libCOMM_gt_AegisDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AegisCreated
//--------------------------------------------------------------------------------------------------
bool libCOMM_gt_AegisCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "AegisShielded"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "KeironCitadelAegisTrainHero", "InfoArray[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(EventUnitCreatedUnit()), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMM_gt_AegisCreated_Init () {
    libCOMM_gt_AegisCreated = TriggerCreate("libCOMM_gt_AegisCreated_Func");
    TriggerEnable(libCOMM_gt_AegisCreated, false);
    TriggerAddEventUnitCreated(libCOMM_gt_AegisCreated, null, null, null);
}

void libCOMM_InitTriggers () {
    libCOMM_gt_CM_DebugCommanderCooldowns_Init();
    libCOMM_gt_ShieldColorUnitCreateAlarakFenix_Init();
    libCOMM_gt_ShieldColorUnitMorphAlarakFenix_Init();
    libCOMM_gt_AF_TopBarNotificationsEnableDisable_Init();
    libCOMM_gt_AF_TopBarClicked_Init();
    libCOMM_gt_AF_MouseEntersTopBar_Init();
    libCOMM_gt_AF_MouseExitsTopBar_Init();
    libCOMM_gt_CM_GPReminderAbilityUsed_Init();
    libCOMM_gt_CreepTumorBuild_Init();
    libCOMM_gt_BanelingScourgeDeathrattleScrapDeaths_Init();
    libCOMM_gt_BanelingScourgeEconDrop_Init();
    libCOMM_gt_BanelingScourgeLocusts_Init();
    libCOMM_gt_BanelingScourgeEssenceDrop_Init();
    libCOMM_gt_BanelingScourgeBiomassDrop_Init();
    libCOMM_gt_CM_SoAShiftCheatFailSafeThermal_Init();
    libCOMM_gt_CM_SoAShiftCheatFailSafeHHCallFleet_Init();
    libCOMM_gt_CM_SoAShiftCheatFailSafeNovaBombing_Init();
    libCOMM_gt_CM_SoATargetingForceOff_Init();
    libCOMM_gt_CM_SoATargetingDeactivated_Init();
    libCOMM_gt_CM_SoATargetingPointChosen_Init();
    libCOMM_gt_CM_SoATargetingDirectionChosen_Init();
    libCOMM_gt_CM_SoATargetingEffectFired_Init();
    libCOMM_gt_CM_SoATargetingCancel_Init();
    libCOMM_gt_CM_SoATargetingCancelFromUI_Init();
    libCOMM_gt_CM_SoATargetingCameraShake_Init();
    libCOMM_gt_ChronoAnimSpeedOn_Init();
    libCOMM_gt_ChronoAnimSpeedOff_Init();
    libCOMM_gt_CM_SoAGravitonBombActivated_Init();
    libCOMM_gt_CC_ScoreArtanisKaraxOrbitalStrike_Init();
    libCOMM_gt_CM_SoAOrbitalStrikeActivated_Init();
    libCOMM_gt_CM_SoAOrbitalStrikeActivatedKarax_Init();
    libCOMM_gt_DUT_CommanderAlarak_Init();
    libCOMM_gt_CU_GPAlarakGemPress_Init();
    libCOMM_gt_CM_AbilityTransmissionAlarakEmpower_Init();
    libCOMM_gt_CM_AbilityTransmissionAlarakDeathFleet_Init();
    libCOMM_gt_CM_AbilityTransmissionAlarakOvercharge_Init();
    libCOMM_gt_CM_AbilityTransmissionAlarakSacrifice_Init();
    libCOMM_gt_CC_ScoreAlarakDmg_Init();
    libCOMM_gt_CC_ScoreAlarakHeal_Init();
    libCOMM_gt_CC_ScoreAlarakSacrificeHeal_Init();
    libCOMM_gt_SupplicantWarpTrain_Init();
    libCOMM_gt_SupplicantActualTrain_Init();
    libCOMM_gt_SupplicantWarpFinish_Init();
    libCOMM_gt_SupplicantWarpCancel_Init();
    libCOMM_gt_CM_Alarak_Upgrade_Init();
    libCOMM_gt_CM_Alarak_Sacrific_Scale_Init();
    libCOMM_gt_CM_AlarakLightningStrikes_FlashOn_Init();
    libCOMM_gt_CM_AlarakLightningStrikes_FlashOff_Init();
    libCOMM_gt_CM_AlarakLightningStrikes_Sacriface_Init();
    libCOMM_gt_CM_Alarak_SoulAbsorption_Impact_Init();
    libCOMM_gt_CM_Alarak_SoulAbsorption_Launch_Init();
    libCOMM_gt_CM_Alarak_SoulAbsorption_PrestigeMechBuff_Init();
    libCOMM_gt_CM_Alarak_EmpowerAdd_Init();
    libCOMM_gt_CM_Alarak_EmpowerRemove_Init();
    libCOMM_gt_CM_Alarak_EmpowerWorshiperAdd_Init();
    libCOMM_gt_CM_Alarak_EmpowerWorshiperRemove_Init();
    libCOMM_gt_CM_Alarak_EmpowerUpdate_Init();
    libCOMM_gt_DUT_CommanderArtanis_Init();
    libCOMM_gt_CM_AchievementArtanisSolarBombardmentUsed_Init();
    libCOMM_gt_PM_SoAStrafeActivated_Init();
    libCOMM_gt_PM_SoASuperShieldsActivated_Init();
    libCOMM_gt_CM_AbilityTransmissionArtanisSuperShields_Init();
    libCOMM_gt_CC_ScoreArtanisAbsorb_Init();
    libCOMM_gt_CC_ScoreArtanisBombardment_Init();
    libCOMM_gt_CM_DebugAbathurBiomassReport_Init();
    libCOMM_gt_DUT_CommanderAbathur_Init();
    libCOMM_gt_MM_AbathurChosen_Init();
    libCOMM_gt_MM_BiomassSizeUpdate_Init();
    libCOMM_gt_CM_AbilityTransmissionAbathurMend_Init();
    libCOMM_gt_CC_ScoreAbathurHealing_Init();
    libCOMM_gt_CC_ScoreAbathurMonsterDmg_Init();
    libCOMM_gt_CM_Abathur_ToxicNestDeathFailsafe_Init();
    libCOMM_gt_CM_Abathur_MeleeBonusUpgrade_Init();
    libCOMM_gt_CM_Abathur_BiomassDrop_Init();
    libCOMM_gt_CM_Abathur_BiomassPickup_Init();
    libCOMM_gt_CM_Abathur_BiomassRefund_Init();
    libCOMM_gt_CM_DebugAbathurBiomassLost_Init();
    libCOMM_gt_CM_Abathur_BiomassTrain_Init();
    libCOMM_gt_CM_Abathur_BiomassManualUpdate_Init();
    libCOMM_gt_CM_Abathur_BiomassScaler_Init();
    libCOMM_gt_CM_Abathur_Enemy_Death_Create_Locusts_Init();
    libCOMM_gt_CM_Abathur_ToxicNest_Init();
    libCOMM_gt_CM_Abathur_SwarmHostLocustLaunchCast_Init();
    libCOMM_gt_CM_Abathur_RavagerSpellCooldown_Init();
    libCOMM_gt_DUT_CommanderDehaka_Init();
    libCOMM_gt_CM_AbilityTransmissionDehakaGlevig_Init();
    libCOMM_gt_CM_AbilityTransmissionDehakaMurvar_Init();
    libCOMM_gt_CM_AbilityTransmissionDehakaDakrun_Init();
    libCOMM_gt_CM_AbilityTransmissionDehakaPrimalWurm_Init();
    libCOMM_gt_CM_UnitTransmissionDehakaGlevigConstruct_Init();
    libCOMM_gt_CM_UnitTransmissionDehakaMurvarConstruct_Init();
    libCOMM_gt_CM_UnitTransmissionDehakaDakrunConstruct_Init();
    libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLevel_Init();
    libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderLearn_Init();
    libCOMM_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire_Init();
    libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt_Init();
    libCOMM_gt_CM_AbilityTransmissionDehakaWurmStructureKilled_Init();
    libCOMM_gt_CC_ScoreDehakaDmg_Init();
    libCOMM_gt_CC_ScoreDehakaConsumeSupply_Init();
    libCOMM_gt_CM_DehakaGeneThornsOn_Init();
    libCOMM_gt_CM_DehakaDenReviveFootprintOn_Init();
    libCOMM_gt_CM_DehakaDenReviveFootprintOff_Init();
    libCOMM_gt_CM_DehakaDenReviveEatTextTagDead_Init();
    libCOMM_gt_CM_DehakaDenReviveEatTextTagRevived_Init();
    libCOMM_gt_CM_DehakaDenReviveEatUsed_Init();
    libCOMM_gt_CM_DehakaBossFacingSetting_Init();
    libCOMM_gt_CM_DehakaMutaliskReviveCooldownOn_Init();
    libCOMM_gt_CM_DehakaMammothBreathLookAtStart_Init();
    libCOMM_gt_CM_DehakaMammothBreathLookAtStop_Init();
    libCOMM_gt_CM_DehakaConsumeTimeStopHackOn_Init();
    libCOMM_gt_CM_DehakaConsumeExecuted_Init();
    libCOMM_gt_CM_DehakaConsumeDetachFailSafe_Init();
    libCOMM_gt_CM_DehakaConsumeLaunchFailSafe_Init();
    libCOMM_gt_CM_DehakaConsumeEffectHeroic_Init();
    libCOMM_gt_CM_DehakaConsumeLearnLevel2_Init();
    libCOMM_gt_CM_DehakaConsumeLearnLevel3_Init();
    libCOMM_gt_CM_DehakaLearn_Init();
    libCOMM_gt_CM_DehakaPackLeaderGlevigBuilt_Init();
    libCOMM_gt_CM_DehakaPackLeaderMurvarBuilt_Init();
    libCOMM_gt_CM_DehakaPackLeaderDakrunBuilt_Init();
    libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorAdd_Init();
    libCOMM_gt_CM_DehakaReviveGasWorkerBehaviorRemove_Init();
    libCOMM_gt_CM_DehakaReviveEatButtonClicked_Init();
    libCOMM_gt_CM_DehakaReviveTimerAdjustments_Init();
    libCOMM_gt_CM_DehakaGlevigTimerAdjustments_Init();
    libCOMM_gt_CM_DehakaAutocastSettingsOn_Init();
    libCOMM_gt_CM_DehakaAutocastSettingsOff_Init();
    libCOMM_gt_CM_DehakaAutocastBossSummonStateAdjust_Init();
    libCOMM_gt_CM_Dehaka_EssenceDrop_Init();
    libCOMM_gt_CM_Dehaka_EssencePickup_Init();
    libCOMM_gt_CM_Dehaka_EssenceManualUpdate_Init();
    libCOMM_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs_Init();
    libCOMM_gt_CM_Dehaka_LevelUp_Stage3_Init();
    libCOMM_gt_CM_Dehaka_LevelUp_Stun_Off_Init();
    libCOMM_gt_CM_Dehaka_LevelUp_LearnOrder_Init();
    libCOMM_gt_CM_Dehaka_UnitCostRefund_Init();
    libCOMM_gt_CM_Dehaka_PrestigeClone_Init();
    libCOMM_gt_CM_Dehaka_PrestigeCloneRevive_Init();
    libCOMM_gt_DUT_CommanderFenix_Init();
    libCOMM_gt_CM_AbilityTransmissionFenixCreateTalis_Init();
    libCOMM_gt_CM_AbilityTransmissionFenixCreateKaldalis_Init();
    libCOMM_gt_CM_AbilityTransmissionFenixCreateTaldarin_Init();
    libCOMM_gt_CM_AbilityTransmissionFenixCreateWarbringer_Init();
    libCOMM_gt_CM_AbilityTransmissionFenixCreateMojo_Init();
    libCOMM_gt_CM_AbilityTransmissionFenixCreateClolarion_Init();
    libCOMM_gt_CM_AbilityTransmissionFenixZealotSuit_Init();
    libCOMM_gt_CM_AbilityTransmissionFenixDragoonSuit_Init();
    libCOMM_gt_CM_AbilityTransmissionFenixArbiterSuit_Init();
    libCOMM_gt_CM_AbilityTransmissionFenixMassRecall_Init();
    libCOMM_gt_CM_HeroTransmissionFenixHeroDies_Init();
    libCOMM_gt_CM_HeroTransmissionFenixHeroRepaired_Init();
    libCOMM_gt_CM_HeroTransmissionFenixNameChange_Init();
    libCOMM_gt_CC_ScoreFenixChampionDmg_Init();
    libCOMM_gt_CC_ScoreFenixSuitDmg_Init();
    libCOMM_gt_CM_MasteryFenixResearchCostReduction_Init();
    libCOMM_gt_CM_Fenix_AchievementCarrierAmount_Init();
    libCOMM_gt_CM_Fenix_AchievementCarrierResearched_Init();
    libCOMM_gt_CM_Fenix_TaldarinDetonationStore_Init();
    libCOMM_gt_CM_Fenix_TaldarinDetonationRelease_Init();
    libCOMM_gt_CM_Fenix_HeroSpawn_Init();
    libCOMM_gt_CM_Fenix_HeroSpawnCleanup_Init();
    libCOMM_gt_CM_Fenix_HeroKilled_Init();
    libCOMM_gt_CM_Fenix_SuicideUpdateVital_Init();
    libCOMM_gt_CM_Fenix_ResearchRemoveSuicide_Init();
    libCOMM_gt_CM_Fenix_RallySetToFenix_Init();
    libCOMM_gt_CM_Fenix_ChampionInitialSetup_Init();
    libCOMM_gt_CM_Fenix_ChampionPotentialVoluteerTrained_Init();
    libCOMM_gt_CM_Fenix_ChampionBuildingReBuilt_Init();
    libCOMM_gt_CM_Fenix_ChampionUpgradeResearched_Init();
    libCOMM_gt_CM_Fenix_ChampionTimers_Init();
    libCOMM_gt_CM_Fenix_ChampionMorphed_Init();
    libCOMM_gt_CM_Fenix_ChampionDies_Init();
    libCOMM_gt_CM_Fenix_NetworkedUnitDies_Init();
    libCOMM_gt_CM_Fenix_ProbiusSwap_Init();
    libCOMM_gt_CM_Fenix_AvengingProtocol_BuffExpires_Init();
    libCOMM_gt_CM_Fenix_ConclaiveTrainStart_Init();
    libCOMM_gt_CM_Fenix_ConclaiveTrainStop_Init();
    libCOMM_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger_Init();
    libCOMM_gt_CM_Fenix_ChargedBusterOnCost_Init();
    libCOMM_gt_CM_Fenix_ChargedBusterOffCost_Init();
    libCOMM_gt_CM_FenixAutocastSettingsOn_Init();
    libCOMM_gt_CM_FenixAutocastSettingsOff_Init();
    libCOMM_gt_CM_FenixAutocastSuitSummonStateAdjust_Init();
    libCOMM_gt_CM_AchievementFenixChampionAllExist_Init();
    libCOMM_gt_CM_Fenix_SentryNullShield_Init();
    libCOMM_gt_DUT_CommanderHanHorner_Init();
    libCOMM_gt_CM_AbilityTransmissionHornerFleet_Init();
    libCOMM_gt_CM_AbilityTransmissionHornerStation_Init();
    libCOMM_gt_CM_UnitTransmissionHornerBomberBuild_Init();
    libCOMM_gt_CM_AbilityTransmissionHornerBomberUse_Init();
    libCOMM_gt_CM_AbilityTransmissionHornerBomberReminder_Init();
    libCOMM_gt_CC_ScoreHornerMagMineDmg_Init();
    libCOMM_gt_CC_ScoreHornerScrapPickup_Init();
    libCOMM_gt_CM_Horner_AirFleet_Activated_Init();
    libCOMM_gt_CM_Horner_DeathRattleHellionFearApply_Init();
    libCOMM_gt_CM_Horner_DeathRattle_Reaper_Init();
    libCOMM_gt_CM_Horner_DeathRattle_WidowMine_Init();
    libCOMM_gt_CM_Horner_DeathRattle_Hellion_Init();
    libCOMM_gt_CM_Horner_DeathRattle_Hellbat_Init();
    libCOMM_gt_CM_Horner_DoubleSupplyStun_Init();
    libCOMM_gt_CM_Horner_MTO_Upgrade_Init();
    libCOMM_gt_CM_Horner_HangerFinish_Init();
    libCOMM_gt_CM_Horner_ScrapDrop_Init();
    libCOMM_gt_CM_Horner_ScrapDropForSwannWreckage_Init();
    libCOMM_gt_CM_Horner_ScrapPickup_Init();
    libCOMM_gt_CM_Horner_SupplyAchievement_Init();
    libCOMM_gt_CM_Horner_StarportCreateTechLabOrder_Init();
    libCOMM_gt_CM_Horner_StarportCreateTechLabStart_Init();
    libCOMM_gt_CM_Horner_StarportCreateTechLabFinish_Init();
    libCOMM_gt_CM_Horner_StarportRecreateTechLabOrder_Init();
    libCOMM_gt_CM_Horner_StarportRecreate_Init();
    libCOMM_gt_CM_Horner_StarportFinishCreateTechLabOrder_Init();
    libCOMM_gt_CM_Horner_BomberPlatform_PlatformCreated_Init();
    libCOMM_gt_CM_Horner_BomberPlatform_PlatformDies_Init();
    libCOMM_gt_CM_Horner_BomberPlatform_BomberLaunched_Init();
    libCOMM_gt_CM_Horner_BomberPlatform_BomberReturned_Init();
    libCOMM_gt_CM_Horner_BomberPlatform_BomberRebuilt_Init();
    libCOMM_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected_Init();
    libCOMM_gt_CM_Horner_BomberPlatform_Individual_TargetSelected_Init();
    libCOMM_gt_CM_Horner_VikingTacticalJumpMorph_Init();
    libCOMM_gt_CM_Horner_MagMines_Init();
    libCOMM_gt_DUT_CommanderKarax_Init();
    libCOMM_gt_CM_SoAThermalLanceActivated_Init();
    libCOMM_gt_PM_SoATargetingPurifierBeamOn_Init();
    libCOMM_gt_PM_SoATargetingPurifierBeamOff_Init();
    libCOMM_gt_CM_SoASuperChronoApply_Init();
    libCOMM_gt_CM_SoASuperChronoCleanup_Init();
    libCOMM_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Init();
    libCOMM_gt_CM_AbilityTransmissionKaraxChronoMap_Init();
    libCOMM_gt_CC_ScoreKaraxSolarLance_Init();
    libCOMM_gt_CC_ScoreKaraxPurifierBeam_Init();
    libCOMM_gt_CC_ScoreKaraxChronoProduction_Init();
    libCOMM_gt_CM_MasteryKaraxUnitVitalList_Init();
    libCOMM_gt_CM_KaraxSolarForgeSOAEnergy_Init();
    libCOMM_gt_CM_AchievementKaraxSolarLanceUsed_Init();
    libCOMM_gt_CM_KaraxRepairBeamLimit_Init();
    libCOMM_gt_CM_KaraxUnitReviveBarrier_Init();
    libCOMM_gt_DUT_CommanderKerrigan_Init();
    libCOMM_gt_EnableZerglingReconstruction_Init();
    libCOMM_gt_CM_HatcheryPrimarySearch_Init();
    libCOMM_gt_CM_HatcheryEggModels_Init();
    libCOMM_gt_CM_HatcheryEggBirths_Init();
    libCOMM_gt_ConjoinedVitalRegenOnOff_Init();
    libCOMM_gt_CM_AbilityTransmissionKerriganCrushingGrip_Init();
    libCOMM_gt_CM_AbilityTransmissionKerriganAssimilation_Init();
    libCOMM_gt_CC_ScoreKerriganDmg_Init();
    libCOMM_gt_CC_ScoreKerriganResources_Init();
    libCOMM_gt_CM_MasteryKerriganResearchSpeedCost_Init();
    libCOMM_gt_CM_MasteryKerriganArmyVespeneCostList_Init();
    libCOMM_gt_NYDUS_CREATED_Init();
    libCOMM_gt_NYDUS_CREATED2_Init();
    libCOMM_gt_NYDUS_CREATED3_Init();
    libCOMM_gt_CM_MasteryKerriganInstantReviveCooldown_Init();
    libCOMM_gt_KerriganPsiStrike_Init();
    libCOMM_gt_KerriganEconDrop_Init();
    libCOMM_gt_CM_Kerrigan_WeaponSwap_Init();
    libCOMM_gt_DUT_CommanderMengsk_Init();
    libCOMM_gt_CM_Mengsk_ArtilleryBuilt_Init();
    libCOMM_gt_CM_Mengsk_ArtilleryStarted_Init();
    libCOMM_gt_CM_AbilityTransmissionMengskNuclearAnnihilation_Init();
    libCOMM_gt_CM_AbilityTransmissionMengskDirtyBomb_Init();
    libCOMM_gt_CM_AbilityTransmissionMengskZergCalldown_Init();
    libCOMM_gt_CM_AbilityTransmissionMengskForcedConscription_Init();
    libCOMM_gt_CC_ScoreMengskDamage_Init();
    libCOMM_gt_CM_MasteryMengskRoyalGuardCostList_Init();
    libCOMM_gt_CM_Mengsk_TopBarKills_Init();
    libCOMM_gt_CM_Mengsk_ArtilleryBombardmentTarget_Init();
    libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget_Init();
    libCOMM_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget_Init();
    libCOMM_gt_CM_Mengsk_GlobalAbilityCast_Init();
    libCOMM_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply_Init();
    libCOMM_gt_CM_Mengsk_NuclearAnnihilationSmallNukes_Init();
    libCOMM_gt_CM_Mengsk_ArtilleryBombardmentCargoChange_Init();
    libCOMM_gt_CM_Mengsk_RegisterVeteranUnit_Init();
    libCOMM_gt_CM_Mengsk_RemoveVeteranUnit_Init();
    libCOMM_gt_CM_Mengsk_VeteranDies_Init();
    libCOMM_gt_CM_Mengsk_VeteranDing_Init();
    libCOMM_gt_CM_Mengsk_RegisterPropagandaUnit_Init();
    libCOMM_gt_CM_Mengsk_RemovePropagandaUnit_Init();
    libCOMM_gt_CM_Mengsk_PropagandaUpgraded_Init();
    libCOMM_gt_CM_Mengsk_VeterancyEarned_Init();
    libCOMM_gt_CM_Mengsk_MedivacAirlift_Init();
    libCOMM_gt_CM_Mengsk_MedivacAirliftDing_Init();
    libCOMM_gt_CM_Mengsk_EnlistStart_Init();
    libCOMM_gt_CM_Mengsk_EnlistStop_Init();
    libCOMM_gt_CM_Mengsk_ReturnToWork_Init();
    libCOMM_gt_CM_Mengsk_WeaponPickupRegister_Init();
    libCOMM_gt_CM_Mengsk_WeaponPickerUpperRegister_Init();
    libCOMM_gt_CM_Mengsk_WeaponPickerUpperUnregister_Init();
    libCOMM_gt_CM_Mengsk_WeaponPickup_Init();
    libCOMM_gt_CM_Mengsk_ZergSeekDestroy_Init();
    libCOMM_gt_CM_Mengsk_ZerglingMengskSpawn_Init();
    libCOMM_gt_CM_Mengsk_HydraliskMengskSpawn_Init();
    libCOMM_gt_CM_Mengsk_MutaliskMengskSpawn_Init();
    libCOMM_gt_CM_Mengsk_UltraliskMengskSpawn_Init();
    libCOMM_gt_CM_Mengsk_BunkerDepotDropFillCargo_Init();
    libCOMM_gt_CM_Mengsk_DirtyBombSweetener_Init();
    libCOMM_gt_DUT_CommanderNova_Init();
    libCOMM_gt_CM_NovaRespawnBuyBackCostAdjustment_Init();
    libCOMM_gt_CM_NovaRespawnBuyBack_Init();
    libCOMM_gt_CM_AbilityTransmissionNovaBombingRun_Init();
    libCOMM_gt_CM_AbilityTransmissionNovaTransport_Init();
    libCOMM_gt_CM_AbilityTransmissionNovaDMatrix_Init();
    libCOMM_gt_CC_ScoreNovaDmg_Init();
    libCOMM_gt_CC_ScoreNovaHeal_Init();
    libCOMM_gt_CC_ScoreNovaAbsorb_Init();
    libCOMM_gt_NovaUnitNames_GenerateNameList_Init();
    libCOMM_gt_NovaUnitNames_Assign_Init();
    libCOMM_gt_NovaUnitNames_KillCountUpdate_Init();
    libCOMM_gt_NovaUnitNames_KillCountUpdateLaserTurret_Init();
    libCOMM_gt_CM_NovaGriffinTransportActived_Init();
    libCOMM_gt_CM_NovaGriffinTransportStop_Init();
    libCOMM_gt_CM_NovaGriffinTransportTimeOut_Init();
    libCOMM_gt_CM_NovaGriffinTransportAirBehaviorApplied_Init();
    libCOMM_gt_CM_NovaGriffinTransportGroundBehaviorApplied_Init();
    libCOMM_gt_CM_NovaGriffinTransportTeleportUnload_Init();
    libCOMM_gt_CM_NovaGriffinBombingRunActivated_Init();
    libCOMM_gt_CM_NovaGriffinBombingRunFinish_Init();
    libCOMM_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply_Init();
    libCOMM_gt_CM_NovaPsiStrike_Init();
    libCOMM_gt_CM_Nova_BuildingCompletedTrigger_Init();
    libCOMM_gt_DUT_CommanderRaynor_Init();
    libCOMM_gt_CM_AbilityTransmissionRaynorHyperion_Init();
    libCOMM_gt_CM_AbilityTransmissionRaynorBansheesUsed_Init();
    libCOMM_gt_CC_ScoreRaynorMedicHeal_Init();
    libCOMM_gt_CC_ScoreRaynorHyperionDmg_Init();
    libCOMM_gt_CM_MasteryRaynorResearchCostReduction_Init();
    libCOMM_gt_CM_AchievementRaynorBansheesUsed_Init();
    libCOMM_gt_CM_PrestigeRaynor_AirSupplyChanged_Init();
    libCOMM_gt_CM_HyperionMinimapIconDynamicFacingDisplay_Init();
    libCOMM_gt_DUT_CommanderStetmann_Init();
    libCOMM_gt_CM_GaryDeath_Init();
    libCOMM_gt_CM_GaryUpgradeReminder_Init();
    libCOMM_gt_CC_ScoreStetmannGaryDmg_Init();
    libCOMM_gt_CC_ScoreStetmannOverload_Init();
    libCOMM_gt_CM_MasteryStetmannUpgradeCost_Init();
    libCOMM_gt_CM_Stetmann_EventHook_LairHiveCreated_Init();
    libCOMM_gt_CM_Stetmann_EventHook_LairHiveMorphed_Init();
    libCOMM_gt_CM_Stetmann_GaryTransformAchievement_Init();
    libCOMM_gt_CM_Stetmann_StetelliteOverchargeAllyAchievement_Init();
    libCOMM_gt_CU_StetelliteMaxChargesChanged_Init();
    libCOMM_gt_CU_StetelliteChargesChanged_Init();
    libCOMM_gt_CM_Stetmann_PowerFieldToggle_Init();
    libCOMM_gt_CM_Stetmann_BanelingEnergyDamageBoost_Init();
    libCOMM_gt_CM_Stetmann_BroodLordArmBroodling_Init();
    libCOMM_gt_CM_Stetmann_PowerTowerTechLevel_Init();
    libCOMM_gt_CM_Stetmann_GaryUpgrade_Init();
    libCOMM_gt_CM_Stetmann_Set_Init();
    libCOMM_gt_CM_Stetmann_StetelliteChainCast_Init();
    libCOMM_gt_DUT_CommanderStukov_Init();
    libCOMM_gt_CM_AbilityTransmissionStukovAleksander_Init();
    libCOMM_gt_CM_AbilityTransmissionStukovApocalisk_Init();
    libCOMM_gt_CM_AbilityTransmissionStukovInfestStructure_Init();
    libCOMM_gt_CC_ScoreStukovInfestedDmg_Init();
    libCOMM_gt_CC_ScoreStukovMonstrosityDmg_Init();
    libCOMM_gt_StukovSnareBehaviorOn2_Init();
    libCOMM_gt_CM_Stukov_FullSupplyCheat_Init();
    libCOMM_gt_CM_Stukov_AutoCreepTumor_Init();
    libCOMM_gt_CM_Stukov_InfestedStructureInitialSpawn_Init();
    libCOMM_gt_CM_Stukov_InfestedStructureRebuilt_Init();
    libCOMM_gt_CM_Stukov_HordeWaveSpawner_Init();
    libCOMM_gt_CM_Stukov_HordeWaveCreated_Init();
    libCOMM_gt_CM_Stukov_HordeWaveExploderCreated_Init();
    libCOMM_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Init();
    libCOMM_gt_CM_Stukov_RallyPlaced_Init();
    libCOMM_gt_CM_Stukov_RallyToUnitDies_Init();
    libCOMM_gt_CM_Stukov_InfestedBunkerAutoLoad_Init();
    libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Init();
    libCOMM_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Init();
    libCOMM_gt_CM_Stukov_InfestedBunkerUnloadRally_Init();
    libCOMM_gt_CM_Stukov_InfestedBunkerRegister_Init();
    libCOMM_gt_CM_Stukov_InfestedBunkerInitialSpawn_Init();
    libCOMM_gt_CM_Stukov_UnitCostRefund_Init();
    libCOMM_gt_CM_Stukov_InfestedSiegeTankDeath_Init();
    libCOMM_gt_DUT_CommanderSwann_Init();
    libCOMM_gt_CM_AbilityTransmissionSwannDrone_Init();
    libCOMM_gt_CM_AbilityTransmissionSwannLaserDrill_Init();
    libCOMM_gt_CM_AbilityTransmissionSwannCombatDropUsed_Init();
    libCOMM_gt_CC_ScoreSwannSVHeal_Init();
    libCOMM_gt_CC_ScoreSwannDrillDmg_Init();
    libCOMM_gt_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction_Init();
    libCOMM_gt_CM_LaserDrillBFGActivate_Init();
    libCOMM_gt_CM_LaserDrillNukeActivate_Init();
    libCOMM_gt_CM_LaserDrillBFG_Init();
    libCOMM_gt_LaserDrillBeamSoundRegionClear_Init();
    libCOMM_gt_LaserDrillBeamSoundFiring_Init();
    libCOMM_gt_LaserDrillBFGBeamSoundFiring_Init();
    libCOMM_gt_LaserDrillNukeBeamSoundFiring_Init();
    libCOMM_gt_LaserDrillNukeBeamSoundRegionClear_Init();
    libCOMM_gt_CM_LaserDrillTopbarOrder_Init();
    libCOMM_gt_AdvancedConstructionAutoUser_Init();
    libCOMM_gt_AdvancedConstructionAutoAutoCast_Init();
    libCOMM_gt_CM_AchievementSwannCombatDropUsed_Init();
    libCOMM_gt_SwannVespeneDroneTrigger_Init();
    libCOMM_gt_SwannSiegeTankRebuildController_Init();
    libCOMM_gt_SwannThorRebuildController_Init();
    libCOMM_gt_SwannLaserDrillCallForHelp_Init();
    libCOMM_gt_DUT_CommanderTychus_Init();
    libCOMM_gt_CM_AbilityTransmissionTychusCreateReaper_Init();
    libCOMM_gt_CM_AbilityTransmissionTychusCreateWarhound_Init();
    libCOMM_gt_CM_AbilityTransmissionTychusCreateFirebat_Init();
    libCOMM_gt_CM_AbilityTransmissionTychusCreateMarauder_Init();
    libCOMM_gt_CM_AbilityTransmissionTychusCreateHERC_Init();
    libCOMM_gt_CM_AbilityTransmissionTychusCreateGhost_Init();
    libCOMM_gt_CM_AbilityTransmissionTychusCreatePhantom_Init();
    libCOMM_gt_CM_AbilityTransmissionTychusCreateMedic_Init();
    libCOMM_gt_CM_AbilityTransmissionTychusOdinUse_Init();
    libCOMM_gt_CM_AbilityTransmissionTychusTransportUse_Init();
    libCOMM_gt_CM_AbilityTransmissionTychusTransportReminder_Init();
    libCOMM_gt_CM_UnitTransmissionTychusTransportBuild_Init();
    libCOMM_gt_CM_UnitTransmissionTychusOutlawFirstDeath_Init();
    libCOMM_gt_CM_UnitTransmissionTychusOutlawDeath_Init();
    libCOMM_gt_CM_UnitTransmissionTychusOutlawRevived_Init();
    libCOMM_gt_CM_UnitTransmissionTychusOutlawReviveReminder_Init();
    libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable_Init();
    libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruited_Init();
    libCOMM_gt_CM_UnitTransmissionTychusOutlawRecruitReminder_Init();
    libCOMM_gt_CC_ScoreTychusGrenadeDmg_Init();
    libCOMM_gt_CC_ScoreTychusReaperBombDmg_Init();
    libCOMM_gt_CC_ScoreTychusWarhoundTurretDmg_Init();
    libCOMM_gt_CC_ScoreTychusFirebatOilDmg_Init();
    libCOMM_gt_CC_ScoreTychusHERCImpactDuration_Init();
    libCOMM_gt_CC_ScoreTychusMarauderHeal_Init();
    libCOMM_gt_CC_ScoreTychusGhostDominatedDmg_Init();
    libCOMM_gt_CC_ScoreTychusSpectrePulseDmg_Init();
    libCOMM_gt_CC_ScoreTychusMedicHeal_Init();
    libCOMM_gt_CC_ScoreTychusMedicHealAoE_Init();
    libCOMM_gt_CC_ScoreTychusMedicAbsorb_Init();
    libCOMM_gt_CC_ScoreTychusOdinDmg_Init();
    libCOMM_gt_CU_TychusSquadSpawnCheat_Init();
    libCOMM_gt_CU_TychusSquadMemberTrained_Init();
    libCOMM_gt_CU_TychusSquadMemberReviveQueued_Init();
    libCOMM_gt_CU_TychusSquadMemberReviveCancelled_Init();
    libCOMM_gt_CU_TychusSquadMemberRevived_Init();
    libCOMM_gt_CU_TychusSquadMemberDeath_Init();
    libCOMM_gt_CU_TychusSquadStructureBuilt_Init();
    libCOMM_gt_CU_TychusSquadBarBuilt_Init();
    libCOMM_gt_CU_TychusSquadBarDies_Init();
    libCOMM_gt_CU_TychusSquadBarUpdateProgress_Init();
    libCOMM_gt_CU_TychusMedivacPlatformBuilt_Init();
    libCOMM_gt_CU_TychusMedivacAbilityReady_Init();
    libCOMM_gt_CU_TychusMedivacAbilityUnready_Init();
    libCOMM_gt_CU_TychusEquipmentUpgraded_Init();
    libCOMM_gt__CM_TychusEventHook_Init();
    libCOMM_gt__CM_TychusStructureEventHook_Init();
    libCOMM_gt_CM_TychusHERC_ShieldCooldown_Init();
    libCOMM_gt_CM_TychusHERC_CriticalText_Init();
    libCOMM_gt_CM_Tychus_OdinSummon_Used_Init();
    libCOMM_gt_CM_Tychus_OdinSummon_CameraShake_Init();
    libCOMM_gt_CM_Tychus_Odin_Timeout_Init();
    libCOMM_gt_CM_Tychus_WarhoundFearApply_Init();
    libCOMM_gt_CM_TychusSpecialistTrainingAuraOn_Init();
    libCOMM_gt_CM_TychusSpecialistTrainingAuraOff_Init();
    libCOMM_gt_CM_TychusMedicTransportActived_Init();
    libCOMM_gt_CM_TychusMedicTopBarButton_Init();
    libCOMM_gt_CM_TychusMedicTransportTargetOn_Init();
    libCOMM_gt_CM_TychusMedicTransportTargetOff_Init();
    libCOMM_gt_CM_TychusMedicTransportStop_Init();
    libCOMM_gt_CM_TychusMedicTransportTimeOut_Init();
    libCOMM_gt_CM_TychusMedicTransportAirBehaviorApplied_Init();
    libCOMM_gt_CM_TychusMedicTransportGroundBehaviorApplied_Init();
    libCOMM_gt_CM_TychusMedicTransportTeleportUnload_Init();
    libCOMM_gt_CM_Tychus_HeroQueue_Init();
    libCOMM_gt_CM_Tychus_HeroCancel_Init();
    libCOMM_gt_CM_Tychus_TrainMaxChargesRemove_Init();
    libCOMM_gt_CM_Tychus_HeroReviveUsed_Init();
    libCOMM_gt_CM_Tychus_HeroReviveFailSafe_Init();
    libCOMM_gt_CM_Tychus_OilBombFireDamageResponse_Init();
    libCOMM_gt_CM_Tychus_UltimateAchievement_Init();
    libCOMM_gt_CM_Tychus_HealAchievement_Init();
    libCOMM_gt_CM_Tychus_SnareFailSafe_Init();
    libCOMM_gt_CM_Tychus_TriUnitSpeed_Upgrade_Init();
    libCOMM_gt_CM_Tychus_TriUnitHealth_Upgrade_Init();
    libCOMM_gt_CM_TychusReplaceResearchCenter_Init();
    libCOMM_gt_CM_Tychus_Hero_Charge_Timing_Init();
    libCOMM_gt_CM_Tychus_CalldownOdinDeselect_Init();
    libCOMM_gt_CM_Tychus_CalldownOdinUpdateTarget_Init();
    libCOMM_gt_CM_Tychus_CalldownOdinTychusSelect_Init();
    libCOMM_gt_CM_TychusWarhound_Revive_Init();
    libCOMM_gt_CM_TychusHeroPurchaseDummy_Init();
    libCOMM_gt_CM_TychusReaper_Revive_Init();
    libCOMM_gt_CM_PrestigeTychus_LoneWolfChanged_Init();
    libCOMM_gt_DUT_CommanderVorazun_Init();
    libCOMM_gt_CC_AchievementVorazunTimeStop_Init();
    libCOMM_gt_CM_SoATimeFreezeOn_Init();
    libCOMM_gt_CM_SoATimeFreezeCleanup_Init();
    libCOMM_gt_CM_AbilityTransmissionVorazunTimeStop_Init();
    libCOMM_gt_CC_ScoreVorazunBHManageGroup_Init();
    libCOMM_gt_CC_ScoreVorazunBHDmg_Init();
    libCOMM_gt_CC_ScoreVorazunCloakDmg_Init();
    libCOMM_gt_MindControlSupplyOn_Init();
    libCOMM_gt_MindControlSupplyOff_Init();
    libCOMM_gt_CM_AchievementVorazunBlackHoleUsed_Init();
    libCOMM_gt_CM_MasteryVorazunDarkPylonRadius_Init();
    libCOMM_gt_DUT_CommanderZagara_Init();
    libCOMM_gt_CM_AbilityTransmissionZagaraRoachDrop_Init();
    libCOMM_gt_CC_ScoreZagaraFrenzyDmg_Init();
    libCOMM_gt_CC_ScoreZagaraSuicideDmg_Init();
    libCOMM_gt_CC_ScoreZagaraBanelingBarrage_Init();
    libCOMM_gt_CM_MasteryZagraRoachLifeIncrease_Init();
    libCOMM_gt_RoachDropScale_Init();
    libCOMM_gt_CM_Zagara_WeaponSwap_Init();
    libCOMM_gt_DUT_CommanderZeratul_Init();
    libCOMM_gt_CM_ArtifactTransmission_Hint_Init();
    libCOMM_gt_CM_ArtifactTransmission_PickedUp_Init();
    libCOMM_gt_CM_ArtifactTransmission_ProphecyCast_Init();
    libCOMM_gt_CM_ArtifactTransmission_Upgraded_Init();
    libCOMM_gt_CM_ArtifactTransmission_SelectAbilityReminder_Init();
    libCOMM_gt_CC_ScoreZeratulDmg_Init();
    libCOMM_gt_CC_ScoreZeratulShieldRestore_Init();
    libCOMM_gt_CU_ZeratulProphecyReady_Init();
    libCOMM_gt_CU_ZeratulProphecyNotReady_Init();
    libCOMM_gt_CU_ZeratulArtifactCollected_Init();
    libCOMM_gt_CU_ZeratulArtifactUpgraded_Init();
    libCOMM_gt_CU_ZeratulArtifactUsed_Init();
    libCOMM_gt_CM_Zeratul_Entropic_Spawner_Init();
    libCOMM_gt_CM_Zeratul_Devolve_Init();
    libCOMM_gt_CM_ZeratulProphecyEventVision_Init();
    libCOMM_gt_CM_ZeratulProphecyEventArtifactMissed_Init();
    libCOMM_gt_CM_ZeratulProphecyEventArtifactPickedUp_Init();
    libCOMM_gt_CM_ZeratulProphecyEventArtifactRevealed_Init();
    libCOMM_gt_CM_ZeratulProphecyEventArtifactUsed_Init();
    libCOMM_gt_CM_ZeratulProphecyEventProphecyCast_Init();
    libCOMM_gt_CM_Zeratul_TransportDropOff_Init();
    libCOMM_gt_CM_Zeratul_TransportResetRally_Init();
    libCOMM_gt_CM_Zeratul_PurificationNova_Finale_Init();
    libCOMM_gt_CM_Zeratul_PurificationNova_Create_Init();
    libCOMM_gt_CM_Zeratul_PurificationNova_MainImpact_Init();
    libCOMM_gt_CM_ZeratulStasisBeamIssueOrder_Init();
    libCOMM_gt_CM_ZeratulStasisBeam_Init();
    libCOMM_gt_CM_Zeratul_ProphecyMiss_Init();
    libCOMM_gt_CM_Zeratul_ProphecyCastStop_Init();
    libCOMM_gt_CM_Zeratul_ProphecyIntroQ_Init();
    libCOMM_gt_CM_Zeratul_ProphecyArtifactPickedUp_Init();
    libCOMM_gt_CM_Zeratul_ProphecyArtifactRevealed_Init();
    libCOMM_gt_CM_Zeratul_ProphecyArtifactPathingSafety_Init();
    libCOMM_gt_CM_Zeratul_ProphecyArtifactDebug_Init();
    libCOMM_gt_CM_ZeratulTopBarWarpTrainStart_Init();
    libCOMM_gt_CM_ZeratulTopBarWarpTrainFinish_Init();
    libCOMM_gt_CM_ZeratulTopBarRallySet_Init();
    libCOMM_gt_CM_ZeratulTopBarRallyRedirect_Init();
    libCOMM_gt_CM_ZeratulTopBarRallyCancel_Init();
    libCOMM_gt_CM_Zeratul_Trade_Init();
    libCOMM_gt_CM_Zeratul_Trade_FullEnergyOn_Init();
    libCOMM_gt_CM_Zeratul_Trade_FullEnergyOff_Init();
    libCOMM_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild_Init();
    libCOMM_gt_CM_Zeratul_ReflectionShield_Init();
    libCOMM_gt_CM_Zeratul_DarkTemplarRetreat_Init();
    libCOMM_gt_CM_Zeratul_WarpPrismAutoUnload_Init();
    libCOMM_gt_CM_Zeratul_WarpPrismAutoUnloadOff_Init();
    libCOMM_gt_CM_Zeratul_WarpPrismSelectRift_Init();
    libCOMM_gt_CM_Zeratul_WarpPrismMorphUnloadState_Init();
    libCOMM_gt_CM_Zeratul_Projection_UnitLink_Init();
    libCOMM_gt_CM_Zeratul_Projection_TimedLifeFate_Init();
    libCOMM_gt_CM_Zeratul_Projection_Cancel_Init();
    libCOMM_gt_CM_Zeratul_DevolveKills_Init();
    libCOMM_gt_CM_Zeratul_ArtifactRush_Init();
    libCOMM_gt_CM_ZeratulArtifactUpgrades_Init();
    libCOMM_gt_CM_ZeratulArtifactTriggerUpgrades_Init();
    libCOMM_gt_CM_Zeratul_StasisDuration_Init();
    libCOMM_gt_CM_ZeratulAvatarMinimapIcon_Init();
    libCOMM_gt_CM_Zeratul_RallySetToZeratul_Init();
    libCOMM_gt_InitializeUED_Init();
    libCOMM_gt_InitializeDragons_Init();
    libCOMM_gt_InitializeHybrids_Init();
    libCOMM_gt_InitializeKeiron_Init();
    libCOMM_gt_KeironUpgrades_Init();
    libCOMM_gt_KeironAutoAperture_Init();
    libCOMM_gt_AegisDied_Init();
    libCOMM_gt_AegisCreated_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCOMM_InitLib_completed = false;

void libCOMM_InitLib () {
    if (libCOMM_InitLib_completed) {
        return;
    }

    libCOMM_InitLib_completed = true;

    libCOMM_InitLibraries();
    libCOMM_InitVariables();
    libCOMM_InitTriggers();
}

include "LibCOMI"

