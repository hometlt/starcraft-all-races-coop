include "TriggerLibs/NativeLib"
include "LibCOMI_h"
include "LibARRA_h"

include "LibMISS_h"

//--------------------------------------------------------------------------------------------------
// Library: MISSIONS
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libMISS_InitLibraries () {
    libNtve_InitVariables();
    libCOMI_InitVariables();
    libARRA_InitVariables();
}

// Variable Initialization
bool libMISS_InitVariables_completed = false;

void libMISS_InitVariables () {
    if (libMISS_InitVariables_completed) {
        return;
    }

    libMISS_InitVariables_completed = true;

}

// Functions
void libMISS_gf_BEPreplaceTerrazineTank (point lp_point) {
    // Variable Declarations
    unit lv_terrazineCollection;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = libCOMI_gf_IntegerForTask2(libCOMI_gv_task, "NPC-ALLY");

    // Implementation
    UnitCreate(1, "ScienceFacility", c_unitCreateIgnorePlacement, lv_player, lp_point, PointGetFacing(lp_point));
    lv_terrazineCollection = UnitLastCreated();
    libCOMI_gf_SetUnitInfoTextCampaign(lv_terrazineCollection, null, StringExternal("Param/Value/lib_MISS_694B36E1"), null);
    UnitSetState(lv_terrazineCollection, c_unitStateTargetable, false);
    UnitSetState(lv_terrazineCollection, c_unitStateInvulnerable, true);
    UnitSetState(lv_terrazineCollection, c_unitStateSelectable, false);
    libCOMI_gf_StoreUnitForTask(libCOMI_gv_task, "BE-Tank", lv_terrazineCollection);
}

void libMISS_gf_BEPreplaceTerrazineNodes (string lp_spawns) {
    // Variable Declarations
    int lv_player;
    point lv_point;
    unit lv_unit;
    unitgroup lv_units;

    // Automatic Variable Declarations
    int autoD82B8CE0_size;
    int autoD82B8CE0_i;

    // Variable Initialization
    lv_player = libCOMI_gf_IntegerForTask(libCOMI_gv_global, "NPC-NEUTRAL");
    lv_units = UnitGroupEmpty();

    // Implementation
    autoD82B8CE0_size = libARRA_gf_ListSize( lp_spawns);
    for (autoD82B8CE0_i = 1; autoD82B8CE0_i <= autoD82B8CE0_size; autoD82B8CE0_i += 1 ) {
        lv_point = libARRA_gf_ListPointGet(lp_spawns, autoD82B8CE0_i );
        UnitCreate(1, "TerrazineNodeOff", c_unitCreateIgnorePlacement, lv_player, lv_point, PointGetFacing(lv_point));
        lv_unit = UnitLastCreated();
        UnitSetState(lv_unit, c_unitStateSelectable, false);
        libCOMI_gf_SetUnitInfoTextCampaign(lv_unit, null, StringExternal("Param/Value/lib_MISS_10BA1E4A"), null);
        UnitGroupAdd(lv_units, lv_unit);
        ;
    }
    libCOMI_gf_StoreUnitGroupForTask(libCOMI_gv_task, "BE-Nodes", lv_units);
}

void libMISS_gf_BEPreplaceWhales (string lp_spawns) {
    // Variable Declarations
    int lv_player;
    fixed lv_life;
    point lv_point;
    unit lv_unit;
    unitgroup lv_units;

    // Automatic Variable Declarations
    int auto1FDC1274_size;
    int auto1FDC1274_i;

    // Variable Initialization
    lv_player = libCOMI_gf_IntegerForTask2(libCOMI_gv_task, libCOMI_gv_nPCENEMY);
    lv_life = libCOMI_gf_IntegerForTask2(libCOMI_gv_task, "BE-PRISON-LIFE");
    lv_units = UnitGroupEmpty();

    // Implementation
    auto1FDC1274_size = libARRA_gf_ListSize( lp_spawns);
    for (auto1FDC1274_i = 1; auto1FDC1274_i <= auto1FDC1274_size; auto1FDC1274_i += 1 ) {
        lv_point = libARRA_gf_ListPointGet(lp_spawns, auto1FDC1274_i );
        TerrainShowRegion(RegionRect((PointGetX(lv_point) - 2.0), (PointGetY(lv_point) - 2.0), (PointGetX(lv_point) + 2.0), (PointGetY(lv_point) + 2.0)), false);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blocker4x4", 0, libCOMI_gv_vU_PLAYER_NEUTRAL, lv_point);
        UnitCreate(1, "COOPTerrazineTank", 0, lv_player, lv_point, PointGetFacing(lv_point));
        lv_unit = UnitLastCreated();
        libCOMI_gf_SetUnitInfoTextCampaign(lv_unit, null, StringExternal("Param/Value/lib_MISS_0EBFC1AE"), null);
        UnitSetPropertyFixed(lv_unit, c_unitPropLifeMax, lv_life);
        UnitSetPropertyFixed(lv_unit, c_unitPropLifePercent, 100.0);
        UnitGroupAdd(lv_units, lv_unit);
        ;
    }
    libCOMI_gf_StoreUnitGroupForTask(libCOMI_gv_task, "BE-Whales", lv_units);
}

void libMISS_gf_BETank () {
    // Variable Declarations
    unit lv_terrazineCollection;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_terrazineCollection = libCOMI_gf_UnitForTask2(libCOMI_gv_task, "BE-Tank");

    // Implementation
    libCOMI_gf_CreateTask("be-tank");
    libCOMI_gf_TaskOnTask(libCOMI_gv_task, libCOMI_gv_parent, "Complete", libCOMI_gt_TaskComplete);
    libCOMI_gf_TaskOnTask(libCOMI_gv_parent, libCOMI_gv_task, "Fail", libCOMI_gt_TaskFail);
    libCOMI_gf_TrackerCreateUnit(lv_terrazineCollection, "Tank");
    libCOMI_gf_TaskOnTracker(libCOMI_gv_task, libCOMI_gv_tracker, "Dead", libMISS_gt_BETankDestroyedDefeat);
    libCOMI_gf_TaskStart(libCOMI_gv_task);
}

void libMISS_gf_BEGuard (int lp_limit) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreateTask("be-guard");
    libCOMI_gf_TaskOnTask(libCOMI_gv_parent, libCOMI_gv_task, "Fail", libCOMI_gt_TaskFail);
    libCOMI_gf_TaskOnTask(libCOMI_gv_task, libCOMI_gv_parent, "Complete", libCOMI_gt_TaskComplete);
    libCOMI_gf_StoreIntegerForTask(libCOMI_gv_task, "Goal", lp_limit);
    libCOMI_gf_StoreIntegerForTask(libCOMI_gv_task, "Progress", 0);
    libCOMI_gf_TaskOn(libCOMI_gv_task, "Progress", libMISS_gt_BEPrimaryBotDestroyedWarning);
    libCOMI_gf_TaskOn(libCOMI_gv_task, "Complete", libMISS_gt_BEPrimaryBotDestroyedDefeat);
    libCOMI_gf_TaskObjective(libCOMI_gv_task, "AC_BelshirEscort_Primary02", true);
    libCOMI_gf_TrackerCreate(libCOMI_gf_UnitGroupStoredForTask(libCOMI_gv_parent, "Harvesters"), "Bots-Total");
    libCOMI_gf_TaskOnTracker(libCOMI_gv_task, libCOMI_gv_tracker, "Damage", libMISS_gt_BEScoreCalculateHarvesterDamage);
    libCOMI_gf_TaskOnTracker(libCOMI_gv_task, libCOMI_gv_tracker, "Dead", libMISS_gt_BEPrimaryBotCounterIncrement);
    libCOMI_gf_StoreRealForTask(libCOMI_gv_task, "ScoreScreenHarvesterDamage", 0.0);
    libCOMI_gf_StoreRealForTask(libCOMI_gv_task, "ScoreScreenHarvesterSummaryLife", 0.0);
    libCOMI_gf_TaskOnTask(libCOMI_gv_task, libCOMI_gv_parent, "Start", libCOMI_gt_TaskStart);
}

void libMISS_gf_BEEscort (fixed lp_delay, int lp_goal) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreateTask("be-escort");
    libCOMI_gf_StoreIntegerForTask(libCOMI_gv_task, "Harvesters", 0);
    libCOMI_gf_StoreIntegerForTask(libCOMI_gv_task, "Waves", 0);
    libCOMI_gf_StoreUnitGroupForTask(libCOMI_gv_task, "Harvesters", UnitGroupEmpty());
    libCOMI_gf_StoreIntegerForTask(libCOMI_gv_task, "Goal", lp_goal);
    libCOMI_gf_TaskOn(libCOMI_gv_task, "Progress", libMISS_gt_BEEscortProgress);
    libCOMI_gf_TaskOn(libCOMI_gv_task, "Complete", libMISS_gt_BEEscortCompleted);
    libCOMI_gf_TaskObjective(libCOMI_gv_task, "AC_BelshirEscort_Primary01", true);
    libCOMI_gf_TaskOn(libCOMI_gv_task, "Start", libMISS_gt_BEEscortStart);
    libCOMI_gf_RunMissionVictorySequence6(libCOMI_gv_task, lp_delay, libCOMI_gt_TaskStart);
    if (true) {
    }

}

void libMISS_gf_BEWave (fixed lp_delayMin) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreateTask("be-wave");
    libCOMI_gf_StoreIntegerForTask(libCOMI_gv_task, "Harvesters", 0);
    libCOMI_gf_StoreUnitGroupForTask(libCOMI_gv_task, "Harvesters", UnitGroupEmpty());
    libCOMI_gf_TaskSetPriorityTargets(libCOMI_gv_task, libCOMI_gf_UnitGroupStoredForTask(libCOMI_gv_task, "Harvesters"), libCOMI_ge_Priority_HIGH);
    libCOMI_gf_TaskOn(libCOMI_gv_task, "Complete", libMISS_gt_BEWaveEnded);
    libCOMI_gf_RunMissionVictorySequence6(libCOMI_gv_task, (lp_delayMin * 60.0), libCOMI_gt_TaskStart);
    libCOMI_gf_TaskOnTask(libCOMI_gv_parent, libCOMI_gv_task, "End", libCOMI_gt_TaskIncreaseProgress);
    libCOMI_gf_TaskOn(libCOMI_gv_task, "Start", libMISS_gt_BEWaveStart);
}

void libMISS_gf_BEHarvester (int lp_park, int lp_node) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreateTask("be-harvester");
    libCOMI_gf_TaskIncreaseGoal(libCOMI_gv_parent);
    libCOMI_gf_StoreUnitForTask(libCOMI_gv_task, "Node", UnitGroupUnit(libCOMI_gf_UnitGroupStoredForTask2(libCOMI_gv_task, "BE-Nodes"), lp_node));
    libCOMI_gf_StorePointForTask(libCOMI_gv_task, "Park", PointFromName(("BE-Park " + IntToString(lp_park))));
    libCOMI_gf_StoreIntegerForTask(libCOMI_gv_task, "Route", lp_node);
    libCOMI_gf_TaskOn(libCOMI_gv_task, "Start", libMISS_gt_BEHarvesterController);
    libCOMI_gf_TaskOnTask(libCOMI_gv_task, libCOMI_gv_parent, "Bots", libCOMI_gt_TaskStart);
    libCOMI_gf_TaskOnTask(libCOMI_gv_parent, libCOMI_gv_task, "Complete", libCOMI_gt_TaskIncreaseProgress);
    libCOMI_gf_TaskOnTask(libCOMI_gv_parent, libCOMI_gv_task, "Fail", libCOMI_gt_TaskIncreaseFail);
}

void libMISS_gf_BEWhales () {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreateTask("be-safe-whales");
    libCOMI_gf_StoreIntegerForTask(libCOMI_gv_task, "Whales", 0);
}

void libMISS_gf_BEWhale (int lp_prisonIndex, fixed lp_delayMinutes) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = UnitGroupUnit(libCOMI_gf_UnitGroupStoredForTask2(libCOMI_gv_task, "BE-Whales"), lp_prisonIndex);
    lv_player = libCOMI_gf_IntegerForTask2(libCOMI_gv_task, libCOMI_gv_nPCENEMY);

    // Implementation
    libCOMI_gf_CreateTask("be-whale");
    libCOMI_gf_StoreUnitForTask(libCOMI_gv_task, "Prison", lv_unit);
    libCOMI_gf_TaskEmergency(libCOMI_gv_task, RegionCircle(UnitGetPosition(lv_unit), 18.0), libCOMI_gt_TaskStart);
    libCOMI_gf_RunMissionVictorySequence6(libCOMI_gv_task, (lp_delayMinutes * 60.0), libCOMI_gt_TaskStart);
    libCOMI_gf_TaskOn(libCOMI_gv_task, "Start", libMISS_gt_BWStart);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Simple Drop Attack Example
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_SimpleDropAttackExample_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_SimpleDropAttackExample_Init () {
    libMISS_gt_SimpleDropAttackExample = TriggerCreate("libMISS_gt_SimpleDropAttackExample_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Attacking Q
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_EnemyAttackingQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_EnemyAttackingQ_Init () {
    libMISS_gt_EnemyAttackingQ = TriggerCreate("libMISS_gt_EnemyAttackingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(7.0, c_timeReal);
    TriggerQueueEnter();
    Wait(7.0, c_timeReal);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HybridDetected", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(20.0, c_timeGame);
    TriggerExecute(libMISS_gt_FirstScriptedEvent, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_StartGameQ_Init () {
    libMISS_gt_StartGameQ = TriggerCreate("libMISS_gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_StartAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_missionMechanicPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_StartCoopMissionMechanicAI(lv_missionMechanicPlayer, "None");
    if (true) {
    }
    else {
        AICampaignStart(lv_missionMechanicPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_StartAI_Init () {
    libMISS_gt_StartAI = TriggerCreate("libMISS_gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Scripted Event
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_FirstScriptedEvent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_noSpacesInVariableNames;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_noSpacesInVariableNames = 37;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_AttachReticleEffectAndTextTagOnUnit(libCOMI_ge_CampaginReticleType_ProtossMainObjective, libCOMI_ge_CampaginReticleSize_Medium, null, EventUnit(), "Ref_Center");
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("PrimaryObjectiveRevealed", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    Wait(2.0, c_timeGame);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission("HybridDetected", true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_FirstScriptedEvent_Init () {
    libMISS_gt_FirstScriptedEvent = TriggerCreate("libMISS_gt_FirstScriptedEvent_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Harass
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEHarass_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_TaskTransmission(libCOMI_gv_task, "BotEnemyInboundBE", 2.0, 20.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEHarass_Init () {
    libMISS_gt_BEHarass = TriggerCreate("libMISS_gt_BEHarass_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Attack
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto71838324_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto71838324_val = libCOMI_gf_GetPlayerRaceVO(PlayerGroupPlayer(libCOMI_gf_GetEnemyAIPlayers(), 1));
    if (auto71838324_val == "Prot") {
        libCOMI_gf_TaskTransmission(libCOMI_gv_task, "BotWarpProtossBE", 2.0, 20.0);
    }
    else if (auto71838324_val == "Terr") {
        libCOMI_gf_TaskTransmission(libCOMI_gv_task, "BotDropTerranBE", 2.0, 20.0);
    }
    else if (auto71838324_val == "Zerg") {
        libCOMI_gf_TaskTransmission(libCOMI_gv_task, "BotDropZergBE", 2.0, 20.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEAttack_Init () {
    libMISS_gt_BEAttack = TriggerCreate("libMISS_gt_BEAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Tank Destroyed Defeat
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BETankDestroyedDefeat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_terrazineTank;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_terrazineTank = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_lastEventPoint = UnitGetPosition(lv_terrazineTank);
    libCOMI_gf_TaskFail(libCOMI_gv_task);
    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_SendMissionTransmission("DefeatBE", false, -1);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/lib_MISS_A1F4163A"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(libCOMI_gv_lastEventPoint, 1.5);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BETankDestroyedDefeat_Init () {
    libMISS_gt_BETankDestroyedDefeat = TriggerCreate("libMISS_gt_BETankDestroyedDefeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Score Calculate Harvester Damage
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEScoreCalculateHarvesterDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_StoreRealForTask(libCOMI_gv_task, "ScoreScreenHarvesterDamage", (libCOMI_gf_RealForTask(libCOMI_gv_task, "ScoreScreenHarvesterDamage") + EventUnitDamageAmount()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEScoreCalculateHarvesterDamage_Init () {
    libMISS_gt_BEScoreCalculateHarvesterDamage = TriggerCreate("libMISS_gt_BEScoreCalculateHarvesterDamage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Primary Bot Destroyed Warning
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEPrimaryBotDestroyedWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Goal") - libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Progress")) > 1)) {
        libCOMI_gf_DefferedTransmission("FailureFirstBE", 30.0);
    }
    else {
        libCOMI_gf_DefferedTransmission("FailureSecondBE", 30.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEPrimaryBotDestroyedWarning_Init () {
    libMISS_gt_BEPrimaryBotDestroyedWarning = TriggerCreate("libMISS_gt_BEPrimaryBotDestroyedWarning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Primary Bot Destroyed Defeat
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEPrimaryBotDestroyedDefeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_TaskFail(libCOMI_gv_task);
    libCOMI_gf_BeforeFanfare(c_gameOverDefeat);
    libCOMI_gf_SendMissionTransmission("DefeatBE", false, -1);
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/lib_MISS_EAAB6452"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(libCOMI_gv_lastEventPoint, 1.5);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEPrimaryBotDestroyedDefeat_Init () {
    libMISS_gt_BEPrimaryBotDestroyedDefeat = TriggerCreate("libMISS_gt_BEPrimaryBotDestroyedDefeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Primary Bot Counter Increment
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEPrimaryBotCounterIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_lastEventPoint = UnitGetPosition(EventUnit());
    libCOMI_gf_TaskIncreaseProgress(libCOMI_gv_task);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEPrimaryBotCounterIncrement_Init () {
    libMISS_gt_BEPrimaryBotCounterIncrement = TriggerCreate("libMISS_gt_BEPrimaryBotCounterIncrement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Escort Start
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEEscortStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto4B529D4B_g;
    int auto4B529D4B_var;
    int autoF9DDA3D3_saved_task;
    int autoF9DDA3D3_saved_parent;
    int autoF9DDA3D3_saved_listener;
    int auto6097D6C3_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4B529D4B_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto4B529D4B_var = -1;
    while (true) {
        auto4B529D4B_var = PlayerGroupNextPlayer(auto4B529D4B_g, auto4B529D4B_var);
        if (auto4B529D4B_var < 0) { break; }
        VisRevealArea(auto4B529D4B_var, RegionCircle(libCOMI_gf_PointStoredForTask2(libCOMI_gv_task, "BE-HARVESTER-SPAWN"), 5.0), 0.0, false);
    }
    autoF9DDA3D3_saved_task   = libCOMI_gv_task;
    autoF9DDA3D3_saved_parent = libCOMI_gv_parent;
    autoF9DDA3D3_saved_listener = libCOMI_gv_listener;
    Wait(2.0, c_timeReal ); //Async
    libCOMI_gv_task   = autoF9DDA3D3_saved_task;
    libCOMI_gv_parent = autoF9DDA3D3_saved_parent;
    libCOMI_gv_listener = autoF9DDA3D3_saved_listener;
    if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
    auto6097D6C3_val = RandomInt(1, 3);
    if (auto6097D6C3_val == 1) {
        libCOMI_gf_DefferedTransmission("Intro1BE", 0.0);
    }
    else if (auto6097D6C3_val == 2) {
        libCOMI_gf_DefferedTransmission("Intro2BE", 0.0);
    }
    else if (auto6097D6C3_val == 3) {
        libCOMI_gf_DefferedTransmission("Intro3BE", 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEEscortStart_Init () {
    libMISS_gt_BEEscortStart = TriggerCreate("libMISS_gt_BEEscortStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Escort Progress
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEEscortProgress_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD352FF06_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD352FF06_val = libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Progress");
    if (autoD352FF06_val == 1) {
        libCOMI_gf_SetMissionEffort(10.0);
    }
    else if (autoD352FF06_val == 2) {
        libCOMI_gf_SetMissionEffort(30.0);
        libCOMI_gf_DefferedTransmission("ProgressFirstBE", 30.0);
    }
    else if (autoD352FF06_val == 3) {
        libCOMI_gf_SetMissionEffort(60.0);
        libCOMI_gf_DefferedTransmission("ProgressSecondBE", 30.0);
    }
    else if (autoD352FF06_val == 4) {
        libCOMI_gf_SetMissionEffort(90.0);
        libCOMI_gf_DefferedTransmission("ProgressThirdBE", 30.0);
    }
    else if (autoD352FF06_val == 5) {
        libCOMI_gf_SetMissionEffort(100.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEEscortProgress_Init () {
    libMISS_gt_BEEscortProgress = TriggerCreate("libMISS_gt_BEEscortProgress_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Escort Completed
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEEscortCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_harvestersLiveAverage;
    int lv_botScoreFinal;
    int lv_score;
    point lv_spawnPoint;

    // Automatic Variable Declarations
    playergroup autoEBA89779_g;
    int autoEBA89779_var;

    // Variable Initialization
    lv_harvestersLiveAverage = (libCOMI_gf_RealForTask(libCOMI_gv_task, "ScoreScreenHarvesterSummaryLife") / libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Harvesters"));
    lv_botScoreFinal = CeilingI((75000.0 * (lv_harvestersLiveAverage / 100.0)));
    lv_score = libCOMI_gf_ObjectiveFinalScoreChecker(lv_botScoreFinal, "AC_BelshirEscort_Primary02", 1, true);
    lv_spawnPoint = libCOMI_gf_PointStoredForTask2(libCOMI_gv_task, "BE-HARVESTER-SPAWN");

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_TaskComplete(libCOMI_gv_task);
    autoEBA89779_g = libCOMI_gf_GetTeamPlayers(libCOMI_gf_IntegerForTask2(libCOMI_gv_task, "Team"));
    autoEBA89779_var = -1;
    while (true) {
        autoEBA89779_var = PlayerGroupNextPlayer(autoEBA89779_g, autoEBA89779_var);
        if (autoEBA89779_var < 0) { break; }
        PlayerScoreValueSetFromFixed(autoEBA89779_var, "BelshirEscortHarvesterDamage", libCOMI_gf_RealForTask(libCOMI_gv_task, "ScoreScreenHarvesterDamage"));
        libCOMI_gf_SetMissionScore("MSHarvestingBotLifeRemaining", lv_score, autoEBA89779_var);
    }
    libCOMI_gf_BeforeFanfare(c_gameOverVictory);
    libCOMI_gf_SendVictoryTransmission("VictoryBE");
    libCOMI_gf_DisplayCampaignMessage(libCOMI_gf_HumanPlayers(), libCOMI_ge_CampaignMessageType_MissionVictory, StringExternal("Param/Value/lib_MISS_E06B46F6"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gf_MoveCameraForAllPlayers(lv_spawnPoint, 2.0);
    ;
    libCOMI_gf_AfterFanfare(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEEscortCompleted_Init () {
    libMISS_gt_BEEscortCompleted = TriggerCreate("libMISS_gt_BEEscortCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Wave Start
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEWaveStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto20B486C7_val;
    int autoA28FE404_saved_task;
    int autoA28FE404_saved_parent;
    int autoA28FE404_saved_listener;
    int autoF534AA33_saved_task;
    int autoF534AA33_saved_parent;
    int autoF534AA33_saved_listener;

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_StoreIntegerForTask(libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Parent"), "Waves", (libCOMI_gf_IntegerForTask(libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Parent"), "Waves") + 1));
    auto20B486C7_val = libCOMI_gf_IntegerForTask(libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Parent"), "Waves");
    if (auto20B486C7_val == 1) {
        libCOMI_gf_DefferedTransmission("Geyser1BE", 20.0);
    }
    else if (auto20B486C7_val == 2) {
        libCOMI_gf_DefferedTransmission("Geyser2BE", 20.0);
    }
    else if (auto20B486C7_val == 3) {
        libCOMI_gf_DefferedTransmission("Geyser3BE", 20.0);
    }
    else if (auto20B486C7_val == 4) {
        libCOMI_gf_DefferedTransmission("Geyser4BE", 20.0);
    }
    else if (auto20B486C7_val == 5) {
        libCOMI_gf_DefferedTransmission("Geyser5BE", 20.0);
    }
    else {
    }
    autoA28FE404_saved_task   = libCOMI_gv_task;
    autoA28FE404_saved_parent = libCOMI_gv_parent;
    autoA28FE404_saved_listener = libCOMI_gv_listener;
    Wait(20.0, c_timeReal ); //Async
    libCOMI_gv_task   = autoA28FE404_saved_task;
    libCOMI_gv_parent = autoA28FE404_saved_parent;
    libCOMI_gv_listener = autoA28FE404_saved_listener;
    if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
    libCOMI_gf_TaskEmit(libCOMI_gv_task, "Bots", "");
    autoF534AA33_saved_task   = libCOMI_gv_task;
    autoF534AA33_saved_parent = libCOMI_gv_parent;
    autoF534AA33_saved_listener = libCOMI_gv_listener;
    Wait(40.0, c_timeReal ); //Async
    libCOMI_gv_task   = autoF534AA33_saved_task;
    libCOMI_gv_parent = autoF534AA33_saved_parent;
    libCOMI_gv_listener = autoF534AA33_saved_listener;
    if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
    libCOMI_gf_TaskEmit(libCOMI_gv_task, "Harass", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEWaveStart_Init () {
    libMISS_gt_BEWaveStart = TriggerCreate("libMISS_gt_BEWaveStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Wave Ended
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEWaveEnded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Progress") + libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Fails")) == libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Goal")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Progress") > 0)) {
        libCOMI_gf_DefferedTransmission("BotDeliveryBE", 30.0);
    }

    libCOMI_gf_TaskComplete(libCOMI_gv_task);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEWaveEnded_Init () {
    libMISS_gt_BEWaveEnded = TriggerCreate("libMISS_gt_BEWaveEnded_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Harvester Controller
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEHarvesterController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveTask;
    int lv_escortTask;
    int lv_order;
    unit lv_bot;
    int lv_ping;
    unit lv_terrazineNode;
    bool lv_isFirst;
    int lv_waitInside;
    int lv_waitParking;
    fixed lv_waitCollecting;
    fixed lv_waitBack;
    point lv_spawn;
    point lv_park;
    fixed lv_life;
    unitgroup lv_waveBots;
    unitgroup lv_escortBots;
    int lv_nPCPlayer;
    int lv_route;
    string lv_routePath;

    // Automatic Variable Declarations
    int autoB9C72E1E_saved_task;
    int autoB9C72E1E_saved_parent;
    int auto3CACE34F_saved_task;
    int auto3CACE34F_saved_parent;
    int auto3CACE34F_saved_listener;
    int auto31DBE530_saved_task;
    int auto31DBE530_saved_parent;
    int auto6362DFEC_saved_task;
    int auto6362DFEC_saved_parent;
    int auto6362DFEC_saved_listener;
    int autoACBFA6E7_saved;
    int autoACBFA6E7_l;
    int autoACBFA6E7_a;
    int autoACBFA6E7_b;
    int autoACBFA6E7_s;
    int autoACBFA6E7_i;
    int auto4525B713_saved;
    int autoE9EA46E4_saved_task;
    int autoE9EA46E4_saved_parent;
    int auto80953BE0_saved_task;
    int auto80953BE0_saved_parent;
    int auto80953BE0_saved_listener;
    int auto2FA9CAEB_saved_task;
    int auto2FA9CAEB_saved_parent;
    int autoC95041D9_saved;
    int autoC95041D9_l;
    int autoC95041D9_a;
    int autoC95041D9_b;
    int autoC95041D9_s;
    int autoC95041D9_i;
    int autoCEA52CC4_saved;
    int autoE31CC088_saved_task;
    int autoE31CC088_saved_parent;
    int auto943E7C30_saved_task;
    int auto943E7C30_saved_parent;
    int auto943E7C30_saved_listener;

    // Variable Initialization
    lv_waveTask = libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Parent");
    lv_escortTask = libCOMI_gf_IntegerForTask(lv_waveTask, "Parent");
    lv_order = libCOMI_gf_IntegerForTask(lv_waveTask, "Harvesters");
    lv_ping = c_invalidPingId;
    lv_terrazineNode = libCOMI_gf_UnitForTask(libCOMI_gv_task, "Node");
    lv_isFirst = !(libARRA_gf_IIF13(libCOMI_gf_IntegerForTask(lv_escortTask, "Harvesters")));
    lv_waitInside = 40;
    lv_waitParking = 20;
    lv_waitCollecting = 60.0;
    lv_waitBack = 1.0;
    lv_spawn = libCOMI_gf_PointStoredForTask2(libCOMI_gv_task, "BE-HARVESTER-SPAWN");
    lv_park = libCOMI_gf_PointStoredForTask(libCOMI_gv_task, "Park");
    lv_life = libCOMI_gf_IntegerForTask2(libCOMI_gv_task, "BE-ESCORT-LIFE");
    lv_waveBots = libCOMI_gf_UnitGroupStoredForTask(lv_waveTask, "Harvesters");
    lv_escortBots = libCOMI_gf_UnitGroupStoredForTask(lv_escortTask, "Harvesters");
    lv_nPCPlayer = libCOMI_gf_IntegerForTask2(libCOMI_gv_task, "NPC-ALLY");
    lv_route = libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Route");
    lv_routePath = ("BE-Path " + IntToString(lv_route));

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_StoreIntegerForTask(lv_waveTask, "Harvesters", (libCOMI_gf_IntegerForTask(lv_waveTask, "Harvesters") + 1));
    libCOMI_gf_StoreIntegerForTask(lv_escortTask, "Harvesters", (libCOMI_gf_IntegerForTask(lv_escortTask, "Harvesters") + 1));
    autoB9C72E1E_saved_task   = libCOMI_gv_task;
    autoB9C72E1E_saved_parent = libCOMI_gv_parent;
    libCOMI_gf_SetTriggeringTask(libCOMI_gv_task);
    UnitIssueOrder(lv_terrazineNode, Order(AbilityCommand("TerrazineNode", 0)), c_orderQueueReplace);
    libCOMI_gf_TaskCreateRevealers(libCOMI_gv_task, PlayerGroupAll(), RegionCircle(UnitGetPosition(lv_terrazineNode), 5.0));
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingAlert", UnitGetPosition(lv_terrazineNode), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), lv_waitInside);
    PingSetRotation(PingLastCreated(), 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_MISS_B03F2903"));
    ;
    libCOMI_gv_task   = autoB9C72E1E_saved_task;
    libCOMI_gv_parent = autoB9C72E1E_saved_parent;
    auto3CACE34F_saved_task   = libCOMI_gv_task;
    auto3CACE34F_saved_parent = libCOMI_gv_parent;
    auto3CACE34F_saved_listener = libCOMI_gv_listener;
    Wait((lv_waitInside + (5.0 * lv_order)), c_timeReal ); //Async
    libCOMI_gv_task   = auto3CACE34F_saved_task;
    libCOMI_gv_parent = auto3CACE34F_saved_parent;
    libCOMI_gv_listener = auto3CACE34F_saved_listener;
    if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
    auto31DBE530_saved_task   = libCOMI_gv_task;
    auto31DBE530_saved_parent = libCOMI_gv_parent;
    libCOMI_gf_SetTriggeringTask(libCOMI_gv_task);
    UnitCreate(1, "TerrazineHarvester", 0, lv_nPCPlayer, lv_spawn, 134.96);
    lv_bot = UnitLastCreated();
    UnitGroupAdd(lv_waveBots, lv_bot);
    UnitGroupAdd(lv_escortBots, lv_bot);
    UnitStatusBarOverride(lv_bot, c_unitStatusGroupAll);
    UnitSetPropertyFixed(lv_bot, c_unitPropLifeMax, lv_life);
    UnitSetPropertyFixed(lv_bot, c_unitPropLifePercent, 100.0);
    UnitSetState(lv_bot, c_unitStateTargetable, false);
    UnitSetState(lv_bot, c_unitStateStoppable, false);
    libCOMI_gf_SetUnitInfoTextCampaign(lv_bot, null, StringExternal("Param/Value/lib_MISS_5190C34A"), null);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingObjective", UnitGetPosition(lv_bot), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    lv_ping = PingLastCreated();
    PingSetTooltip(lv_ping, StringExternal("Param/Value/lib_MISS_0D861F58"));
    PingSetUnit(lv_ping, lv_bot);
    libCOMI_gf_StorePingForTask(libCOMI_gv_task, "Target", PingLastCreated());
    libCOMI_gf_StoreUnitForTask(libCOMI_gv_task, "Bot", lv_bot);
    UnitGroupAdd(libCOMI_gf_UnitGroupStoredForTask(libCOMI_gv_task, "Harvesters"), lv_bot);
    libCOMI_gf_TaskSetPriorityTarget(libCOMI_gv_task, lv_bot, libCOMI_ge_Priority_MEDIUM);
    libCOMI_gf_TrackerCreateUnit(lv_bot, "Bot");
    libCOMI_gf_TaskOnTracker(libCOMI_gv_task, libCOMI_gv_tracker, "Damage", libMISS_gt_BEHarvesterUnderAttack);
    libCOMI_gf_TaskOnTracker(libCOMI_gv_task, libCOMI_gv_tracker, "Dead", libMISS_gt_BEHarvesterOnDestroy);
    ;
    libCOMI_gv_task   = auto31DBE530_saved_task;
    libCOMI_gv_parent = auto31DBE530_saved_parent;
    UnitIssueOrder(lv_bot, OrderTargetingPoint(AbilityCommand("move", 0), lv_park), c_orderQueueReplace);
    UnitIssueOrder(lv_bot, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    auto6362DFEC_saved_task   = libCOMI_gv_task;
    auto6362DFEC_saved_parent = libCOMI_gv_parent;
    auto6362DFEC_saved_listener = libCOMI_gv_listener;
    Wait(lv_waitParking, c_timeReal ); //Async
    libCOMI_gv_task   = auto6362DFEC_saved_task;
    libCOMI_gv_parent = auto6362DFEC_saved_parent;
    libCOMI_gv_listener = auto6362DFEC_saved_listener;
    if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
    libCOMI_gf_DefferedTransmission(libARRA_gf_IIF12(lv_isFirst, "BotDepartFirstBE", "BotDepartRepeatBE"), 20.0);
    autoACBFA6E7_saved = libCOMI_gv_task;
    autoACBFA6E7_l = 0;
    while ((PointFromName((lv_routePath + "-" + IntToString((autoACBFA6E7_l + 1)))) != null)) {
        autoACBFA6E7_l += 1;
    }
    if ((autoACBFA6E7_l != 0)) {
        if ((false == false)) {
            autoACBFA6E7_a = 1;
            autoACBFA6E7_b = autoACBFA6E7_l+1;
            autoACBFA6E7_s = 1;
        }
        else {
            autoACBFA6E7_a = autoACBFA6E7_l;
            autoACBFA6E7_b = 0;
            autoACBFA6E7_s = -1;
        }
        autoACBFA6E7_i = autoACBFA6E7_a;
        do{
            libCOMI_gv_pickedPoint = PointFromName(lv_routePath + "-" + IntToString(autoACBFA6E7_i));
            libCOMI_gv_pickedUnits = libNtve_gf_ConvertUnitToUnitGroup(lv_bot);
            libCOMI_gv_pickedPrecision = 1.0;
            libCOMI_gf_TaskRun(libCOMI_gv_task,libCOMI_gt_SendUnitsToPoint,true); // async
            libCOMI_gf_SetTriggeringTask(autoACBFA6E7_saved);
            if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
            autoACBFA6E7_i += autoACBFA6E7_s;
        }
        while(autoACBFA6E7_i != autoACBFA6E7_b);
    }
    auto4525B713_saved = libCOMI_gv_task;
    libCOMI_gv_pickedPoint = PointWithOffsetPolar(UnitGetPosition(lv_terrazineNode), 3.8, UnitGetFacing(lv_terrazineNode));
    libCOMI_gv_pickedUnits = libNtve_gf_ConvertUnitToUnitGroup(lv_bot);
    libCOMI_gv_pickedPrecision = 0.5;
    libCOMI_gf_TaskRun(libCOMI_gv_task,libCOMI_gt_SendUnitsToPoint,true); // async
    libCOMI_gf_SetTriggeringTask(auto4525B713_saved);
    if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
    autoE9EA46E4_saved_task   = libCOMI_gv_task;
    autoE9EA46E4_saved_parent = libCOMI_gv_parent;
    libCOMI_gf_SetTriggeringTask(libCOMI_gv_task);
    libCOMI_gf_DefferedTransmission(libARRA_gf_IIF12(lv_isFirst, "BotHarvestFirstBE", "BotHarvestRepeatBE"), 20.0);
    UnitAbilityEnable(lv_bot, "attack", false);
    UnitIssueOrder(lv_bot, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitIssueOrder(lv_bot, OrderTargetingUnit(AbilityCommand("TerrazineHarvesterExtract", 0), lv_terrazineNode), c_orderQueueAddToEnd);
    UnitAbilityEnable(lv_bot, "attack", true);
    UnitBehaviorAdd(lv_bot, "ProgressBar", lv_bot, 1);
    UnitBehaviorSetDuration(lv_bot, "ProgressBar", lv_waitCollecting);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_terrazineNode), c_animNameDefault, "Stand Angry", c_animFlagPlayForever, c_animTimeDefault);
    UnitAbilityEnable(lv_bot, "move", false);
    ;
    libCOMI_gv_task   = autoE9EA46E4_saved_task;
    libCOMI_gv_parent = autoE9EA46E4_saved_parent;
    auto80953BE0_saved_task   = libCOMI_gv_task;
    auto80953BE0_saved_parent = libCOMI_gv_parent;
    auto80953BE0_saved_listener = libCOMI_gv_listener;
    Wait(lv_waitCollecting, c_timeReal ); //Async
    libCOMI_gv_task   = auto80953BE0_saved_task;
    libCOMI_gv_parent = auto80953BE0_saved_parent;
    libCOMI_gv_listener = auto80953BE0_saved_listener;
    if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
    auto2FA9CAEB_saved_task   = libCOMI_gv_task;
    auto2FA9CAEB_saved_parent = libCOMI_gv_parent;
    libCOMI_gf_SetTriggeringTask(libCOMI_gv_task);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_terrazineNode), c_animNameDefault, "Stand Default", c_animFlagPlayForever, c_animTimeDefault);
    UnitIssueOrder(lv_terrazineNode, Order(AbilityCommand("TerrazineNodeOff", 0)), c_orderQueueReplace);
    libCOMI_gf_TaskDestroyRevealers(libCOMI_gv_task);
    UnitAbilityEnable(lv_bot, "move", true);
    ;
    libCOMI_gv_task   = auto2FA9CAEB_saved_task;
    libCOMI_gv_parent = auto2FA9CAEB_saved_parent;
    libCOMI_gf_DefferedTransmission(libARRA_gf_IIF12(lv_isFirst, "BotReturnFirstBE", "BotReturnRepeatBE"), 20.0);
    autoC95041D9_saved = libCOMI_gv_task;
    autoC95041D9_l = 0;
    while ((PointFromName((lv_routePath + "-" + IntToString((autoC95041D9_l + 1)))) != null)) {
        autoC95041D9_l += 1;
    }
    if ((autoC95041D9_l != 0)) {
        if ((true == false)) {
            autoC95041D9_a = 1;
            autoC95041D9_b = autoC95041D9_l+1;
            autoC95041D9_s = 1;
        }
        else {
            autoC95041D9_a = autoC95041D9_l;
            autoC95041D9_b = 0;
            autoC95041D9_s = -1;
        }
        autoC95041D9_i = autoC95041D9_a;
        do{
            libCOMI_gv_pickedPoint = PointFromName(lv_routePath + "-" + IntToString(autoC95041D9_i));
            libCOMI_gv_pickedUnits = libNtve_gf_ConvertUnitToUnitGroup(lv_bot);
            libCOMI_gv_pickedPrecision = 1.0;
            libCOMI_gf_TaskRun(libCOMI_gv_task,libCOMI_gt_SendUnitsToPoint,true); // async
            libCOMI_gf_SetTriggeringTask(autoC95041D9_saved);
            if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
            autoC95041D9_i += autoC95041D9_s;
        }
        while(autoC95041D9_i != autoC95041D9_b);
    }
    autoCEA52CC4_saved = libCOMI_gv_task;
    libCOMI_gv_pickedPoint = lv_spawn;
    libCOMI_gv_pickedUnits = libNtve_gf_ConvertUnitToUnitGroup(lv_bot);
    libCOMI_gv_pickedPrecision = 0.5;
    libCOMI_gf_TaskRun(libCOMI_gv_task,libCOMI_gt_SendUnitsToPoint,true); // async
    libCOMI_gf_SetTriggeringTask(autoCEA52CC4_saved);
    if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
    autoE31CC088_saved_task   = libCOMI_gv_task;
    autoE31CC088_saved_parent = libCOMI_gv_parent;
    libCOMI_gf_SetTriggeringTask(libCOMI_gv_task);
    auto943E7C30_saved_task   = libCOMI_gv_task;
    auto943E7C30_saved_parent = libCOMI_gv_parent;
    auto943E7C30_saved_listener = libCOMI_gv_listener;
    Wait(lv_waitBack, c_timeReal ); //Async
    libCOMI_gv_task   = auto943E7C30_saved_task;
    libCOMI_gv_parent = auto943E7C30_saved_parent;
    libCOMI_gv_listener = auto943E7C30_saved_listener;
    if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
    libCOMI_gf_StoreRealForTask(lv_escortTask, "ScoreScreenHarvesterSummaryLife", (libCOMI_gf_RealForTask(lv_escortTask, "ScoreScreenHarvesterSummaryLife") + UnitGetPropertyFixed(lv_bot, c_unitPropLifePercent, c_unitPropCurrent)));
    UnitRemove(lv_bot);
    libCOMI_gf_TaskComplete(libCOMI_gv_task);
    ;
    libCOMI_gv_task   = autoE31CC088_saved_task;
    libCOMI_gv_parent = autoE31CC088_saved_parent;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEHarvesterController_Init () {
    libMISS_gt_BEHarvesterController = TriggerCreate("libMISS_gt_BEHarvesterController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Harvester - Under Attack
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEHarvesterUnderAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bot;

    // Automatic Variable Declarations
    int autoD4E286BA_saved_task;
    int autoD4E286BA_saved_parent;
    int autoD4E286BA_saved_listener;

    // Variable Initialization
    lv_bot = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_ListenerOff(libCOMI_gv_listener);
    libCOMI_gf_ShowHidePingCoop(libCOMI_gf_PingStoredForTask(libCOMI_gv_task, "Target"), false);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingAlert", UnitGetPosition(lv_bot), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetUnit(PingLastCreated(), lv_bot);
    libCOMI_gf_StorePingForTask(libCOMI_gv_task, "Alert", PingLastCreated());
    autoD4E286BA_saved_task     = libCOMI_gv_task;
    autoD4E286BA_saved_parent   = libCOMI_gv_parent;
    autoD4E286BA_saved_listener = libCOMI_gv_listener;
    do {
        if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
        libCOMI_gf_SetTriggeringTask(libCOMI_gv_task);
        libCOMI_gf_DefferedTransmission("BotUnderAttackBE", 15.0);
        Wait(0.25, c_timeReal); //Async
    }
    while (((AIGetTime() - AILastAttack(lv_bot)) < 5.0));
    libCOMI_gv_task   = autoD4E286BA_saved_task;
    libCOMI_gv_parent = autoD4E286BA_saved_parent;
    libCOMI_gv_listener = autoD4E286BA_saved_listener;
    if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
    libCOMI_gf_DestroyPingCoop(libCOMI_gf_PingStoredForTask(libCOMI_gv_task, "Alert"));
    libCOMI_gf_ShowHidePingCoop(libCOMI_gf_PingStoredForTask(libCOMI_gv_task, "Target"), true);
    libCOMI_gf_ListenerOn(libCOMI_gv_listener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEHarvesterUnderAttack_Init () {
    libMISS_gt_BEHarvesterUnderAttack = TriggerCreate("libMISS_gt_BEHarvesterUnderAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BE Harvester - On Destroy
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BEHarvesterOnDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_terrazineNode;

    // Automatic Variable Declarations
    int autoDE6EB59D_saved_task;
    int autoDE6EB59D_saved_parent;
    int autoDE6EB59D_saved_listener;

    // Variable Initialization
    lv_terrazineNode = libCOMI_gf_UnitForTask(libCOMI_gv_task, "Node");

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_TaskFail(libCOMI_gv_task);
    autoDE6EB59D_saved_task   = libCOMI_gv_task;
    autoDE6EB59D_saved_parent = libCOMI_gv_parent;
    autoDE6EB59D_saved_listener = libCOMI_gv_listener;
    Wait(3.0, c_timeReal ); //Async
    libCOMI_gv_task   = autoDE6EB59D_saved_task;
    libCOMI_gv_parent = autoDE6EB59D_saved_parent;
    libCOMI_gv_listener = autoDE6EB59D_saved_listener;
    if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
    UnitIssueOrder(lv_terrazineNode, Order(AbilityCommand("TerrazineNodeOff", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BEHarvesterOnDestroy_Init () {
    libMISS_gt_BEHarvesterOnDestroy = TriggerCreate("libMISS_gt_BEHarvesterOnDestroy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BW Start
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BWStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_whale;
    bool lv_isFirst;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_whale = libCOMI_gf_UnitForTask(libCOMI_gv_task, "Prison");
    lv_isFirst = !(libARRA_gf_IIF13(libCOMI_gf_IntegerForTask(libCOMI_gv_parent, "Whales")));

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_StoreIntegerForTask(libCOMI_gv_parent, "Whales", (libCOMI_gf_IntegerForTask(libCOMI_gv_parent, "Whales") + 1));
    libCOMI_gf_DefferedTransmission(libARRA_gf_IIF12(lv_isFirst, "BonusLocatedFirstBE", "BonusLocatedRepeatBE"), 20.0);
    libNtve_gf_SendActorMessageToUnit(lv_whale, "Signal WorkStart");
    libCOMI_gf_CreateObjectivePingAC(libCOMI_ge_ObjectivePingType_Secondary, UnitGetPosition(lv_whale), StringExternal("Param/Value/lib_MISS_BA21FFBF"));
    libCOMI_gf_StorePingForTask(libCOMI_gv_task, "Target", PingLastCreated());
    libCOMI_gf_TaskObjective(libCOMI_gv_task, "AC_BelshirEscort_Bonus01", false);
    libCOMI_gf_TrackerCreateUnit(lv_whale, "Whale");
    libCOMI_gf_TaskOnTracker(libCOMI_gv_task, libCOMI_gv_tracker, "Damage", libMISS_gt_BWPrisonAttacked);
    libCOMI_gf_TaskOnTracker(libCOMI_gv_task, libCOMI_gv_tracker, "Dead", libMISS_gt_BWPrisonDestroyedComplete);
    libCOMI_gf_TaskSetPriorityTarget(libCOMI_gv_task, lv_whale, libCOMI_ge_Priority_LOW);
    libCOMI_gf_RunMissionVictorySequence7(libCOMI_gv_task, (4.0 * 60.0), libMISS_gt_BWTimerExpiredFail);
    libCOMI_gf_RunMissionVictorySequence4(libCOMI_gv_task, 1.0, libMISS_gt_BWUpdate);
    libCOMI_gf_StoreIntegerForTask(libCOMI_gv_task, "Stage", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BWStart_Init () {
    libMISS_gt_BWStart = TriggerCreate("libMISS_gt_BWStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BW Update
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BWUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timer;
    int lv_stage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = libCOMI_gf_TimerStoredForTask(libCOMI_gv_task, "Expire");
    lv_stage = libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Stage");

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_stage == 1) && (TimerGetRemaining(lv_timer) <= 150.0)) {
        libCOMI_gf_DefferedTransmission("BonusExpireFirstBE", 0.0);
        libCOMI_gf_StoreIntegerForTask(libCOMI_gv_task, "Stage", 2);
    }

    if ((lv_stage == 2) && (TimerGetRemaining(lv_timer) <= 60.0)) {
        libCOMI_gf_DefferedTransmission("BonusExpireRepeatBE", 0.0);
        libCOMI_gf_StoreIntegerForTask(libCOMI_gv_task, "Stage", 3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BWUpdate_Init () {
    libMISS_gt_BWUpdate = TriggerCreate("libMISS_gt_BWUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BW Timer Expired (Fail)
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BWTimerExpiredFail_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_whale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_whale = libCOMI_gf_UnitForTask(libCOMI_gv_task, "Prison");

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DefferedTransmission("BonusLostBE", 20.0);
    VisRevealerCreate(1, RegionCircle(UnitGetPosition(lv_whale), 3.0));
    UnitCreateEffectUnit(lv_whale, "COOPTerrazineTankTimeoutDeath", lv_whale);
    libCOMI_gf_TaskFail(libCOMI_gv_task);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BWTimerExpiredFail_Init () {
    libMISS_gt_BWTimerExpiredFail = TriggerCreate("libMISS_gt_BWTimerExpiredFail_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BW Prison Attacked
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BWPrisonAttacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tracker;
    timer lv_timer;
    unit lv_whale;

    // Automatic Variable Declarations
    int auto95B8856A_saved_task;
    int auto95B8856A_saved_parent;
    int auto95B8856A_saved_listener;
    int autoEF45ECBA_saved_task;
    int autoEF45ECBA_saved_parent;
    int autoEF45ECBA_saved_listener;

    // Variable Initialization
    lv_timer = libCOMI_gf_TimerStoredForTask(libCOMI_gv_task, "Expire");
    lv_whale = libCOMI_gf_UnitForTask(libCOMI_gv_task, "Prison");

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_ListenerOff(libCOMI_gv_listener);
    TimerPause(lv_timer, true);
    auto95B8856A_saved_task   = libCOMI_gv_task;
    auto95B8856A_saved_parent = libCOMI_gv_parent;
    auto95B8856A_saved_listener = libCOMI_gv_listener;
    Wait(3.0, c_timeReal ); //Async
    libCOMI_gv_task   = auto95B8856A_saved_task;
    libCOMI_gv_parent = auto95B8856A_saved_parent;
    libCOMI_gv_listener = auto95B8856A_saved_listener;
    if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
    autoEF45ECBA_saved_task     = libCOMI_gv_task;
    autoEF45ECBA_saved_parent   = libCOMI_gv_parent;
    autoEF45ECBA_saved_listener = libCOMI_gv_listener;
    do {
        if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
        libCOMI_gf_SetTriggeringTask(libCOMI_gv_task);
        Wait(0.25, c_timeReal); //Async
    }
    while (((AIGetTime() - AILastAttack(lv_whale)) < 3.0));
    libCOMI_gv_task   = autoEF45ECBA_saved_task;
    libCOMI_gv_parent = autoEF45ECBA_saved_parent;
    libCOMI_gv_listener = autoEF45ECBA_saved_listener;
    if(libCOMI_gf_TaskActive(libCOMI_gv_task) == false){return true;}
    TimerPause(lv_timer, false);
    libCOMI_gf_ListenerOn(libCOMI_gv_listener);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BWPrisonAttacked_Init () {
    libMISS_gt_BWPrisonAttacked = TriggerCreate("libMISS_gt_BWPrisonAttacked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BW Prison Destroyed (Complete)
//--------------------------------------------------------------------------------------------------
bool libMISS_gt_BWPrisonDestroyedComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_whale;

    // Automatic Variable Declarations
    playergroup auto1B861755_g;
    int auto1B861755_var;

    // Variable Initialization
    lv_whale = libCOMI_gf_UnitForTask(libCOMI_gv_task, "Prison");

    // Actions
    if (!runActions) {
        return true;
    }

    auto1B861755_g = libCOMI_gf_GetTeamPlayers(libCOMI_gf_IntegerForTask2(libCOMI_gv_task, "Team"));
    auto1B861755_var = -1;
    while (true) {
        auto1B861755_var = PlayerGroupNextPlayer(auto1B861755_g, auto1B861755_var);
        if (auto1B861755_var < 0) { break; }
        libCOMI_gf_SetMissionScore("MSBonusSpeed", libCOMI_gf_ObjectiveFinalScoreChecker(10000, "AC_BelshirEscort_Bonus01", libCOMI_gf_IntegerForTask(libCOMI_gf_IntegerForTask(libCOMI_gv_task, "Parent"), "Progress"), true), auto1B861755_var);
    }
    libCOMI_gf_DefferedTransmission("BonusCompleteBE", 20.0);
    VisRevealerCreate(1, RegionCircle(UnitGetPosition(lv_whale), 3.0));
    libCOMI_gf_TaskComplete(libCOMI_gv_task);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMISS_gt_BWPrisonDestroyedComplete_Init () {
    libMISS_gt_BWPrisonDestroyedComplete = TriggerCreate("libMISS_gt_BWPrisonDestroyedComplete_Func");
}

void libMISS_InitTriggers () {
    libMISS_gt_SimpleDropAttackExample_Init();
    libMISS_gt_EnemyAttackingQ_Init();
    libMISS_gt_StartGameQ_Init();
    libMISS_gt_StartAI_Init();
    libMISS_gt_FirstScriptedEvent_Init();
    libMISS_gt_BEHarass_Init();
    libMISS_gt_BEAttack_Init();
    libMISS_gt_BETankDestroyedDefeat_Init();
    libMISS_gt_BEScoreCalculateHarvesterDamage_Init();
    libMISS_gt_BEPrimaryBotDestroyedWarning_Init();
    libMISS_gt_BEPrimaryBotDestroyedDefeat_Init();
    libMISS_gt_BEPrimaryBotCounterIncrement_Init();
    libMISS_gt_BEEscortStart_Init();
    libMISS_gt_BEEscortProgress_Init();
    libMISS_gt_BEEscortCompleted_Init();
    libMISS_gt_BEWaveStart_Init();
    libMISS_gt_BEWaveEnded_Init();
    libMISS_gt_BEHarvesterController_Init();
    libMISS_gt_BEHarvesterUnderAttack_Init();
    libMISS_gt_BEHarvesterOnDestroy_Init();
    libMISS_gt_BWStart_Init();
    libMISS_gt_BWUpdate_Init();
    libMISS_gt_BWTimerExpiredFail_Init();
    libMISS_gt_BWPrisonAttacked_Init();
    libMISS_gt_BWPrisonDestroyedComplete_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libMISS_InitLib_completed = false;

void libMISS_InitLib () {
    if (libMISS_InitLib_completed) {
        return;
    }

    libMISS_InitLib_completed = true;

    libMISS_InitLibraries();
    libMISS_InitVariables();
    libMISS_InitTriggers();
}

include "LibCOMI"
include "LibARRA"

