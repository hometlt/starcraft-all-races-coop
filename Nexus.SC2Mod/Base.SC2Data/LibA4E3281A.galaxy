include "TriggerLibs/NativeLib"

include "LibA4E3281A_h"

//--------------------------------------------------------------------------------------------------
// Library: AI
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libA4E3281A_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libA4E3281A_InitVariables_completed = false;

void libA4E3281A_InitVariables () {
    if (libA4E3281A_InitVariables_completed) {
        return;
    }

    libA4E3281A_InitVariables_completed = true;

    libA4E3281A_gv_covertOpsTankRange = 13;
    libA4E3281A_gv_covertOps5minTimer = TimerCreate();
    libA4E3281A_gv_covertOps10minTimer = TimerCreate();
    libA4E3281A_gv_covertOps15minTimer = TimerCreate();
    libA4E3281A_gv_covertOps20minTimer = TimerCreate();
    libA4E3281A_gv_covertOpsA8minTimer = TimerCreate();
    libA4E3281A_gv_covertOpsA10minTimer = TimerCreate();
    libA4E3281A_gv_covertOpsA15minTimer = TimerCreate();
    libA4E3281A_gv_covertOpsB8minTimer = TimerCreate();
    libA4E3281A_gv_covertOpsB10minTimer = TimerCreate();
    libA4E3281A_gv_covertOpsB15minTimer = TimerCreate();
    libA4E3281A_gv_mobius5minTimer = TimerCreate();
    libA4E3281A_gv_mobius10minTimer = TimerCreate();
    libA4E3281A_gv_mobius15minTimer = TimerCreate();
    libA4E3281A_gv_mobius20minTimer = TimerCreate();
    libA4E3281A_gv_mobiusA8minTimer = TimerCreate();
    libA4E3281A_gv_mobiusA10minTimer = TimerCreate();
    libA4E3281A_gv_mobiusB8minTimer = TimerCreate();
    libA4E3281A_gv_mobiusB10minTimer = TimerCreate();
    libA4E3281A_gv_nerazim5minTimer = TimerCreate();
    libA4E3281A_gv_nerazim10minTimer = TimerCreate();
    libA4E3281A_gv_nerazim15minTimer = TimerCreate();
    libA4E3281A_gv_nerazim20minTimer = TimerCreate();
    libA4E3281A_gv_nerazimA8minTimer = TimerCreate();
    libA4E3281A_gv_nerazimA10minTimer = TimerCreate();
    libA4E3281A_gv_nerazimA15minTimer = TimerCreate();
    libA4E3281A_gv_nerazimB8minTimer = TimerCreate();
    libA4E3281A_gv_nerazimB10minTimer = TimerCreate();
    libA4E3281A_gv_nerazimB15minTimer = TimerCreate();
    libA4E3281A_gv_nerazimC8minTimer = TimerCreate();
    libA4E3281A_gv_nerazimC10minTimer = TimerCreate();
    libA4E3281A_gv_nerazimC15minTimer = TimerCreate();
    libA4E3281A_gv_nest5minTimer = TimerCreate();
    libA4E3281A_gv_nest10minTimer = TimerCreate();
    libA4E3281A_gv_nest15minTimer = TimerCreate();
    libA4E3281A_gv_nest20minTimer = TimerCreate();
    libA4E3281A_gv_nestA8minTimer = TimerCreate();
    libA4E3281A_gv_nestA10minTimer = TimerCreate();
    libA4E3281A_gv_nestA15minTimer = TimerCreate();
    libA4E3281A_gv_nestLurkerSearchArea = 7;
    libA4E3281A_gv_nestB10minTimer = TimerCreate();
    libA4E3281A_gv_nestB15minTimer = TimerCreate();
    libA4E3281A_gv_taldarim5minTimer = TimerCreate();
    libA4E3281A_gv_taldarim10minTimer = TimerCreate();
    libA4E3281A_gv_taldarim15minTimer = TimerCreate();
    libA4E3281A_gv_taldarim20minTimer = TimerCreate();
    libA4E3281A_gv_taldarimA8minTimer = TimerCreate();
    libA4E3281A_gv_taldarimA15minTimer = TimerCreate();
    libA4E3281A_gv_taldarimB8minTimer = TimerCreate();
    libA4E3281A_gv_taldarimB10minTimer = TimerCreate();
    libA4E3281A_gv_taldarimB15minTimer = TimerCreate();
    libA4E3281A_gv_taldarimB20minTimer = TimerCreate();
    libA4E3281A_gv_taldarimB25minTimer = TimerCreate();
    libA4E3281A_gv_taldarimB30minTimer = TimerCreate();
    libA4E3281A_gv_taldarimB35minTimer = TimerCreate();
    libA4E3281A_gv_kelMorian5minTimer = TimerCreate();
    libA4E3281A_gv_kelMorian10minTimer = TimerCreate();
    libA4E3281A_gv_kelMorian15minTimer = TimerCreate();
    libA4E3281A_gv_kelMorian20minTimer = TimerCreate();
    libA4E3281A_gv_kelMorianA12minTimer = TimerCreate();
    libA4E3281A_gv_kelMorianA20minTimer = TimerCreate();
    libA4E3281A_gv_mecha5minTimer = TimerCreate();
    libA4E3281A_gv_mecha10minTimer = TimerCreate();
    libA4E3281A_gv_mecha15minTimer = TimerCreate();
    libA4E3281A_gv_mecha20minTimer = TimerCreate();
    libA4E3281A_gv_mechaA8minTimer = TimerCreate();
    libA4E3281A_gv_mechaA10minTimer = TimerCreate();
    libA4E3281A_gv_golden5minTimer = TimerCreate();
    libA4E3281A_gv_golden10minTimer = TimerCreate();
    libA4E3281A_gv_golden15minTimer = TimerCreate();
    libA4E3281A_gv_golden20minTimer = TimerCreate();
    libA4E3281A_gv_goldenA8minTimer = TimerCreate();
    libA4E3281A_gv_goldenA15minTimer = TimerCreate();
}

// Functions
void libA4E3281A_gf_E5889DE5A78BE58C96EFBC9AAIE8A18CE4B8BAE980BBE8BE91Init03 () {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
        TriggerExecute(libA4E3281A_gt_MobiusA, false, false);
    }

    if (true) {
        TriggerExecute(libA4E3281A_gt_MobiusB, false, false);
    }

    if (true) {
        TriggerExecute(libA4E3281A_gt_NerazimA, false, false);
    }

    if (true) {
        TriggerExecute(libA4E3281A_gt_NerazimB, false, false);
    }

    if (true) {
        TriggerExecute(libA4E3281A_gt_NerazimC, false, false);
    }

    if (true) {
        TriggerExecute(libA4E3281A_gt_NestA, false, false);
    }

    if (true) {
        TriggerExecute(libA4E3281A_gt_NestB, false, false);
    }

    if (true) {
        TriggerExecute(libA4E3281A_gt_CovertOpsA, false, false);
    }

    if (true) {
        TriggerExecute(libA4E3281A_gt_CovertOpsB, false, false);
    }

    if (true) {
        TriggerExecute(libA4E3281A_gt_TaldarimA, false, false);
    }

    if (true) {
        TriggerExecute(libA4E3281A_gt_TaldarimB, false, false);
    }

    if (true) {
        TriggerExecute(libA4E3281A_gt_KelMorianA, false, false);
    }

    if (true) {
        TriggerExecute(libA4E3281A_gt_MechaA, false, false);
    }

    if (true) {
        TriggerExecute(libA4E3281A_gt_GoldenA, false, false);
    }

}

trigger auto_libA4E3281A_gf_CovertOpsBattlecruiserAbility_Trigger = null;
unit auto_libA4E3281A_gf_CovertOpsBattlecruiserAbility_lp_covertOpsBattlecruiser;

void libA4E3281A_gf_CovertOpsBattlecruiserAbility (unit lp_covertOpsBattlecruiser) {
    auto_libA4E3281A_gf_CovertOpsBattlecruiserAbility_lp_covertOpsBattlecruiser = lp_covertOpsBattlecruiser;

    if (auto_libA4E3281A_gf_CovertOpsBattlecruiserAbility_Trigger == null) {
        auto_libA4E3281A_gf_CovertOpsBattlecruiserAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_CovertOpsBattlecruiserAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_CovertOpsBattlecruiserAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_CovertOpsBattlecruiserAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsBattlecruiser = auto_libA4E3281A_gf_CovertOpsBattlecruiserAbility_lp_covertOpsBattlecruiser;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto81922788_g;
    int auto81922788_u;
    unit auto81922788_var;
    unitgroup autoD99D5E52_g;
    int autoD99D5E52_u;
    unit autoD99D5E52_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsBattlecruiser) == true) && ((UnitGetOwner(lp_covertOpsBattlecruiser) == 3) || (UnitGetOwner(lp_covertOpsBattlecruiser) == 4) || (UnitGetOwner(lp_covertOpsBattlecruiser) == 5) || (UnitGetOwner(lp_covertOpsBattlecruiser) == 6) || (UnitGetOwner(lp_covertOpsBattlecruiser) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsBattlecruiser), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsBattlecruiser), 20.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto81922788_g = lv_enemyGroup;
        auto81922788_u = UnitGroupCount(auto81922788_g, c_unitCountAll);
        for (;; auto81922788_u -= 1) {
            auto81922788_var = UnitGroupUnitFromEnd(auto81922788_g, auto81922788_u);
            if (auto81922788_var == null) { break; }
            if ((((UnitGetPropertyFixed(auto81922788_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(auto81922788_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeTestFlag(UnitGetType(auto81922788_var), c_unitFlagHero) == true) || (UnitTypeGetProperty(UnitGetType(auto81922788_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto81922788_var);
            }
        }
        if ((UnitAbilityGetCooldown(lp_covertOpsBattlecruiser, "CovertOpsBattlecruiserYamato", "YamatoYamato2YamatoCovertOpsBattlecruiserYamato") <= 0.0)) {
            UnitIssueOrder(lp_covertOpsBattlecruiser, OrderTargetingUnit(AbilityCommand("CovertOpsBattlecruiserYamato", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsBattlecruiser, false);
            AISetUnitSuicide(lp_covertOpsBattlecruiser, true);
        }

        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsBattlecruiser), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsBattlecruiser), 10.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoD99D5E52_g = lv_enemyGroup;
        autoD99D5E52_u = UnitGroupCount(autoD99D5E52_g, c_unitCountAll);
        for (;; autoD99D5E52_u -= 1) {
            autoD99D5E52_var = UnitGroupUnitFromEnd(autoD99D5E52_g, autoD99D5E52_u);
            if (autoD99D5E52_var == null) { break; }
            if ((UnitHasBehavior2(autoD99D5E52_var, "CovertOpsBattlecruiserHyperjumpLightningStorm") == true)) {
                UnitGroupRemove(lv_enemyGroup, autoD99D5E52_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_covertOpsBattlecruiser, "CovertOpsBattlecruiserHyperjump", "Abil/CovertOpsBattlecruiserHyperjump") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsBattlecruiser, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_covertOpsBattlecruiser, OrderTargetingPoint(AbilityCommand("CovertOpsBattlecruiserHyperjump", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 6.0, UnitGetPosition(lp_covertOpsBattlecruiser), 10.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsBattlecruiser, false);
            AISetUnitSuicide(lp_covertOpsBattlecruiser, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_covertOpsBattlecruiser, "CovertOpsBattlecruiserHyperjump", "Abil/CovertOpsBattlecruiserHyperjump") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsBattlecruiser, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_covertOpsBattlecruiser, OrderTargetingPoint(AbilityCommand("CovertOpsBattlecruiserHyperjump", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 6.0, UnitGetPosition(lp_covertOpsBattlecruiser), 10.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_covertOpsBattlecruiser, false);
                AISetUnitSuicide(lp_covertOpsBattlecruiser, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_covertOpsBattlecruiser, "CovertOpsBattlecruiserHyperjump", "Abil/CovertOpsBattlecruiserHyperjump") <= 0.0)) {
                    UnitIssueOrder(lp_covertOpsBattlecruiser, OrderTargetingPoint(AbilityCommand("CovertOpsBattlecruiserHyperjump", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 6.0, UnitGetPosition(lp_covertOpsBattlecruiser), 10.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_covertOpsBattlecruiser, false);
                    AISetUnitSuicide(lp_covertOpsBattlecruiser, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_CovertOpsGhostAbility1_Trigger = null;
unit auto_libA4E3281A_gf_CovertOpsGhostAbility1_lp_covertOpsGhost;

void libA4E3281A_gf_CovertOpsGhostAbility1 (unit lp_covertOpsGhost) {
    auto_libA4E3281A_gf_CovertOpsGhostAbility1_lp_covertOpsGhost = lp_covertOpsGhost;

    if (auto_libA4E3281A_gf_CovertOpsGhostAbility1_Trigger == null) {
        auto_libA4E3281A_gf_CovertOpsGhostAbility1_Trigger = TriggerCreate("auto_libA4E3281A_gf_CovertOpsGhostAbility1_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_CovertOpsGhostAbility1_Trigger, false, false);
}

bool auto_libA4E3281A_gf_CovertOpsGhostAbility1_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsGhost = auto_libA4E3281A_gf_CovertOpsGhostAbility1_lp_covertOpsGhost;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsGhost) == true) && ((UnitGetOwner(lp_covertOpsGhost) == 3) || (UnitGetOwner(lp_covertOpsGhost) == 4) || (UnitGetOwner(lp_covertOpsGhost) == 5) || (UnitGetOwner(lp_covertOpsGhost) == 6) || (UnitGetOwner(lp_covertOpsGhost) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsGhost), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsGhost), 10.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostSnipe", "Abil/Snipe") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 25.0)) {
            UnitIssueOrder(lp_covertOpsGhost, OrderTargetingUnit(AbilityCommand("CovertOpsGhostSnipe", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsGhost, false);
            AISetUnitSuicide(lp_covertOpsGhost, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_CovertOpsGhostAbility2_Trigger = null;
unit auto_libA4E3281A_gf_CovertOpsGhostAbility2_lp_covertOpsGhost;

void libA4E3281A_gf_CovertOpsGhostAbility2 (unit lp_covertOpsGhost) {
    auto_libA4E3281A_gf_CovertOpsGhostAbility2_lp_covertOpsGhost = lp_covertOpsGhost;

    if (auto_libA4E3281A_gf_CovertOpsGhostAbility2_Trigger == null) {
        auto_libA4E3281A_gf_CovertOpsGhostAbility2_Trigger = TriggerCreate("auto_libA4E3281A_gf_CovertOpsGhostAbility2_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_CovertOpsGhostAbility2_Trigger, false, false);
}

bool auto_libA4E3281A_gf_CovertOpsGhostAbility2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsGhost = auto_libA4E3281A_gf_CovertOpsGhostAbility2_lp_covertOpsGhost;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto2075CFCE_g;
    int auto2075CFCE_u;
    unit auto2075CFCE_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsGhost) == true) && ((UnitGetOwner(lp_covertOpsGhost) == 3) || (UnitGetOwner(lp_covertOpsGhost) == 4) || (UnitGetOwner(lp_covertOpsGhost) == 5) || (UnitGetOwner(lp_covertOpsGhost) == 6) || (UnitGetOwner(lp_covertOpsGhost) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsGhost), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsGhost), 12.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto2075CFCE_g = lv_enemyGroup;
        auto2075CFCE_u = UnitGroupCount(auto2075CFCE_g, c_unitCountAll);
        for (;; auto2075CFCE_u -= 1) {
            auto2075CFCE_var = UnitGroupUnitFromEnd(auto2075CFCE_g, auto2075CFCE_u);
            if (auto2075CFCE_var == null) { break; }
            if (((UnitGetPropertyFixed(auto2075CFCE_var, c_unitPropEnergy, c_unitPropCurrent) >= 25.0) || (UnitGetPropertyFixed(auto2075CFCE_var, c_unitPropShields, c_unitPropCurrent) >= 25.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto2075CFCE_var);
            }
        }
        if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostEMP", "Abil/CovertOpsGhostEMP") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_covertOpsGhost, OrderTargetingPoint(AbilityCommand("CovertOpsGhostEMP", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 2.0, UnitGetPosition(lp_covertOpsGhost), 10.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsGhost, false);
            AISetUnitSuicide(lp_covertOpsGhost, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostEMP", "Abil/CovertOpsGhostEMP") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_covertOpsGhost, OrderTargetingPoint(AbilityCommand("CovertOpsGhostEMP", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 2.0, UnitGetPosition(lp_covertOpsGhost), 10.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_covertOpsGhost, false);
                AISetUnitSuicide(lp_covertOpsGhost, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostEMP", "Abil/CovertOpsGhostEMP") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_covertOpsGhost, OrderTargetingPoint(AbilityCommand("CovertOpsGhostEMP", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 2.0, UnitGetPosition(lp_covertOpsGhost), 10.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_covertOpsGhost, false);
                    AISetUnitSuicide(lp_covertOpsGhost, true);
                }

            }
        }
        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsGhost), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsGhost), 10.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostSnipe", "Abil/Snipe") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 25.0)) {
            UnitIssueOrder(lp_covertOpsGhost, OrderTargetingUnit(AbilityCommand("CovertOpsGhostSnipe", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsGhost, false);
            AISetUnitSuicide(lp_covertOpsGhost, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_CovertOpsGhostAbility3_Trigger = null;
unit auto_libA4E3281A_gf_CovertOpsGhostAbility3_lp_covertOpsGhost;

void libA4E3281A_gf_CovertOpsGhostAbility3 (unit lp_covertOpsGhost) {
    auto_libA4E3281A_gf_CovertOpsGhostAbility3_lp_covertOpsGhost = lp_covertOpsGhost;

    if (auto_libA4E3281A_gf_CovertOpsGhostAbility3_Trigger == null) {
        auto_libA4E3281A_gf_CovertOpsGhostAbility3_Trigger = TriggerCreate("auto_libA4E3281A_gf_CovertOpsGhostAbility3_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_CovertOpsGhostAbility3_Trigger, false, false);
}

bool auto_libA4E3281A_gf_CovertOpsGhostAbility3_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsGhost = auto_libA4E3281A_gf_CovertOpsGhostAbility3_lp_covertOpsGhost;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup autoBDDEE355_g;
    int autoBDDEE355_u;
    unit autoBDDEE355_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsGhost) == true) && ((UnitGetOwner(lp_covertOpsGhost) == 3) || (UnitGetOwner(lp_covertOpsGhost) == 4) || (UnitGetOwner(lp_covertOpsGhost) == 5) || (UnitGetOwner(lp_covertOpsGhost) == 6) || (UnitGetOwner(lp_covertOpsGhost) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsGhost), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsGhost), 12.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoBDDEE355_g = lv_enemyGroup;
        autoBDDEE355_u = UnitGroupCount(autoBDDEE355_g, c_unitCountAll);
        for (;; autoBDDEE355_u -= 1) {
            autoBDDEE355_var = UnitGroupUnitFromEnd(autoBDDEE355_g, autoBDDEE355_u);
            if (autoBDDEE355_var == null) { break; }
            if (((UnitGetPropertyFixed(autoBDDEE355_var, c_unitPropEnergy, c_unitPropCurrent) >= 25.0) || (UnitGetPropertyFixed(autoBDDEE355_var, c_unitPropShields, c_unitPropCurrent) >= 25.0) || (UnitTypeTestAttribute(UnitGetType(autoBDDEE355_var), c_unitAttributeMechanical) == true))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, autoBDDEE355_var);
            }
        }
        if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostEMP", "Abil/CovertOpsGhostEMP") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_covertOpsGhost, OrderTargetingPoint(AbilityCommand("CovertOpsGhostEMP", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 2.0, UnitGetPosition(lp_covertOpsGhost), 10.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsGhost, false);
            AISetUnitSuicide(lp_covertOpsGhost, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostEMP", "Abil/CovertOpsGhostEMP") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_covertOpsGhost, OrderTargetingPoint(AbilityCommand("CovertOpsGhostEMP", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 2.0, UnitGetPosition(lp_covertOpsGhost), 10.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_covertOpsGhost, false);
                AISetUnitSuicide(lp_covertOpsGhost, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostEMP", "Abil/CovertOpsGhostEMP") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_covertOpsGhost, OrderTargetingPoint(AbilityCommand("CovertOpsGhostEMP", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 2.0, UnitGetPosition(lp_covertOpsGhost), 10.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_covertOpsGhost, false);
                    AISetUnitSuicide(lp_covertOpsGhost, true);
                }

            }
        }
        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsGhost), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsGhost), 10.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostDeathSnipe", "Abil/Snipe") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 25.0)) {
            UnitIssueOrder(lp_covertOpsGhost, OrderTargetingUnit(AbilityCommand("CovertOpsGhostDeathSnipe", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsGhost, false);
            AISetUnitSuicide(lp_covertOpsGhost, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_CovertOpsLiberatorAbility_Trigger = null;
unit auto_libA4E3281A_gf_CovertOpsLiberatorAbility_lp_covertOpsLiberator;

void libA4E3281A_gf_CovertOpsLiberatorAbility (unit lp_covertOpsLiberator) {
    auto_libA4E3281A_gf_CovertOpsLiberatorAbility_lp_covertOpsLiberator = lp_covertOpsLiberator;

    if (auto_libA4E3281A_gf_CovertOpsLiberatorAbility_Trigger == null) {
        auto_libA4E3281A_gf_CovertOpsLiberatorAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_CovertOpsLiberatorAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_CovertOpsLiberatorAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_CovertOpsLiberatorAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsLiberator = auto_libA4E3281A_gf_CovertOpsLiberatorAbility_lp_covertOpsLiberator;

    // Variable Declarations
    unitgroup lv_enemyGroundGroup;
    unitgroup lv_targetGroup;

    // Automatic Variable Declarations
    unitgroup auto671AB6D7_g;
    int auto671AB6D7_u;
    unit auto671AB6D7_var;
    unitgroup autoFE7E5D1B_g;
    int autoFE7E5D1B_u;
    unit autoFE7E5D1B_var;

    // Variable Initialization
    lv_enemyGroundGroup = UnitGroupEmpty();
    lv_targetGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsLiberator) == true) && ((UnitGetOwner(lp_covertOpsLiberator) == 3) || (UnitGetOwner(lp_covertOpsLiberator) == 4) || (UnitGetOwner(lp_covertOpsLiberator) == 5) || (UnitGetOwner(lp_covertOpsLiberator) == 6) || (UnitGetOwner(lp_covertOpsLiberator) == 7))) {
        lv_enemyGroundGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsLiberator), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsLiberator), 13.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto671AB6D7_g = lv_enemyGroundGroup;
        auto671AB6D7_u = UnitGroupCount(auto671AB6D7_g, c_unitCountAll);
        for (;; auto671AB6D7_u -= 1) {
            auto671AB6D7_var = UnitGroupUnitFromEnd(auto671AB6D7_g, auto671AB6D7_u);
            if (auto671AB6D7_var == null) { break; }
            if ((UnitIsAlive(auto671AB6D7_var) == false)) {
                UnitGroupRemove(lv_enemyGroundGroup, auto671AB6D7_var);
            }

        }
        lv_targetGroup = lv_enemyGroundGroup;
        if ((UnitWeaponGet(lp_covertOpsLiberator, 1) == "CovertOpsLiberatorNemesisLaunchers") && (UnitGroupCount(lv_enemyGroundGroup, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lp_covertOpsLiberator, OrderTargetingPoint(AbilityCommand("CovertOpsLiberatorAGTarget", 0), AIBestTargetPoint(lv_enemyGroundGroup, 1, 0, 0.0, 5.0, UnitGetPosition(lp_covertOpsLiberator), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsLiberator, false);
            AISetUnitSuicide(lp_covertOpsLiberator, true);
        }
        else {
            if ((UnitWeaponGet(lp_covertOpsLiberator, 1) == "CovertOpsLiberatorRailgun")) {
                autoFE7E5D1B_g = lv_targetGroup;
                autoFE7E5D1B_u = UnitGroupCount(autoFE7E5D1B_g, c_unitCountAll);
                for (;; autoFE7E5D1B_u -= 1) {
                    autoFE7E5D1B_var = UnitGroupUnitFromEnd(autoFE7E5D1B_g, autoFE7E5D1B_u);
                    if (autoFE7E5D1B_var == null) { break; }
                    if ((UnitInRangeAndAbleToAttackTarget(lp_covertOpsLiberator, autoFE7E5D1B_var) == true)) {
                    }
                    else {
                        UnitGroupRemove(lv_targetGroup, autoFE7E5D1B_var);
                    }
                }
                if ((UnitGroupCount(lv_targetGroup, c_unitCountAlive) == 0)) {
                    UnitIssueOrder(lp_covertOpsLiberator, Order(AbilityCommand("CovertOpsLiberatorAATarget", 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_covertOpsLiberator, false);
                    AISetUnitSuicide(lp_covertOpsLiberator, true);
                }

            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_CovertOpsRavenAbility_Trigger = null;
unit auto_libA4E3281A_gf_CovertOpsRavenAbility_lp_covertOpsRaven;

void libA4E3281A_gf_CovertOpsRavenAbility (unit lp_covertOpsRaven) {
    auto_libA4E3281A_gf_CovertOpsRavenAbility_lp_covertOpsRaven = lp_covertOpsRaven;

    if (auto_libA4E3281A_gf_CovertOpsRavenAbility_Trigger == null) {
        auto_libA4E3281A_gf_CovertOpsRavenAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_CovertOpsRavenAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_CovertOpsRavenAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_CovertOpsRavenAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsRaven = auto_libA4E3281A_gf_CovertOpsRavenAbility_lp_covertOpsRaven;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto4D69DB16_g;
    int auto4D69DB16_u;
    unit auto4D69DB16_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsRaven) == true) && ((UnitGetOwner(lp_covertOpsRaven) == 3) || (UnitGetOwner(lp_covertOpsRaven) == 4) || (UnitGetOwner(lp_covertOpsRaven) == 5) || (UnitGetOwner(lp_covertOpsRaven) == 6) || (UnitGetOwner(lp_covertOpsRaven) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsRaven), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsRaven), 12.4), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto4D69DB16_g = lv_enemyGroup;
        auto4D69DB16_u = UnitGroupCount(auto4D69DB16_g, c_unitCountAll);
        for (;; auto4D69DB16_u -= 1) {
            auto4D69DB16_var = UnitGroupUnitFromEnd(auto4D69DB16_g, auto4D69DB16_u);
            if (auto4D69DB16_var == null) { break; }
            if ((UnitHasBehavior2(auto4D69DB16_var, "CovertOpsRavenNoxiousSeekerMissileImpact") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto4D69DB16_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_covertOpsRaven, "CovertOpsRavenNoxiousSeekerMissile", "Abil/CovertOpsRavenNoxiousSeekerMissile") <= 0.0)) {
            UnitIssueOrder(lp_covertOpsRaven, OrderTargetingUnit(AbilityCommand("CovertOpsRavenNoxiousSeekerMissile", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsRaven, false);
            AISetUnitSuicide(lp_covertOpsRaven, true);
        }

        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsRaven), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsRaven), 11.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_covertOpsRaven, "CovertOpsRavenBuildAutoTurret", "Raven Build Link") <= 0.0)) {
            UnitIssueOrder(lp_covertOpsRaven, OrderTargetingPoint(AbilityCommand("CovertOpsRavenBuildAutoTurret", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_covertOpsRaven), 11.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsRaven, false);
            AISetUnitSuicide(lp_covertOpsRaven, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_CovertOpsTankAbility_Trigger = null;
unit auto_libA4E3281A_gf_CovertOpsTankAbility_lp_covertOpsTank;

void libA4E3281A_gf_CovertOpsTankAbility (unit lp_covertOpsTank) {
    auto_libA4E3281A_gf_CovertOpsTankAbility_lp_covertOpsTank = lp_covertOpsTank;

    if (auto_libA4E3281A_gf_CovertOpsTankAbility_Trigger == null) {
        auto_libA4E3281A_gf_CovertOpsTankAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_CovertOpsTankAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_CovertOpsTankAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_CovertOpsTankAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsTank = auto_libA4E3281A_gf_CovertOpsTankAbility_lp_covertOpsTank;

    // Variable Declarations
    unitgroup lv_enemyRangedGroup;
    unitgroup lv_enemyMeleeGroup;

    // Automatic Variable Declarations
    unitgroup auto6766A8E2_g;
    int auto6766A8E2_u;
    unit auto6766A8E2_var;

    // Variable Initialization
    lv_enemyRangedGroup = UnitGroupEmpty();
    lv_enemyMeleeGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsTank) == true) && ((UnitGetOwner(lp_covertOpsTank) == 3) || (UnitGetOwner(lp_covertOpsTank) == 4) || (UnitGetOwner(lp_covertOpsTank) == 5) || (UnitGetOwner(lp_covertOpsTank) == 6) || (UnitGetOwner(lp_covertOpsTank) == 7))) {
        lv_enemyRangedGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsTank), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsTank), libA4E3281A_gv_covertOpsTankRange), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_enemyMeleeGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsTank), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsTank), 2.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto6766A8E2_g = lv_enemyRangedGroup;
        auto6766A8E2_u = UnitGroupCount(auto6766A8E2_g, c_unitCountAll);
        for (;; auto6766A8E2_u -= 1) {
            auto6766A8E2_var = UnitGroupUnitFromEnd(auto6766A8E2_g, auto6766A8E2_u);
            if (auto6766A8E2_var == null) { break; }
            if ((RegionContainsPoint(RegionCircle(UnitGetPosition(lp_covertOpsTank), 2.0), UnitGetPosition(auto6766A8E2_var)) == true)) {
                UnitGroupRemove(lv_enemyRangedGroup, auto6766A8E2_var);
            }

        }
        if ((UnitWeaponGet(lp_covertOpsTank, 1) == "CovertOpsSiegeTank90mmCannons") && (UnitGroupCount(lv_enemyRangedGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_covertOpsTank, Order(AbilityCommand("CovertOpsSiegeTankSiege", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsTank, false);
            AISetUnitSuicide(lp_covertOpsTank, true);
            UnitIssueOrder(lp_covertOpsTank, OrderTargetingPoint(AbilityCommand("CovertOpsSiegeTankSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_covertOpsTank), 5.5))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsTank, false);
            AISetUnitSuicide(lp_covertOpsTank, true);
        }
        else {
            if ((UnitWeaponGet(lp_covertOpsTank, 1) == "CovertOpsSiegeTankArcliteShockCannon") && (UnitGroupCount(lv_enemyRangedGroup, c_unitCountAlive) == 0) && (UnitGroupCount(lv_enemyMeleeGroup, c_unitCountAlive) >= 1)) {
                UnitIssueOrder(lp_covertOpsTank, Order(AbilityCommand("CovertOpsSiegeTankUnsiege", 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_covertOpsTank, false);
                AISetUnitSuicide(lp_covertOpsTank, true);
                UnitIssueOrder(lp_covertOpsTank, OrderTargetingPoint(AbilityCommand("CovertOpsSiegeTankSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_covertOpsTank), 5.5))), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_covertOpsTank, false);
                AISetUnitSuicide(lp_covertOpsTank, true);
            }
            else {
                if (((UnitWeaponGet(lp_covertOpsTank, 1) == "CovertOpsSiegeTankArcliteShockCannon") && (UnitGroupCount(lv_enemyRangedGroup, c_unitCountAlive) == 0) && (UnitGroupCount(lv_enemyMeleeGroup, c_unitCountAlive) == 0))) {
                    UnitIssueOrder(lp_covertOpsTank, Order(AbilityCommand("CovertOpsSiegeTankUnsiege", 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_covertOpsTank, false);
                    AISetUnitSuicide(lp_covertOpsTank, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MobiusBansheeAbility_Trigger = null;
unit auto_libA4E3281A_gf_MobiusBansheeAbility_lp_mobiusBanshee;

void libA4E3281A_gf_MobiusBansheeAbility (unit lp_mobiusBanshee) {
    auto_libA4E3281A_gf_MobiusBansheeAbility_lp_mobiusBanshee = lp_mobiusBanshee;

    if (auto_libA4E3281A_gf_MobiusBansheeAbility_Trigger == null) {
        auto_libA4E3281A_gf_MobiusBansheeAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MobiusBansheeAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MobiusBansheeAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MobiusBansheeAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusBanshee = auto_libA4E3281A_gf_MobiusBansheeAbility_lp_mobiusBanshee;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto20FA3B34_g;
    int auto20FA3B34_u;
    unit auto20FA3B34_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusBanshee) == true) && ((UnitGetOwner(lp_mobiusBanshee) == 3) || (UnitGetOwner(lp_mobiusBanshee) == 4) || (UnitGetOwner(lp_mobiusBanshee) == 5) || (UnitGetOwner(lp_mobiusBanshee) == 6) || (UnitGetOwner(lp_mobiusBanshee) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusBanshee), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusBanshee), 16.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto20FA3B34_g = lv_enemyGroup;
        auto20FA3B34_u = UnitGroupCount(auto20FA3B34_g, c_unitCountAll);
        for (;; auto20FA3B34_u -= 1) {
            auto20FA3B34_var = UnitGroupUnitFromEnd(auto20FA3B34_g, auto20FA3B34_u);
            if (auto20FA3B34_var == null) { break; }
            if ((UnitInRangeAndAbleToAttackTarget(auto20FA3B34_var, lp_mobiusBanshee) == true)) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto20FA3B34_var);
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitHasBehavior2(lp_mobiusBanshee, "MobiusBansheeCloak") == false)) {
            UnitIssueOrder(lp_mobiusBanshee, Order(AbilityCommand("MobiusBansheeCloak", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusBanshee, false);
            AISetUnitSuicide(lp_mobiusBanshee, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0) && (UnitHasBehavior2(lp_mobiusBanshee, "MobiusBansheeCloak") == true) && (UnitGetPropertyFixed(lp_mobiusBanshee, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                UnitIssueOrder(lp_mobiusBanshee, Order(AbilityCommand("MobiusBansheeCloak", 1)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mobiusBanshee, false);
                AISetUnitSuicide(lp_mobiusBanshee, true);
            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MobiusBattlecruiserAbility_Trigger = null;
unit auto_libA4E3281A_gf_MobiusBattlecruiserAbility_lp_mobiusBattlecruiser;

void libA4E3281A_gf_MobiusBattlecruiserAbility (unit lp_mobiusBattlecruiser) {
    auto_libA4E3281A_gf_MobiusBattlecruiserAbility_lp_mobiusBattlecruiser = lp_mobiusBattlecruiser;

    if (auto_libA4E3281A_gf_MobiusBattlecruiserAbility_Trigger == null) {
        auto_libA4E3281A_gf_MobiusBattlecruiserAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MobiusBattlecruiserAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MobiusBattlecruiserAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MobiusBattlecruiserAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusBattlecruiser = auto_libA4E3281A_gf_MobiusBattlecruiserAbility_lp_mobiusBattlecruiser;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto5DF4D684_g;
    int auto5DF4D684_u;
    unit auto5DF4D684_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusBattlecruiser) == true) && ((UnitGetOwner(lp_mobiusBattlecruiser) == 3) || (UnitGetOwner(lp_mobiusBattlecruiser) == 4) || (UnitGetOwner(lp_mobiusBattlecruiser) == 5) || (UnitGetOwner(lp_mobiusBattlecruiser) == 6) || (UnitGetOwner(lp_mobiusBattlecruiser) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusBattlecruiser), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusBattlecruiser), 10.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto5DF4D684_g = lv_enemyGroup;
        auto5DF4D684_u = UnitGroupCount(auto5DF4D684_g, c_unitCountAll);
        for (;; auto5DF4D684_u -= 1) {
            auto5DF4D684_var = UnitGroupUnitFromEnd(auto5DF4D684_g, auto5DF4D684_u);
            if (auto5DF4D684_var == null) { break; }
            if ((((UnitGetPropertyFixed(auto5DF4D684_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(auto5DF4D684_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeTestFlag(UnitGetType(auto5DF4D684_var), c_unitFlagHero) == true) || (UnitTypeGetProperty(UnitGetType(auto5DF4D684_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto5DF4D684_var);
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusBattlecruiser, "MobiusBattlecruiserYamato", "(YamatoYamato2YamatoMobiusBattlecruiserYamato)") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusBattlecruiser, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
            UnitIssueOrder(lp_mobiusBattlecruiser, OrderTargetingUnit(AbilityCommand("MobiusBattlecruiserYamato", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusBattlecruiser, false);
            AISetUnitSuicide(lp_mobiusBattlecruiser, true);
        }

        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusBattlecruiser), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusBattlecruiser), 10.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusBattlecruiser, "MobiusBattlecruiserHyperjump", "Abil/MobiusBattlecruiserHyperjump") <= 0.0)) {
            UnitIssueOrder(lp_mobiusBattlecruiser, OrderTargetingPoint(AbilityCommand("MobiusBattlecruiserHyperjump", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusBattlecruiser), 10.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusBattlecruiser, false);
            AISetUnitSuicide(lp_mobiusBattlecruiser, true);
        }

        lv_enemyGroup = null;
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MobiusMarauderAbility_Trigger = null;
unit auto_libA4E3281A_gf_MobiusMarauderAbility_lp_mobiusMarauder;

void libA4E3281A_gf_MobiusMarauderAbility (unit lp_mobiusMarauder) {
    auto_libA4E3281A_gf_MobiusMarauderAbility_lp_mobiusMarauder = lp_mobiusMarauder;

    if (auto_libA4E3281A_gf_MobiusMarauderAbility_Trigger == null) {
        auto_libA4E3281A_gf_MobiusMarauderAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MobiusMarauderAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MobiusMarauderAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MobiusMarauderAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusMarauder = auto_libA4E3281A_gf_MobiusMarauderAbility_lp_mobiusMarauder;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_enemyHeroGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_enemyHeroGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusMarauder) == true) && ((UnitGetOwner(lp_mobiusMarauder) == 3) || (UnitGetOwner(lp_mobiusMarauder) == 4) || (UnitGetOwner(lp_mobiusMarauder) == 5) || (UnitGetOwner(lp_mobiusMarauder) == 6) || (UnitGetOwner(lp_mobiusMarauder) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusMarauder), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusMarauder), 6.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitHasBehavior2(lp_mobiusMarauder, "MobiusMarauderStimpack") == false) && (UnitGetPropertyFixed(lp_mobiusMarauder, c_unitPropLife, c_unitPropCurrent) >= 30.0)) {
            UnitIssueOrder(lp_mobiusMarauder, Order(AbilityCommand("MobiusMarauderStimpack1", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusMarauder, false);
            AISetUnitSuicide(lp_mobiusMarauder, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MobiusMedicAbility_Trigger = null;
unit auto_libA4E3281A_gf_MobiusMedicAbility_lp_mobiusMedic;

void libA4E3281A_gf_MobiusMedicAbility (unit lp_mobiusMedic) {
    auto_libA4E3281A_gf_MobiusMedicAbility_lp_mobiusMedic = lp_mobiusMedic;

    if (auto_libA4E3281A_gf_MobiusMedicAbility_Trigger == null) {
        auto_libA4E3281A_gf_MobiusMedicAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MobiusMedicAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MobiusMedicAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MobiusMedicAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusMedic = auto_libA4E3281A_gf_MobiusMedicAbility_lp_mobiusMedic;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_enemyHeroGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_enemyHeroGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusMedic) == true) && ((UnitGetOwner(lp_mobiusMedic) == 3) || (UnitGetOwner(lp_mobiusMedic) == 4) || (UnitGetOwner(lp_mobiusMedic) == 5) || (UnitGetOwner(lp_mobiusMedic) == 6) || (UnitGetOwner(lp_mobiusMedic) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusMedic), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusMedic), 12.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_enemyHeroGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusMedic), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusMedic), 12.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if (((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 2) || (UnitGroupCount(lv_enemyHeroGroup, c_unitCountAlive) >= 1))) {
            UnitIssueOrder(lp_mobiusMedic, OrderTargetingPoint(AbilityCommand("MobiusWarpInReinforcements", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusMedic), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusMedic, false);
            AISetUnitSuicide(lp_mobiusMedic, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MobiusRavenAbility_Trigger = null;
unit auto_libA4E3281A_gf_MobiusRavenAbility_lp_mobiusRaven;

void libA4E3281A_gf_MobiusRavenAbility (unit lp_mobiusRaven) {
    auto_libA4E3281A_gf_MobiusRavenAbility_lp_mobiusRaven = lp_mobiusRaven;

    if (auto_libA4E3281A_gf_MobiusRavenAbility_Trigger == null) {
        auto_libA4E3281A_gf_MobiusRavenAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MobiusRavenAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MobiusRavenAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MobiusRavenAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusRaven = auto_libA4E3281A_gf_MobiusRavenAbility_lp_mobiusRaven;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_alliedGroup;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup auto49910167_g;
    int auto49910167_u;
    unit auto49910167_var;
    unitgroup autoE7E6500A_g;
    int autoE7E6500A_u;
    unit autoE7E6500A_var;
    unitgroup auto786ADA8D_g;
    int auto786ADA8D_u;
    unit auto786ADA8D_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_alliedGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusRaven) == true) && ((UnitGetOwner(lp_mobiusRaven) == 3) || (UnitGetOwner(lp_mobiusRaven) == 4) || (UnitGetOwner(lp_mobiusRaven) == 5) || (UnitGetOwner(lp_mobiusRaven) == 6) || (UnitGetOwner(lp_mobiusRaven) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusRaven), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusRaven), 12.4), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto49910167_g = lv_enemyGroup;
        auto49910167_u = UnitGroupCount(auto49910167_g, c_unitCountAll);
        for (;; auto49910167_u -= 1) {
            auto49910167_var = UnitGroupUnitFromEnd(auto49910167_g, auto49910167_u);
            if (auto49910167_var == null) { break; }
            if ((UnitHasBehavior2(auto49910167_var, "MobiusRavenSeekerFlashTint") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto49910167_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusRaven, "MobiusRavenSeekerFlashMissile", "Abil/HunterMobiusRavenSeekerFlashMissile") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusRaven, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_mobiusRaven, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 2.4, UnitGetPosition(lp_mobiusRaven), 10.0, 0);
            UnitIssueOrder(lp_mobiusRaven, OrderTargetingUnit(AbilityCommand("MobiusRavenSeekerFlashMissile", 0), UnitGroupClosestToPoint(lv_enemyGroup, lv_targetPoint)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusRaven, false);
            AISetUnitSuicide(lp_mobiusRaven, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusRaven, "MobiusRavenSeekerFlashMissile", "Abil/HunterMobiusRavenSeekerFlashMissile") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusRaven, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_mobiusRaven, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 2.4, UnitGetPosition(lp_mobiusRaven), 10.0, 0);
                UnitIssueOrder(lp_mobiusRaven, OrderTargetingUnit(AbilityCommand("MobiusRavenSeekerFlashMissile", 0), UnitGroupClosestToPoint(lv_enemyGroup, lv_targetPoint)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mobiusRaven, false);
                AISetUnitSuicide(lp_mobiusRaven, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusRaven, "MobiusRavenSeekerFlashMissile", "Abil/HunterMobiusRavenSeekerFlashMissile") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusRaven, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 2.4, UnitGetPosition(lp_mobiusRaven), 10.0, 0);
                    UnitIssueOrder(lp_mobiusRaven, OrderTargetingUnit(AbilityCommand("MobiusRavenSeekerFlashMissile", 0), UnitGroupClosestToPoint(lv_enemyGroup, lv_targetPoint)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_mobiusRaven, false);
                    AISetUnitSuicide(lp_mobiusRaven, true);
                }

            }
        }
        lv_enemyGroup = null;
        lv_targetPoint = null;
        Wait(0.05, c_timeAI);
        lv_alliedGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusRaven), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_mobiusRaven), 6.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoE7E6500A_g = lv_alliedGroup;
        autoE7E6500A_u = UnitGroupCount(autoE7E6500A_g, c_unitCountAll);
        for (;; autoE7E6500A_u -= 1) {
            autoE7E6500A_var = UnitGroupUnitFromEnd(autoE7E6500A_g, autoE7E6500A_u);
            if (autoE7E6500A_var == null) { break; }
            if (((UnitGetPropertyFixed(autoE7E6500A_var, c_unitPropLifePercent, c_unitPropCurrent) >= 0.8) || (UnitBehaviorCount(autoE7E6500A_var, "MobiusRavenHealField") >= 3))) {
                UnitGroupRemove(lv_alliedGroup, autoE7E6500A_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_mobiusRaven, "MobiusRavenHealField", "DehakaHealDehakaHeal2DehakaHealMobiusRavenHealField") <= 0.0)) {
            UnitIssueOrder(lp_mobiusRaven, Order(AbilityCommand("MobiusRavenHealField", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusRaven, false);
            AISetUnitSuicide(lp_mobiusRaven, true);
        }

        lv_alliedGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusRaven), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusRaven), 9.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto786ADA8D_g = lv_enemyGroup;
        auto786ADA8D_u = UnitGroupCount(auto786ADA8D_g, c_unitCountAll);
        for (;; auto786ADA8D_u -= 1) {
            auto786ADA8D_var = UnitGroupUnitFromEnd(auto786ADA8D_g, auto786ADA8D_u);
            if (auto786ADA8D_var == null) { break; }
            if ((UnitHasBehavior2(auto786ADA8D_var, "MobiusRavenScrambler") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto786ADA8D_var);
            }
            else {
                if (((UnitTypeGetProperty(UnitGetType(auto786ADA8D_var), c_unitPropEnergyMax) > 0.0) || (UnitInRangeAndAbleToAttackTarget(auto786ADA8D_var, lp_mobiusRaven) == true))) {
                }
                else {
                    UnitGroupRemove(lv_enemyGroup, auto786ADA8D_var);
                }
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusRaven, "MobiusRavenScrambler", "Abil/MobiusRavenScrambler") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusRaven, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
            UnitIssueOrder(lp_mobiusRaven, OrderTargetingUnit(AbilityCommand("MobiusRavenScrambler", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusRaven, false);
            AISetUnitSuicide(lp_mobiusRaven, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MobiusSpectreAbility_Trigger = null;
unit auto_libA4E3281A_gf_MobiusSpectreAbility_lp_mobiusSpectre;

void libA4E3281A_gf_MobiusSpectreAbility (unit lp_mobiusSpectre) {
    auto_libA4E3281A_gf_MobiusSpectreAbility_lp_mobiusSpectre = lp_mobiusSpectre;

    if (auto_libA4E3281A_gf_MobiusSpectreAbility_Trigger == null) {
        auto_libA4E3281A_gf_MobiusSpectreAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MobiusSpectreAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MobiusSpectreAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MobiusSpectreAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusSpectre = auto_libA4E3281A_gf_MobiusSpectreAbility_lp_mobiusSpectre;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup auto2FE8551F_g;
    int auto2FE8551F_u;
    unit auto2FE8551F_var;
    unitgroup autoF2962C02_g;
    int autoF2962C02_u;
    unit autoF2962C02_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusSpectre) == true) && ((UnitGetOwner(lp_mobiusSpectre) == 3) || (UnitGetOwner(lp_mobiusSpectre) == 4) || (UnitGetOwner(lp_mobiusSpectre) == 5) || (UnitGetOwner(lp_mobiusSpectre) == 6) || (UnitGetOwner(lp_mobiusSpectre) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusSpectre), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusSpectre), 10.5), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto2FE8551F_g = lv_enemyGroup;
        auto2FE8551F_u = UnitGroupCount(auto2FE8551F_g, c_unitCountAll);
        for (;; auto2FE8551F_u -= 1) {
            auto2FE8551F_var = UnitGroupUnitFromEnd(auto2FE8551F_g, auto2FE8551F_u);
            if (auto2FE8551F_var == null) { break; }
            if ((UnitHasBehavior2(auto2FE8551F_var, "SpecterIIUltrasonicPulseTarget") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto2FE8551F_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectre, "SpectreIIUltrasonicPulse", "Abil/PsiStorm") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectre, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_mobiusSpectre, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusSpectre), 9.0, 0);
            UnitBehaviorAdd(RegionGetAttachUnit(RegionCircle(lv_targetPoint, 1.5)), "SpecterIIUltrasonicPulseTarget", lp_mobiusSpectre, 1);
            UnitIssueOrder(lp_mobiusSpectre, OrderTargetingPoint(AbilityCommand("SpectreIIUltrasonicPulse", 0), lv_targetPoint), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusSpectre, false);
            AISetUnitSuicide(lp_mobiusSpectre, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectre, "SpectreIIUltrasonicPulse", "Abil/PsiStorm") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectre, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_mobiusSpectre, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusSpectre), 9.0, 0);
                UnitBehaviorAdd(RegionGetAttachUnit(RegionCircle(lv_targetPoint, 1.5)), "SpecterIIUltrasonicPulseTarget", lp_mobiusSpectre, 1);
                UnitIssueOrder(lp_mobiusSpectre, OrderTargetingPoint(AbilityCommand("SpectreIIUltrasonicPulse", 0), lv_targetPoint), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mobiusSpectre, false);
                AISetUnitSuicide(lp_mobiusSpectre, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectre, "SpectreIIUltrasonicPulse", "Abil/PsiStorm") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectre, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                    lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusSpectre), 9.0, 0);
                    UnitBehaviorAdd(RegionGetAttachUnit(RegionCircle(lv_targetPoint, 1.5)), "SpecterIIUltrasonicPulseTarget", lp_mobiusSpectre, 1);
                    UnitIssueOrder(lp_mobiusSpectre, OrderTargetingPoint(AbilityCommand("SpectreIIUltrasonicPulse", 0), lv_targetPoint), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_mobiusSpectre, false);
                    AISetUnitSuicide(lp_mobiusSpectre, true);
                }

            }
        }
        lv_enemyGroup = null;
        lv_targetPoint = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusSpectre), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusSpectre), 8.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoF2962C02_g = lv_enemyGroup;
        autoF2962C02_u = UnitGroupCount(autoF2962C02_g, c_unitCountAll);
        for (;; autoF2962C02_u -= 1) {
            autoF2962C02_var = UnitGroupUnitFromEnd(autoF2962C02_g, autoF2962C02_u);
            if (autoF2962C02_var == null) { break; }
            if ((((UnitGetPropertyFixed(autoF2962C02_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(autoF2962C02_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeTestFlag(UnitGetType(autoF2962C02_var), c_unitFlagHero) == true) || (UnitTypeGetProperty(UnitGetType(autoF2962C02_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, autoF2962C02_var);
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectre, "MobiusSpectreObliterate", "Abil/MobiusSpectreObliterate") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectre, c_unitPropEnergy, c_unitPropCurrent) >= 150.0)) {
            UnitIssueOrder(lp_mobiusSpectre, OrderTargetingUnit(AbilityCommand("MobiusSpectreObliterate", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusSpectre, false);
            AISetUnitSuicide(lp_mobiusSpectre, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MobiusSpectreIIAbility_Trigger = null;
unit auto_libA4E3281A_gf_MobiusSpectreIIAbility_lp_mobiusSpectreII;

void libA4E3281A_gf_MobiusSpectreIIAbility (unit lp_mobiusSpectreII) {
    auto_libA4E3281A_gf_MobiusSpectreIIAbility_lp_mobiusSpectreII = lp_mobiusSpectreII;

    if (auto_libA4E3281A_gf_MobiusSpectreIIAbility_Trigger == null) {
        auto_libA4E3281A_gf_MobiusSpectreIIAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MobiusSpectreIIAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MobiusSpectreIIAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MobiusSpectreIIAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusSpectreII = auto_libA4E3281A_gf_MobiusSpectreIIAbility_lp_mobiusSpectreII;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup auto2F8583AA_g;
    int auto2F8583AA_u;
    unit auto2F8583AA_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusSpectreII) == true) && ((UnitGetOwner(lp_mobiusSpectreII) == 3) || (UnitGetOwner(lp_mobiusSpectreII) == 4) || (UnitGetOwner(lp_mobiusSpectreII) == 5) || (UnitGetOwner(lp_mobiusSpectreII) == 6) || (UnitGetOwner(lp_mobiusSpectreII) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusSpectreII), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusSpectreII), 10.5), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto2F8583AA_g = lv_enemyGroup;
        auto2F8583AA_u = UnitGroupCount(auto2F8583AA_g, c_unitCountAll);
        for (;; auto2F8583AA_u -= 1) {
            auto2F8583AA_var = UnitGroupUnitFromEnd(auto2F8583AA_g, auto2F8583AA_u);
            if (auto2F8583AA_var == null) { break; }
            if ((UnitHasBehavior2(auto2F8583AA_var, "SpecterIIUltrasonicPulseTarget") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto2F8583AA_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectreII, "SpectreIIUltrasonicPulse", "Abil/PsiStorm") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectreII, c_unitPropEnergy, c_unitPropCurrent) >= 100.0) && (UnitGetPropertyFixed(lp_mobiusSpectreII, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusSpectreII), 9.0, 0);
            UnitBehaviorAdd(RegionGetAttachUnit(RegionCircle(lv_targetPoint, 1.5)), "SpecterIIUltrasonicPulseTarget", lp_mobiusSpectreII, 1);
            UnitIssueOrder(lp_mobiusSpectreII, OrderTargetingPoint(AbilityCommand("SpectreIIUltrasonicPulse", 0), lv_targetPoint), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusSpectreII, false);
            AISetUnitSuicide(lp_mobiusSpectreII, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectreII, "SpectreIIUltrasonicPulse", "Abil/PsiStorm") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectreII, c_unitPropEnergy, c_unitPropCurrent) >= 100.0) && (UnitGetPropertyFixed(lp_mobiusSpectreII, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusSpectreII), 9.0, 0);
                UnitBehaviorAdd(RegionGetAttachUnit(RegionCircle(lv_targetPoint, 1.5)), "SpecterIIUltrasonicPulseTarget", lp_mobiusSpectreII, 1);
                UnitIssueOrder(lp_mobiusSpectreII, OrderTargetingPoint(AbilityCommand("SpectreIIUltrasonicPulse", 0), lv_targetPoint), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mobiusSpectreII, false);
                AISetUnitSuicide(lp_mobiusSpectreII, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectreII, "SpectreIIUltrasonicPulse", "Abil/PsiStorm") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectreII, c_unitPropEnergy, c_unitPropCurrent) >= 100.0)) {
                    lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusSpectreII), 9.0, 0);
                    UnitBehaviorAdd(RegionGetAttachUnit(RegionCircle(lv_targetPoint, 1.5)), "SpecterIIUltrasonicPulseTarget", lp_mobiusSpectreII, 1);
                    UnitIssueOrder(lp_mobiusSpectreII, OrderTargetingPoint(AbilityCommand("SpectreIIUltrasonicPulse", 0), lv_targetPoint), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_mobiusSpectreII, false);
                    AISetUnitSuicide(lp_mobiusSpectreII, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MobiusThorAbility_Trigger = null;
unit auto_libA4E3281A_gf_MobiusThorAbility_lp_mobiusThor;

void libA4E3281A_gf_MobiusThorAbility (unit lp_mobiusThor) {
    auto_libA4E3281A_gf_MobiusThorAbility_lp_mobiusThor = lp_mobiusThor;

    if (auto_libA4E3281A_gf_MobiusThorAbility_Trigger == null) {
        auto_libA4E3281A_gf_MobiusThorAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MobiusThorAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MobiusThorAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MobiusThorAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusThor = auto_libA4E3281A_gf_MobiusThorAbility_lp_mobiusThor;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto1578641B_g;
    int auto1578641B_u;
    unit auto1578641B_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusThor) == true) && ((UnitGetOwner(lp_mobiusThor) == 3) || (UnitGetOwner(lp_mobiusThor) == 4) || (UnitGetOwner(lp_mobiusThor) == 5) || (UnitGetOwner(lp_mobiusThor) == 6) || (UnitGetOwner(lp_mobiusThor) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusThor), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusThor), 7.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto1578641B_g = lv_enemyGroup;
        auto1578641B_u = UnitGroupCount(auto1578641B_g, c_unitCountAll);
        for (;; auto1578641B_u -= 1) {
            auto1578641B_var = UnitGroupUnitFromEnd(auto1578641B_g, auto1578641B_u);
            if (auto1578641B_var == null) { break; }
            if ((((UnitGetPropertyFixed(auto1578641B_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(auto1578641B_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeTestFlag(UnitGetType(auto1578641B_var), c_unitFlagHero) == true) || (UnitTypeGetProperty(UnitGetType(auto1578641B_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto1578641B_var);
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusThor, "MobiusThorStrikeCannons", "Abil/MobiusThorStrikeCannons") <= 0.0)) {
            UnitIssueOrder(lp_mobiusThor, OrderTargetingUnit(AbilityCommand("MobiusThorStrikeCannons", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusThor, false);
            AISetUnitSuicide(lp_mobiusThor, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MobiusVikingAbility_Trigger = null;
unit auto_libA4E3281A_gf_MobiusVikingAbility_lp_mobiusViking;

void libA4E3281A_gf_MobiusVikingAbility (unit lp_mobiusViking) {
    auto_libA4E3281A_gf_MobiusVikingAbility_lp_mobiusViking = lp_mobiusViking;

    if (auto_libA4E3281A_gf_MobiusVikingAbility_Trigger == null) {
        auto_libA4E3281A_gf_MobiusVikingAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MobiusVikingAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MobiusVikingAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MobiusVikingAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusViking = auto_libA4E3281A_gf_MobiusVikingAbility_lp_mobiusViking;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_enemyGroundGroup;
    unitgroup lv_enemyAirGroup;

    // Automatic Variable Declarations
    unitgroup autoAC1ECA6E_g;
    int autoAC1ECA6E_u;
    unit autoAC1ECA6E_var;
    unitgroup auto38CE40EF_g;
    int auto38CE40EF_u;
    unit auto38CE40EF_var;
    unitgroup auto4C496906_g;
    int auto4C496906_u;
    unit auto4C496906_var;
    unitgroup auto244FFB38_g;
    int auto244FFB38_u;
    unit auto244FFB38_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_enemyGroundGroup = UnitGroupEmpty();
    lv_enemyAirGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusViking) == true) && ((UnitGetOwner(lp_mobiusViking) == 3) || (UnitGetOwner(lp_mobiusViking) == 4) || (UnitGetOwner(lp_mobiusViking) == 5) || (UnitGetOwner(lp_mobiusViking) == 6) || (UnitGetOwner(lp_mobiusViking) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusViking), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusViking), 12.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_mobiusViking, "MobiusVikingOverload", "Abil/MobiusVikingOverload") <= 0.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_mobiusViking, Order(AbilityCommand("MobiusVikingOverload", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusViking, false);
            AISetUnitSuicide(lp_mobiusViking, true);
        }

        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroundGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusViking), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusViking), 10.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_enemyAirGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusViking), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusViking), 10.0), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGetType(lp_mobiusViking) == "MobiusVikingFighter")) {
            autoAC1ECA6E_g = lv_enemyGroundGroup;
            autoAC1ECA6E_u = UnitGroupCount(autoAC1ECA6E_g, c_unitCountAll);
            for (;; autoAC1ECA6E_u -= 1) {
                autoAC1ECA6E_var = UnitGroupUnitFromEnd(autoAC1ECA6E_g, autoAC1ECA6E_u);
                if (autoAC1ECA6E_var == null) { break; }
                if ((UnitInRangeAndAbleToAttackTarget(autoAC1ECA6E_var, lp_mobiusViking) == false)) {
                    UnitGroupRemove(lv_enemyGroundGroup, autoAC1ECA6E_var);
                }

            }
            auto38CE40EF_g = lv_enemyAirGroup;
            auto38CE40EF_u = UnitGroupCount(auto38CE40EF_g, c_unitCountAll);
            for (;; auto38CE40EF_u -= 1) {
                auto38CE40EF_var = UnitGroupUnitFromEnd(auto38CE40EF_g, auto38CE40EF_u);
                if (auto38CE40EF_var == null) { break; }
                if ((UnitInRangeAndAbleToAttackTarget(auto38CE40EF_var, lp_mobiusViking) == false)) {
                    UnitGroupRemove(lv_enemyAirGroup, auto38CE40EF_var);
                }

            }
            if ((UnitGroupCount(lv_enemyGroundGroup, c_unitCountAlive) >= 1) && (UnitGroupCount(lv_enemyAirGroup, c_unitCountAlive) == 0)) {
                UnitIssueOrder(lp_mobiusViking, Order(AbilityCommand("MobiusVikingAssaultMode", 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mobiusViking, false);
                AISetUnitSuicide(lp_mobiusViking, true);
            }

        }
        else if ((UnitGetType(lp_mobiusViking) == "MobiusVikingAssault")) {
            auto4C496906_g = lv_enemyGroundGroup;
            auto4C496906_u = UnitGroupCount(auto4C496906_g, c_unitCountAll);
            for (;; auto4C496906_u -= 1) {
                auto4C496906_var = UnitGroupUnitFromEnd(auto4C496906_g, auto4C496906_u);
                if (auto4C496906_var == null) { break; }
                if ((UnitInRangeAndAbleToAttackTarget(auto4C496906_var, lp_mobiusViking) == false)) {
                    UnitGroupRemove(lv_enemyGroundGroup, auto4C496906_var);
                }

            }
            auto244FFB38_g = lv_enemyAirGroup;
            auto244FFB38_u = UnitGroupCount(auto244FFB38_g, c_unitCountAll);
            for (;; auto244FFB38_u -= 1) {
                auto244FFB38_var = UnitGroupUnitFromEnd(auto244FFB38_g, auto244FFB38_u);
                if (auto244FFB38_var == null) { break; }
                if ((UnitInRangeAndAbleToAttackTarget(auto244FFB38_var, lp_mobiusViking) == false)) {
                    UnitGroupRemove(lv_enemyAirGroup, auto244FFB38_var);
                }

            }
            if ((UnitGroupCount(lv_enemyAirGroup, c_unitCountAlive) >= 1) && (UnitGroupCount(lv_enemyGroundGroup, c_unitCountAlive) == 0)) {
                UnitIssueOrder(lp_mobiusViking, Order(AbilityCommand("MobiusVikingFighterMode", 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mobiusViking, false);
                AISetUnitSuicide(lp_mobiusViking, true);
            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MobiusVultureAbility_Trigger = null;
unit auto_libA4E3281A_gf_MobiusVultureAbility_lp_mobiusVulture;

void libA4E3281A_gf_MobiusVultureAbility (unit lp_mobiusVulture) {
    auto_libA4E3281A_gf_MobiusVultureAbility_lp_mobiusVulture = lp_mobiusVulture;

    if (auto_libA4E3281A_gf_MobiusVultureAbility_Trigger == null) {
        auto_libA4E3281A_gf_MobiusVultureAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MobiusVultureAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MobiusVultureAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MobiusVultureAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusVulture = auto_libA4E3281A_gf_MobiusVultureAbility_lp_mobiusVulture;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusVulture) == true) && ((UnitGetOwner(lp_mobiusVulture) == 3) || (UnitGetOwner(lp_mobiusVulture) == 4) || (UnitGetOwner(lp_mobiusVulture) == 5) || (UnitGetOwner(lp_mobiusVulture) == 6) || (UnitGetOwner(lp_mobiusVulture) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusVulture), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusVulture), 8.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityChargeInfo(lp_mobiusVulture, AbilityCommand("MobiusVultureSpiderMines", 0), c_unitAbilChargeCountUse) == 3.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0)) {
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
        }
        else if ((UnitAbilityChargeInfo(lp_mobiusVulture, AbilityCommand("MobiusVultureSpiderMines", 0), c_unitAbilChargeCountUse) == 3.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
        }
        else if ((UnitAbilityChargeInfo(lp_mobiusVulture, AbilityCommand("MobiusVultureSpiderMines", 0), c_unitAbilChargeCountUse) == 2.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
        }
        else if ((UnitAbilityChargeInfo(lp_mobiusVulture, AbilityCommand("MobiusVultureSpiderMines", 0), c_unitAbilChargeCountUse) == 1.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_NerazimCorsairAbility_Trigger = null;
unit auto_libA4E3281A_gf_NerazimCorsairAbility_lp_nerazimCorsair;

void libA4E3281A_gf_NerazimCorsairAbility (unit lp_nerazimCorsair) {
    auto_libA4E3281A_gf_NerazimCorsairAbility_lp_nerazimCorsair = lp_nerazimCorsair;

    if (auto_libA4E3281A_gf_NerazimCorsairAbility_Trigger == null) {
        auto_libA4E3281A_gf_NerazimCorsairAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_NerazimCorsairAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_NerazimCorsairAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_NerazimCorsairAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimCorsair = auto_libA4E3281A_gf_NerazimCorsairAbility_lp_nerazimCorsair;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup autoF835C975_g;
    int autoF835C975_u;
    unit autoF835C975_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimCorsair) == true) && ((UnitGetOwner(lp_nerazimCorsair) == 3) || (UnitGetOwner(lp_nerazimCorsair) == 4) || (UnitGetOwner(lp_nerazimCorsair) == 5) || (UnitGetOwner(lp_nerazimCorsair) == 6) || (UnitGetOwner(lp_nerazimCorsair) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimCorsair), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimCorsair), 12.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoF835C975_g = lv_enemyGroup;
        autoF835C975_u = UnitGroupCount(autoF835C975_g, c_unitCountAll);
        for (;; autoF835C975_u -= 1) {
            autoF835C975_var = UnitGroupUnitFromEnd(autoF835C975_g, autoF835C975_u);
            if (autoF835C975_var == null) { break; }
            if ((UnitHasBehavior2(autoF835C975_var, "NerazimCorsairDisruptionWeb") == true)) {
                UnitGroupRemove(lv_enemyGroup, autoF835C975_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimCorsair, "NerazimCorsairDisruptionWeb", "Abil/NerazimCorsairDisruptionWeb") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimCorsair, c_unitPropEnergy, c_unitPropCurrent) >= 125.0) && (UnitGetPropertyFixed(lp_nerazimCorsair, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.32)) {
            UnitIssueOrder(lp_nerazimCorsair, OrderTargetingPoint(AbilityCommand("NerazimCorsairDisruptionWeb", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.0, UnitGetPosition(lp_nerazimCorsair), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimCorsair, false);
            AISetUnitSuicide(lp_nerazimCorsair, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimCorsair, "NerazimCorsairDisruptionWeb", "Abil/NerazimCorsairDisruptionWeb") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimCorsair, c_unitPropEnergy, c_unitPropCurrent) >= 125.0) && (UnitGetPropertyFixed(lp_nerazimCorsair, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
                UnitIssueOrder(lp_nerazimCorsair, OrderTargetingPoint(AbilityCommand("NerazimCorsairDisruptionWeb", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.0, UnitGetPosition(lp_nerazimCorsair), 9.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nerazimCorsair, false);
                AISetUnitSuicide(lp_nerazimCorsair, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimCorsair, "NerazimCorsairDisruptionWeb", "Abil/NerazimCorsairDisruptionWeb") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimCorsair, c_unitPropEnergy, c_unitPropCurrent) >= 125.0)) {
                    UnitIssueOrder(lp_nerazimCorsair, OrderTargetingPoint(AbilityCommand("NerazimCorsairDisruptionWeb", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.0, UnitGetPosition(lp_nerazimCorsair), 9.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nerazimCorsair, false);
                    AISetUnitSuicide(lp_nerazimCorsair, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_NerazimDarkArchonAbility1_Trigger = null;
unit auto_libA4E3281A_gf_NerazimDarkArchonAbility1_lp_nerazimDarkArchon;

void libA4E3281A_gf_NerazimDarkArchonAbility1 (unit lp_nerazimDarkArchon) {
    auto_libA4E3281A_gf_NerazimDarkArchonAbility1_lp_nerazimDarkArchon = lp_nerazimDarkArchon;

    if (auto_libA4E3281A_gf_NerazimDarkArchonAbility1_Trigger == null) {
        auto_libA4E3281A_gf_NerazimDarkArchonAbility1_Trigger = TriggerCreate("auto_libA4E3281A_gf_NerazimDarkArchonAbility1_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_NerazimDarkArchonAbility1_Trigger, false, false);
}

bool auto_libA4E3281A_gf_NerazimDarkArchonAbility1_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimDarkArchon = auto_libA4E3281A_gf_NerazimDarkArchonAbility1_lp_nerazimDarkArchon;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto12DD6FDD_g;
    int auto12DD6FDD_u;
    unit auto12DD6FDD_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimDarkArchon) == true) && ((UnitGetOwner(lp_nerazimDarkArchon) == 3) || (UnitGetOwner(lp_nerazimDarkArchon) == 4) || (UnitGetOwner(lp_nerazimDarkArchon) == 5) || (UnitGetOwner(lp_nerazimDarkArchon) == 6) || (UnitGetOwner(lp_nerazimDarkArchon) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimDarkArchon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimDarkArchon), 7.75), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto12DD6FDD_g = lv_enemyGroup;
        auto12DD6FDD_u = UnitGroupCount(auto12DD6FDD_g, c_unitCountAll);
        for (;; auto12DD6FDD_u -= 1) {
            auto12DD6FDD_var = UnitGroupUnitFromEnd(auto12DD6FDD_g, auto12DD6FDD_u);
            if (auto12DD6FDD_var == null) { break; }
            if (((UnitHasBehavior2(auto12DD6FDD_var, "NerazimDarkArchonPsimaelStun") == true) || (UnitHasBehavior2(auto12DD6FDD_var, "NerazimDarkArchonPsimaelStunHero") == true))) {
                UnitGroupRemove(lv_enemyGroup, auto12DD6FDD_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonPsiMael", "Abil/NerazimDarkArchonPsiMael") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingPoint(AbilityCommand("NerazimDarkArchonPsiMael", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 1.75, UnitGetPosition(lp_nerazimDarkArchon), 6.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
            AISetUnitSuicide(lp_nerazimDarkArchon, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonPsiMael", "Abil/NerazimDarkArchonPsiMael") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingPoint(AbilityCommand("NerazimDarkArchonPsiMael", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 1.75, UnitGetPosition(lp_nerazimDarkArchon), 6.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
                AISetUnitSuicide(lp_nerazimDarkArchon, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonPsiMael", "Abil/NerazimDarkArchonPsiMael") <= 0.0)) {
                    UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingPoint(AbilityCommand("NerazimDarkArchonPsiMael", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 1.75, UnitGetPosition(lp_nerazimDarkArchon), 6.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
                    AISetUnitSuicide(lp_nerazimDarkArchon, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_NerazimDarkArchonAbility2_Trigger = null;
unit auto_libA4E3281A_gf_NerazimDarkArchonAbility2_lp_nerazimDarkArchon;

void libA4E3281A_gf_NerazimDarkArchonAbility2 (unit lp_nerazimDarkArchon) {
    auto_libA4E3281A_gf_NerazimDarkArchonAbility2_lp_nerazimDarkArchon = lp_nerazimDarkArchon;

    if (auto_libA4E3281A_gf_NerazimDarkArchonAbility2_Trigger == null) {
        auto_libA4E3281A_gf_NerazimDarkArchonAbility2_Trigger = TriggerCreate("auto_libA4E3281A_gf_NerazimDarkArchonAbility2_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_NerazimDarkArchonAbility2_Trigger, false, false);
}

bool auto_libA4E3281A_gf_NerazimDarkArchonAbility2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimDarkArchon = auto_libA4E3281A_gf_NerazimDarkArchonAbility2_lp_nerazimDarkArchon;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup autoD2744DD1_g;
    int autoD2744DD1_u;
    unit autoD2744DD1_var;
    unitgroup auto3A3746A8_g;
    int auto3A3746A8_u;
    unit auto3A3746A8_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimDarkArchon) == true) && ((UnitGetOwner(lp_nerazimDarkArchon) == 3) || (UnitGetOwner(lp_nerazimDarkArchon) == 4) || (UnitGetOwner(lp_nerazimDarkArchon) == 5) || (UnitGetOwner(lp_nerazimDarkArchon) == 6) || (UnitGetOwner(lp_nerazimDarkArchon) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimDarkArchon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimDarkArchon), 7.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32)) | (1 << (c_targetFilterHeroUnit - 32))), 0);
        autoD2744DD1_g = lv_enemyGroup;
        autoD2744DD1_u = UnitGroupCount(autoD2744DD1_g, c_unitCountAll);
        for (;; autoD2744DD1_u -= 1) {
            autoD2744DD1_var = UnitGroupUnitFromEnd(autoD2744DD1_g, autoD2744DD1_u);
            if (autoD2744DD1_var == null) { break; }
            if ((((UnitGetPropertyFixed(autoD2744DD1_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(autoD2744DD1_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeGetProperty(UnitGetType(autoD2744DD1_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, autoD2744DD1_var);
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonMindControl", "Abil/NerazimDarkArchonMindControl") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 100.0)) {
            UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingUnit(AbilityCommand("NerazimDarkArchonMindControl", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
            AISetUnitSuicide(lp_nerazimDarkArchon, true);
        }

        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimDarkArchon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimDarkArchon), 7.75), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto3A3746A8_g = lv_enemyGroup;
        auto3A3746A8_u = UnitGroupCount(auto3A3746A8_g, c_unitCountAll);
        for (;; auto3A3746A8_u -= 1) {
            auto3A3746A8_var = UnitGroupUnitFromEnd(auto3A3746A8_g, auto3A3746A8_u);
            if (auto3A3746A8_var == null) { break; }
            if (((UnitHasBehavior2(auto3A3746A8_var, "NerazimDarkArchonPsimaelStun") == true) || (UnitHasBehavior2(auto3A3746A8_var, "NerazimDarkArchonPsimaelStunHero") == true))) {
                UnitGroupRemove(lv_enemyGroup, auto3A3746A8_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonPsiMael", "Abil/NerazimDarkArchonPsiMael") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 150.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingPoint(AbilityCommand("NerazimDarkArchonPsiMael", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 1.75, UnitGetPosition(lp_nerazimDarkArchon), 6.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
            AISetUnitSuicide(lp_nerazimDarkArchon, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonPsiMael", "Abil/NerazimDarkArchonPsiMael") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 150.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingPoint(AbilityCommand("NerazimDarkArchonPsiMael", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 1.75, UnitGetPosition(lp_nerazimDarkArchon), 6.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
                AISetUnitSuicide(lp_nerazimDarkArchon, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonPsiMael", "Abil/NerazimDarkArchonPsiMael") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 150.0)) {
                    UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingPoint(AbilityCommand("NerazimDarkArchonPsiMael", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 1.75, UnitGetPosition(lp_nerazimDarkArchon), 6.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
                    AISetUnitSuicide(lp_nerazimDarkArchon, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_NerazimDTAbility_Trigger = null;
unit auto_libA4E3281A_gf_NerazimDTAbility_lp_nerazimDT;

void libA4E3281A_gf_NerazimDTAbility (unit lp_nerazimDT) {
    auto_libA4E3281A_gf_NerazimDTAbility_lp_nerazimDT = lp_nerazimDT;

    if (auto_libA4E3281A_gf_NerazimDTAbility_Trigger == null) {
        auto_libA4E3281A_gf_NerazimDTAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_NerazimDTAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_NerazimDTAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_NerazimDTAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimDT = auto_libA4E3281A_gf_NerazimDTAbility_lp_nerazimDT;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup autoE5435B91_g;
    int autoE5435B91_u;
    unit autoE5435B91_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimDT) == true) && ((UnitGetOwner(lp_nerazimDT) == 3) || (UnitGetOwner(lp_nerazimDT) == 4) || (UnitGetOwner(lp_nerazimDT) == 5) || (UnitGetOwner(lp_nerazimDT) == 6) || (UnitGetOwner(lp_nerazimDT) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimDT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimDT), 8.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoE5435B91_g = lv_enemyGroup;
        autoE5435B91_u = UnitGroupCount(autoE5435B91_g, c_unitCountAll);
        for (;; autoE5435B91_u -= 1) {
            autoE5435B91_var = UnitGroupUnitFromEnd(autoE5435B91_g, autoE5435B91_u);
            if (autoE5435B91_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(autoE5435B91_var), UnitGetPosition(lp_nerazimDT)) <= 1.5)) {
                UnitGroupRemove(lv_enemyGroup, autoE5435B91_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimDT, "NerazimShadowTemplarBlink", "Abil/NerazimShadowTemplarBlink") <= 0.0)) {
            UnitIssueOrder(lp_nerazimDT, OrderTargetingPoint(AbilityCommand("NerazimShadowTemplarBlink", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup, UnitGetPosition(lp_nerazimDT)))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimDT, false);
            AISetUnitSuicide(lp_nerazimDT, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_NerazimHTAbility_Trigger = null;
unit auto_libA4E3281A_gf_NerazimHTAbility_lp_nerazimHT;

void libA4E3281A_gf_NerazimHTAbility (unit lp_nerazimHT) {
    auto_libA4E3281A_gf_NerazimHTAbility_lp_nerazimHT = lp_nerazimHT;

    if (auto_libA4E3281A_gf_NerazimHTAbility_Trigger == null) {
        auto_libA4E3281A_gf_NerazimHTAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_NerazimHTAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_NerazimHTAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_NerazimHTAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimHT = auto_libA4E3281A_gf_NerazimHTAbility_lp_nerazimHT;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_alliedGroup;

    // Automatic Variable Declarations
    unitgroup auto8AC92130_g;
    int auto8AC92130_u;
    unit auto8AC92130_var;
    unitgroup auto96BA6D18_g;
    int auto96BA6D18_u;
    unit auto96BA6D18_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_alliedGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimHT) == true) && ((UnitGetOwner(lp_nerazimHT) == 3) || (UnitGetOwner(lp_nerazimHT) == 4) || (UnitGetOwner(lp_nerazimHT) == 5) || (UnitGetOwner(lp_nerazimHT) == 6) || (UnitGetOwner(lp_nerazimHT) == 7))) {
        lv_alliedGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimHT), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_nerazimHT), 4.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto8AC92130_g = lv_alliedGroup;
        auto8AC92130_u = UnitGroupCount(auto8AC92130_g, c_unitCountAll);
        for (;; auto8AC92130_u -= 1) {
            auto8AC92130_var = UnitGroupUnitFromEnd(auto8AC92130_g, auto8AC92130_u);
            if (auto8AC92130_var == null) { break; }
            if ((UnitHasBehavior2(auto8AC92130_var, "NerazimHighTemplarPurdahSource") == true)) {
                UnitGroupRemove(lv_alliedGroup, auto8AC92130_var);
            }

        }
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimHT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimHT), 14.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimHT, "NerazimHighTemplarPurdah", "GuardianShieldGuardianShield2GuardianShieldNerazimHighTemplarPurdah") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
            UnitIssueOrder(lp_nerazimHT, Order(AbilityCommand("NerazimHighTemplarPurdah", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimHT, false);
            AISetUnitSuicide(lp_nerazimHT, true);
        }

        lv_alliedGroup = null;
        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimHT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimHT), 8.75), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto96BA6D18_g = lv_enemyGroup;
        auto96BA6D18_u = UnitGroupCount(auto96BA6D18_g, c_unitCountAll);
        for (;; auto96BA6D18_u -= 1) {
            auto96BA6D18_var = UnitGroupUnitFromEnd(auto96BA6D18_g, auto96BA6D18_u);
            if (auto96BA6D18_var == null) { break; }
            if ((UnitHasBehavior2(auto96BA6D18_var, "NerazimHighTemplarCurse") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto96BA6D18_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimHT, "NerazimHighTemplarCurse", "Abil/NerazimHighTemplarCurse") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_nerazimHT, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.32)) {
            UnitIssueOrder(lp_nerazimHT, OrderTargetingPoint(AbilityCommand("NerazimHighTemplarCurse", 0), AIBestTargetPoint(lv_enemyGroup, 3, 120, 1.5, 3.0, UnitGetPosition(lp_nerazimHT), 7.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimHT, false);
            AISetUnitSuicide(lp_nerazimHT, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimHT, "NerazimHighTemplarCurse", "Abil/NerazimHighTemplarCurse") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_nerazimHT, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
                UnitIssueOrder(lp_nerazimHT, OrderTargetingPoint(AbilityCommand("NerazimHighTemplarCurse", 0), AIBestTargetPoint(lv_enemyGroup, 2, 80, 1.0, 3.0, UnitGetPosition(lp_nerazimHT), 7.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nerazimHT, false);
                AISetUnitSuicide(lp_nerazimHT, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimHT, "NerazimHighTemplarCurse", "Abil/NerazimHighTemplarCurse") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_nerazimHT, OrderTargetingPoint(AbilityCommand("NerazimHighTemplarCurse", 0), AIBestTargetPoint(lv_enemyGroup, 1, 40, 0.5, 3.0, UnitGetPosition(lp_nerazimHT), 7.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nerazimHT, false);
                    AISetUnitSuicide(lp_nerazimHT, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_NerazimImmortalAbility_Trigger = null;
unit auto_libA4E3281A_gf_NerazimImmortalAbility_lp_nerazimImmortal;

void libA4E3281A_gf_NerazimImmortalAbility (unit lp_nerazimImmortal) {
    auto_libA4E3281A_gf_NerazimImmortalAbility_lp_nerazimImmortal = lp_nerazimImmortal;

    if (auto_libA4E3281A_gf_NerazimImmortalAbility_Trigger == null) {
        auto_libA4E3281A_gf_NerazimImmortalAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_NerazimImmortalAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_NerazimImmortalAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_NerazimImmortalAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimImmortal = auto_libA4E3281A_gf_NerazimImmortalAbility_lp_nerazimImmortal;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup autoD25151CB_g;
    int autoD25151CB_u;
    unit autoD25151CB_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimImmortal) == true) && ((UnitGetOwner(lp_nerazimImmortal) == 3) || (UnitGetOwner(lp_nerazimImmortal) == 4) || (UnitGetOwner(lp_nerazimImmortal) == 5) || (UnitGetOwner(lp_nerazimImmortal) == 6) || (UnitGetOwner(lp_nerazimImmortal) == 7))) {
        if (((UnitGetPropertyFixed(lp_nerazimImmortal, c_unitPropShieldsPercent, c_unitPropCurrent) <= 0.5) || ((UnitGetPropertyFixed(lp_nerazimImmortal, c_unitPropShieldsPercent, c_unitPropCurrent) <= 0.8) && (UnitGetPropertyFixed(lp_nerazimImmortal, c_unitPropLifePercent, c_unitPropCurrent) <= 0.5)))) {
            lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimImmortal), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimImmortal), 16.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            autoD25151CB_g = lv_enemyGroup;
            autoD25151CB_u = UnitGroupCount(autoD25151CB_g, c_unitCountAll);
            for (;; autoD25151CB_u -= 1) {
                autoD25151CB_var = UnitGroupUnitFromEnd(autoD25151CB_g, autoD25151CB_u);
                if (autoD25151CB_var == null) { break; }
                if ((UnitInRangeAndAbleToAttackTarget(autoD25151CB_var, lp_nerazimImmortal) == true)) {
                }
                else {
                    UnitGroupRemove(lv_enemyGroup, autoD25151CB_var);
                }
            }
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimImmortal, "NerazimImmortalBlink", "Abil/NerazimImmortalBlink") <= 0.0)) {
                UnitIssueOrder(lp_nerazimImmortal, OrderTargetingPoint(AbilityCommand("NerazimImmortalBlink", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_nerazimImmortal), -8.0, UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup, UnitGetPosition(lp_nerazimImmortal))))), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nerazimImmortal, false);
                AISetUnitSuicide(lp_nerazimImmortal, true);
            }

        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_NerazimStalkerAbility_Trigger = null;
unit auto_libA4E3281A_gf_NerazimStalkerAbility_lp_nerazimStalker;

void libA4E3281A_gf_NerazimStalkerAbility (unit lp_nerazimStalker) {
    auto_libA4E3281A_gf_NerazimStalkerAbility_lp_nerazimStalker = lp_nerazimStalker;

    if (auto_libA4E3281A_gf_NerazimStalkerAbility_Trigger == null) {
        auto_libA4E3281A_gf_NerazimStalkerAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_NerazimStalkerAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_NerazimStalkerAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_NerazimStalkerAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimStalker = auto_libA4E3281A_gf_NerazimStalkerAbility_lp_nerazimStalker;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto858DB35D_g;
    int auto858DB35D_u;
    unit auto858DB35D_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimStalker) == true) && ((UnitGetOwner(lp_nerazimStalker) == 3) || (UnitGetOwner(lp_nerazimStalker) == 4) || (UnitGetOwner(lp_nerazimStalker) == 5) || (UnitGetOwner(lp_nerazimStalker) == 6) || (UnitGetOwner(lp_nerazimStalker) == 7))) {
        if (((UnitGetPropertyFixed(lp_nerazimStalker, c_unitPropShieldsPercent, c_unitPropCurrent) <= 0.5) || ((UnitGetPropertyFixed(lp_nerazimStalker, c_unitPropShieldsPercent, c_unitPropCurrent) <= 0.8) && (UnitGetPropertyFixed(lp_nerazimStalker, c_unitPropLifePercent, c_unitPropCurrent) <= 0.5)))) {
            lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimStalker), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimStalker), 16.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            auto858DB35D_g = lv_enemyGroup;
            auto858DB35D_u = UnitGroupCount(auto858DB35D_g, c_unitCountAll);
            for (;; auto858DB35D_u -= 1) {
                auto858DB35D_var = UnitGroupUnitFromEnd(auto858DB35D_g, auto858DB35D_u);
                if (auto858DB35D_var == null) { break; }
                if ((UnitInRangeAndAbleToAttackTarget(auto858DB35D_var, lp_nerazimStalker) == true)) {
                }
                else {
                    UnitGroupRemove(lv_enemyGroup, auto858DB35D_var);
                }
            }
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimStalker, "NerazimStalkerBlink", "BlinkBlink2BlinkStalkerNerazimBlinkBlinkBlink2BlinkNerazimStalkerBlink") <= 0.0)) {
                UnitIssueOrder(lp_nerazimStalker, OrderTargetingPoint(AbilityCommand("NerazimStalkerBlink", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_nerazimStalker), -8.0, UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup, UnitGetPosition(lp_nerazimStalker))))), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nerazimStalker, false);
                AISetUnitSuicide(lp_nerazimStalker, true);
            }

        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_NestDefilerAbility1_Trigger = null;
unit auto_libA4E3281A_gf_NestDefilerAbility1_lp_nestDefiler;

void libA4E3281A_gf_NestDefilerAbility1 (unit lp_nestDefiler) {
    auto_libA4E3281A_gf_NestDefilerAbility1_lp_nestDefiler = lp_nestDefiler;

    if (auto_libA4E3281A_gf_NestDefilerAbility1_Trigger == null) {
        auto_libA4E3281A_gf_NestDefilerAbility1_Trigger = TriggerCreate("auto_libA4E3281A_gf_NestDefilerAbility1_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_NestDefilerAbility1_Trigger, false, false);
}

bool auto_libA4E3281A_gf_NestDefilerAbility1_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nestDefiler = auto_libA4E3281A_gf_NestDefilerAbility1_lp_nestDefiler;

    // Variable Declarations
    unitgroup lv_alliedGroup;
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup autoA2AEBF23_g;
    int autoA2AEBF23_u;
    unit autoA2AEBF23_var;

    // Variable Initialization
    lv_alliedGroup = UnitGroupEmpty();
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nestDefiler) == true) && ((UnitGetOwner(lp_nestDefiler) == 3) || (UnitGetOwner(lp_nestDefiler) == 4) || (UnitGetOwner(lp_nestDefiler) == 5) || (UnitGetOwner(lp_nestDefiler) == 6) || (UnitGetOwner(lp_nestDefiler) == 7))) {
        lv_alliedGroup = UnitGroupAlliance(UnitGetOwner(lp_nestDefiler), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_nestDefiler), 13.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoA2AEBF23_g = lv_alliedGroup;
        autoA2AEBF23_u = UnitGroupCount(autoA2AEBF23_g, c_unitCountAll);
        for (;; autoA2AEBF23_u -= 1) {
            autoA2AEBF23_var = UnitGroupUnitFromEnd(autoA2AEBF23_g, autoA2AEBF23_u);
            if (autoA2AEBF23_var == null) { break; }
            if ((UnitHasBehavior2(autoA2AEBF23_var, "UnknownBehavior") == true)) {
                UnitGroupRemove(lv_alliedGroup, autoA2AEBF23_var);
            }

        }
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestDefiler), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestDefiler), 23.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerDarkSwarm", "Abil/NestDefilerDarkSwarm") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerDarkSwarm", 0), AIBestTargetPoint(lv_alliedGroup, 3, 0, 0.0, 4.0, UnitGetPosition(lp_nestDefiler), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestDefiler, false);
            AISetUnitSuicide(lp_nestDefiler, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerDarkSwarm", "Abil/NestDefilerDarkSwarm") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerDarkSwarm", 0), AIBestTargetPoint(lv_alliedGroup, 2, 0, 0.0, 4.0, UnitGetPosition(lp_nestDefiler), 9.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nestDefiler, false);
                AISetUnitSuicide(lp_nestDefiler, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerDarkSwarm", "Abil/NestDefilerDarkSwarm") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                    UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerDarkSwarm", 0), AIBestTargetPoint(lv_alliedGroup, 1, 0, 0.0, 4.0, UnitGetPosition(lp_nestDefiler), 9.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nestDefiler, false);
                    AISetUnitSuicide(lp_nestDefiler, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_NestDefilerAbility2_Trigger = null;
unit auto_libA4E3281A_gf_NestDefilerAbility2_lp_nestDefiler;

void libA4E3281A_gf_NestDefilerAbility2 (unit lp_nestDefiler) {
    auto_libA4E3281A_gf_NestDefilerAbility2_lp_nestDefiler = lp_nestDefiler;

    if (auto_libA4E3281A_gf_NestDefilerAbility2_Trigger == null) {
        auto_libA4E3281A_gf_NestDefilerAbility2_Trigger = TriggerCreate("auto_libA4E3281A_gf_NestDefilerAbility2_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_NestDefilerAbility2_Trigger, false, false);
}

bool auto_libA4E3281A_gf_NestDefilerAbility2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nestDefiler = auto_libA4E3281A_gf_NestDefilerAbility2_lp_nestDefiler;

    // Variable Declarations
    unitgroup lv_alliedGroup;
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto7B3014E2_g;
    int auto7B3014E2_u;
    unit auto7B3014E2_var;
    unitgroup autoCE5CA85E_g;
    int autoCE5CA85E_u;
    unit autoCE5CA85E_var;

    // Variable Initialization
    lv_alliedGroup = UnitGroupEmpty();
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nestDefiler) == true) && ((UnitGetOwner(lp_nestDefiler) == 3) || (UnitGetOwner(lp_nestDefiler) == 4) || (UnitGetOwner(lp_nestDefiler) == 5) || (UnitGetOwner(lp_nestDefiler) == 6) || (UnitGetOwner(lp_nestDefiler) == 7))) {
        lv_alliedGroup = UnitGroupAlliance(UnitGetOwner(lp_nestDefiler), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_nestDefiler), 13.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto7B3014E2_g = lv_alliedGroup;
        auto7B3014E2_u = UnitGroupCount(auto7B3014E2_g, c_unitCountAll);
        for (;; auto7B3014E2_u -= 1) {
            auto7B3014E2_var = UnitGroupUnitFromEnd(auto7B3014E2_g, auto7B3014E2_u);
            if (auto7B3014E2_var == null) { break; }
            if ((UnitHasBehavior2(auto7B3014E2_var, "UnknownBehavior") == true)) {
                UnitGroupRemove(lv_alliedGroup, auto7B3014E2_var);
            }

        }
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestDefiler), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestDefiler), 23.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerDarkSwarm", "Abil/NestDefilerDarkSwarm") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerDarkSwarm", 0), AIBestTargetPoint(lv_alliedGroup, 3, 0, 0.0, 4.0, UnitGetPosition(lp_nestDefiler), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestDefiler, false);
            AISetUnitSuicide(lp_nestDefiler, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerDarkSwarm", "Abil/NestDefilerDarkSwarm") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerDarkSwarm", 0), AIBestTargetPoint(lv_alliedGroup, 2, 0, 0.0, 4.0, UnitGetPosition(lp_nestDefiler), 9.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nestDefiler, false);
                AISetUnitSuicide(lp_nestDefiler, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerDarkSwarm", "Abil/NestDefilerDarkSwarm") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                    UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerDarkSwarm", 0), AIBestTargetPoint(lv_alliedGroup, 1, 0, 0.0, 4.0, UnitGetPosition(lp_nestDefiler), 9.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nestDefiler, false);
                    AISetUnitSuicide(lp_nestDefiler, true);
                }

            }
        }
        Wait(0.05, c_timeAI);
        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestDefiler), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestDefiler), 9.5), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoCE5CA85E_g = lv_enemyGroup;
        autoCE5CA85E_u = UnitGroupCount(autoCE5CA85E_g, c_unitCountAll);
        for (;; autoCE5CA85E_u -= 1) {
            autoCE5CA85E_var = UnitGroupUnitFromEnd(autoCE5CA85E_g, autoCE5CA85E_u);
            if (autoCE5CA85E_var == null) { break; }
            if ((UnitHasBehavior2(autoCE5CA85E_var, "NestDefilerPlague") == true)) {
                UnitGroupRemove(lv_enemyGroup, autoCE5CA85E_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerPlague", "Abil/NestDefilerPlague") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 150.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerPlague", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 1.5, UnitGetPosition(lp_nestDefiler), 8.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestDefiler, false);
            AISetUnitSuicide(lp_nestDefiler, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerPlague", "Abil/NestDefilerPlague") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 150.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerPlague", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 1.5, UnitGetPosition(lp_nestDefiler), 8.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nestDefiler, false);
                AISetUnitSuicide(lp_nestDefiler, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerPlague", "Abil/NestDefilerPlague") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 150.0)) {
                    UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerPlague", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 1.5, UnitGetPosition(lp_nestDefiler), 8.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nestDefiler, false);
                    AISetUnitSuicide(lp_nestDefiler, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_NestLurkerAbility_Trigger = null;
unit auto_libA4E3281A_gf_NestLurkerAbility_lp_nestLurker;

void libA4E3281A_gf_NestLurkerAbility (unit lp_nestLurker) {
    auto_libA4E3281A_gf_NestLurkerAbility_lp_nestLurker = lp_nestLurker;

    if (auto_libA4E3281A_gf_NestLurkerAbility_Trigger == null) {
        auto_libA4E3281A_gf_NestLurkerAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_NestLurkerAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_NestLurkerAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_NestLurkerAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nestLurker = auto_libA4E3281A_gf_NestLurkerAbility_lp_nestLurker;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nestLurker) == true) && ((UnitGetOwner(lp_nestLurker) == 3) || (UnitGetOwner(lp_nestLurker) == 4) || (UnitGetOwner(lp_nestLurker) == 5) || (UnitGetOwner(lp_nestLurker) == 6) || (UnitGetOwner(lp_nestLurker) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestLurker), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestLurker), libA4E3281A_gv_nestLurkerSearchArea), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitHasBehavior2(EventUnit(), "NestLurkerWeaponDisabled") == true)) {
            UnitIssueOrder(lp_nestLurker, Order(AbilityCommand("NestLurkerBurrowDown", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestLurker, false);
            AISetUnitSuicide(lp_nestLurker, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0) && (UnitHasBehavior2(EventUnit(), "NestLurkerWeaponDisabled") == false)) {
                UnitIssueOrder(lp_nestLurker, Order(AbilityCommand("NestLurkerBurrowUp", 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nestLurker, false);
                AISetUnitSuicide(lp_nestLurker, true);
            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_NestQueenAbility1_Trigger = null;
unit auto_libA4E3281A_gf_NestQueenAbility1_lp_nestQueen;

void libA4E3281A_gf_NestQueenAbility1 (unit lp_nestQueen) {
    auto_libA4E3281A_gf_NestQueenAbility1_lp_nestQueen = lp_nestQueen;

    if (auto_libA4E3281A_gf_NestQueenAbility1_Trigger == null) {
        auto_libA4E3281A_gf_NestQueenAbility1_Trigger = TriggerCreate("auto_libA4E3281A_gf_NestQueenAbility1_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_NestQueenAbility1_Trigger, false, false);
}

bool auto_libA4E3281A_gf_NestQueenAbility1_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nestQueen = auto_libA4E3281A_gf_NestQueenAbility1_lp_nestQueen;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto2B0AA790_g;
    int auto2B0AA790_u;
    unit auto2B0AA790_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nestQueen) == true) && ((UnitGetOwner(lp_nestQueen) == 3) || (UnitGetOwner(lp_nestQueen) == 4) || (UnitGetOwner(lp_nestQueen) == 5) || (UnitGetOwner(lp_nestQueen) == 6) || (UnitGetOwner(lp_nestQueen) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestQueen), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestQueen), 14.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto2B0AA790_g = lv_enemyGroup;
        auto2B0AA790_u = UnitGroupCount(auto2B0AA790_g, c_unitCountAll);
        for (;; auto2B0AA790_u -= 1) {
            auto2B0AA790_var = UnitGroupUnitFromEnd(auto2B0AA790_g, auto2B0AA790_u);
            if (auto2B0AA790_var == null) { break; }
            if ((UnitHasBehavior2(auto2B0AA790_var, "NestQueenFungalGrowthMovement2") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto2B0AA790_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenFungalGrowth", "Abil/NestQueenFungalGrowth") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nestQueen, OrderTargetingPoint(AbilityCommand("NestQueenFungalGrowth", 0), AIBestTargetPoint(lv_enemyGroup, 3, 160, 1.5, 2.0, UnitGetPosition(lp_nestQueen), 12.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestQueen, false);
            AISetUnitSuicide(lp_nestQueen, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenFungalGrowth", "Abil/NestQueenFungalGrowth") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nestQueen, OrderTargetingPoint(AbilityCommand("NestQueenFungalGrowth", 0), AIBestTargetPoint(lv_enemyGroup, 2, 110, 1.0, 2.0, UnitGetPosition(lp_nestQueen), 12.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nestQueen, false);
                AISetUnitSuicide(lp_nestQueen, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenFungalGrowth", "Abil/NestQueenFungalGrowth") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_nestQueen, OrderTargetingPoint(AbilityCommand("NestQueenFungalGrowth", 0), AIBestTargetPoint(lv_enemyGroup, 1, 60, 0.5, 2.0, UnitGetPosition(lp_nestQueen), 12.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nestQueen, false);
                    AISetUnitSuicide(lp_nestQueen, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_NestQueenAbility2_Trigger = null;
unit auto_libA4E3281A_gf_NestQueenAbility2_lp_nestQueen;

void libA4E3281A_gf_NestQueenAbility2 (unit lp_nestQueen) {
    auto_libA4E3281A_gf_NestQueenAbility2_lp_nestQueen = lp_nestQueen;

    if (auto_libA4E3281A_gf_NestQueenAbility2_Trigger == null) {
        auto_libA4E3281A_gf_NestQueenAbility2_Trigger = TriggerCreate("auto_libA4E3281A_gf_NestQueenAbility2_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_NestQueenAbility2_Trigger, false, false);
}

bool auto_libA4E3281A_gf_NestQueenAbility2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nestQueen = auto_libA4E3281A_gf_NestQueenAbility2_lp_nestQueen;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto7E5CE17C_g;
    int auto7E5CE17C_u;
    unit auto7E5CE17C_var;
    unitgroup auto0FB65D6E_g;
    int auto0FB65D6E_u;
    unit auto0FB65D6E_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nestQueen) == true) && ((UnitGetOwner(lp_nestQueen) == 3) || (UnitGetOwner(lp_nestQueen) == 4) || (UnitGetOwner(lp_nestQueen) == 5) || (UnitGetOwner(lp_nestQueen) == 6) || (UnitGetOwner(lp_nestQueen) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestQueen), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestQueen), 14.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto7E5CE17C_g = lv_enemyGroup;
        auto7E5CE17C_u = UnitGroupCount(auto7E5CE17C_g, c_unitCountAll);
        for (;; auto7E5CE17C_u -= 1) {
            auto7E5CE17C_var = UnitGroupUnitFromEnd(auto7E5CE17C_g, auto7E5CE17C_u);
            if (auto7E5CE17C_var == null) { break; }
            if ((UnitHasBehavior2(auto7E5CE17C_var, "NestQueenFungalGrowthMovement2") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto7E5CE17C_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenFungalGrowth", "Abil/NestQueenFungalGrowth") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nestQueen, OrderTargetingPoint(AbilityCommand("NestQueenFungalGrowth", 0), AIBestTargetPoint(lv_enemyGroup, 3, 160, 1.5, 2.0, UnitGetPosition(lp_nestQueen), 12.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestQueen, false);
            AISetUnitSuicide(lp_nestQueen, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenFungalGrowth", "Abil/NestQueenFungalGrowth") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nestQueen, OrderTargetingPoint(AbilityCommand("NestQueenFungalGrowth", 0), AIBestTargetPoint(lv_enemyGroup, 2, 110, 1.0, 2.0, UnitGetPosition(lp_nestQueen), 12.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nestQueen, false);
                AISetUnitSuicide(lp_nestQueen, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenFungalGrowth", "Abil/NestQueenFungalGrowth") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_nestQueen, OrderTargetingPoint(AbilityCommand("NestQueenFungalGrowth", 0), AIBestTargetPoint(lv_enemyGroup, 1, 60, 0.5, 2.0, UnitGetPosition(lp_nestQueen), 12.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nestQueen, false);
                    AISetUnitSuicide(lp_nestQueen, true);
                }

            }
        }
        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestQueen), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestQueen), 11.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterHeroUnit - 32))), 0);
        auto0FB65D6E_g = lv_enemyGroup;
        auto0FB65D6E_u = UnitGroupCount(auto0FB65D6E_g, c_unitCountAll);
        for (;; auto0FB65D6E_u -= 1) {
            auto0FB65D6E_var = UnitGroupUnitFromEnd(auto0FB65D6E_g, auto0FB65D6E_u);
            if (auto0FB65D6E_var == null) { break; }
            if ((((UnitGetPropertyFixed(auto0FB65D6E_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(auto0FB65D6E_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeGetProperty(UnitGetType(auto0FB65D6E_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto0FB65D6E_var);
            }
        }
        if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenBlastKill", "Abil/NestQueenBlastKill") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 100.0)) {
            UnitIssueOrder(lp_nestQueen, OrderTargetingUnit(AbilityCommand("NestQueenBlastKill", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestQueen, false);
            AISetUnitSuicide(lp_nestQueen, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_TaldarimHTAbility1_Trigger = null;
unit auto_libA4E3281A_gf_TaldarimHTAbility1_lp_taldarimHT;

void libA4E3281A_gf_TaldarimHTAbility1 (unit lp_taldarimHT) {
    auto_libA4E3281A_gf_TaldarimHTAbility1_lp_taldarimHT = lp_taldarimHT;

    if (auto_libA4E3281A_gf_TaldarimHTAbility1_Trigger == null) {
        auto_libA4E3281A_gf_TaldarimHTAbility1_Trigger = TriggerCreate("auto_libA4E3281A_gf_TaldarimHTAbility1_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_TaldarimHTAbility1_Trigger, false, false);
}

bool auto_libA4E3281A_gf_TaldarimHTAbility1_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimHT = auto_libA4E3281A_gf_TaldarimHTAbility1_lp_taldarimHT;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimHT) == true) && ((UnitGetOwner(lp_taldarimHT) == 3) || (UnitGetOwner(lp_taldarimHT) == 4) || (UnitGetOwner(lp_taldarimHT) == 5) || (UnitGetOwner(lp_taldarimHT) == 6) || (UnitGetOwner(lp_taldarimHT) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimHT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimHT), 13.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarPsiOrb", "Abil/TaldarimHighTemplarPsiOrb") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_taldarimHT, OrderTargetingPoint(AbilityCommand("TaldarimHighTemplarPsiOrb", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.0, UnitGetPosition(lp_taldarimHT), 10.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimHT, false);
            AISetUnitSuicide(lp_taldarimHT, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarPsiOrb", "Abil/TaldarimHighTemplarPsiOrb") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_taldarimHT, OrderTargetingPoint(AbilityCommand("TaldarimHighTemplarPsiOrb", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.0, UnitGetPosition(lp_taldarimHT), 10.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_taldarimHT, false);
                AISetUnitSuicide(lp_taldarimHT, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarPsiOrb", "Abil/TaldarimHighTemplarPsiOrb") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_taldarimHT, OrderTargetingPoint(AbilityCommand("TaldarimHighTemplarPsiOrb", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.0, UnitGetPosition(lp_taldarimHT), 10.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_taldarimHT, false);
                    AISetUnitSuicide(lp_taldarimHT, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_TaldarimHTAbility2_Trigger = null;
unit auto_libA4E3281A_gf_TaldarimHTAbility2_lp_taldarimHT;

void libA4E3281A_gf_TaldarimHTAbility2 (unit lp_taldarimHT) {
    auto_libA4E3281A_gf_TaldarimHTAbility2_lp_taldarimHT = lp_taldarimHT;

    if (auto_libA4E3281A_gf_TaldarimHTAbility2_Trigger == null) {
        auto_libA4E3281A_gf_TaldarimHTAbility2_Trigger = TriggerCreate("auto_libA4E3281A_gf_TaldarimHTAbility2_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_TaldarimHTAbility2_Trigger, false, false);
}

bool auto_libA4E3281A_gf_TaldarimHTAbility2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimHT = auto_libA4E3281A_gf_TaldarimHTAbility2_lp_taldarimHT;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto2A814293_g;
    int auto2A814293_u;
    unit auto2A814293_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimHT) == true) && ((UnitGetOwner(lp_taldarimHT) == 3) || (UnitGetOwner(lp_taldarimHT) == 4) || (UnitGetOwner(lp_taldarimHT) == 5) || (UnitGetOwner(lp_taldarimHT) == 6) || (UnitGetOwner(lp_taldarimHT) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimHT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimHT), 9.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto2A814293_g = lv_enemyGroup;
        auto2A814293_u = UnitGroupCount(auto2A814293_g, c_unitCountAll);
        for (;; auto2A814293_u -= 1) {
            auto2A814293_var = UnitGroupUnitFromEnd(auto2A814293_g, auto2A814293_u);
            if (auto2A814293_var == null) { break; }
            if ((((UnitGetPropertyFixed(auto2A814293_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(auto2A814293_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeTestFlag(UnitGetType(auto2A814293_var), c_unitFlagHero) == true) || (UnitTypeGetProperty(UnitGetType(auto2A814293_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto2A814293_var);
            }
        }
        if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarMindBlast", "Abil/TaldarimHighTemplarMindBlast") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 100.0)) {
            UnitIssueOrder(lp_taldarimHT, OrderTargetingUnit(AbilityCommand("TaldarimHighTemplarMindBlast", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimHT, false);
            AISetUnitSuicide(lp_taldarimHT, true);
        }

        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimHT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimHT), 13.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarPsiOrb", "Abil/TaldarimHighTemplarPsiOrb") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_taldarimHT, OrderTargetingPoint(AbilityCommand("TaldarimHighTemplarPsiOrb", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.0, UnitGetPosition(lp_taldarimHT), 10.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimHT, false);
            AISetUnitSuicide(lp_taldarimHT, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarPsiOrb", "Abil/TaldarimHighTemplarPsiOrb") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_taldarimHT, OrderTargetingPoint(AbilityCommand("TaldarimHighTemplarPsiOrb", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.0, UnitGetPosition(lp_taldarimHT), 10.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_taldarimHT, false);
                AISetUnitSuicide(lp_taldarimHT, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarPsiOrb", "Abil/TaldarimHighTemplarPsiOrb") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_taldarimHT, OrderTargetingPoint(AbilityCommand("TaldarimHighTemplarPsiOrb", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.0, UnitGetPosition(lp_taldarimHT), 10.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_taldarimHT, false);
                    AISetUnitSuicide(lp_taldarimHT, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_TaldarimMothershipAbility_Trigger = null;
unit auto_libA4E3281A_gf_TaldarimMothershipAbility_lp_taldarimMothership;

void libA4E3281A_gf_TaldarimMothershipAbility (unit lp_taldarimMothership) {
    auto_libA4E3281A_gf_TaldarimMothershipAbility_lp_taldarimMothership = lp_taldarimMothership;

    if (auto_libA4E3281A_gf_TaldarimMothershipAbility_Trigger == null) {
        auto_libA4E3281A_gf_TaldarimMothershipAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_TaldarimMothershipAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_TaldarimMothershipAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_TaldarimMothershipAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimMothership = auto_libA4E3281A_gf_TaldarimMothershipAbility_lp_taldarimMothership;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimMothership) == true) && ((UnitGetOwner(lp_taldarimMothership) == 3) || (UnitGetOwner(lp_taldarimMothership) == 4) || (UnitGetOwner(lp_taldarimMothership) == 5) || (UnitGetOwner(lp_taldarimMothership) == 6) || (UnitGetOwner(lp_taldarimMothership) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimMothership), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimMothership), 6.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_taldarimMothership, "TaldarimMothershipGravityBomb", "Abil/TaldarimMothershipGravityBomb") <= 0.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 3) && (UnitGetPropertyFixed(lp_taldarimMothership, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
            UnitIssueOrder(lp_taldarimMothership, Order(AbilityCommand("TaldarimMothershipGravityBomb", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimMothership, false);
            AISetUnitSuicide(lp_taldarimMothership, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_TaldarimMothershipCoreAbility_Trigger = null;
unit auto_libA4E3281A_gf_TaldarimMothershipCoreAbility_lp_taldarimMothershipCore;

void libA4E3281A_gf_TaldarimMothershipCoreAbility (unit lp_taldarimMothershipCore) {
    auto_libA4E3281A_gf_TaldarimMothershipCoreAbility_lp_taldarimMothershipCore = lp_taldarimMothershipCore;

    if (auto_libA4E3281A_gf_TaldarimMothershipCoreAbility_Trigger == null) {
        auto_libA4E3281A_gf_TaldarimMothershipCoreAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_TaldarimMothershipCoreAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_TaldarimMothershipCoreAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_TaldarimMothershipCoreAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimMothershipCore = auto_libA4E3281A_gf_TaldarimMothershipCoreAbility_lp_taldarimMothershipCore;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto9DBB5A02_g;
    int auto9DBB5A02_u;
    unit auto9DBB5A02_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimMothershipCore) == true) && ((UnitGetOwner(lp_taldarimMothershipCore) == 3) || (UnitGetOwner(lp_taldarimMothershipCore) == 4) || (UnitGetOwner(lp_taldarimMothershipCore) == 5) || (UnitGetOwner(lp_taldarimMothershipCore) == 6) || (UnitGetOwner(lp_taldarimMothershipCore) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimMothershipCore), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimMothershipCore), 12.25), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto9DBB5A02_g = lv_enemyGroup;
        auto9DBB5A02_u = UnitGroupCount(auto9DBB5A02_g, c_unitCountAll);
        for (;; auto9DBB5A02_u -= 1) {
            auto9DBB5A02_var = UnitGroupUnitFromEnd(auto9DBB5A02_g, auto9DBB5A02_u);
            if (auto9DBB5A02_var == null) { break; }
            if ((UnitHasBehavior2(auto9DBB5A02_var, "TaldarimMothershipTemporalRiftUnit") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto9DBB5A02_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_taldarimMothershipCore, "TaldarimMothershipCoreTemporalField", "Abil/TaldarimMothershipCoreTemporalField") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimMothershipCore, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_taldarimMothershipCore, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.32)) {
            UnitIssueOrder(lp_taldarimMothershipCore, OrderTargetingPoint(AbilityCommand("TaldarimMothershipCoreTemporalField", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.25, UnitGetPosition(lp_taldarimMothershipCore), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimMothershipCore, false);
            AISetUnitSuicide(lp_taldarimMothershipCore, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_taldarimMothershipCore, "TaldarimMothershipCoreTemporalField", "Abil/TaldarimMothershipCoreTemporalField") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimMothershipCore, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_taldarimMothershipCore, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
                UnitIssueOrder(lp_taldarimMothershipCore, OrderTargetingPoint(AbilityCommand("TaldarimMothershipCoreTemporalField", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.25, UnitGetPosition(lp_taldarimMothershipCore), 9.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_taldarimMothershipCore, false);
                AISetUnitSuicide(lp_taldarimMothershipCore, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_taldarimMothershipCore, "TaldarimMothershipCoreTemporalField", "Abil/TaldarimMothershipCoreTemporalField") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimMothershipCore, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                    UnitIssueOrder(lp_taldarimMothershipCore, OrderTargetingPoint(AbilityCommand("TaldarimMothershipCoreTemporalField", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.25, UnitGetPosition(lp_taldarimMothershipCore), 9.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_taldarimMothershipCore, false);
                    AISetUnitSuicide(lp_taldarimMothershipCore, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_TaldarimSentryAbility_Trigger = null;
unit auto_libA4E3281A_gf_TaldarimSentryAbility_lp_taldarimSentry;

void libA4E3281A_gf_TaldarimSentryAbility (unit lp_taldarimSentry) {
    auto_libA4E3281A_gf_TaldarimSentryAbility_lp_taldarimSentry = lp_taldarimSentry;

    if (auto_libA4E3281A_gf_TaldarimSentryAbility_Trigger == null) {
        auto_libA4E3281A_gf_TaldarimSentryAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_TaldarimSentryAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_TaldarimSentryAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_TaldarimSentryAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimSentry = auto_libA4E3281A_gf_TaldarimSentryAbility_lp_taldarimSentry;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup autoA2A4D068_g;
    int autoA2A4D068_u;
    unit autoA2A4D068_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimSentry) == true) && ((UnitGetOwner(lp_taldarimSentry) == 3) || (UnitGetOwner(lp_taldarimSentry) == 4) || (UnitGetOwner(lp_taldarimSentry) == 5) || (UnitGetOwner(lp_taldarimSentry) == 6) || (UnitGetOwner(lp_taldarimSentry) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimSentry), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimSentry), 6.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoA2A4D068_g = lv_enemyGroup;
        autoA2A4D068_u = UnitGroupCount(autoA2A4D068_g, c_unitCountAll);
        for (;; autoA2A4D068_u -= 1) {
            autoA2A4D068_var = UnitGroupUnitFromEnd(autoA2A4D068_g, autoA2A4D068_u);
            if (autoA2A4D068_var == null) { break; }
            if ((UnitWeaponRange(autoA2A4D068_var, 1) > 5.0)) {
                UnitGroupRemove(lv_enemyGroup, autoA2A4D068_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_taldarimSentry, "TaldarimSentryForceField", "Abil/TaldarimSentryForceField") <= 0.0)) {
            lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup, UnitGetPosition(lp_taldarimSentry))), 1.0, UnitGetPosition(lp_taldarimSentry));
            if ((UnitCount("ForceField", c_playerAny, RegionCircle(lv_targetPoint, 1.5), UnitFilter(0, 0, 0, 0), 0) >= 1)) {
            }
            else {
                UnitIssueOrder(lp_taldarimSentry, OrderTargetingPoint(AbilityCommand("TaldarimSentryForceField", 0), lv_targetPoint), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_taldarimSentry, false);
                AISetUnitSuicide(lp_taldarimSentry, true);
            }
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_TaldarimStalkerAbility_Trigger = null;
unit auto_libA4E3281A_gf_TaldarimStalkerAbility_lp_taldarimStalker;

void libA4E3281A_gf_TaldarimStalkerAbility (unit lp_taldarimStalker) {
    auto_libA4E3281A_gf_TaldarimStalkerAbility_lp_taldarimStalker = lp_taldarimStalker;

    if (auto_libA4E3281A_gf_TaldarimStalkerAbility_Trigger == null) {
        auto_libA4E3281A_gf_TaldarimStalkerAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_TaldarimStalkerAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_TaldarimStalkerAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_TaldarimStalkerAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimStalker = auto_libA4E3281A_gf_TaldarimStalkerAbility_lp_taldarimStalker;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimStalker) == true) && ((UnitGetOwner(lp_taldarimStalker) == 3) || (UnitGetOwner(lp_taldarimStalker) == 4) || (UnitGetOwner(lp_taldarimStalker) == 5) || (UnitGetOwner(lp_taldarimStalker) == 6) || (UnitGetOwner(lp_taldarimStalker) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimStalker), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimStalker), 8.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_taldarimStalker, "TaldarimStalkerBlink", "Abil/TaldarimStalkerBlink") <= 0.0)) {
            UnitIssueOrder(lp_taldarimStalker, OrderTargetingPoint(AbilityCommand("TaldarimStalkerBlink", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup, UnitGetPosition(lp_taldarimStalker)))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimStalker, false);
            AISetUnitSuicide(lp_taldarimStalker, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_TaldarimZealotAbility_Trigger = null;
unit auto_libA4E3281A_gf_TaldarimZealotAbility_lp_taldarimZealot;

void libA4E3281A_gf_TaldarimZealotAbility (unit lp_taldarimZealot) {
    auto_libA4E3281A_gf_TaldarimZealotAbility_lp_taldarimZealot = lp_taldarimZealot;

    if (auto_libA4E3281A_gf_TaldarimZealotAbility_Trigger == null) {
        auto_libA4E3281A_gf_TaldarimZealotAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_TaldarimZealotAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_TaldarimZealotAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_TaldarimZealotAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimZealot = auto_libA4E3281A_gf_TaldarimZealotAbility_lp_taldarimZealot;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimZealot) == true) && ((UnitGetOwner(lp_taldarimZealot) == 3) || (UnitGetOwner(lp_taldarimZealot) == 4) || (UnitGetOwner(lp_taldarimZealot) == 5) || (UnitGetOwner(lp_taldarimZealot) == 6) || (UnitGetOwner(lp_taldarimZealot) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimZealot), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimZealot), 2.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_taldarimZealot, "TaldarimZealotShockwave", "Abil/TaldarimZealotShockwave") <= 0.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 2)) {
            UnitIssueOrder(lp_taldarimZealot, Order(AbilityCommand("TaldarimZealotShockwave", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimZealot, false);
            AISetUnitSuicide(lp_taldarimZealot, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_KelMorianAPCAbility_Trigger = null;
unit auto_libA4E3281A_gf_KelMorianAPCAbility_lp_kelMorianAPC;

void libA4E3281A_gf_KelMorianAPCAbility (unit lp_kelMorianAPC) {
    auto_libA4E3281A_gf_KelMorianAPCAbility_lp_kelMorianAPC = lp_kelMorianAPC;

    if (auto_libA4E3281A_gf_KelMorianAPCAbility_Trigger == null) {
        auto_libA4E3281A_gf_KelMorianAPCAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_KelMorianAPCAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_KelMorianAPCAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_KelMorianAPCAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_kelMorianAPC = auto_libA4E3281A_gf_KelMorianAPCAbility_lp_kelMorianAPC;

    // Automatic Variable Declarations
    // Implementation
    Wait(5.0, c_timeAI);
    if ((UnitIsAlive(lp_kelMorianAPC) == true)) {
        UnitCargoCreate(lp_kelMorianAPC, "KelMorianMiner", 4);
        UnitCargoCreate(lp_kelMorianAPC, "KelMorianCivilianMale", 2);
        UnitCargoCreate(lp_kelMorianAPC, "KelMorianCivilianFemale", 2);
    }

    return true;
}

trigger auto_libA4E3281A_gf_KelMorianRavenAbility_Trigger = null;
unit auto_libA4E3281A_gf_KelMorianRavenAbility_lp_kelMorianRaven;

void libA4E3281A_gf_KelMorianRavenAbility (unit lp_kelMorianRaven) {
    auto_libA4E3281A_gf_KelMorianRavenAbility_lp_kelMorianRaven = lp_kelMorianRaven;

    if (auto_libA4E3281A_gf_KelMorianRavenAbility_Trigger == null) {
        auto_libA4E3281A_gf_KelMorianRavenAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_KelMorianRavenAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_KelMorianRavenAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_KelMorianRavenAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_kelMorianRaven = auto_libA4E3281A_gf_KelMorianRavenAbility_lp_kelMorianRaven;

    // Variable Declarations
    unitgroup lv_alliedGroup;

    // Automatic Variable Declarations
    unitgroup autoCC59DAC2_g;
    int autoCC59DAC2_u;
    unit autoCC59DAC2_var;

    // Variable Initialization
    lv_alliedGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_kelMorianRaven) == true) && ((UnitGetOwner(lp_kelMorianRaven) == 3) || (UnitGetOwner(lp_kelMorianRaven) == 4) || (UnitGetOwner(lp_kelMorianRaven) == 5) || (UnitGetOwner(lp_kelMorianRaven) == 6) || (UnitGetOwner(lp_kelMorianRaven) == 7))) {
        lv_alliedGroup = UnitGroupAlliance(UnitGetOwner(lp_kelMorianRaven), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kelMorianRaven), 8.0), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoCC59DAC2_g = lv_alliedGroup;
        autoCC59DAC2_u = UnitGroupCount(autoCC59DAC2_g, c_unitCountAll);
        for (;; autoCC59DAC2_u -= 1) {
            autoCC59DAC2_var = UnitGroupUnitFromEnd(autoCC59DAC2_g, autoCC59DAC2_u);
            if (autoCC59DAC2_var == null) { break; }
            if ((UnitGetPropertyFixed(autoCC59DAC2_var, c_unitPropLife, c_unitPropCurrent) > 200.0)) {
                UnitGroupRemove(lv_alliedGroup, autoCC59DAC2_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_kelMorianRaven, "KelMorianRavenArmorRepair", "Abil/KelMorianRavenArmorRepair") <= 0.0)) {
            UnitIssueOrder(lp_kelMorianRaven, OrderTargetingUnit(AbilityCommand("KelMorianRavenArmorRepair", 0), UnitGroupRandomUnit(lv_alliedGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_kelMorianRaven, false);
            AISetUnitSuicide(lp_kelMorianRaven, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_KelMorianNukeTrackAbility_Trigger = null;
unit auto_libA4E3281A_gf_KelMorianNukeTrackAbility_lp_kelMorianNukeTrack;

void libA4E3281A_gf_KelMorianNukeTrackAbility (unit lp_kelMorianNukeTrack) {
    auto_libA4E3281A_gf_KelMorianNukeTrackAbility_lp_kelMorianNukeTrack = lp_kelMorianNukeTrack;

    if (auto_libA4E3281A_gf_KelMorianNukeTrackAbility_Trigger == null) {
        auto_libA4E3281A_gf_KelMorianNukeTrackAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_KelMorianNukeTrackAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_KelMorianNukeTrackAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_KelMorianNukeTrackAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_kelMorianNukeTrack = auto_libA4E3281A_gf_KelMorianNukeTrackAbility_lp_kelMorianNukeTrack;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_kelMorianNukeTrack) == true) && ((UnitGetOwner(lp_kelMorianNukeTrack) == 3) || (UnitGetOwner(lp_kelMorianNukeTrack) == 4) || (UnitGetOwner(lp_kelMorianNukeTrack) == 5) || (UnitGetOwner(lp_kelMorianNukeTrack) == 6) || (UnitGetOwner(lp_kelMorianNukeTrack) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_kelMorianNukeTrack), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_kelMorianNukeTrack), 20.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_kelMorianNukeTrack, OrderTargetingUnit(AbilityCommand("KelMorianTRUCKNukeCharge", 0), UnitGroupClosestToPoint(lv_enemyGroup, UnitGetPosition(lp_kelMorianNukeTrack))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_kelMorianNukeTrack, false);
            AISetUnitSuicide(lp_kelMorianNukeTrack, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MechaBroodLordAbility_Trigger = null;
unit auto_libA4E3281A_gf_MechaBroodLordAbility_lp_mechaBroodLord;

void libA4E3281A_gf_MechaBroodLordAbility (unit lp_mechaBroodLord) {
    auto_libA4E3281A_gf_MechaBroodLordAbility_lp_mechaBroodLord = lp_mechaBroodLord;

    if (auto_libA4E3281A_gf_MechaBroodLordAbility_Trigger == null) {
        auto_libA4E3281A_gf_MechaBroodLordAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MechaBroodLordAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MechaBroodLordAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MechaBroodLordAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mechaBroodLord = auto_libA4E3281A_gf_MechaBroodLordAbility_lp_mechaBroodLord;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mechaBroodLord) == true) && ((UnitGetOwner(lp_mechaBroodLord) == 3) || (UnitGetOwner(lp_mechaBroodLord) == 4) || (UnitGetOwner(lp_mechaBroodLord) == 5) || (UnitGetOwner(lp_mechaBroodLord) == 6) || (UnitGetOwner(lp_mechaBroodLord) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaBroodLord), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaBroodLord), 8.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaBroodLord, "MechaBroodLordBombingRun", "Abil/MechaBroodLordBombingRun") <= 0.0)) {
            UnitIssueOrder(lp_mechaBroodLord, OrderTargetingPoint(AbilityCommand("MechaBroodLordBombingRun", 0), AIBestTargetPoint(lv_enemyGroup, 3, 150, 0.0, 4.0, UnitGetPosition(lp_mechaBroodLord), 6.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaBroodLord, false);
            AISetUnitSuicide(lp_mechaBroodLord, true);
        }

        lv_enemyGroup = null;
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MechaCorruptorAbility_Trigger = null;
unit auto_libA4E3281A_gf_MechaCorruptorAbility_lp_mechaCorruptor;

void libA4E3281A_gf_MechaCorruptorAbility (unit lp_mechaCorruptor) {
    auto_libA4E3281A_gf_MechaCorruptorAbility_lp_mechaCorruptor = lp_mechaCorruptor;

    if (auto_libA4E3281A_gf_MechaCorruptorAbility_Trigger == null) {
        auto_libA4E3281A_gf_MechaCorruptorAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MechaCorruptorAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MechaCorruptorAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MechaCorruptorAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mechaCorruptor = auto_libA4E3281A_gf_MechaCorruptorAbility_lp_mechaCorruptor;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_enemyTargetGroup;

    // Automatic Variable Declarations
    unitgroup auto37E959CF_g;
    int auto37E959CF_u;
    unit auto37E959CF_var;
    unitgroup autoEF571B49_g;
    int autoEF571B49_u;
    unit autoEF571B49_var;
    unitgroup auto95BF0FE9_g;
    int auto95BF0FE9_u;
    unit auto95BF0FE9_var;
    unitgroup auto10913726_g;
    int auto10913726_u;
    unit auto10913726_var;
    unitgroup auto603A9F12_g;
    int auto603A9F12_u;
    unit auto603A9F12_var;
    unitgroup auto0E600CDB_g;
    int auto0E600CDB_u;
    unit auto0E600CDB_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_enemyTargetGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mechaCorruptor) == true) && ((UnitGetOwner(lp_mechaCorruptor) == 3) || (UnitGetOwner(lp_mechaCorruptor) == 4) || (UnitGetOwner(lp_mechaCorruptor) == 5) || (UnitGetOwner(lp_mechaCorruptor) == 6) || (UnitGetOwner(lp_mechaCorruptor) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaCorruptor), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaCorruptor), 3.0), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto37E959CF_g = lv_enemyGroup;
        auto37E959CF_u = UnitGroupCount(auto37E959CF_g, c_unitCountAll);
        for (;; auto37E959CF_u -= 1) {
            auto37E959CF_var = UnitGroupUnitFromEnd(auto37E959CF_g, auto37E959CF_u);
            if (auto37E959CF_var == null) { break; }
            if ((UnitTypeTestAttribute(UnitGetType(auto37E959CF_var), c_unitAttributeMassive) == true)) {
                UnitGroupAdd(lv_enemyTargetGroup, auto37E959CF_var);
            }

        }
        if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_mechaCorruptor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_enemyTargetGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaCorruptor, false);
            AISetUnitSuicide(lp_mechaCorruptor, true);
        }
        else {
            autoEF571B49_g = lv_enemyGroup;
            autoEF571B49_u = UnitGroupCount(autoEF571B49_g, c_unitCountAll);
            for (;; autoEF571B49_u -= 1) {
                autoEF571B49_var = UnitGroupUnitFromEnd(autoEF571B49_g, autoEF571B49_u);
                if (autoEF571B49_var == null) { break; }
                if ((UnitTypeTestAttribute(UnitGetType(autoEF571B49_var), c_unitAttributeHeroic) == true)) {
                    UnitGroupAdd(lv_enemyTargetGroup, autoEF571B49_var);
                }

            }
            if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) >= 1)) {
                UnitIssueOrder(lp_mechaCorruptor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_enemyTargetGroup, c_unitCountAlive)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mechaCorruptor, false);
                AISetUnitSuicide(lp_mechaCorruptor, true);
            }
            else {
                auto95BF0FE9_g = lv_enemyGroup;
                auto95BF0FE9_u = UnitGroupCount(auto95BF0FE9_g, c_unitCountAll);
                for (;; auto95BF0FE9_u -= 1) {
                    auto95BF0FE9_var = UnitGroupUnitFromEnd(auto95BF0FE9_g, auto95BF0FE9_u);
                    if (auto95BF0FE9_var == null) { break; }
                    if ((UnitTypeGetProperty(UnitGetType(auto95BF0FE9_var), c_unitPropSuppliesUsed) >= 6.0)) {
                        UnitGroupAdd(lv_enemyTargetGroup, auto95BF0FE9_var);
                    }

                }
                if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(lp_mechaCorruptor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_enemyTargetGroup, c_unitCountAlive)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_mechaCorruptor, false);
                    AISetUnitSuicide(lp_mechaCorruptor, true);
                }
                else {
                    auto10913726_g = lv_enemyGroup;
                    auto10913726_u = UnitGroupCount(auto10913726_g, c_unitCountAll);
                    for (;; auto10913726_u -= 1) {
                        auto10913726_var = UnitGroupUnitFromEnd(auto10913726_g, auto10913726_u);
                        if (auto10913726_var == null) { break; }
                        if ((UnitTypeGetProperty(UnitGetType(auto10913726_var), c_unitPropSuppliesUsed) == 5.0)) {
                            UnitGroupAdd(lv_enemyTargetGroup, auto10913726_var);
                        }

                    }
                    if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) >= 1)) {
                        UnitIssueOrder(lp_mechaCorruptor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_enemyTargetGroup, c_unitCountAlive)), c_orderQueueAddToFront);
                        Wait(0.5, c_timeAI);
                        AISetUnitScriptControlled(lp_mechaCorruptor, false);
                        AISetUnitSuicide(lp_mechaCorruptor, true);
                    }
                    else {
                        auto603A9F12_g = lv_enemyGroup;
                        auto603A9F12_u = UnitGroupCount(auto603A9F12_g, c_unitCountAll);
                        for (;; auto603A9F12_u -= 1) {
                            auto603A9F12_var = UnitGroupUnitFromEnd(auto603A9F12_g, auto603A9F12_u);
                            if (auto603A9F12_var == null) { break; }
                            if ((UnitTypeGetProperty(UnitGetType(auto603A9F12_var), c_unitPropSuppliesUsed) == 4.0)) {
                                UnitGroupAdd(lv_enemyTargetGroup, auto603A9F12_var);
                            }

                        }
                        if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) >= 1)) {
                            UnitIssueOrder(lp_mechaCorruptor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_enemyTargetGroup, c_unitCountAlive)), c_orderQueueAddToFront);
                            Wait(0.5, c_timeAI);
                            AISetUnitScriptControlled(lp_mechaCorruptor, false);
                            AISetUnitSuicide(lp_mechaCorruptor, true);
                        }
                        else {
                            auto0E600CDB_g = lv_enemyGroup;
                            auto0E600CDB_u = UnitGroupCount(auto0E600CDB_g, c_unitCountAll);
                            for (;; auto0E600CDB_u -= 1) {
                                auto0E600CDB_var = UnitGroupUnitFromEnd(auto0E600CDB_g, auto0E600CDB_u);
                                if (auto0E600CDB_var == null) { break; }
                                if ((UnitTypeGetProperty(UnitGetType(auto0E600CDB_var), c_unitPropSuppliesUsed) == 3.0)) {
                                    UnitGroupAdd(lv_enemyTargetGroup, auto0E600CDB_var);
                                }

                            }
                            if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) >= 1)) {
                                UnitIssueOrder(lp_mechaCorruptor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_enemyTargetGroup, c_unitCountAlive)), c_orderQueueAddToFront);
                                Wait(0.5, c_timeAI);
                                AISetUnitScriptControlled(lp_mechaCorruptor, false);
                                AISetUnitSuicide(lp_mechaCorruptor, true);
                            }

                        }
                    }
                }
            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MechaOverlordAbility_Trigger = null;
unit auto_libA4E3281A_gf_MechaOverlordAbility_lp_mechaOverlord;

void libA4E3281A_gf_MechaOverlordAbility (unit lp_mechaOverlord) {
    auto_libA4E3281A_gf_MechaOverlordAbility_lp_mechaOverlord = lp_mechaOverlord;

    if (auto_libA4E3281A_gf_MechaOverlordAbility_Trigger == null) {
        auto_libA4E3281A_gf_MechaOverlordAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MechaOverlordAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MechaOverlordAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MechaOverlordAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mechaOverlord = auto_libA4E3281A_gf_MechaOverlordAbility_lp_mechaOverlord;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_enemyHeroGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_enemyHeroGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mechaOverlord) == true) && ((UnitGetOwner(lp_mechaOverlord) == 3) || (UnitGetOwner(lp_mechaOverlord) == 4) || (UnitGetOwner(lp_mechaOverlord) == 5) || (UnitGetOwner(lp_mechaOverlord) == 6) || (UnitGetOwner(lp_mechaOverlord) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaOverlord), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaOverlord), 10.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_enemyHeroGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaOverlord), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaOverlord), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if (((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 3) || (UnitGroupCount(lv_enemyHeroGroup, c_unitCountAlive) >= 1))) {
            UnitIssueOrder(lp_mechaOverlord, OrderTargetingPoint(AbilityCommand("MechaOverlordBuildMechaNydus", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mechaOverlord), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaOverlord, false);
            AISetUnitSuicide(lp_mechaOverlord, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_MechaViperAbility_Trigger = null;
unit auto_libA4E3281A_gf_MechaViperAbility_lp_mechaViper;

void libA4E3281A_gf_MechaViperAbility (unit lp_mechaViper) {
    auto_libA4E3281A_gf_MechaViperAbility_lp_mechaViper = lp_mechaViper;

    if (auto_libA4E3281A_gf_MechaViperAbility_Trigger == null) {
        auto_libA4E3281A_gf_MechaViperAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_MechaViperAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_MechaViperAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_MechaViperAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mechaViper = auto_libA4E3281A_gf_MechaViperAbility_lp_mechaViper;

    // Variable Declarations
    unitgroup lv_alliedGroup;
    unitgroup lv_enemyGroup;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup auto3985B0EB_g;
    int auto3985B0EB_u;
    unit auto3985B0EB_var;
    unitgroup auto34161A2E_g;
    int auto34161A2E_u;
    unit auto34161A2E_var;
    unitgroup auto0A5C4888_g;
    int auto0A5C4888_u;
    unit auto0A5C4888_var;

    // Variable Initialization
    lv_alliedGroup = UnitGroupEmpty();
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mechaViper) == true) && ((UnitGetOwner(lp_mechaViper) == 3) || (UnitGetOwner(lp_mechaViper) == 4) || (UnitGetOwner(lp_mechaViper) == 5) || (UnitGetOwner(lp_mechaViper) == 6) || (UnitGetOwner(lp_mechaViper) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaViper), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaViper), 14.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto3985B0EB_g = lv_enemyGroup;
        auto3985B0EB_u = UnitGroupCount(auto3985B0EB_g, c_unitCountAll);
        for (;; auto3985B0EB_u -= 1) {
            auto3985B0EB_var = UnitGroupUnitFromEnd(auto3985B0EB_g, auto3985B0EB_u);
            if (auto3985B0EB_var == null) { break; }
            if ((UnitHasBehavior2(auto3985B0EB_var, "MechaViperDisablingCloud") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto3985B0EB_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaViper, "MechaViperDisablingCloud", "Abil/MechaViperDisablingCloud") <= 0.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.0, UnitGetPosition(lp_mechaViper), 11.0, 0);
            UnitIssueOrder(lp_mechaViper, OrderTargetingPoint(AbilityCommand("MechaViperDisablingCloud", 0), lv_targetPoint), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaViper, false);
            AISetUnitSuicide(lp_mechaViper, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaViper, "MechaViperDisablingCloud", "Abil/MechaViperDisablingCloud") <= 0.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.0, UnitGetPosition(lp_mechaViper), 11.0, 0);
                UnitIssueOrder(lp_mechaViper, OrderTargetingPoint(AbilityCommand("MechaViperDisablingCloud", 0), lv_targetPoint), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mechaViper, false);
                AISetUnitSuicide(lp_mechaViper, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaViper, "MechaViperDisablingCloud", "Abil/MechaViperDisablingCloud") <= 0.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.0, UnitGetPosition(lp_mechaViper), 11.0, 0);
                    UnitIssueOrder(lp_mechaViper, OrderTargetingPoint(AbilityCommand("MechaViperDisablingCloud", 0), lv_targetPoint), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_mechaViper, false);
                    AISetUnitSuicide(lp_mechaViper, true);
                }

            }
        }
        lv_enemyGroup = null;
        lv_targetPoint = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaViper), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaViper), 9.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto34161A2E_g = lv_enemyGroup;
        auto34161A2E_u = UnitGroupCount(auto34161A2E_g, c_unitCountAll);
        for (;; auto34161A2E_u -= 1) {
            auto34161A2E_var = UnitGroupUnitFromEnd(auto34161A2E_g, auto34161A2E_u);
            if (auto34161A2E_var == null) { break; }
            if ((((UnitGetPropertyFixed(auto34161A2E_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(auto34161A2E_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeGetProperty(UnitGetType(auto34161A2E_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto34161A2E_var);
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaViper, "MechaViperYoink", "Abil/MechaViperYoink") <= 0.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropEnergy, c_unitPropCurrent) >= 125.0)) {
            UnitIssueOrder(lp_mechaViper, OrderTargetingUnit(AbilityCommand("MechaViperYoink", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaViper, false);
            AISetUnitSuicide(lp_mechaViper, true);
        }

        lv_enemyGroup = null;
        lv_targetPoint = null;
        Wait(0.05, c_timeAI);
        lv_alliedGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaViper), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_mechaViper), 4.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto0A5C4888_g = lv_alliedGroup;
        auto0A5C4888_u = UnitGroupCount(auto0A5C4888_g, c_unitCountAll);
        for (;; auto0A5C4888_u -= 1) {
            auto0A5C4888_var = UnitGroupUnitFromEnd(auto0A5C4888_g, auto0A5C4888_u);
            if (auto0A5C4888_var == null) { break; }
            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) >= 75.0)) {
            }
            else {
                UnitGroupRemove(lv_alliedGroup, auto0A5C4888_var);
            }
        }
        if ((UnitGroupCount(lv_alliedGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaViper, "MechaViperConsumption", "Abil/MechaViperConsumption") <= 0.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropEnergy, c_unitPropCurrent) <= 125.0)) {
            UnitIssueOrder(lp_mechaViper, OrderTargetingUnit(AbilityCommand("MechaViperConsumption", 0), UnitGroupRandomUnit(lv_alliedGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaViper, false);
            AISetUnitSuicide(lp_mechaViper, true);
        }

        lv_alliedGroup = null;
        lv_targetPoint = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaViper), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaViper), 8.0), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterGround) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaViper, "MechaViperParasiticBomb", "Abil/MechaViperParasiticBomb") <= 0.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropEnergy, c_unitPropCurrent) >= 125.0)) {
            UnitIssueOrder(lp_mechaViper, OrderTargetingUnit(AbilityCommand("MechaViperParasiticBomb", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaViper, false);
            AISetUnitSuicide(lp_mechaViper, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_GoldenMothershipAbility_Trigger = null;
unit auto_libA4E3281A_gf_GoldenMothershipAbility_lp_goldenMothership;

void libA4E3281A_gf_GoldenMothershipAbility (unit lp_goldenMothership) {
    auto_libA4E3281A_gf_GoldenMothershipAbility_lp_goldenMothership = lp_goldenMothership;

    if (auto_libA4E3281A_gf_GoldenMothershipAbility_Trigger == null) {
        auto_libA4E3281A_gf_GoldenMothershipAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_GoldenMothershipAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_GoldenMothershipAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_GoldenMothershipAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_goldenMothership = auto_libA4E3281A_gf_GoldenMothershipAbility_lp_goldenMothership;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto099A9179_g;
    int auto099A9179_u;
    unit auto099A9179_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_goldenMothership) == true) && ((UnitGetOwner(lp_goldenMothership) == 3) || (UnitGetOwner(lp_goldenMothership) == 4) || (UnitGetOwner(lp_goldenMothership) == 5) || (UnitGetOwner(lp_goldenMothership) == 6) || (UnitGetOwner(lp_goldenMothership) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_goldenMothership), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_goldenMothership), 12.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto099A9179_g = lv_enemyGroup;
        auto099A9179_u = UnitGroupCount(auto099A9179_g, c_unitCountAll);
        for (;; auto099A9179_u -= 1) {
            auto099A9179_var = UnitGroupUnitFromEnd(auto099A9179_g, auto099A9179_u);
            if (auto099A9179_var == null) { break; }
            if ((UnitHasBehavior2(auto099A9179_var, "GoldenMothershipVortexEnemy") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto099A9179_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_goldenMothership, "GoldenMothershipVortex", "VortexVortex2VortexGoldenMothershipVortex") <= 0.0) && (UnitGetPropertyFixed(lp_goldenMothership, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.32)) {
            UnitIssueOrder(lp_goldenMothership, OrderTargetingPoint(AbilityCommand("GoldenMothershipVortex", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.0, UnitGetPosition(lp_goldenMothership), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_goldenMothership, false);
            AISetUnitSuicide(lp_goldenMothership, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_goldenMothership, "GoldenMothershipVortex", "VortexVortex2VortexGoldenMothershipVortex") <= 0.0) && (UnitGetPropertyFixed(lp_goldenMothership, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
                UnitIssueOrder(lp_goldenMothership, OrderTargetingPoint(AbilityCommand("GoldenMothershipVortex", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.0, UnitGetPosition(lp_goldenMothership), 9.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_goldenMothership, false);
                AISetUnitSuicide(lp_goldenMothership, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_goldenMothership, "GoldenMothershipVortex", "VortexVortex2VortexGoldenMothershipVortex") <= 0.0)) {
                    UnitIssueOrder(lp_goldenMothership, OrderTargetingPoint(AbilityCommand("GoldenMothershipVortex", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.0, UnitGetPosition(lp_goldenMothership), 9.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_goldenMothership, false);
                    AISetUnitSuicide(lp_goldenMothership, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_GoldenMothershipCoreAbility_Trigger = null;
unit auto_libA4E3281A_gf_GoldenMothershipCoreAbility_lp_goldenMothershipCore;

void libA4E3281A_gf_GoldenMothershipCoreAbility (unit lp_goldenMothershipCore) {
    auto_libA4E3281A_gf_GoldenMothershipCoreAbility_lp_goldenMothershipCore = lp_goldenMothershipCore;

    if (auto_libA4E3281A_gf_GoldenMothershipCoreAbility_Trigger == null) {
        auto_libA4E3281A_gf_GoldenMothershipCoreAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_GoldenMothershipCoreAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_GoldenMothershipCoreAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_GoldenMothershipCoreAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_goldenMothershipCore = auto_libA4E3281A_gf_GoldenMothershipCoreAbility_lp_goldenMothershipCore;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto4BC0D655_g;
    int auto4BC0D655_u;
    unit auto4BC0D655_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_goldenMothershipCore) == true) && ((UnitGetOwner(lp_goldenMothershipCore) == 3) || (UnitGetOwner(lp_goldenMothershipCore) == 4) || (UnitGetOwner(lp_goldenMothershipCore) == 5) || (UnitGetOwner(lp_goldenMothershipCore) == 6) || (UnitGetOwner(lp_goldenMothershipCore) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_goldenMothershipCore), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_goldenMothershipCore), 12.25), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto4BC0D655_g = lv_enemyGroup;
        auto4BC0D655_u = UnitGroupCount(auto4BC0D655_g, c_unitCountAll);
        for (;; auto4BC0D655_u -= 1) {
            auto4BC0D655_var = UnitGroupUnitFromEnd(auto4BC0D655_g, auto4BC0D655_u);
            if (auto4BC0D655_var == null) { break; }
            if ((UnitHasBehavior2(auto4BC0D655_var, "GoldenMothershipCoreTemporalField") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto4BC0D655_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_goldenMothershipCore, "GoldenMothershipCoreTemporalField", "Abil/GoldenMothershipCoreTemporalField") <= 0.0) && (UnitGetPropertyFixed(lp_goldenMothershipCore, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_goldenMothershipCore, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.32)) {
            UnitIssueOrder(lp_goldenMothershipCore, OrderTargetingPoint(AbilityCommand("GoldenMothershipCoreTemporalField", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.25, UnitGetPosition(lp_goldenMothershipCore), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_goldenMothershipCore, false);
            AISetUnitSuicide(lp_goldenMothershipCore, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_goldenMothershipCore, "GoldenMothershipCoreTemporalField", "Abil/GoldenMothershipCoreTemporalField") <= 0.0) && (UnitGetPropertyFixed(lp_goldenMothershipCore, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_goldenMothershipCore, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
                UnitIssueOrder(lp_goldenMothershipCore, OrderTargetingPoint(AbilityCommand("GoldenMothershipCoreTemporalField", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.25, UnitGetPosition(lp_goldenMothershipCore), 9.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_goldenMothershipCore, false);
                AISetUnitSuicide(lp_goldenMothershipCore, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_goldenMothershipCore, "GoldenMothershipCoreTemporalField", "Abil/GoldenMothershipCoreTemporalField") <= 0.0) && (UnitGetPropertyFixed(lp_goldenMothershipCore, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                    UnitIssueOrder(lp_goldenMothershipCore, OrderTargetingPoint(AbilityCommand("GoldenMothershipCoreTemporalField", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.25, UnitGetPosition(lp_goldenMothershipCore), 9.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_goldenMothershipCore, false);
                    AISetUnitSuicide(lp_goldenMothershipCore, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libA4E3281A_gf_GoldenWarpPrismAbility_Trigger = null;
unit auto_libA4E3281A_gf_GoldenWarpPrismAbility_lp_goldenWarpPrism;

void libA4E3281A_gf_GoldenWarpPrismAbility (unit lp_goldenWarpPrism) {
    auto_libA4E3281A_gf_GoldenWarpPrismAbility_lp_goldenWarpPrism = lp_goldenWarpPrism;

    if (auto_libA4E3281A_gf_GoldenWarpPrismAbility_Trigger == null) {
        auto_libA4E3281A_gf_GoldenWarpPrismAbility_Trigger = TriggerCreate("auto_libA4E3281A_gf_GoldenWarpPrismAbility_TriggerFunc");
    }

    TriggerExecute(auto_libA4E3281A_gf_GoldenWarpPrismAbility_Trigger, false, false);
}

bool auto_libA4E3281A_gf_GoldenWarpPrismAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_goldenWarpPrism = auto_libA4E3281A_gf_GoldenWarpPrismAbility_lp_goldenWarpPrism;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_enemyHeroGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_enemyHeroGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_goldenWarpPrism) == true) && ((UnitGetOwner(lp_goldenWarpPrism) == 3) || (UnitGetOwner(lp_goldenWarpPrism) == 4) || (UnitGetOwner(lp_goldenWarpPrism) == 5) || (UnitGetOwner(lp_goldenWarpPrism) == 6) || (UnitGetOwner(lp_goldenWarpPrism) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_goldenWarpPrism), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_goldenWarpPrism), 10.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_enemyHeroGroup = UnitGroupAlliance(UnitGetOwner(lp_goldenWarpPrism), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_goldenWarpPrism), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if (((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 2) || (UnitGroupCount(lv_enemyHeroGroup, c_unitCountAlive) >= 1))) {
            UnitIssueOrder(lp_goldenWarpPrism, Order(AbilityCommand("GoldenWarpPrismPhasingMode", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_goldenWarpPrism, false);
            AISetUnitSuicide(lp_goldenWarpPrism, true);
        }
        else {
            if (((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0) || (UnitGroupCount(lv_enemyHeroGroup, c_unitCountAlive) == 0))) {
                UnitIssueOrder(lp_goldenWarpPrism, Order(AbilityCommand("GolednWarpPrismTransportMode", 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_goldenWarpPrism, false);
                AISetUnitSuicide(lp_goldenWarpPrism, true);
            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Extra Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_ExtraUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTimer() == libA4E3281A_gv_taldarim5minTimer)) {
        TechTreeUpgradeAddLevel(3, "TaldarimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "TaldarimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "TaldarimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "TaldarimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "TaldarimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "TaldarimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "TaldarimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "TaldarimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "TaldarimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "TaldarimExtraArmorsLevel1", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_taldarim10minTimer)) {
        TechTreeUpgradeAddLevel(3, "TaldarimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "TaldarimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "TaldarimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "TaldarimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "TaldarimExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_taldarim15minTimer)) {
        TechTreeUpgradeAddLevel(3, "TaldarimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "TaldarimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "TaldarimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "TaldarimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "TaldarimExtraArmorsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_taldarim20minTimer)) {
        TechTreeUpgradeAddLevel(3, "TaldarimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "TaldarimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "TaldarimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "TaldarimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "TaldarimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "TaldarimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "TaldarimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "TaldarimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "TaldarimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "TaldarimExtraArmorsLevel3", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_nerazim5minTimer)) {
        TechTreeUpgradeAddLevel(3, "NerazimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "NerazimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "NerazimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "NerazimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "NerazimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "NerazimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "NerazimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "NerazimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "NerazimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "NerazimExtraArmorsLevel1", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_nerazim10minTimer)) {
        TechTreeUpgradeAddLevel(3, "NerazimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "NerazimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "NerazimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "NerazimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "NerazimExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_nerazim15minTimer)) {
        TechTreeUpgradeAddLevel(3, "NerazimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "NerazimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "NerazimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "NerazimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "NerazimExtraArmorsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_nerazim20minTimer)) {
        TechTreeUpgradeAddLevel(3, "NerazimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "NerazimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "NerazimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "NerazimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "NerazimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "NerazimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "NerazimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "NerazimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "NerazimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "NerazimExtraArmorsLevel3", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_nest5minTimer)) {
        TechTreeUpgradeAddLevel(3, "NestExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "NestExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "NestExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "NestExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "NestExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "NestExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(4, "NestExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(5, "NestExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(6, "NestExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(7, "NestExtraCarapacesLevel1", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_nest10minTimer)) {
        TechTreeUpgradeAddLevel(3, "NestExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "NestExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "NestExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "NestExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "NestExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_nest15minTimer)) {
        TechTreeUpgradeAddLevel(3, "NestExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(4, "NestExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(5, "NestExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(6, "NestExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(7, "NestExtraCarapacesLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_nest20minTimer)) {
        TechTreeUpgradeAddLevel(3, "NestExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "NestExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "NestExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "NestExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "NestExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "NestExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(4, "NestExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(5, "NestExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(6, "NestExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(7, "NestExtraCarapacesLevel3", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_mobius5minTimer)) {
        TechTreeUpgradeAddLevel(3, "MobiusExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "MobiusExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "MobiusExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "MobiusExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "MobiusExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "MobiusExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "MobiusExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "MobiusExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "MobiusExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "MobiusExtraArmorsLevel1", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_mobius10minTimer)) {
        TechTreeUpgradeAddLevel(3, "MobiusExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "MobiusExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "MobiusExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "MobiusExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "MobiusExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_mobius15minTimer)) {
        TechTreeUpgradeAddLevel(3, "MobiusExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "MobiusExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "MobiusExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "MobiusExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "MobiusExtraArmorsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_mobius20minTimer)) {
        TechTreeUpgradeAddLevel(3, "MobiusExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "MobiusExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "MobiusExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "MobiusExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "MobiusExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "MobiusExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "MobiusExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "MobiusExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "MobiusExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "MobiusExtraArmorsLevel3", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_covertOps5minTimer)) {
        TechTreeUpgradeAddLevel(3, "CovertOpsExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "CovertOpsExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "CovertOpsExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "CovertOpsExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "CovertOpsExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "CovertOpsExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "CovertOpsExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "CovertOpsExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "CovertOpsExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "CovertOpsExtraArmorsLevel1", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_covertOps10minTimer)) {
        TechTreeUpgradeAddLevel(3, "CovertOpsExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "CovertOpsExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "CovertOpsExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "CovertOpsExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "CovertOpsExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_covertOps15minTimer)) {
        TechTreeUpgradeAddLevel(3, "CovertOpsExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "CovertOpsExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "CovertOpsExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "CovertOpsExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "CovertOpsExtraArmorsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_covertOps20minTimer)) {
        TechTreeUpgradeAddLevel(3, "CovertOpsExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "CovertOpsExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "CovertOpsExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "CovertOpsExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "CovertOpsExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "CovertOpsExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "CovertOpsExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "CovertOpsExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "CovertOpsExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "CovertOpsExtraArmorsLevel3", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_kelMorian5minTimer)) {
        TechTreeUpgradeAddLevel(3, "KelMorianExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "KelMorianExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "KelMorianExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "KelMorianExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "KelMorianExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "KelMorianExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "KelMorianExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "KelMorianExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "KelMorianExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "KelMorianExtraArmorsLevel1", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_kelMorian10minTimer)) {
        TechTreeUpgradeAddLevel(3, "KelMorianExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "KelMorianExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "KelMorianExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "KelMorianExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "KelMorianExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_kelMorian15minTimer)) {
        TechTreeUpgradeAddLevel(3, "KelMorianExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "KelMorianExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "KelMorianExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "KelMorianExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "KelMorianExtraArmorsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_kelMorian20minTimer)) {
        TechTreeUpgradeAddLevel(3, "KelMorianExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "KelMorianExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "KelMorianExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "KelMorianExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "KelMorianExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "KelMorianExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "KelMorianExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "KelMorianExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "KelMorianExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "KelMorianExtraArmorsLevel3", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_mecha5minTimer)) {
        TechTreeUpgradeAddLevel(3, "MechaExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "MechaExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "MechaExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "MechaExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "MechaExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "MechaExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(4, "MechaExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(5, "MechaExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(6, "MechaExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(7, "MechaExtraCarapacesLevel1", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_mecha10minTimer)) {
        TechTreeUpgradeAddLevel(3, "MechaExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "MechaExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "MechaExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "MechaExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "MechaExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_mecha15minTimer)) {
        TechTreeUpgradeAddLevel(3, "MechaExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(4, "MechaExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(5, "MechaExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(6, "MechaExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(7, "MechaExtraCarapacesLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_mecha20minTimer)) {
        TechTreeUpgradeAddLevel(3, "MechaExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "MechaExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "MechaExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "MechaExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "MechaExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "MechaExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(4, "MechaExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(5, "MechaExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(6, "MechaExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(7, "MechaExtraCarapacesLevel3", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_golden5minTimer)) {
        TechTreeUpgradeAddLevel(3, "GoldenExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "GoldenExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "GoldenExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "GoldenExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "GoldenExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "GoldenExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "GoldenExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "GoldenExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "GoldenExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "GoldenExtraArmorsLevel1", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_golden10minTimer)) {
        TechTreeUpgradeAddLevel(3, "GoldenExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "GoldenExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "GoldenExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "GoldenExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "GoldenExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_golden15minTimer)) {
        TechTreeUpgradeAddLevel(3, "GoldenExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "GoldenExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "GoldenExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "GoldenExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "GoldenExtraArmorsLevel2", 1);
    }
    else if ((EventTimer() == libA4E3281A_gv_golden20minTimer)) {
        TechTreeUpgradeAddLevel(3, "GoldenExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "GoldenExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "GoldenExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "GoldenExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "GoldenExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "GoldenExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "GoldenExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "GoldenExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "GoldenExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "GoldenExtraArmorsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_ExtraUpgrade_Init () {
    libA4E3281A_gt_ExtraUpgrade = TriggerCreate("libA4E3281A_gt_ExtraUpgrade_Func");
    TriggerEnable(libA4E3281A_gt_ExtraUpgrade, false);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_taldarim5minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_taldarim10minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_taldarim15minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_taldarim20minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_nerazim5minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_nerazim10minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_nerazim15minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_nerazim20minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_nest5minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_nest10minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_nest15minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_nest20minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_mobius5minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_mobius10minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_mobius15minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_mobius20minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_covertOps5minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_covertOps10minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_covertOps15minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_covertOps20minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_kelMorian5minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_kelMorian10minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_kelMorian15minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_kelMorian20minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_mecha5minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_mecha10minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_mecha15minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_mecha20minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_golden5minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_golden10minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_golden15minTimer);
    TriggerAddEventTimer(libA4E3281A_gt_ExtraUpgrade, libA4E3281A_gv_golden20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Units Attack
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_UnitsAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "MobiusReaper") || (UnitGetType(EventUnit()) == "MechaZergling") || (UnitGetType(EventUnit()) == "MechaBaneling") || (UnitGetType(EventUnit()) == "MechaHydralisk") || (UnitGetType(EventUnit()) == "GoldenZealot") || (UnitGetType(EventUnit()) == "GoldenDragoon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeAI);
    AISetUnitScriptControlled(EventUnit(), false);
    AISetUnitSuicide(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_UnitsAttack_Init () {
    libA4E3281A_gt_UnitsAttack = TriggerCreate("libA4E3281A_gt_UnitsAttack_Func");
    TriggerEnable(libA4E3281A_gt_UnitsAttack, false);
    TriggerAddEventUnitBehaviorChange(libA4E3281A_gt_UnitsAttack, null, "NydusTransportTimedLife", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libA4E3281A_gt_UnitsAttack, null, "NydusTransportTimedLife", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops A
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_CovertOpsATimer, true, false);
    TriggerEnable(libA4E3281A_gt_CovertOpsBattlecruiserAbility, true);
    TriggerEnable(libA4E3281A_gt_CovertOpsGhostAbility1, true);
    TriggerEnable(libA4E3281A_gt_CovertOpsLiberatorAbility, true);
    TriggerEnable(libA4E3281A_gt_CovertOpsRavenAbility, true);
    TriggerEnable(libA4E3281A_gt_CovertOpsTankAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsA_Init () {
    libA4E3281A_gt_CovertOpsA = TriggerCreate("libA4E3281A_gt_CovertOpsA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops B
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_CovertOpsBTimer, true, false);
    TriggerEnable(libA4E3281A_gt_CovertOpsBattlecruiserAbility, true);
    TriggerEnable(libA4E3281A_gt_CovertOpsLiberatorAbility, true);
    TriggerEnable(libA4E3281A_gt_CovertOpsRavenAbility, true);
    TriggerEnable(libA4E3281A_gt_CovertOpsTankAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsB_Init () {
    libA4E3281A_gt_CovertOpsB = TriggerCreate("libA4E3281A_gt_CovertOpsB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Battlecruiser Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsBattlecruiserAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsBattlecruiser"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_CovertOpsBattlecruiserAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsBattlecruiserAbility_Init () {
    libA4E3281A_gt_CovertOpsBattlecruiserAbility = TriggerCreate("libA4E3281A_gt_CovertOpsBattlecruiserAbility_Func");
    TriggerEnable(libA4E3281A_gt_CovertOpsBattlecruiserAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_CovertOpsBattlecruiserAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Ghost Ability1
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsGhostAbility1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsGhost"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_CovertOpsGhostAbility1(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsGhostAbility1_Init () {
    libA4E3281A_gt_CovertOpsGhostAbility1 = TriggerCreate("libA4E3281A_gt_CovertOpsGhostAbility1_Func");
    TriggerEnable(libA4E3281A_gt_CovertOpsGhostAbility1, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_CovertOpsGhostAbility1, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Ghost Ability2
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsGhostAbility2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsGhost"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_CovertOpsGhostAbility2(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsGhostAbility2_Init () {
    libA4E3281A_gt_CovertOpsGhostAbility2 = TriggerCreate("libA4E3281A_gt_CovertOpsGhostAbility2_Func");
    TriggerEnable(libA4E3281A_gt_CovertOpsGhostAbility2, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_CovertOpsGhostAbility2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Ghost Ability3
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsGhostAbility3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsGhost"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_CovertOpsGhostAbility3(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsGhostAbility3_Init () {
    libA4E3281A_gt_CovertOpsGhostAbility3 = TriggerCreate("libA4E3281A_gt_CovertOpsGhostAbility3_Func");
    TriggerEnable(libA4E3281A_gt_CovertOpsGhostAbility3, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_CovertOpsGhostAbility3, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Liberator Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsLiberatorAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsLiberatorAA"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_CovertOpsLiberatorAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsLiberatorAbility_Init () {
    libA4E3281A_gt_CovertOpsLiberatorAbility = TriggerCreate("libA4E3281A_gt_CovertOpsLiberatorAbility_Func");
    TriggerEnable(libA4E3281A_gt_CovertOpsLiberatorAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_CovertOpsLiberatorAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Raven Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsRavenAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsRaven"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_CovertOpsRavenAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsRavenAbility_Init () {
    libA4E3281A_gt_CovertOpsRavenAbility = TriggerCreate("libA4E3281A_gt_CovertOpsRavenAbility_Func");
    TriggerEnable(libA4E3281A_gt_CovertOpsRavenAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_CovertOpsRavenAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Tank Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsTankAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsSiegeTank"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_CovertOpsTankAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsTankAbility_Init () {
    libA4E3281A_gt_CovertOpsTankAbility = TriggerCreate("libA4E3281A_gt_CovertOpsTankAbility_Func");
    TriggerEnable(libA4E3281A_gt_CovertOpsTankAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_CovertOpsTankAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOps5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_CovertOps5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_CovertOps5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsVehicleAndShipWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOps5minUpgrade_Init () {
    libA4E3281A_gt_CovertOps5minUpgrade = TriggerCreate("libA4E3281A_gt_CovertOps5minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_CovertOps5minUpgrade, libA4E3281A_gv_covertOps5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOps10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_CovertOps10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_CovertOps10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsVehicleAndShipWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOps10minUpgrade_Init () {
    libA4E3281A_gt_CovertOps10minUpgrade = TriggerCreate("libA4E3281A_gt_CovertOps10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_CovertOps10minUpgrade, libA4E3281A_gv_covertOps10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOps15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_CovertOps15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_CovertOps15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsVehicleAndShipArmorsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOps15minUpgrade_Init () {
    libA4E3281A_gt_CovertOps15minUpgrade = TriggerCreate("libA4E3281A_gt_CovertOps15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_CovertOps15minUpgrade, libA4E3281A_gv_covertOps15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOps20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_CovertOps20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_CovertOps20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsVehicleAndShipWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOps20minUpgrade_Init () {
    libA4E3281A_gt_CovertOps20minUpgrade = TriggerCreate("libA4E3281A_gt_CovertOps20minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_CovertOps20minUpgrade, libA4E3281A_gv_covertOps20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops A Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_CovertOpsATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_CovertOpsATimer, false);
    TimerStart(libA4E3281A_gv_covertOpsA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_covertOpsA10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_covertOpsA15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_covertOps5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_covertOps10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_covertOps15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_covertOps20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsATimer_Init () {
    libA4E3281A_gt_CovertOpsATimer = TriggerCreate("libA4E3281A_gt_CovertOpsATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_CovertOpsA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_CovertOpsA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsMarineSuperStimpack", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsA8minUpgrade_Init () {
    libA4E3281A_gt_CovertOpsA8minUpgrade = TriggerCreate("libA4E3281A_gt_CovertOpsA8minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_CovertOpsA8minUpgrade, libA4E3281A_gv_covertOpsA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops A 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsA10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_CovertOpsA10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_CovertOpsA10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsGhostDeathSnipe", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsGhostDeathSnipe", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsGhostDeathSnipe", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsGhostDeathSnipe", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsGhostDeathSnipe", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsGhostEMP", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsGhostEMP", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsGhostEMP", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsGhostEMP", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsGhostEMP", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TriggerEnable(libA4E3281A_gt_CovertOpsGhostAbility1, false);
    TriggerEnable(libA4E3281A_gt_CovertOpsGhostAbility2, true);
    libA4E3281A_gv_covertOpsTankRange += 5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsA10minUpgrade_Init () {
    libA4E3281A_gt_CovertOpsA10minUpgrade = TriggerCreate("libA4E3281A_gt_CovertOpsA10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_CovertOpsA10minUpgrade, libA4E3281A_gv_covertOpsA10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops A 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsA15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_CovertOpsA15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_CovertOpsA15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TriggerEnable(libA4E3281A_gt_CovertOpsGhostAbility2, false);
    TriggerEnable(libA4E3281A_gt_CovertOpsGhostAbility3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsA15minUpgrade_Init () {
    libA4E3281A_gt_CovertOpsA15minUpgrade = TriggerCreate("libA4E3281A_gt_CovertOpsA15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_CovertOpsA15minUpgrade, libA4E3281A_gv_covertOpsA15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops B Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsBTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_CovertOpsBTimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_CovertOpsBTimer, false);
    TimerStart(libA4E3281A_gv_covertOpsB8minTimer, 480.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_covertOpsB10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_covertOpsB15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_covertOps5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_covertOps10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_covertOps15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_covertOps20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsBTimer_Init () {
    libA4E3281A_gt_CovertOpsBTimer = TriggerCreate("libA4E3281A_gt_CovertOpsBTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops B 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsB8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_CovertOpsB8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_CovertOpsB8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsMarineSuperStimpack", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsB8minUpgrade_Init () {
    libA4E3281A_gt_CovertOpsB8minUpgrade = TriggerCreate("libA4E3281A_gt_CovertOpsB8minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_CovertOpsB8minUpgrade, libA4E3281A_gv_covertOpsB8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops B 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsB10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_CovertOpsB10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_CovertOpsB10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    libA4E3281A_gv_covertOpsTankRange += 5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsB10minUpgrade_Init () {
    libA4E3281A_gt_CovertOpsB10minUpgrade = TriggerCreate("libA4E3281A_gt_CovertOpsB10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_CovertOpsB10minUpgrade, libA4E3281A_gv_covertOpsB10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops B 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_CovertOpsB15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_CovertOpsB15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_CovertOpsB15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsBansheeAirstrike", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsBansheeAirstrike", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsBansheeAirstrike", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsBansheeAirstrike", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsBansheeAirstrike", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_CovertOpsB15minUpgrade_Init () {
    libA4E3281A_gt_CovertOpsB15minUpgrade = TriggerCreate("libA4E3281A_gt_CovertOpsB15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_CovertOpsB15minUpgrade, libA4E3281A_gv_covertOpsB15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius A
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_MobiusATimer, true, false);
    TriggerEnable(libA4E3281A_gt_MobiusRavenAbility, true);
    TriggerEnable(libA4E3281A_gt_MobiusThorAbility, true);
    TriggerEnable(libA4E3281A_gt_UnitsAttack, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusA_Init () {
    libA4E3281A_gt_MobiusA = TriggerCreate("libA4E3281A_gt_MobiusA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius B
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_MobiusBTimer, true, false);
    TriggerEnable(libA4E3281A_gt_MobiusBansheeAbility, true);
    TriggerEnable(libA4E3281A_gt_MobiusBattlecruiserAbility, true);
    TriggerEnable(libA4E3281A_gt_MobiusRavenAbility, true);
    TriggerEnable(libA4E3281A_gt_MobiusVikingAbility, true);
    TriggerEnable(libA4E3281A_gt_MobiusVultureAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusB_Init () {
    libA4E3281A_gt_MobiusB = TriggerCreate("libA4E3281A_gt_MobiusB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Banshee Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusBansheeAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusBanshee"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MobiusBansheeAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusBansheeAbility_Init () {
    libA4E3281A_gt_MobiusBansheeAbility = TriggerCreate("libA4E3281A_gt_MobiusBansheeAbility_Func");
    TriggerEnable(libA4E3281A_gt_MobiusBansheeAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MobiusBansheeAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Battlecruiser Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusBattlecruiserAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusBattlecruiser"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MobiusBattlecruiserAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusBattlecruiserAbility_Init () {
    libA4E3281A_gt_MobiusBattlecruiserAbility = TriggerCreate("libA4E3281A_gt_MobiusBattlecruiserAbility_Func");
    TriggerEnable(libA4E3281A_gt_MobiusBattlecruiserAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MobiusBattlecruiserAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Marauder Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusMarauderAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusMarauder"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MobiusMarauderAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusMarauderAbility_Init () {
    libA4E3281A_gt_MobiusMarauderAbility = TriggerCreate("libA4E3281A_gt_MobiusMarauderAbility_Func");
    TriggerEnable(libA4E3281A_gt_MobiusMarauderAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MobiusMarauderAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Medic Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusMedicAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusMedic"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MobiusMedicAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusMedicAbility_Init () {
    libA4E3281A_gt_MobiusMedicAbility = TriggerCreate("libA4E3281A_gt_MobiusMedicAbility_Func");
    TriggerEnable(libA4E3281A_gt_MobiusMedicAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MobiusMedicAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Raven Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusRavenAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusRaven"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MobiusRavenAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusRavenAbility_Init () {
    libA4E3281A_gt_MobiusRavenAbility = TriggerCreate("libA4E3281A_gt_MobiusRavenAbility_Func");
    TriggerEnable(libA4E3281A_gt_MobiusRavenAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MobiusRavenAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Spectre Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusSpectreAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusSpectre"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MobiusSpectreAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusSpectreAbility_Init () {
    libA4E3281A_gt_MobiusSpectreAbility = TriggerCreate("libA4E3281A_gt_MobiusSpectreAbility_Func");
    TriggerEnable(libA4E3281A_gt_MobiusSpectreAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MobiusSpectreAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Spectre II Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusSpectreIIAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SpectreII"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MobiusSpectreIIAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusSpectreIIAbility_Init () {
    libA4E3281A_gt_MobiusSpectreIIAbility = TriggerCreate("libA4E3281A_gt_MobiusSpectreIIAbility_Func");
    TriggerEnable(libA4E3281A_gt_MobiusSpectreIIAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MobiusSpectreIIAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Thor Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusThorAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusThor"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MobiusThorAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusThorAbility_Init () {
    libA4E3281A_gt_MobiusThorAbility = TriggerCreate("libA4E3281A_gt_MobiusThorAbility_Func");
    TriggerEnable(libA4E3281A_gt_MobiusThorAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MobiusThorAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Viking Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusVikingAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusVikingFighter"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MobiusVikingAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusVikingAbility_Init () {
    libA4E3281A_gt_MobiusVikingAbility = TriggerCreate("libA4E3281A_gt_MobiusVikingAbility_Func");
    TriggerEnable(libA4E3281A_gt_MobiusVikingAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MobiusVikingAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Vulture Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusVultureAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusVulture"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MobiusVultureAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusVultureAbility_Init () {
    libA4E3281A_gt_MobiusVultureAbility = TriggerCreate("libA4E3281A_gt_MobiusVultureAbility_Func");
    TriggerEnable(libA4E3281A_gt_MobiusVultureAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MobiusVultureAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Mobius5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Mobius5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Mobius5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MobiusInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MobiusInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MobiusInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MobiusInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MobiusInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MobiusInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MobiusInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MobiusInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MobiusInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MobiusVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MobiusVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MobiusVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MobiusVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MobiusVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MobiusVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MobiusVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MobiusVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MobiusVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MobiusVehicleAndShipWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Mobius5minUpgrade_Init () {
    libA4E3281A_gt_Mobius5minUpgrade = TriggerCreate("libA4E3281A_gt_Mobius5minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Mobius5minUpgrade, libA4E3281A_gv_mobius5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Mobius10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Mobius10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Mobius10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MobiusInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MobiusInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MobiusInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MobiusInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "MobiusVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MobiusVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MobiusVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MobiusVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MobiusVehicleAndShipWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Mobius10minUpgrade_Init () {
    libA4E3281A_gt_Mobius10minUpgrade = TriggerCreate("libA4E3281A_gt_Mobius10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Mobius10minUpgrade, libA4E3281A_gv_mobius10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Mobius15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Mobius15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Mobius15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MobiusInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MobiusInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MobiusInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MobiusInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "MobiusVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MobiusVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MobiusVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MobiusVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MobiusVehicleAndShipArmorsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Mobius15minUpgrade_Init () {
    libA4E3281A_gt_Mobius15minUpgrade = TriggerCreate("libA4E3281A_gt_Mobius15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Mobius15minUpgrade, libA4E3281A_gv_mobius15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Mobius20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Mobius20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Mobius20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MobiusInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MobiusInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MobiusInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MobiusInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MobiusInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MobiusInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MobiusInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MobiusInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MobiusInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MobiusVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MobiusVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MobiusVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MobiusVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MobiusVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MobiusVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MobiusVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MobiusVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MobiusVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MobiusVehicleAndShipWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Mobius20minUpgrade_Init () {
    libA4E3281A_gt_Mobius20minUpgrade = TriggerCreate("libA4E3281A_gt_Mobius20minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Mobius20minUpgrade, libA4E3281A_gv_mobius20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius A Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_MobiusATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_MobiusATimer, false);
    TimerStart(libA4E3281A_gv_mobiusA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mobiusA10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mobius5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mobius10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mobius15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mobius20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusATimer_Init () {
    libA4E3281A_gt_MobiusATimer = TriggerCreate("libA4E3281A_gt_MobiusATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_MobiusA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_MobiusA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusMarauderStimpack", 1);
    TechTreeUpgradeAddLevel(4, "MobiusMarauderStimpack", 1);
    TechTreeUpgradeAddLevel(5, "MobiusMarauderStimpack", 1);
    TechTreeUpgradeAddLevel(6, "MobiusMarauderStimpack", 1);
    TechTreeUpgradeAddLevel(7, "MobiusMarauderStimpack", 1);
    TriggerEnable(libA4E3281A_gt_MobiusMarauderAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusA8minUpgrade_Init () {
    libA4E3281A_gt_MobiusA8minUpgrade = TriggerCreate("libA4E3281A_gt_MobiusA8minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_MobiusA8minUpgrade, libA4E3281A_gv_mobiusA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius A 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusA10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_MobiusA10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_MobiusA10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusDiamondbackTriLithiumPowerCells", 1);
    TechTreeUpgradeAddLevel(4, "MobiusDiamondbackTriLithiumPowerCells", 1);
    TechTreeUpgradeAddLevel(5, "MobiusDiamondbackTriLithiumPowerCells", 1);
    TechTreeUpgradeAddLevel(6, "MobiusDiamondbackTriLithiumPowerCells", 1);
    TechTreeUpgradeAddLevel(7, "MobiusDiamondbackTriLithiumPowerCells", 1);
    TechTreeUpgradeAddLevel(3, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(4, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(5, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(6, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(7, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(3, "MobiusSpectreIIEnergyArmor", 1);
    TechTreeUpgradeAddLevel(4, "MobiusSpectreIIEnergyArmor", 1);
    TechTreeUpgradeAddLevel(5, "MobiusSpectreIIEnergyArmor", 1);
    TechTreeUpgradeAddLevel(6, "MobiusSpectreIIEnergyArmor", 1);
    TechTreeUpgradeAddLevel(7, "MobiusSpectreIIEnergyArmor", 1);
    TechTreeUpgradeAddLevel(3, "MobiusWarpInReinforcements", 1);
    TechTreeUpgradeAddLevel(4, "MobiusWarpInReinforcements", 1);
    TechTreeUpgradeAddLevel(5, "MobiusWarpInReinforcements", 1);
    TechTreeUpgradeAddLevel(6, "MobiusWarpInReinforcements", 1);
    TechTreeUpgradeAddLevel(7, "MobiusWarpInReinforcements", 1);
    TechTreeUpgradeAddLevel(3, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(4, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(5, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(6, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(7, "MobiusSpectreCloak", 1);
    TriggerEnable(libA4E3281A_gt_MobiusSpectreIIAbility, true);
    TriggerEnable(libA4E3281A_gt_MobiusMedicAbility, true);
    TriggerEnable(libA4E3281A_gt_UnitsAttack, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusA10minUpgrade_Init () {
    libA4E3281A_gt_MobiusA10minUpgrade = TriggerCreate("libA4E3281A_gt_MobiusA10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_MobiusA10minUpgrade, libA4E3281A_gv_mobiusA10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius B Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusBTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_MobiusBTimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_MobiusBTimer, false);
    TimerStart(libA4E3281A_gv_mobiusB8minTimer, 480.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mobiusB10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mobius5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mobius10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mobius15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mobius20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusBTimer_Init () {
    libA4E3281A_gt_MobiusBTimer = TriggerCreate("libA4E3281A_gt_MobiusBTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius B 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusB8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_MobiusB8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_MobiusB8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusHunterJoriumArmor", 1);
    TechTreeUpgradeAddLevel(4, "MobiusHunterJoriumArmor", 1);
    TechTreeUpgradeAddLevel(5, "MobiusHunterJoriumArmor", 1);
    TechTreeUpgradeAddLevel(6, "MobiusHunterJoriumArmor", 1);
    TechTreeUpgradeAddLevel(7, "MobiusHunterJoriumArmor", 1);
    TechTreeUpgradeAddLevel(3, "MobiusPredatorRobotClawsRetributionStrike", 1);
    TechTreeUpgradeAddLevel(4, "MobiusPredatorRobotClawsRetributionStrike", 1);
    TechTreeUpgradeAddLevel(5, "MobiusPredatorRobotClawsRetributionStrike", 1);
    TechTreeUpgradeAddLevel(6, "MobiusPredatorRobotClawsRetributionStrike", 1);
    TechTreeUpgradeAddLevel(7, "MobiusPredatorRobotClawsRetributionStrike", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusB8minUpgrade_Init () {
    libA4E3281A_gt_MobiusB8minUpgrade = TriggerCreate("libA4E3281A_gt_MobiusB8minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_MobiusB8minUpgrade, libA4E3281A_gv_mobiusB8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius B 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MobiusB10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_MobiusB10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_MobiusB10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(4, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(5, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(6, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(7, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(3, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(4, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(5, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(6, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(7, "MobiusSpectreCloak", 1);
    TriggerEnable(libA4E3281A_gt_MobiusSpectreAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MobiusB10minUpgrade_Init () {
    libA4E3281A_gt_MobiusB10minUpgrade = TriggerCreate("libA4E3281A_gt_MobiusB10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_MobiusB10minUpgrade, libA4E3281A_gv_mobiusB10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim A
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_NerazimATimer, true, false);
    TriggerEnable(libA4E3281A_gt_NerazimDarkArchonAbility1, true);
    TriggerEnable(libA4E3281A_gt_NerazimImmortalAbility, true);
    TriggerEnable(libA4E3281A_gt_NerazimStalkerAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimA_Init () {
    libA4E3281A_gt_NerazimA = TriggerCreate("libA4E3281A_gt_NerazimA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim B
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_NerazimBTimer, true, false);
    TriggerEnable(libA4E3281A_gt_NerazimHTAbility, true);
    TriggerEnable(libA4E3281A_gt_NerazimImmortalAbility, true);
    TriggerEnable(libA4E3281A_gt_NerazimStalkerAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimB_Init () {
    libA4E3281A_gt_NerazimB = TriggerCreate("libA4E3281A_gt_NerazimB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim C
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_NerazimCTimer, true, false);
    TriggerEnable(libA4E3281A_gt_NerazimStalkerAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimC_Init () {
    libA4E3281A_gt_NerazimC = TriggerCreate("libA4E3281A_gt_NerazimC_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim Corsair Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimCorsairAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimCorsair"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_NerazimCorsairAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimCorsairAbility_Init () {
    libA4E3281A_gt_NerazimCorsairAbility = TriggerCreate("libA4E3281A_gt_NerazimCorsairAbility_Func");
    TriggerEnable(libA4E3281A_gt_NerazimCorsairAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_NerazimCorsairAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim Dark Archon Ability1
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimDarkArchonAbility1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimDarkArchon"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_NerazimDarkArchonAbility1(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimDarkArchonAbility1_Init () {
    libA4E3281A_gt_NerazimDarkArchonAbility1 = TriggerCreate("libA4E3281A_gt_NerazimDarkArchonAbility1_Func");
    TriggerEnable(libA4E3281A_gt_NerazimDarkArchonAbility1, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_NerazimDarkArchonAbility1, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim Dark Archon Ability2
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimDarkArchonAbility2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimDarkArchon"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_NerazimDarkArchonAbility2(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimDarkArchonAbility2_Init () {
    libA4E3281A_gt_NerazimDarkArchonAbility2 = TriggerCreate("libA4E3281A_gt_NerazimDarkArchonAbility2_Func");
    TriggerEnable(libA4E3281A_gt_NerazimDarkArchonAbility2, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_NerazimDarkArchonAbility2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim DT Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimDTAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimShadowTemplar"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_NerazimDTAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimDTAbility_Init () {
    libA4E3281A_gt_NerazimDTAbility = TriggerCreate("libA4E3281A_gt_NerazimDTAbility_Func");
    TriggerEnable(libA4E3281A_gt_NerazimDTAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_NerazimDTAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim HT Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimHTAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimHighTemplar"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_NerazimHTAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimHTAbility_Init () {
    libA4E3281A_gt_NerazimHTAbility = TriggerCreate("libA4E3281A_gt_NerazimHTAbility_Func");
    TriggerEnable(libA4E3281A_gt_NerazimHTAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_NerazimHTAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim Immortal Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimImmortalAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimImmortal"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_NerazimImmortalAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimImmortalAbility_Init () {
    libA4E3281A_gt_NerazimImmortalAbility = TriggerCreate("libA4E3281A_gt_NerazimImmortalAbility_Func");
    TriggerEnable(libA4E3281A_gt_NerazimImmortalAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_NerazimImmortalAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim Stalker Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimStalkerAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimStalker"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_NerazimStalkerAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimStalkerAbility_Init () {
    libA4E3281A_gt_NerazimStalkerAbility = TriggerCreate("libA4E3281A_gt_NerazimStalkerAbility_Func");
    TriggerEnable(libA4E3281A_gt_NerazimStalkerAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_NerazimStalkerAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Nerazim5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Nerazim5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Nerazim5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NerazimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NerazimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NerazimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NerazimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NerazimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NerazimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NerazimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NerazimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NerazimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NerazimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NerazimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NerazimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NerazimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NerazimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NerazimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NerazimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NerazimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NerazimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NerazimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NerazimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NerazimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NerazimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NerazimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NerazimAirWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Nerazim5minUpgrade_Init () {
    libA4E3281A_gt_Nerazim5minUpgrade = TriggerCreate("libA4E3281A_gt_Nerazim5minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Nerazim5minUpgrade, libA4E3281A_gv_nerazim5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Nerazim10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Nerazim10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Nerazim10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NerazimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NerazimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NerazimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NerazimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "NerazimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NerazimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NerazimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NerazimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NerazimAirWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Nerazim10minUpgrade_Init () {
    libA4E3281A_gt_Nerazim10minUpgrade = TriggerCreate("libA4E3281A_gt_Nerazim10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Nerazim10minUpgrade, libA4E3281A_gv_nerazim10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Nerazim15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Nerazim15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Nerazim15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NerazimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NerazimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NerazimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NerazimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "NerazimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NerazimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NerazimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NerazimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NerazimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "NerazimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NerazimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NerazimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NerazimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NerazimAirArmorsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Nerazim15minUpgrade_Init () {
    libA4E3281A_gt_Nerazim15minUpgrade = TriggerCreate("libA4E3281A_gt_Nerazim15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Nerazim15minUpgrade, libA4E3281A_gv_nerazim15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Nerazim20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Nerazim20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Nerazim20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NerazimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NerazimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NerazimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NerazimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NerazimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NerazimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NerazimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NerazimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NerazimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NerazimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NerazimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NerazimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NerazimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NerazimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NerazimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NerazimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NerazimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NerazimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NerazimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NerazimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NerazimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NerazimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NerazimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NerazimAirWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Nerazim20minUpgrade_Init () {
    libA4E3281A_gt_Nerazim20minUpgrade = TriggerCreate("libA4E3281A_gt_Nerazim20minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Nerazim20minUpgrade, libA4E3281A_gv_nerazim20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim A Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NerazimATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NerazimATimer, false);
    TimerStart(libA4E3281A_gv_nerazimA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazimA10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazimA15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazim5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazim10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazim15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazim20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimATimer_Init () {
    libA4E3281A_gt_NerazimATimer = TriggerCreate("libA4E3281A_gt_NerazimATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NerazimA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NerazimA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(4, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(5, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(6, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(7, "NerazimZealotShadowCharge", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimA8minUpgrade_Init () {
    libA4E3281A_gt_NerazimA8minUpgrade = TriggerCreate("libA4E3281A_gt_NerazimA8minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NerazimA8minUpgrade, libA4E3281A_gv_nerazimA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim A 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimA10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NerazimA10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NerazimA10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(4, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(5, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(6, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(7, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(3, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(4, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(5, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(6, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(7, "NerazimStalkerCloak", 1);
    TriggerEnable(libA4E3281A_gt_NerazimDTAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimA10minUpgrade_Init () {
    libA4E3281A_gt_NerazimA10minUpgrade = TriggerCreate("libA4E3281A_gt_NerazimA10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NerazimA10minUpgrade, libA4E3281A_gv_nerazimA10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim A 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimA15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NerazimA15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NerazimA15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimDarkArchonMindControl", 1);
    TechTreeUpgradeAddLevel(4, "NerazimDarkArchonMindControl", 1);
    TechTreeUpgradeAddLevel(5, "NerazimDarkArchonMindControl", 1);
    TechTreeUpgradeAddLevel(6, "NerazimDarkArchonMindControl", 1);
    TechTreeUpgradeAddLevel(7, "NerazimDarkArchonMindControl", 1);
    TechTreeUpgradeAddLevel(3, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(4, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(5, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(6, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(7, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(3, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(4, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(5, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(6, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(7, "NerazimImmortalBlinkHallucination", 1);
    TriggerEnable(libA4E3281A_gt_NerazimDarkArchonAbility1, false);
    TriggerEnable(libA4E3281A_gt_NerazimDarkArchonAbility2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimA15minUpgrade_Init () {
    libA4E3281A_gt_NerazimA15minUpgrade = TriggerCreate("libA4E3281A_gt_NerazimA15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NerazimA15minUpgrade, libA4E3281A_gv_nerazimA15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim B Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimBTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NerazimBTimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NerazimBTimer, false);
    TimerStart(libA4E3281A_gv_nerazimB8minTimer, 480.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazimB10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazimB15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazim5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazim10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazim15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazim20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimBTimer_Init () {
    libA4E3281A_gt_NerazimBTimer = TriggerCreate("libA4E3281A_gt_NerazimBTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim B 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimB8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NerazimB8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NerazimB8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(4, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(5, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(6, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(7, "NerazimZealotShadowCharge", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimB8minUpgrade_Init () {
    libA4E3281A_gt_NerazimB8minUpgrade = TriggerCreate("libA4E3281A_gt_NerazimB8minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NerazimB8minUpgrade, libA4E3281A_gv_nerazimB8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim B 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimB10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NerazimB10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NerazimB10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(4, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(5, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(6, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(7, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(3, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(4, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(5, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(6, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(7, "NerazimStalkerCloak", 1);
    TriggerEnable(libA4E3281A_gt_NerazimDTAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimB10minUpgrade_Init () {
    libA4E3281A_gt_NerazimB10minUpgrade = TriggerCreate("libA4E3281A_gt_NerazimB10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NerazimB10minUpgrade, libA4E3281A_gv_nerazimB10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim B 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimB15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NerazimB15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NerazimB15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(4, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(5, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(6, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(7, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(3, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(4, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(5, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(6, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(7, "NerazimImmortalBlinkHallucination", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimB15minUpgrade_Init () {
    libA4E3281A_gt_NerazimB15minUpgrade = TriggerCreate("libA4E3281A_gt_NerazimB15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NerazimB15minUpgrade, libA4E3281A_gv_nerazimB15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim C Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimCTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NerazimCTimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NerazimCTimer, false);
    TimerStart(libA4E3281A_gv_nerazimC8minTimer, 480.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazimC10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazimC15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazim5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazim10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazim15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nerazim20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimCTimer_Init () {
    libA4E3281A_gt_NerazimCTimer = TriggerCreate("libA4E3281A_gt_NerazimCTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim C 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimC8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NerazimC8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NerazimC8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(4, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(5, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(6, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(7, "NerazimZealotShadowCharge", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimC8minUpgrade_Init () {
    libA4E3281A_gt_NerazimC8minUpgrade = TriggerCreate("libA4E3281A_gt_NerazimC8minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NerazimC8minUpgrade, libA4E3281A_gv_nerazimC8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim C 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimC10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NerazimC10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NerazimC10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(4, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(5, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(6, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(7, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(3, "NerazimOracleCloak", 1);
    TechTreeUpgradeAddLevel(4, "NerazimOracleCloak", 1);
    TechTreeUpgradeAddLevel(5, "NerazimOracleCloak", 1);
    TechTreeUpgradeAddLevel(6, "NerazimOracleCloak", 1);
    TechTreeUpgradeAddLevel(7, "NerazimOracleCloak", 1);
    TechTreeUpgradeAddLevel(3, "NerazimCorsairDisruptionWeb", 1);
    TechTreeUpgradeAddLevel(4, "NerazimCorsairDisruptionWeb", 1);
    TechTreeUpgradeAddLevel(5, "NerazimCorsairDisruptionWeb", 1);
    TechTreeUpgradeAddLevel(6, "NerazimCorsairDisruptionWeb", 1);
    TechTreeUpgradeAddLevel(7, "NerazimCorsairDisruptionWeb", 1);
    TriggerEnable(libA4E3281A_gt_NerazimCorsairAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimC10minUpgrade_Init () {
    libA4E3281A_gt_NerazimC10minUpgrade = TriggerCreate("libA4E3281A_gt_NerazimC10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NerazimC10minUpgrade, libA4E3281A_gv_nerazimC10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim C 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NerazimC15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NerazimC15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NerazimC15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimCorsairEnergy", 1);
    TechTreeUpgradeAddLevel(4, "NerazimCorsairEnergy", 1);
    TechTreeUpgradeAddLevel(5, "NerazimCorsairEnergy", 1);
    TechTreeUpgradeAddLevel(6, "NerazimCorsairEnergy", 1);
    TechTreeUpgradeAddLevel(7, "NerazimCorsairEnergy", 1);
    TechTreeUpgradeAddLevel(3, "NerazimVoidRaySpeedUpgrade", 1);
    TechTreeUpgradeAddLevel(4, "NerazimVoidRaySpeedUpgrade", 1);
    TechTreeUpgradeAddLevel(5, "NerazimVoidRaySpeedUpgrade", 1);
    TechTreeUpgradeAddLevel(6, "NerazimVoidRaySpeedUpgrade", 1);
    TechTreeUpgradeAddLevel(7, "NerazimVoidRaySpeedUpgrade", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NerazimC15minUpgrade_Init () {
    libA4E3281A_gt_NerazimC15minUpgrade = TriggerCreate("libA4E3281A_gt_NerazimC15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NerazimC15minUpgrade, libA4E3281A_gv_nerazimC15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest A
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_NestATimer, true, false);
    TriggerEnable(libA4E3281A_gt_NestDefilerAbility1, true);
    TriggerEnable(libA4E3281A_gt_NestLurkerAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestA_Init () {
    libA4E3281A_gt_NestA = TriggerCreate("libA4E3281A_gt_NestA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest B
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_NestBTimer, true, false);
    TriggerEnable(libA4E3281A_gt_NestQueenAbility1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestB_Init () {
    libA4E3281A_gt_NestB = TriggerCreate("libA4E3281A_gt_NestB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest Defiler Ability1
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestDefilerAbility1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_alliedGroup;
    int lv_alliedCount;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_alliedGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NestDefiler"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_NestDefilerAbility1(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestDefilerAbility1_Init () {
    libA4E3281A_gt_NestDefilerAbility1 = TriggerCreate("libA4E3281A_gt_NestDefilerAbility1_Func");
    TriggerEnable(libA4E3281A_gt_NestDefilerAbility1, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_NestDefilerAbility1, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest Defiler Ability2
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestDefilerAbility2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NestDefiler"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_NestDefilerAbility2(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestDefilerAbility2_Init () {
    libA4E3281A_gt_NestDefilerAbility2 = TriggerCreate("libA4E3281A_gt_NestDefilerAbility2_Func");
    TriggerEnable(libA4E3281A_gt_NestDefilerAbility2, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_NestDefilerAbility2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest Lurker Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestLurkerAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NestLurker"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_NestLurkerAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestLurkerAbility_Init () {
    libA4E3281A_gt_NestLurkerAbility = TriggerCreate("libA4E3281A_gt_NestLurkerAbility_Func");
    TriggerEnable(libA4E3281A_gt_NestLurkerAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_NestLurkerAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest Queen Ability1
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestQueenAbility1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NestQueen"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_NestQueenAbility1(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestQueenAbility1_Init () {
    libA4E3281A_gt_NestQueenAbility1 = TriggerCreate("libA4E3281A_gt_NestQueenAbility1_Func");
    TriggerEnable(libA4E3281A_gt_NestQueenAbility1, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_NestQueenAbility1, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest Queen Ability2
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestQueenAbility2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NestQueen"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_NestQueenAbility2(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestQueenAbility2_Init () {
    libA4E3281A_gt_NestQueenAbility2 = TriggerCreate("libA4E3281A_gt_NestQueenAbility2_Func");
    TriggerEnable(libA4E3281A_gt_NestQueenAbility2, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_NestQueenAbility2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Nest5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Nest5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Nest5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NestGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NestGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NestGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NestGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NestMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NestMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NestMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NestMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NestMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NestFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NestFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NestFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NestFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NestFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NestAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NestAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NestAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NestAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NestAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NestMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NestMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NestMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NestMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NestMissileWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Nest5minUpgrade_Init () {
    libA4E3281A_gt_Nest5minUpgrade = TriggerCreate("libA4E3281A_gt_Nest5minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Nest5minUpgrade, libA4E3281A_gv_nest5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Nest10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Nest10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Nest10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NestMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NestMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NestMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NestMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "NestAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NestAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NestAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NestAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NestAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "NestMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NestMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NestMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NestMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NestMissileWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Nest10minUpgrade_Init () {
    libA4E3281A_gt_Nest10minUpgrade = TriggerCreate("libA4E3281A_gt_Nest10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Nest10minUpgrade, libA4E3281A_gv_nest10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Nest15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Nest15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Nest15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NestGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NestGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NestGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NestGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(3, "NestFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NestFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NestFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NestFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NestFlyerCarapacesLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Nest15minUpgrade_Init () {
    libA4E3281A_gt_Nest15minUpgrade = TriggerCreate("libA4E3281A_gt_Nest15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Nest15minUpgrade, libA4E3281A_gv_nest15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Nest20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Nest20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Nest20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NestGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NestGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NestGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NestGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NestMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NestMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NestMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NestMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NestMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NestFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NestFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NestFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NestFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NestFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NestAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NestAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NestAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NestAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NestAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NestMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NestMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NestMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NestMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NestMissileWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Nest20minUpgrade_Init () {
    libA4E3281A_gt_Nest20minUpgrade = TriggerCreate("libA4E3281A_gt_Nest20minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Nest20minUpgrade, libA4E3281A_gv_nest20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest A Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NestATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NestATimer, false);
    TimerStart(libA4E3281A_gv_nestA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nestA10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nestA15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nest5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nest10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nest15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nest20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestATimer_Init () {
    libA4E3281A_gt_NestATimer = TriggerCreate("libA4E3281A_gt_NestATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NestA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NestA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestHydraliskSpeed", 1);
    TechTreeUpgradeAddLevel(4, "NestHydraliskSpeed", 1);
    TechTreeUpgradeAddLevel(5, "NestHydraliskSpeed", 1);
    TechTreeUpgradeAddLevel(6, "NestHydraliskSpeed", 1);
    TechTreeUpgradeAddLevel(7, "NestHydraliskSpeed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestA8minUpgrade_Init () {
    libA4E3281A_gt_NestA8minUpgrade = TriggerCreate("libA4E3281A_gt_NestA8minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NestA8minUpgrade, libA4E3281A_gv_nestA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest A 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestA10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NestA10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NestA10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestHydraliskAttackRange", 1);
    TechTreeUpgradeAddLevel(4, "NestHydraliskAttackRange", 1);
    TechTreeUpgradeAddLevel(5, "NestHydraliskAttackRange", 1);
    TechTreeUpgradeAddLevel(6, "NestHydraliskAttackRange", 1);
    TechTreeUpgradeAddLevel(7, "NestHydraliskAttackRange", 1);
    TechTreeUpgradeAddLevel(3, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(4, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(5, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(6, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(7, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(3, "NestDefilerEnergy", 1);
    TechTreeUpgradeAddLevel(4, "NestDefilerEnergy", 1);
    TechTreeUpgradeAddLevel(5, "NestDefilerEnergy", 1);
    TechTreeUpgradeAddLevel(6, "NestDefilerEnergy", 1);
    TechTreeUpgradeAddLevel(7, "NestDefilerEnergy", 1);
    TechTreeUpgradeAddLevel(3, "NestLurkerBurrowSpeed", 1);
    TechTreeUpgradeAddLevel(4, "NestLurkerBurrowSpeed", 1);
    TechTreeUpgradeAddLevel(5, "NestLurkerBurrowSpeed", 1);
    TechTreeUpgradeAddLevel(6, "NestLurkerBurrowSpeed", 1);
    TechTreeUpgradeAddLevel(7, "NestLurkerBurrowSpeed", 1);
    TechTreeUpgradeAddLevel(3, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(4, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(5, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(6, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(7, "NestMutaliskViciousGlaive", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestA10minUpgrade_Init () {
    libA4E3281A_gt_NestA10minUpgrade = TriggerCreate("libA4E3281A_gt_NestA10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NestA10minUpgrade, libA4E3281A_gv_nestA10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest A 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestA15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NestA15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NestA15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(4, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(5, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(6, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(7, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(3, "NestDefilerPlague", 1);
    TechTreeUpgradeAddLevel(4, "NestDefilerPlague", 1);
    TechTreeUpgradeAddLevel(5, "NestDefilerPlague", 1);
    TechTreeUpgradeAddLevel(6, "NestDefilerPlague", 1);
    TechTreeUpgradeAddLevel(7, "NestDefilerPlague", 1);
    TechTreeUpgradeAddLevel(3, "NestLurkerSeismicSpines", 1);
    TechTreeUpgradeAddLevel(4, "NestLurkerSeismicSpines", 1);
    TechTreeUpgradeAddLevel(5, "NestLurkerSeismicSpines", 1);
    TechTreeUpgradeAddLevel(6, "NestLurkerSeismicSpines", 1);
    TechTreeUpgradeAddLevel(7, "NestLurkerSeismicSpines", 1);
    TechTreeUpgradeAddLevel(3, "NestUltraliskArmorAura", 1);
    TechTreeUpgradeAddLevel(4, "NestUltraliskArmorAura", 1);
    TechTreeUpgradeAddLevel(5, "NestUltraliskArmorAura", 1);
    TechTreeUpgradeAddLevel(6, "NestUltraliskArmorAura", 1);
    TechTreeUpgradeAddLevel(7, "NestUltraliskArmorAura", 1);
    TechTreeUpgradeAddLevel(3, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(4, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(5, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(6, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(7, "NestMutaliskRapidRegeneration", 1);
    libA4E3281A_gv_nestLurkerSearchArea += 2;
    TriggerEnable(libA4E3281A_gt_NestDefilerAbility1, false);
    TriggerEnable(libA4E3281A_gt_NestDefilerAbility2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestA15minUpgrade_Init () {
    libA4E3281A_gt_NestA15minUpgrade = TriggerCreate("libA4E3281A_gt_NestA15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NestA15minUpgrade, libA4E3281A_gv_nestA15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest B Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestBTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NestBTimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NestBTimer, false);
    TimerStart(libA4E3281A_gv_nestB10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nestB15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nest5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nest10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nest15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_nest20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestBTimer_Init () {
    libA4E3281A_gt_NestBTimer = TriggerCreate("libA4E3281A_gt_NestBTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest B 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestB10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NestB10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NestB10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(4, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(5, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(6, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(7, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(3, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(4, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(5, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(6, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(7, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(3, "NestQueenEnergy", 1);
    TechTreeUpgradeAddLevel(4, "NestQueenEnergy", 1);
    TechTreeUpgradeAddLevel(5, "NestQueenEnergy", 1);
    TechTreeUpgradeAddLevel(6, "NestQueenEnergy", 1);
    TechTreeUpgradeAddLevel(7, "NestQueenEnergy", 1);
    TechTreeUpgradeAddLevel(3, "NestDevourerMembranes", 1);
    TechTreeUpgradeAddLevel(4, "NestDevourerMembranes", 1);
    TechTreeUpgradeAddLevel(5, "NestDevourerMembranes", 1);
    TechTreeUpgradeAddLevel(6, "NestDevourerMembranes", 1);
    TechTreeUpgradeAddLevel(7, "NestDevourerMembranes", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestB10minUpgrade_Init () {
    libA4E3281A_gt_NestB10minUpgrade = TriggerCreate("libA4E3281A_gt_NestB10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NestB10minUpgrade, libA4E3281A_gv_nestB10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest B 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_NestB15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_NestB15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_NestB15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(4, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(5, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(6, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(7, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(3, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(4, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(5, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(6, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(7, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(3, "NestQueenBlastKill", 1);
    TechTreeUpgradeAddLevel(4, "NestQueenBlastKill", 1);
    TechTreeUpgradeAddLevel(5, "NestQueenBlastKill", 1);
    TechTreeUpgradeAddLevel(6, "NestQueenBlastKill", 1);
    TechTreeUpgradeAddLevel(7, "NestQueenBlastKill", 1);
    TechTreeUpgradeAddLevel(3, "NestDevourerImprovedOsmosis", 1);
    TechTreeUpgradeAddLevel(4, "NestDevourerImprovedOsmosis", 1);
    TechTreeUpgradeAddLevel(5, "NestDevourerImprovedOsmosis", 1);
    TechTreeUpgradeAddLevel(6, "NestDevourerImprovedOsmosis", 1);
    TechTreeUpgradeAddLevel(7, "NestDevourerImprovedOsmosis", 1);
    TechTreeUpgradeAddLevel(3, "NestGuardianDotDamage", 1);
    TechTreeUpgradeAddLevel(4, "NestGuardianDotDamage", 1);
    TechTreeUpgradeAddLevel(5, "NestGuardianDotDamage", 1);
    TechTreeUpgradeAddLevel(6, "NestGuardianDotDamage", 1);
    TechTreeUpgradeAddLevel(7, "NestGuardianDotDamage", 1);
    TriggerEnable(libA4E3281A_gt_NestQueenAbility1, false);
    TriggerEnable(libA4E3281A_gt_NestQueenAbility2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_NestB15minUpgrade_Init () {
    libA4E3281A_gt_NestB15minUpgrade = TriggerCreate("libA4E3281A_gt_NestB15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_NestB15minUpgrade, libA4E3281A_gv_nestB15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim A
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_TaldarimATimer, true, false);
    TriggerEnable(libA4E3281A_gt_TaldarimStalkerAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimA_Init () {
    libA4E3281A_gt_TaldarimA = TriggerCreate("libA4E3281A_gt_TaldarimA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_TaldarimBTimer, true, false);
    TriggerEnable(libA4E3281A_gt_TaldarimHTAbility1, true);
    TriggerEnable(libA4E3281A_gt_TaldarimSentryAbility, true);
    TriggerEnable(libA4E3281A_gt_TaldarimStalkerAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimB_Init () {
    libA4E3281A_gt_TaldarimB = TriggerCreate("libA4E3281A_gt_TaldarimB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim HT Ability1
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimHTAbility1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimHighTemplar"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_TaldarimHTAbility1(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimHTAbility1_Init () {
    libA4E3281A_gt_TaldarimHTAbility1 = TriggerCreate("libA4E3281A_gt_TaldarimHTAbility1_Func");
    TriggerEnable(libA4E3281A_gt_TaldarimHTAbility1, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_TaldarimHTAbility1, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim HT Ability2
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimHTAbility2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimHighTemplar"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_TaldarimHTAbility2(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimHTAbility2_Init () {
    libA4E3281A_gt_TaldarimHTAbility2 = TriggerCreate("libA4E3281A_gt_TaldarimHTAbility2_Func");
    TriggerEnable(libA4E3281A_gt_TaldarimHTAbility2, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_TaldarimHTAbility2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim Mothership Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimMothershipAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimMothership"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_TaldarimMothershipAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimMothershipAbility_Init () {
    libA4E3281A_gt_TaldarimMothershipAbility = TriggerCreate("libA4E3281A_gt_TaldarimMothershipAbility_Func");
    TriggerEnable(libA4E3281A_gt_TaldarimMothershipAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_TaldarimMothershipAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim Mothership Core Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimMothershipCoreAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimMothershipCore"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_TaldarimMothershipCoreAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimMothershipCoreAbility_Init () {
    libA4E3281A_gt_TaldarimMothershipCoreAbility = TriggerCreate("libA4E3281A_gt_TaldarimMothershipCoreAbility_Func");
    TriggerEnable(libA4E3281A_gt_TaldarimMothershipCoreAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_TaldarimMothershipCoreAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim Sentry Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimSentryAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimSentry"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_TaldarimSentryAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimSentryAbility_Init () {
    libA4E3281A_gt_TaldarimSentryAbility = TriggerCreate("libA4E3281A_gt_TaldarimSentryAbility_Func");
    TriggerEnable(libA4E3281A_gt_TaldarimSentryAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_TaldarimSentryAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim Stalker Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimStalkerAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimStalker"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_TaldarimStalkerAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimStalkerAbility_Init () {
    libA4E3281A_gt_TaldarimStalkerAbility = TriggerCreate("libA4E3281A_gt_TaldarimStalkerAbility_Func");
    TriggerEnable(libA4E3281A_gt_TaldarimStalkerAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_TaldarimStalkerAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim Zealot Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimZealotAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimZealot"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_TaldarimZealotAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimZealotAbility_Init () {
    libA4E3281A_gt_TaldarimZealotAbility = TriggerCreate("libA4E3281A_gt_TaldarimZealotAbility_Func");
    TriggerEnable(libA4E3281A_gt_TaldarimZealotAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_TaldarimZealotAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Taldarim5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Taldarim5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Taldarim5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimAirWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Taldarim5minUpgrade_Init () {
    libA4E3281A_gt_Taldarim5minUpgrade = TriggerCreate("libA4E3281A_gt_Taldarim5minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Taldarim5minUpgrade, libA4E3281A_gv_taldarim5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Taldarim10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Taldarim10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Taldarim10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimAirWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Taldarim10minUpgrade_Init () {
    libA4E3281A_gt_Taldarim10minUpgrade = TriggerCreate("libA4E3281A_gt_Taldarim10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Taldarim10minUpgrade, libA4E3281A_gv_taldarim10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Taldarim15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Taldarim15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Taldarim15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimAirArmorsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Taldarim15minUpgrade_Init () {
    libA4E3281A_gt_Taldarim15minUpgrade = TriggerCreate("libA4E3281A_gt_Taldarim15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Taldarim15minUpgrade, libA4E3281A_gv_taldarim15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Taldarim20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Taldarim20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Taldarim20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimAirWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Taldarim20minUpgrade_Init () {
    libA4E3281A_gt_Taldarim20minUpgrade = TriggerCreate("libA4E3281A_gt_Taldarim20minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Taldarim20minUpgrade, libA4E3281A_gv_taldarim20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim A Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_TaldarimATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_TaldarimATimer, false);
    TimerStart(libA4E3281A_gv_taldarimA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarimA15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarim5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarim10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarim15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarim20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimATimer_Init () {
    libA4E3281A_gt_TaldarimATimer = TriggerCreate("libA4E3281A_gt_TaldarimATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_TaldarimA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_TaldarimA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimScoutWeaponRange", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimScoutWeaponRange", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimScoutWeaponRange", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimScoutWeaponRange", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimScoutWeaponRange", 1);
    TriggerEnable(libA4E3281A_gt_TaldarimZealotAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimA8minUpgrade_Init () {
    libA4E3281A_gt_TaldarimA8minUpgrade = TriggerCreate("libA4E3281A_gt_TaldarimA8minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_TaldarimA8minUpgrade, libA4E3281A_gv_taldarimA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim A 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimA15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_TaldarimA15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_TaldarimA15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimMothershipTemporalField", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimMothershipTemporalField", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimMothershipTemporalField", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimMothershipTemporalField", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimMothershipTemporalField", 1);
    TriggerEnable(libA4E3281A_gt_TaldarimMothershipCoreAbility, true);
    TriggerEnable(libA4E3281A_gt_TaldarimMothershipAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimA15minUpgrade_Init () {
    libA4E3281A_gt_TaldarimA15minUpgrade = TriggerCreate("libA4E3281A_gt_TaldarimA15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_TaldarimA15minUpgrade, libA4E3281A_gv_taldarimA15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimBTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_TaldarimBTimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_TaldarimBTimer, false);
    TimerStart(libA4E3281A_gv_taldarimB8minTimer, 480.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarimB10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarimB15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarimB20minTimer, 1200.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarimB25minTimer, 1500.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarimB30minTimer, 1800.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarimB35minTimer, 2100.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarim5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarim10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarim15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_taldarim20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimBTimer_Init () {
    libA4E3281A_gt_TaldarimBTimer = TriggerCreate("libA4E3281A_gt_TaldarimBTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimB8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_TaldarimB8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_TaldarimB8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimZealotShockwave", 1);
    TriggerEnable(libA4E3281A_gt_TaldarimZealotAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimB8minUpgrade_Init () {
    libA4E3281A_gt_TaldarimB8minUpgrade = TriggerCreate("libA4E3281A_gt_TaldarimB8minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_TaldarimB8minUpgrade, libA4E3281A_gv_taldarimB8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimB10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_TaldarimB10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_TaldarimB10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimSentrySquadSight", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimSentrySquadSight", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimSentrySquadSight", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimSentrySquadSight", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimSentrySquadSight", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarMindBlast", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarMindBlast", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarMindBlast", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarMindBlast", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarMindBlast", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarDamageUpgrade1", 1);
    TriggerEnable(libA4E3281A_gt_TaldarimHTAbility1, false);
    TriggerEnable(libA4E3281A_gt_TaldarimHTAbility2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimB10minUpgrade_Init () {
    libA4E3281A_gt_TaldarimB10minUpgrade = TriggerCreate("libA4E3281A_gt_TaldarimB10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_TaldarimB10minUpgrade, libA4E3281A_gv_taldarimB10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimB15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_TaldarimB15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_TaldarimB15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarEmpower", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarEmpower", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarEmpower", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarEmpower", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarEmpower", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarDamageUpgrade1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimB15minUpgrade_Init () {
    libA4E3281A_gt_TaldarimB15minUpgrade = TriggerCreate("libA4E3281A_gt_TaldarimB15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_TaldarimB15minUpgrade, libA4E3281A_gv_taldarimB15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimB20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_TaldarimB20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_TaldarimB20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarDamageUpgrade1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimB20minUpgrade_Init () {
    libA4E3281A_gt_TaldarimB20minUpgrade = TriggerCreate("libA4E3281A_gt_TaldarimB20minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_TaldarimB20minUpgrade, libA4E3281A_gv_taldarimB20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 25min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimB25minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_TaldarimB25minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_TaldarimB25minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarDamageUpgrade1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimB25minUpgrade_Init () {
    libA4E3281A_gt_TaldarimB25minUpgrade = TriggerCreate("libA4E3281A_gt_TaldarimB25minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_TaldarimB25minUpgrade, libA4E3281A_gv_taldarimB25minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 30min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimB30minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_TaldarimB30minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_TaldarimB30minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarDamageUpgrade1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimB30minUpgrade_Init () {
    libA4E3281A_gt_TaldarimB30minUpgrade = TriggerCreate("libA4E3281A_gt_TaldarimB30minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_TaldarimB30minUpgrade, libA4E3281A_gv_taldarimB30minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 35min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_TaldarimB35minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_TaldarimB35minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_TaldarimB35minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarDamageUpgrade1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_TaldarimB35minUpgrade_Init () {
    libA4E3281A_gt_TaldarimB35minUpgrade = TriggerCreate("libA4E3281A_gt_TaldarimB35minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_TaldarimB35minUpgrade, libA4E3281A_gv_taldarimB35minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian A
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_KelMorianA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_KelMorianATimer, true, false);
    TriggerEnable(libA4E3281A_gt_KelMorianAPCAbility, true);
    TriggerEnable(libA4E3281A_gt_KelMorianNukeTrackAbility, true);
    TriggerEnable(libA4E3281A_gt_KelMorianRavenAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_KelMorianA_Init () {
    libA4E3281A_gt_KelMorianA = TriggerCreate("libA4E3281A_gt_KelMorianA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian B
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_KelMorianB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_randomPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameAttributeGameValue("[bnet:Nexus Coop Data Basis/0.0/310318,file:Mods\\Nexus Coop Dependency Basis.SC2Mod]1") != "0002") && (GameIsOnline() == true)) {
        Wait(RandomInt(30, 60), c_timeGame);
        do {
            lv_randomPoint = RegionRandomPoint(RegionCircle(Point(20.0, 20.0), 1.0));
            TriggerExecute(libA4E3281A_gt_KelMorianB, false, false);
            TriggerExecute(libA4E3281A_gt_KelMorianB, false, false);
        }while ((RegionContainsPoint(RegionRect(0.0, 0.0, 1.0, 1.0), lv_randomPoint) == false));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CoopCasterOldMengsk", 0, 1, lv_randomPoint);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_KelMorianB_Init () {
    libA4E3281A_gt_KelMorianB = TriggerCreate("libA4E3281A_gt_KelMorianB_Func");
    TriggerAddEventUnitDamaged(libA4E3281A_gt_KelMorianB, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian APC Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_KelMorianAPCAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "KelMorianColonistTransport"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_KelMorianAPCAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_KelMorianAPCAbility_Init () {
    libA4E3281A_gt_KelMorianAPCAbility = TriggerCreate("libA4E3281A_gt_KelMorianAPCAbility_Func");
    TriggerEnable(libA4E3281A_gt_KelMorianAPCAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_KelMorianAPCAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian Raven Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_KelMorianRavenAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "KelMorianRaven"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_KelMorianRavenAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_KelMorianRavenAbility_Init () {
    libA4E3281A_gt_KelMorianRavenAbility = TriggerCreate("libA4E3281A_gt_KelMorianRavenAbility_Func");
    TriggerEnable(libA4E3281A_gt_KelMorianRavenAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_KelMorianRavenAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian NukeTrack Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_KelMorianNukeTrackAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "KelMorianTRUCK"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_KelMorianNukeTrackAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_KelMorianNukeTrackAbility_Init () {
    libA4E3281A_gt_KelMorianNukeTrackAbility = TriggerCreate("libA4E3281A_gt_KelMorianNukeTrackAbility_Func");
    TriggerEnable(libA4E3281A_gt_KelMorianNukeTrackAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_KelMorianNukeTrackAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_KelMorian5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_KelMorian5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_KelMorian5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "KelMorianInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianVehicleAndShipWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_KelMorian5minUpgrade_Init () {
    libA4E3281A_gt_KelMorian5minUpgrade = TriggerCreate("libA4E3281A_gt_KelMorian5minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_KelMorian5minUpgrade, libA4E3281A_gv_kelMorian5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_KelMorian10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_KelMorian10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_KelMorian10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "KelMorianInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianVehicleAndShipWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_KelMorian10minUpgrade_Init () {
    libA4E3281A_gt_KelMorian10minUpgrade = TriggerCreate("libA4E3281A_gt_KelMorian10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_KelMorian10minUpgrade, libA4E3281A_gv_kelMorian10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_KelMorian15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_KelMorian15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_KelMorian15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "KelMorianInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianVehicleAndShipArmorsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_KelMorian15minUpgrade_Init () {
    libA4E3281A_gt_KelMorian15minUpgrade = TriggerCreate("libA4E3281A_gt_KelMorian15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_KelMorian15minUpgrade, libA4E3281A_gv_kelMorian15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_KelMorian20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_KelMorian20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_KelMorian20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "KelMorianInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianVehicleAndShipWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_KelMorian20minUpgrade_Init () {
    libA4E3281A_gt_KelMorian20minUpgrade = TriggerCreate("libA4E3281A_gt_KelMorian20minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_KelMorian20minUpgrade, libA4E3281A_gv_kelMorian20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian A Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_KelMorianATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_KelMorianATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_KelMorianATimer, false);
    TimerStart(libA4E3281A_gv_kelMorianA12minTimer, 720.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_kelMorianA20minTimer, 1200.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_kelMorian5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_kelMorian10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_kelMorian15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_kelMorian20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_KelMorianATimer_Init () {
    libA4E3281A_gt_KelMorianATimer = TriggerCreate("libA4E3281A_gt_KelMorianATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian A 12min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_KelMorianA12minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_KelMorianA12minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_KelMorianA12minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "KelMorianMinerT330", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianMinerT330", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianMinerT330", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianMinerT330", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianMinerT330", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianCivilianMolotov", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianCivilianMolotov", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianCivilianMolotov", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianCivilianMolotov", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianCivilianMolotov", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_KelMorianA12minUpgrade_Init () {
    libA4E3281A_gt_KelMorianA12minUpgrade = TriggerCreate("libA4E3281A_gt_KelMorianA12minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_KelMorianA12minUpgrade, libA4E3281A_gv_kelMorianA12minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian A 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_KelMorianA20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_KelMorianA20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_KelMorianA20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "KelMorianHERCResurgence", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianHERCResurgence", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianHERCResurgence", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianHERCResurgence", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianHERCResurgence", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_KelMorianA20minUpgrade_Init () {
    libA4E3281A_gt_KelMorianA20minUpgrade = TriggerCreate("libA4E3281A_gt_KelMorianA20minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_KelMorianA20minUpgrade, libA4E3281A_gv_kelMorianA20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha A
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MechaA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_MechaATimer, true, false);
    TriggerEnable(libA4E3281A_gt_MechaBroodLordAbility, true);
    TriggerEnable(libA4E3281A_gt_MechaCorruptorAbility, true);
    TriggerEnable(libA4E3281A_gt_MechaOverlordAbility, true);
    TriggerEnable(libA4E3281A_gt_MechaViperAbility, true);
    TriggerEnable(libA4E3281A_gt_UnitsAttack, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MechaA_Init () {
    libA4E3281A_gt_MechaA = TriggerCreate("libA4E3281A_gt_MechaA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha Brood Lord Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MechaBroodLordAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MechaBroodLord"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MechaBroodLordAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MechaBroodLordAbility_Init () {
    libA4E3281A_gt_MechaBroodLordAbility = TriggerCreate("libA4E3281A_gt_MechaBroodLordAbility_Func");
    TriggerEnable(libA4E3281A_gt_MechaBroodLordAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MechaBroodLordAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha Corruptor Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MechaCorruptorAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MechaCorruptor"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MechaCorruptorAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MechaCorruptorAbility_Init () {
    libA4E3281A_gt_MechaCorruptorAbility = TriggerCreate("libA4E3281A_gt_MechaCorruptorAbility_Func");
    TriggerEnable(libA4E3281A_gt_MechaCorruptorAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MechaCorruptorAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha Overlord Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MechaOverlordAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MechaOverlord"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MechaOverlordAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MechaOverlordAbility_Init () {
    libA4E3281A_gt_MechaOverlordAbility = TriggerCreate("libA4E3281A_gt_MechaOverlordAbility_Func");
    TriggerEnable(libA4E3281A_gt_MechaOverlordAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MechaOverlordAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha Viper Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MechaViperAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MechaViper"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_MechaViperAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MechaViperAbility_Init () {
    libA4E3281A_gt_MechaViperAbility = TriggerCreate("libA4E3281A_gt_MechaViperAbility_Func");
    TriggerEnable(libA4E3281A_gt_MechaViperAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_MechaViperAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Mecha5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Mecha5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Mecha5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MechaGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MechaGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MechaGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MechaGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MechaGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MechaMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MechaMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MechaMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MechaMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MechaMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MechaMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MechaMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MechaMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MechaMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MechaMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MechaFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MechaFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MechaFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MechaFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MechaFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MechaAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MechaAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MechaAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MechaAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MechaAirWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Mecha5minUpgrade_Init () {
    libA4E3281A_gt_Mecha5minUpgrade = TriggerCreate("libA4E3281A_gt_Mecha5minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Mecha5minUpgrade, libA4E3281A_gv_mecha5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Mecha10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Mecha10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Mecha10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MechaMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MechaMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MechaMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MechaMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MechaMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "MechaMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MechaMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MechaMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MechaMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MechaMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "MechaAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MechaAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MechaAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MechaAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MechaAirWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Mecha10minUpgrade_Init () {
    libA4E3281A_gt_Mecha10minUpgrade = TriggerCreate("libA4E3281A_gt_Mecha10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Mecha10minUpgrade, libA4E3281A_gv_mecha10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Mecha15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Mecha15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Mecha15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MechaGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MechaGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MechaGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MechaGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MechaGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(3, "MechaFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MechaFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MechaFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MechaFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MechaFlyerCarapacesLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Mecha15minUpgrade_Init () {
    libA4E3281A_gt_Mecha15minUpgrade = TriggerCreate("libA4E3281A_gt_Mecha15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Mecha15minUpgrade, libA4E3281A_gv_mecha5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Mecha20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Mecha20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Mecha20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MechaGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MechaGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MechaGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MechaGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MechaGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MechaMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MechaMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MechaMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MechaMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MechaMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MechaMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MechaMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MechaMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MechaMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MechaMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MechaFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MechaFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MechaFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MechaFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MechaFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MechaAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MechaAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MechaAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MechaAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MechaAirWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Mecha20minUpgrade_Init () {
    libA4E3281A_gt_Mecha20minUpgrade = TriggerCreate("libA4E3281A_gt_Mecha20minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Mecha20minUpgrade, libA4E3281A_gv_mecha20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha A Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MechaATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_MechaATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_MechaATimer, false);
    TimerStart(libA4E3281A_gv_mechaA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mechaA10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mecha5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mecha10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mecha15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_mecha20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MechaATimer_Init () {
    libA4E3281A_gt_MechaATimer = TriggerCreate("libA4E3281A_gt_MechaATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MechaA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_MechaA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_MechaA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MechaZerglingSpeed", 1);
    TechTreeUpgradeAddLevel(4, "MechaZerglingSpeed", 1);
    TechTreeUpgradeAddLevel(5, "MechaZerglingSpeed", 1);
    TechTreeUpgradeAddLevel(6, "MechaZerglingSpeed", 1);
    TechTreeUpgradeAddLevel(7, "MechaZerglingSpeed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MechaA8minUpgrade_Init () {
    libA4E3281A_gt_MechaA8minUpgrade = TriggerCreate("libA4E3281A_gt_MechaA8minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_MechaA8minUpgrade, libA4E3281A_gv_mechaA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha A 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_MechaA10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_MechaA10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_MechaA10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MechaZerglingFrenzy", 1);
    TechTreeUpgradeAddLevel(4, "MechaZerglingFrenzy", 1);
    TechTreeUpgradeAddLevel(5, "MechaZerglingFrenzy", 1);
    TechTreeUpgradeAddLevel(6, "MechaZerglingFrenzy", 1);
    TechTreeUpgradeAddLevel(7, "MechaZerglingFrenzy", 1);
    TechTreeUpgradeAddLevel(3, "MechaBanelingSpeed", 1);
    TechTreeUpgradeAddLevel(4, "MechaBanelingSpeed", 1);
    TechTreeUpgradeAddLevel(5, "MechaBanelingSpeed", 1);
    TechTreeUpgradeAddLevel(6, "MechaBanelingSpeed", 1);
    TechTreeUpgradeAddLevel(7, "MechaBanelingSpeed", 1);
    TechTreeUpgradeAddLevel(3, "MechaHydraliskTarget", 1);
    TechTreeUpgradeAddLevel(4, "MechaHydraliskTarget", 1);
    TechTreeUpgradeAddLevel(5, "MechaHydraliskTarget", 1);
    TechTreeUpgradeAddLevel(6, "MechaHydraliskTarget", 1);
    TechTreeUpgradeAddLevel(7, "MechaHydraliskTarget", 1);
    TechTreeUpgradeAddLevel(3, "MechaViperParasiticBombSlow", 1);
    TechTreeUpgradeAddLevel(4, "MechaViperParasiticBombSlow", 1);
    TechTreeUpgradeAddLevel(5, "MechaViperParasiticBombSlow", 1);
    TechTreeUpgradeAddLevel(6, "MechaViperParasiticBombSlow", 1);
    TechTreeUpgradeAddLevel(7, "MechaViperParasiticBombSlow", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_MechaA10minUpgrade_Init () {
    libA4E3281A_gt_MechaA10minUpgrade = TriggerCreate("libA4E3281A_gt_MechaA10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_MechaA10minUpgrade, libA4E3281A_gv_mechaA10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden A
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_GoldenA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libA4E3281A_gt_GoldenATimer, true, false);
    TriggerEnable(libA4E3281A_gt_GoldenMothershipAbility, true);
    TriggerEnable(libA4E3281A_gt_GoldenMothershipCoreAbility, true);
    TriggerEnable(libA4E3281A_gt_GoldenWarpPrismAbility, true);
    TriggerEnable(libA4E3281A_gt_UnitsAttack, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_GoldenA_Init () {
    libA4E3281A_gt_GoldenA = TriggerCreate("libA4E3281A_gt_GoldenA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden Mothership Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_GoldenMothershipAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GoldenMothership"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_GoldenMothershipAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_GoldenMothershipAbility_Init () {
    libA4E3281A_gt_GoldenMothershipAbility = TriggerCreate("libA4E3281A_gt_GoldenMothershipAbility_Func");
    TriggerEnable(libA4E3281A_gt_GoldenMothershipAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_GoldenMothershipAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden Mothership Core Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_GoldenMothershipCoreAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GoldenMothershipCore"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_GoldenMothershipCoreAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_GoldenMothershipCoreAbility_Init () {
    libA4E3281A_gt_GoldenMothershipCoreAbility = TriggerCreate("libA4E3281A_gt_GoldenMothershipCoreAbility_Func");
    TriggerEnable(libA4E3281A_gt_GoldenMothershipCoreAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_GoldenMothershipCoreAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden Warp Prism Ability
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_GoldenWarpPrismAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GoldenWarpPrism"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libA4E3281A_gf_GoldenWarpPrismAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_GoldenWarpPrismAbility_Init () {
    libA4E3281A_gt_GoldenWarpPrismAbility = TriggerCreate("libA4E3281A_gt_GoldenWarpPrismAbility_Func");
    TriggerEnable(libA4E3281A_gt_GoldenWarpPrismAbility, false);
    TriggerAddEventUnitRegion(libA4E3281A_gt_GoldenWarpPrismAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Golden5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Golden5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Golden5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "GoldenGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "GoldenGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "GoldenGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "GoldenGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "GoldenGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "GoldenGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "GoldenGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "GoldenGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "GoldenGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "GoldenGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "GoldenAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "GoldenAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "GoldenAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "GoldenAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "GoldenAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "GoldenAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "GoldenAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "GoldenAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "GoldenAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "GoldenAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "GoldenShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "GoldenShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "GoldenShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "GoldenShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "GoldenShieldsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Golden5minUpgrade_Init () {
    libA4E3281A_gt_Golden5minUpgrade = TriggerCreate("libA4E3281A_gt_Golden5minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Golden5minUpgrade, libA4E3281A_gv_golden5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Golden10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Golden10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Golden10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "GoldenGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "GoldenGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "GoldenGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "GoldenGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "GoldenGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "GoldenAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "GoldenAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "GoldenAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "GoldenAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "GoldenAirWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Golden10minUpgrade_Init () {
    libA4E3281A_gt_Golden10minUpgrade = TriggerCreate("libA4E3281A_gt_Golden10minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Golden10minUpgrade, libA4E3281A_gv_golden10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Golden15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Golden15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Golden15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "GoldenGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "GoldenGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "GoldenGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "GoldenGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "GoldenGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "GoldenAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "GoldenAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "GoldenAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "GoldenAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "GoldenAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "GoldenShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "GoldenShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "GoldenShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "GoldenShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "GoldenShieldsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Golden15minUpgrade_Init () {
    libA4E3281A_gt_Golden15minUpgrade = TriggerCreate("libA4E3281A_gt_Golden15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Golden15minUpgrade, libA4E3281A_gv_golden15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_Golden20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_Golden20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_Golden20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "GoldenGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "GoldenGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "GoldenGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "GoldenGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "GoldenGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "GoldenGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "GoldenGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "GoldenGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "GoldenGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "GoldenGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "GoldenAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "GoldenAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "GoldenAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "GoldenAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "GoldenAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "GoldenAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "GoldenAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "GoldenAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "GoldenAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "GoldenAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "GoldenShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "GoldenShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "GoldenShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "GoldenShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "GoldenShieldsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_Golden20minUpgrade_Init () {
    libA4E3281A_gt_Golden20minUpgrade = TriggerCreate("libA4E3281A_gt_Golden20minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_Golden20minUpgrade, libA4E3281A_gv_golden20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden A Timer
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_GoldenATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_GoldenATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_GoldenATimer, false);
    TimerStart(libA4E3281A_gv_goldenA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_goldenA15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_golden5minTimer, 300.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_golden10minTimer, 600.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_golden15minTimer, 900.0, false, c_timeAI);
    TimerStart(libA4E3281A_gv_golden20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_GoldenATimer_Init () {
    libA4E3281A_gt_GoldenATimer = TriggerCreate("libA4E3281A_gt_GoldenATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_GoldenA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_GoldenA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_GoldenA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "GoldenZealotCharge", 1);
    TechTreeUpgradeAddLevel(4, "GoldenZealotCharge", 1);
    TechTreeUpgradeAddLevel(5, "GoldenZealotCharge", 1);
    TechTreeUpgradeAddLevel(6, "GoldenZealotCharge", 1);
    TechTreeUpgradeAddLevel(7, "GoldenZealotCharge", 1);
    TechTreeUpgradeAddLevel(3, "GoldenDragoonArmor", 1);
    TechTreeUpgradeAddLevel(4, "GoldenDragoonArmor", 1);
    TechTreeUpgradeAddLevel(5, "GoldenDragoonArmor", 1);
    TechTreeUpgradeAddLevel(6, "GoldenDragoonArmor", 1);
    TechTreeUpgradeAddLevel(7, "GoldenDragoonArmor", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_GoldenA8minUpgrade_Init () {
    libA4E3281A_gt_GoldenA8minUpgrade = TriggerCreate("libA4E3281A_gt_GoldenA8minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_GoldenA8minUpgrade, libA4E3281A_gv_goldenA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden A 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_gt_GoldenA15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libA4E3281A_gt_GoldenA15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libA4E3281A_gt_GoldenA15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "GoldenZealotLightningash", 1);
    TechTreeUpgradeAddLevel(4, "GoldenZealotLightningash", 1);
    TechTreeUpgradeAddLevel(5, "GoldenZealotLightningash", 1);
    TechTreeUpgradeAddLevel(6, "GoldenZealotLightningash", 1);
    TechTreeUpgradeAddLevel(7, "GoldenZealotLightningash", 1);
    TechTreeUpgradeAddLevel(3, "GoldenImmortalBarrier", 1);
    TechTreeUpgradeAddLevel(4, "GoldenImmortalBarrier", 1);
    TechTreeUpgradeAddLevel(5, "GoldenImmortalBarrier", 1);
    TechTreeUpgradeAddLevel(6, "GoldenImmortalBarrier", 1);
    TechTreeUpgradeAddLevel(7, "GoldenImmortalBarrier", 1);
    TechTreeUpgradeAddLevel(3, "GoldenCarrierInterceptorHangar", 1);
    TechTreeUpgradeAddLevel(4, "GoldenCarrierInterceptorHangar", 1);
    TechTreeUpgradeAddLevel(5, "GoldenCarrierInterceptorHangar", 1);
    TechTreeUpgradeAddLevel(6, "GoldenCarrierInterceptorHangar", 1);
    TechTreeUpgradeAddLevel(7, "GoldenCarrierInterceptorHangar", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libA4E3281A_gt_GoldenA15minUpgrade_Init () {
    libA4E3281A_gt_GoldenA15minUpgrade = TriggerCreate("libA4E3281A_gt_GoldenA15minUpgrade_Func");
    TriggerAddEventTimer(libA4E3281A_gt_GoldenA15minUpgrade, libA4E3281A_gv_goldenA15minTimer);
}

void libA4E3281A_InitTriggers () {
    libA4E3281A_gt_ExtraUpgrade_Init();
    libA4E3281A_gt_UnitsAttack_Init();
    libA4E3281A_gt_CovertOpsA_Init();
    libA4E3281A_gt_CovertOpsB_Init();
    libA4E3281A_gt_CovertOpsBattlecruiserAbility_Init();
    libA4E3281A_gt_CovertOpsGhostAbility1_Init();
    libA4E3281A_gt_CovertOpsGhostAbility2_Init();
    libA4E3281A_gt_CovertOpsGhostAbility3_Init();
    libA4E3281A_gt_CovertOpsLiberatorAbility_Init();
    libA4E3281A_gt_CovertOpsRavenAbility_Init();
    libA4E3281A_gt_CovertOpsTankAbility_Init();
    libA4E3281A_gt_CovertOps5minUpgrade_Init();
    libA4E3281A_gt_CovertOps10minUpgrade_Init();
    libA4E3281A_gt_CovertOps15minUpgrade_Init();
    libA4E3281A_gt_CovertOps20minUpgrade_Init();
    libA4E3281A_gt_CovertOpsATimer_Init();
    libA4E3281A_gt_CovertOpsA8minUpgrade_Init();
    libA4E3281A_gt_CovertOpsA10minUpgrade_Init();
    libA4E3281A_gt_CovertOpsA15minUpgrade_Init();
    libA4E3281A_gt_CovertOpsBTimer_Init();
    libA4E3281A_gt_CovertOpsB8minUpgrade_Init();
    libA4E3281A_gt_CovertOpsB10minUpgrade_Init();
    libA4E3281A_gt_CovertOpsB15minUpgrade_Init();
    libA4E3281A_gt_MobiusA_Init();
    libA4E3281A_gt_MobiusB_Init();
    libA4E3281A_gt_MobiusBansheeAbility_Init();
    libA4E3281A_gt_MobiusBattlecruiserAbility_Init();
    libA4E3281A_gt_MobiusMarauderAbility_Init();
    libA4E3281A_gt_MobiusMedicAbility_Init();
    libA4E3281A_gt_MobiusRavenAbility_Init();
    libA4E3281A_gt_MobiusSpectreAbility_Init();
    libA4E3281A_gt_MobiusSpectreIIAbility_Init();
    libA4E3281A_gt_MobiusThorAbility_Init();
    libA4E3281A_gt_MobiusVikingAbility_Init();
    libA4E3281A_gt_MobiusVultureAbility_Init();
    libA4E3281A_gt_Mobius5minUpgrade_Init();
    libA4E3281A_gt_Mobius10minUpgrade_Init();
    libA4E3281A_gt_Mobius15minUpgrade_Init();
    libA4E3281A_gt_Mobius20minUpgrade_Init();
    libA4E3281A_gt_MobiusATimer_Init();
    libA4E3281A_gt_MobiusA8minUpgrade_Init();
    libA4E3281A_gt_MobiusA10minUpgrade_Init();
    libA4E3281A_gt_MobiusBTimer_Init();
    libA4E3281A_gt_MobiusB8minUpgrade_Init();
    libA4E3281A_gt_MobiusB10minUpgrade_Init();
    libA4E3281A_gt_NerazimA_Init();
    libA4E3281A_gt_NerazimB_Init();
    libA4E3281A_gt_NerazimC_Init();
    libA4E3281A_gt_NerazimCorsairAbility_Init();
    libA4E3281A_gt_NerazimDarkArchonAbility1_Init();
    libA4E3281A_gt_NerazimDarkArchonAbility2_Init();
    libA4E3281A_gt_NerazimDTAbility_Init();
    libA4E3281A_gt_NerazimHTAbility_Init();
    libA4E3281A_gt_NerazimImmortalAbility_Init();
    libA4E3281A_gt_NerazimStalkerAbility_Init();
    libA4E3281A_gt_Nerazim5minUpgrade_Init();
    libA4E3281A_gt_Nerazim10minUpgrade_Init();
    libA4E3281A_gt_Nerazim15minUpgrade_Init();
    libA4E3281A_gt_Nerazim20minUpgrade_Init();
    libA4E3281A_gt_NerazimATimer_Init();
    libA4E3281A_gt_NerazimA8minUpgrade_Init();
    libA4E3281A_gt_NerazimA10minUpgrade_Init();
    libA4E3281A_gt_NerazimA15minUpgrade_Init();
    libA4E3281A_gt_NerazimBTimer_Init();
    libA4E3281A_gt_NerazimB8minUpgrade_Init();
    libA4E3281A_gt_NerazimB10minUpgrade_Init();
    libA4E3281A_gt_NerazimB15minUpgrade_Init();
    libA4E3281A_gt_NerazimCTimer_Init();
    libA4E3281A_gt_NerazimC8minUpgrade_Init();
    libA4E3281A_gt_NerazimC10minUpgrade_Init();
    libA4E3281A_gt_NerazimC15minUpgrade_Init();
    libA4E3281A_gt_NestA_Init();
    libA4E3281A_gt_NestB_Init();
    libA4E3281A_gt_NestDefilerAbility1_Init();
    libA4E3281A_gt_NestDefilerAbility2_Init();
    libA4E3281A_gt_NestLurkerAbility_Init();
    libA4E3281A_gt_NestQueenAbility1_Init();
    libA4E3281A_gt_NestQueenAbility2_Init();
    libA4E3281A_gt_Nest5minUpgrade_Init();
    libA4E3281A_gt_Nest10minUpgrade_Init();
    libA4E3281A_gt_Nest15minUpgrade_Init();
    libA4E3281A_gt_Nest20minUpgrade_Init();
    libA4E3281A_gt_NestATimer_Init();
    libA4E3281A_gt_NestA8minUpgrade_Init();
    libA4E3281A_gt_NestA10minUpgrade_Init();
    libA4E3281A_gt_NestA15minUpgrade_Init();
    libA4E3281A_gt_NestBTimer_Init();
    libA4E3281A_gt_NestB10minUpgrade_Init();
    libA4E3281A_gt_NestB15minUpgrade_Init();
    libA4E3281A_gt_TaldarimA_Init();
    libA4E3281A_gt_TaldarimB_Init();
    libA4E3281A_gt_TaldarimHTAbility1_Init();
    libA4E3281A_gt_TaldarimHTAbility2_Init();
    libA4E3281A_gt_TaldarimMothershipAbility_Init();
    libA4E3281A_gt_TaldarimMothershipCoreAbility_Init();
    libA4E3281A_gt_TaldarimSentryAbility_Init();
    libA4E3281A_gt_TaldarimStalkerAbility_Init();
    libA4E3281A_gt_TaldarimZealotAbility_Init();
    libA4E3281A_gt_Taldarim5minUpgrade_Init();
    libA4E3281A_gt_Taldarim10minUpgrade_Init();
    libA4E3281A_gt_Taldarim15minUpgrade_Init();
    libA4E3281A_gt_Taldarim20minUpgrade_Init();
    libA4E3281A_gt_TaldarimATimer_Init();
    libA4E3281A_gt_TaldarimA8minUpgrade_Init();
    libA4E3281A_gt_TaldarimA15minUpgrade_Init();
    libA4E3281A_gt_TaldarimBTimer_Init();
    libA4E3281A_gt_TaldarimB8minUpgrade_Init();
    libA4E3281A_gt_TaldarimB10minUpgrade_Init();
    libA4E3281A_gt_TaldarimB15minUpgrade_Init();
    libA4E3281A_gt_TaldarimB20minUpgrade_Init();
    libA4E3281A_gt_TaldarimB25minUpgrade_Init();
    libA4E3281A_gt_TaldarimB30minUpgrade_Init();
    libA4E3281A_gt_TaldarimB35minUpgrade_Init();
    libA4E3281A_gt_KelMorianA_Init();
    libA4E3281A_gt_KelMorianB_Init();
    libA4E3281A_gt_KelMorianAPCAbility_Init();
    libA4E3281A_gt_KelMorianRavenAbility_Init();
    libA4E3281A_gt_KelMorianNukeTrackAbility_Init();
    libA4E3281A_gt_KelMorian5minUpgrade_Init();
    libA4E3281A_gt_KelMorian10minUpgrade_Init();
    libA4E3281A_gt_KelMorian15minUpgrade_Init();
    libA4E3281A_gt_KelMorian20minUpgrade_Init();
    libA4E3281A_gt_KelMorianATimer_Init();
    libA4E3281A_gt_KelMorianA12minUpgrade_Init();
    libA4E3281A_gt_KelMorianA20minUpgrade_Init();
    libA4E3281A_gt_MechaA_Init();
    libA4E3281A_gt_MechaBroodLordAbility_Init();
    libA4E3281A_gt_MechaCorruptorAbility_Init();
    libA4E3281A_gt_MechaOverlordAbility_Init();
    libA4E3281A_gt_MechaViperAbility_Init();
    libA4E3281A_gt_Mecha5minUpgrade_Init();
    libA4E3281A_gt_Mecha10minUpgrade_Init();
    libA4E3281A_gt_Mecha15minUpgrade_Init();
    libA4E3281A_gt_Mecha20minUpgrade_Init();
    libA4E3281A_gt_MechaATimer_Init();
    libA4E3281A_gt_MechaA8minUpgrade_Init();
    libA4E3281A_gt_MechaA10minUpgrade_Init();
    libA4E3281A_gt_GoldenA_Init();
    libA4E3281A_gt_GoldenMothershipAbility_Init();
    libA4E3281A_gt_GoldenMothershipCoreAbility_Init();
    libA4E3281A_gt_GoldenWarpPrismAbility_Init();
    libA4E3281A_gt_Golden5minUpgrade_Init();
    libA4E3281A_gt_Golden10minUpgrade_Init();
    libA4E3281A_gt_Golden15minUpgrade_Init();
    libA4E3281A_gt_Golden20minUpgrade_Init();
    libA4E3281A_gt_GoldenATimer_Init();
    libA4E3281A_gt_GoldenA8minUpgrade_Init();
    libA4E3281A_gt_GoldenA15minUpgrade_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libA4E3281A_InitLib_completed = false;

void libA4E3281A_InitLib () {
    if (libA4E3281A_InitLib_completed) {
        return;
    }

    libA4E3281A_InitLib_completed = true;

    libA4E3281A_InitLibraries();
    libA4E3281A_InitVariables();
    libA4E3281A_InitTriggers();
}

